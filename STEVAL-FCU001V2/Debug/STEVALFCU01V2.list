
STEVALFCU01V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08011390  08011390  00021390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011aa8  08011aa8  00030154  2**0
                  CONTENTS
  4 .ARM          00000008  08011aa8  08011aa8  00021aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ab0  08011ab0  00030154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ab0  08011ab0  00021ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ab4  08011ab4  00021ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08011ab8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  20000154  08011c0c  00030154  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  20000f0c  08011c0c  00030f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 12 .debug_info   000511b5  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066c5  00000000  00000000  00081339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003010  00000000  00000000  00087a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002dc8  00000000  00000000  0008aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec5f  00000000  00000000  0008d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fddb  00000000  00000000  000ac437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5ed6  00000000  00000000  000dc212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001920e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d5e8  00000000  00000000  0019213c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011378 	.word	0x08011378

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	08011378 	.word	0x08011378

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <ahrs_fusion_ag>:
int acc_over = 0;
extern int16_t gTHR;
float ahrs_kp;

void ahrs_fusion_ag(AxesRaw_TypeDef_Float *acc, AxesRaw_TypeDef_Float *gyro, AHRS_State_TypeDef *ahrs)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09a      	sub	sp, #104	; 0x68
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  float ex, ey, ez;
  float q0q0, q0q1, q0q2, /*q0q3,*/ q1q1, /*q1q2,*/ q1q3, q2q2, q2q3, q3q3;
  float halfT;
 
  
  if(gTHR<MIN_THR)
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <ahrs_fusion_ag+0x20>)
 8000efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f02:	2bc7      	cmp	r3, #199	; 0xc7
 8000f04:	dc0a      	bgt.n	8000f1c <ahrs_fusion_ag+0x2c>
  {
    ahrs_kp = AHRS_KP_BIG;
 8000f06:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <ahrs_fusion_ag+0x24>)
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <ahrs_fusion_ag+0x28>)
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e009      	b.n	8000f22 <ahrs_fusion_ag+0x32>
 8000f0e:	bf00      	nop
 8000f10:	20000de2 	.word	0x20000de2
 8000f14:	20000598 	.word	0x20000598
 8000f18:	41200000 	.word	0x41200000
  }
  else
  {
    ahrs_kp = AHRS_KP_NORM;
 8000f1c:	4be1      	ldr	r3, [pc, #900]	; (80012a4 <ahrs_fusion_ag+0x3b4>)
 8000f1e:	4ae2      	ldr	r2, [pc, #904]	; (80012a8 <ahrs_fusion_ag+0x3b8>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  axf = acc->AXIS_X;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	667b      	str	r3, [r7, #100]	; 0x64
  ayf = acc->AXIS_Y;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	663b      	str	r3, [r7, #96]	; 0x60
  azf = acc->AXIS_Z;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	65fb      	str	r3, [r7, #92]	; 0x5c

  // mdps convert to rad/s
  gxf = ((float)gyro->AXIS_X) * ((float)COE_MDPS_TO_RADPS);  
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ed9f 7adc 	vldr	s14, [pc, #880]	; 80012ac <ahrs_fusion_ag+0x3bc>
 8000f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f42:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  gyf = ((float)gyro->AXIS_Y) * ((float)COE_MDPS_TO_RADPS);  
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f4c:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 80012ac <ahrs_fusion_ag+0x3bc>
 8000f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f54:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  gzf = ((float)gyro->AXIS_Z) * ((float)COE_MDPS_TO_RADPS); 
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f5e:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 80012ac <ahrs_fusion_ag+0x3bc>
 8000f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f66:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50


  // auxiliary variables to reduce number of repeated operations
  q0q0 = q0*q0;
 8000f6a:	4bd1      	ldr	r3, [pc, #836]	; (80012b0 <ahrs_fusion_ag+0x3c0>)
 8000f6c:	ed93 7a00 	vldr	s14, [r3]
 8000f70:	4bcf      	ldr	r3, [pc, #828]	; (80012b0 <ahrs_fusion_ag+0x3c0>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  q0q1 = q0*q1;
 8000f7e:	4bcc      	ldr	r3, [pc, #816]	; (80012b0 <ahrs_fusion_ag+0x3c0>)
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	4bcb      	ldr	r3, [pc, #812]	; (80012b4 <ahrs_fusion_ag+0x3c4>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  q0q2 = q0*q2;
 8000f92:	4bc7      	ldr	r3, [pc, #796]	; (80012b0 <ahrs_fusion_ag+0x3c0>)
 8000f94:	ed93 7a00 	vldr	s14, [r3]
 8000f98:	4bc7      	ldr	r3, [pc, #796]	; (80012b8 <ahrs_fusion_ag+0x3c8>)
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  //q0q3 = q0*q3;
  q1q1 = q1*q1;
 8000fa6:	4bc3      	ldr	r3, [pc, #780]	; (80012b4 <ahrs_fusion_ag+0x3c4>)
 8000fa8:	ed93 7a00 	vldr	s14, [r3]
 8000fac:	4bc1      	ldr	r3, [pc, #772]	; (80012b4 <ahrs_fusion_ag+0x3c4>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  //q1q2 = q1*q2;
  q1q3 = q1*q3;
 8000fba:	4bbe      	ldr	r3, [pc, #760]	; (80012b4 <ahrs_fusion_ag+0x3c4>)
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	4bbe      	ldr	r3, [pc, #760]	; (80012bc <ahrs_fusion_ag+0x3cc>)
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  q2q2 = q2*q2;
 8000fce:	4bba      	ldr	r3, [pc, #744]	; (80012b8 <ahrs_fusion_ag+0x3c8>)
 8000fd0:	ed93 7a00 	vldr	s14, [r3]
 8000fd4:	4bb8      	ldr	r3, [pc, #736]	; (80012b8 <ahrs_fusion_ag+0x3c8>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fde:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  q2q3 = q2*q3;
 8000fe2:	4bb5      	ldr	r3, [pc, #724]	; (80012b8 <ahrs_fusion_ag+0x3c8>)
 8000fe4:	ed93 7a00 	vldr	s14, [r3]
 8000fe8:	4bb4      	ldr	r3, [pc, #720]	; (80012bc <ahrs_fusion_ag+0x3cc>)
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  q3q3 = q3*q3;
 8000ff6:	4bb1      	ldr	r3, [pc, #708]	; (80012bc <ahrs_fusion_ag+0x3cc>)
 8000ff8:	ed93 7a00 	vldr	s14, [r3]
 8000ffc:	4baf      	ldr	r3, [pc, #700]	; (80012bc <ahrs_fusion_ag+0x3cc>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001006:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  // normalise the accelerometer measurement
  norm = invSqrt(axf*axf+ayf*ayf+azf*azf);
 800100a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800100e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001012:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001016:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800101a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800101e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001022:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	f000 f9e5 	bl	80013fc <invSqrt>
 8001032:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

  axf = axf * norm;
 8001036:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800103a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  ayf = ayf * norm;
 8001046:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800104a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  azf = azf * norm;
 8001056:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800105a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001062:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  // estimated direction of gravity and flux (v and w)
  vx = 2*(q1q3 - q0q2);
 8001066:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800106a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800106e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001072:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001076:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  vy = 2*(q0q1 + q2q3);
 800107a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800107e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001086:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800108a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  vz = q0q0 - q1q1 - q2q2 + q3q3;
 800108e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001092:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800109a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010aa:	edc7 7a08 	vstr	s15, [r7, #32]

  ex = (ayf*vz - azf*vy);
 80010ae:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80010b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ba:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80010be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ca:	edc7 7a07 	vstr	s15, [r7, #28]
  ey = (azf*vx - axf*vz);
 80010ce:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80010d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80010de:	edd7 7a08 	vldr	s15, [r7, #32]
 80010e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ea:	edc7 7a06 	vstr	s15, [r7, #24]
  ez = (axf*vy - ayf*vx);
 80010ee:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80010f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010fa:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80010fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110a:	edc7 7a05 	vstr	s15, [r7, #20]

  // integral error scaled integral gain
  exInt = exInt + ex*AHRS_KI*SENSOR_SAMPLING_TIME;
 800110e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001112:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80012c0 <ahrs_fusion_ag+0x3d0>
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80012c4 <ahrs_fusion_ag+0x3d4>
 800111e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001122:	4b69      	ldr	r3, [pc, #420]	; (80012c8 <ahrs_fusion_ag+0x3d8>)
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	4b66      	ldr	r3, [pc, #408]	; (80012c8 <ahrs_fusion_ag+0x3d8>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
  eyInt = eyInt + ey*AHRS_KI*SENSOR_SAMPLING_TIME;
 8001132:	edd7 7a06 	vldr	s15, [r7, #24]
 8001136:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80012c0 <ahrs_fusion_ag+0x3d0>
 800113a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80012c4 <ahrs_fusion_ag+0x3d4>
 8001142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001146:	4b61      	ldr	r3, [pc, #388]	; (80012cc <ahrs_fusion_ag+0x3dc>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <ahrs_fusion_ag+0x3dc>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
  ezInt = ezInt + ez*AHRS_KI*SENSOR_SAMPLING_TIME;
 8001156:	edd7 7a05 	vldr	s15, [r7, #20]
 800115a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80012c0 <ahrs_fusion_ag+0x3d0>
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80012c4 <ahrs_fusion_ag+0x3d4>
 8001166:	ee27 7a87 	vmul.f32	s14, s15, s14
 800116a:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <ahrs_fusion_ag+0x3e0>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	4b56      	ldr	r3, [pc, #344]	; (80012d0 <ahrs_fusion_ag+0x3e0>)
 8001176:	edc3 7a00 	vstr	s15, [r3]

  // adjusted gyroscope measurements
  gxf = gxf + ahrs_kp*ex + exInt;
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <ahrs_fusion_ag+0x3b4>)
 800117c:	ed93 7a00 	vldr	s14, [r3]
 8001180:	edd7 7a07 	vldr	s15, [r7, #28]
 8001184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001188:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800118c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001190:	4b4d      	ldr	r3, [pc, #308]	; (80012c8 <ahrs_fusion_ag+0x3d8>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  gyf = gyf + ahrs_kp*ey + eyInt;
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <ahrs_fusion_ag+0x3b4>)
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80011b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <ahrs_fusion_ag+0x3dc>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  gzf = gzf + ahrs_kp*ez + ezInt;
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <ahrs_fusion_ag+0x3b4>)
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <ahrs_fusion_ag+0x3e0>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

  // integrate quaternion rate and normalise
  halfT = 0.5f*SENSOR_SAMPLING_TIME;
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <ahrs_fusion_ag+0x3e4>)
 80011e8:	613b      	str	r3, [r7, #16]
  q0 = q0 + (-q1*gxf - q2*gyf - q3*gzf)*halfT;
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <ahrs_fusion_ag+0x3c4>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eeb1 7a67 	vneg.f32	s14, s15
 80011f4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <ahrs_fusion_ag+0x3c8>)
 80011fe:	edd3 6a00 	vldr	s13, [r3]
 8001202:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800120a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <ahrs_fusion_ag+0x3cc>)
 8001210:	edd3 6a00 	vldr	s13, [r3]
 8001214:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800121c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001220:	edd7 7a04 	vldr	s15, [r7, #16]
 8001224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <ahrs_fusion_ag+0x3c0>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <ahrs_fusion_ag+0x3c0>)
 8001234:	edc3 7a00 	vstr	s15, [r3]
  q1 = q1 + (q0*gxf + q2*gzf - q3*gyf)*halfT;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <ahrs_fusion_ag+0x3c0>)
 800123a:	ed93 7a00 	vldr	s14, [r3]
 800123e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <ahrs_fusion_ag+0x3c8>)
 8001248:	edd3 6a00 	vldr	s13, [r3]
 800124c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001254:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <ahrs_fusion_ag+0x3cc>)
 800125a:	edd3 6a00 	vldr	s13, [r3]
 800125e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee37 7a67 	vsub.f32	s14, s14, s15
 800126a:	edd7 7a04 	vldr	s15, [r7, #16]
 800126e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <ahrs_fusion_ag+0x3c4>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <ahrs_fusion_ag+0x3c4>)
 800127e:	edc3 7a00 	vstr	s15, [r3]
  q2 = q2 + (q0*gyf - q1*gzf + q3*gxf)*halfT;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <ahrs_fusion_ag+0x3c0>)
 8001284:	ed93 7a00 	vldr	s14, [r3]
 8001288:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800128c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <ahrs_fusion_ag+0x3c4>)
 8001292:	edd3 6a00 	vldr	s13, [r3]
 8001296:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800129a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a2:	e019      	b.n	80012d8 <ahrs_fusion_ag+0x3e8>
 80012a4:	20000598 	.word	0x20000598
 80012a8:	3ecccccd 	.word	0x3ecccccd
 80012ac:	379268a9 	.word	0x379268a9
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000170 	.word	0x20000170
 80012b8:	20000174 	.word	0x20000174
 80012bc:	20000178 	.word	0x20000178
 80012c0:	3dcccccd 	.word	0x3dcccccd
 80012c4:	3bcccccd 	.word	0x3bcccccd
 80012c8:	2000017c 	.word	0x2000017c
 80012cc:	20000180 	.word	0x20000180
 80012d0:	20000184 	.word	0x20000184
 80012d4:	3b4ccccd 	.word	0x3b4ccccd
 80012d8:	4b44      	ldr	r3, [pc, #272]	; (80013ec <ahrs_fusion_ag+0x4fc>)
 80012da:	edd3 6a00 	vldr	s13, [r3]
 80012de:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <ahrs_fusion_ag+0x500>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fc:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <ahrs_fusion_ag+0x500>)
 80012fe:	edc3 7a00 	vstr	s15, [r3]
  q3 = q3 + (q0*gzf + q1*gyf - q2*gxf)*halfT;
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <ahrs_fusion_ag+0x504>)
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800130c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001310:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <ahrs_fusion_ag+0x508>)
 8001312:	edd3 6a00 	vldr	s13, [r3]
 8001316:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800131a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <ahrs_fusion_ag+0x500>)
 8001324:	edd3 6a00 	vldr	s13, [r3]
 8001328:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001334:	edd7 7a04 	vldr	s15, [r7, #16]
 8001338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <ahrs_fusion_ag+0x4fc>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <ahrs_fusion_ag+0x4fc>)
 8001348:	edc3 7a00 	vstr	s15, [r3]

  // normalise quaternion
  norm = invSqrt(q0q0 + q1q1 + q2q2 + q3q3); 
 800134c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001350:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001358:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800135c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001360:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	f000 f846 	bl	80013fc <invSqrt>
 8001370:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  q0 *= norm;
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <ahrs_fusion_ag+0x504>)
 8001376:	ed93 7a00 	vldr	s14, [r3]
 800137a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800137e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <ahrs_fusion_ag+0x504>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
  q1 *= norm;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <ahrs_fusion_ag+0x508>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <ahrs_fusion_ag+0x508>)
 8001398:	edc3 7a00 	vstr	s15, [r3]
  q2 *= norm;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <ahrs_fusion_ag+0x500>)
 800139e:	ed93 7a00 	vldr	s14, [r3]
 80013a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <ahrs_fusion_ag+0x500>)
 80013ac:	edc3 7a00 	vstr	s15, [r3]
  q3 *= norm;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <ahrs_fusion_ag+0x4fc>)
 80013b2:	ed93 7a00 	vldr	s14, [r3]
 80013b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <ahrs_fusion_ag+0x4fc>)
 80013c0:	edc3 7a00 	vstr	s15, [r3]

  ahrs->q.q0 = q0;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <ahrs_fusion_ag+0x504>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	601a      	str	r2, [r3, #0]
  ahrs->q.q1 = q1;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <ahrs_fusion_ag+0x508>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	605a      	str	r2, [r3, #4]
  ahrs->q.q2 = q2;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <ahrs_fusion_ag+0x500>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
  ahrs->q.q3 = q3;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <ahrs_fusion_ag+0x4fc>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60da      	str	r2, [r3, #12]

}
 80013e4:	bf00      	nop
 80013e6:	3768      	adds	r7, #104	; 0x68
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000178 	.word	0x20000178
 80013f0:	20000174 	.word	0x20000174
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000170 	.word	0x20000170

080013fc <invSqrt>:
//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) 
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001406:	edd7 7a01 	vldr	s15, [r7, #4]
 800140a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	105a      	asrs	r2, r3, #1
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <invSqrt+0x74>)
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001434:	ed97 7a04 	vldr	s14, [r7, #16]
 8001438:	edd7 7a05 	vldr	s15, [r7, #20]
 800143c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001440:	edd7 7a04 	vldr	s15, [r7, #16]
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800144c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001450:	edd7 7a04 	vldr	s15, [r7, #16]
 8001454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001458:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	5f3759df 	.word	0x5f3759df

08001474 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <BSP_SPI2_Init+0x54>)
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <BSP_SPI2_Init+0x58>)
 8001482:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <BSP_SPI2_Init+0x5c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	4911      	ldr	r1, [pc, #68]	; (80014d0 <BSP_SPI2_Init+0x5c>)
 800148c:	600a      	str	r2, [r1, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d114      	bne.n	80014bc <BSP_SPI2_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <BSP_SPI2_Init+0x54>)
 8001494:	f00a fb8a 	bl	800bbac <HAL_SPI_GetState>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10e      	bne.n	80014bc <BSP_SPI2_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI2_MspInit(&hspi2);
 800149e:	480a      	ldr	r0, [pc, #40]	; (80014c8 <BSP_SPI2_Init+0x54>)
 80014a0:	f000 f8bc 	bl	800161c <SPI2_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d108      	bne.n	80014bc <BSP_SPI2_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI2_Init(&hspi2) != HAL_OK)
 80014aa:	4807      	ldr	r0, [pc, #28]	; (80014c8 <BSP_SPI2_Init+0x54>)
 80014ac:	f000 f87a 	bl	80015a4 <MX_SPI2_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <BSP_SPI2_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80014b6:	f06f 0307 	mvn.w	r3, #7
 80014ba:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200005e8 	.word	0x200005e8
 80014cc:	40003800 	.word	0x40003800
 80014d0:	20000188 	.word	0x20000188

080014d4 <BSP_SPI2_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80014da:	f06f 0307 	mvn.w	r3, #7
 80014de:	607b      	str	r3, [r7, #4]
  if (SPI2InitCounter > 0)
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <BSP_SPI2_DeInit+0x48>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <BSP_SPI2_DeInit+0x3c>
  {
    if (--SPI2InitCounter == 0)
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <BSP_SPI2_DeInit+0x48>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <BSP_SPI2_DeInit+0x48>)
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <BSP_SPI2_DeInit+0x48>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <BSP_SPI2_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
	  SPI2_MspDeInit(&hspi2);
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <BSP_SPI2_DeInit+0x4c>)
 80014fc:	f000 f8f2 	bl	80016e4 <SPI2_MspDeInit>
#endif
	  /* DeInit the SPI*/
	  if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8001500:	4807      	ldr	r0, [pc, #28]	; (8001520 <BSP_SPI2_DeInit+0x4c>)
 8001502:	f009 fe32 	bl	800b16a <HAL_SPI_DeInit>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <BSP_SPI2_DeInit+0x3c>
	  {
		ret = BSP_ERROR_NONE;
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
	  }
	}
  }
  return ret;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000188 	.word	0x20000188
 8001520:	200005e8 	.word	0x200005e8

08001524 <BSP_SPI2_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t Length)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4806      	ldr	r0, [pc, #24]	; (8001558 <BSP_SPI2_Send+0x34>)
 800153e:	f009 fe3c 	bl	800b1ba <HAL_SPI_Transmit>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <BSP_SPI2_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001548:	f06f 0305 	mvn.w	r3, #5
 800154c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200005e8 	.word	0x200005e8

0800155c <BSP_SPI2_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv(uint8_t *pData, uint16_t Length)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 800156c:	887a      	ldrh	r2, [r7, #2]
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4806      	ldr	r0, [pc, #24]	; (8001590 <BSP_SPI2_Recv+0x34>)
 8001576:	f009 ff5c 	bl	800b432 <HAL_SPI_Receive>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <BSP_SPI2_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001580:	f06f 0305 	mvn.w	r3, #5
 8001584:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200005e8 	.word	0x200005e8

08001594 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001598:	f007 feea 	bl	8009370 <HAL_GetTick>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <MX_SPI2_Init+0x74>)
 80015b4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015bc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015dc:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	220a      	movs	r2, #10
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f009 fd2b 	bl	800b058 <HAL_SPI_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_SPI2_Init+0x68>
  {
    ret = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40003800 	.word	0x40003800

0800161c <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <SPI2_MspInit+0xc0>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a2b      	ldr	r2, [pc, #172]	; (80016dc <SPI2_MspInit+0xc0>)
 800162e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <SPI2_MspInit+0xc0>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <SPI2_MspInit+0xc0>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a24      	ldr	r2, [pc, #144]	; (80016dc <SPI2_MspInit+0xc0>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <SPI2_MspInit+0xc0>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 800166e:	2305      	movs	r3, #5
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4819      	ldr	r0, [pc, #100]	; (80016e0 <SPI2_MspInit+0xc4>)
 800167a:	f008 fc6b 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 800167e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8001690:	2305      	movs	r3, #5
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <SPI2_MspInit+0xc4>)
 800169c:	f008 fc5a 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 80016a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 80016b2:	2305      	movs	r3, #5
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <SPI2_MspInit+0xc4>)
 80016be:	f008 fc49 	bl	8009f54 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2024      	movs	r0, #36	; 0x24
 80016c8:	f008 fb6d 	bl	8009da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80016cc:	2024      	movs	r0, #36	; 0x24
 80016ce:	f008 fb86 	bl	8009dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020400 	.word	0x40020400

080016e4 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <SPI2_MspDeInit+0x40>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <SPI2_MspDeInit+0x40>)
 80016f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 80016f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <SPI2_MspDeInit+0x44>)
 80016fe:	f008 fdad 	bl	800a25c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 8001702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001706:	4808      	ldr	r0, [pc, #32]	; (8001728 <SPI2_MspDeInit+0x44>)
 8001708:	f008 fda8 	bl	800a25c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 800170c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <SPI2_MspDeInit+0x44>)
 8001712:	f008 fda3 	bl	800a25c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8001716:	2024      	movs	r0, #36	; 0x24
 8001718:	f008 fb6f 	bl	8009dfa <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40020400 	.word	0x40020400

0800172c <myprintf>:

extern UART_HandleTypeDef huart1;

#ifdef DEBUG
int myprintf(const char *format, ...)
{
 800172c:	b40f      	push	{r0, r1, r2, r3}
 800172e:	b580      	push	{r7, lr}
 8001730:	b0c2      	sub	sp, #264	; 0x108
 8001732:	af00      	add	r7, sp, #0
    va_list arg;
    va_start(arg, format);
 8001734:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001738:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    char temp[255];
    int len;
    // Limit the length of string to 254
    len = vsnprintf(temp, 254, format, arg);
 800173c:	4638      	mov	r0, r7
 800173e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001742:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001746:	21fe      	movs	r1, #254	; 0xfe
 8001748:	f00e fc84 	bl	8010054 <vsniprintf>
 800174c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    usart_puts(temp, len);
 8001750:	463b      	mov	r3, r7
 8001752:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f80a 	bl	8001770 <usart_puts>
    return len;
 800175c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8001760:	4618      	mov	r0, r3
 8001762:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001766:	46bd      	mov	sp, r7
 8001768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800176c:	b004      	add	sp, #16
 800176e:	4770      	bx	lr

08001770 <usart_puts>:
    
int usart_puts(const char *str, int len) 
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    //putc(*str ++);
    //while (huart1.Lock == HAL_LOCKED);
    HAL_UART_Transmit(&huart1, (uint8_t *)str, len, 1000);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b29a      	uxth	r2, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <usart_puts+0x24>)
 8001786:	f00b fe82 	bl	800d48e <HAL_UART_Transmit>
    return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200009f0 	.word	0x200009f0

08001798 <PIDControlInit>:
extern int16_t gTHR;
int16_t motor_thr;
float dt_recip;

void PIDControlInit(P_PI_PIDControlTypeDef *pid)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  pid->ts = PID_SAMPLING_TIME;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <PIDControlInit+0xd8>)
 80017a4:	601a      	str	r2, [r3, #0]

  pid->x_kp1 = PITCH_PID_KP1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a32      	ldr	r2, [pc, #200]	; (8001874 <PIDControlInit+0xdc>)
 80017aa:	605a      	str	r2, [r3, #4]
  pid->x_ki1 = PITCH_PID_KI1;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  pid->x_i1_limit = PITCH_PID_I1_LIMIT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
  pid->x_kp2 = PITCH_PID_KP2;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a2e      	ldr	r2, [pc, #184]	; (8001878 <PIDControlInit+0xe0>)
 80017c0:	60da      	str	r2, [r3, #12]
  pid->x_ki2 = PITCH_PID_KI2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <PIDControlInit+0xe0>)
 80017c6:	611a      	str	r2, [r3, #16]
  pid->x_kd2 = PITCH_PID_KD2;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a2c      	ldr	r2, [pc, #176]	; (800187c <PIDControlInit+0xe4>)
 80017cc:	615a      	str	r2, [r3, #20]
  pid->x_i2_limit = PITCH_PID_I2_LIMIT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a2b      	ldr	r2, [pc, #172]	; (8001880 <PIDControlInit+0xe8>)
 80017d2:	64da      	str	r2, [r3, #76]	; 0x4c
  pid->x_s1 = 0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	659a      	str	r2, [r3, #88]	; 0x58
  pid->x_s2 = 0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	65da      	str	r2, [r3, #92]	; 0x5c

  pid->y_kp1 = ROLL_PID_KP1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <PIDControlInit+0xdc>)
 80017e8:	619a      	str	r2, [r3, #24]
  pid->y_ki1 = ROLL_PID_KI1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  pid->y_i1_limit = ROLL_PID_I1_LIMIT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44
  pid->y_kp2 = ROLL_PID_KP2;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <PIDControlInit+0xe0>)
 80017fe:	621a      	str	r2, [r3, #32]
  pid->y_ki2 = ROLL_PID_KI2;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <PIDControlInit+0xe0>)
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  pid->y_kd2 = ROLL_PID_KD2;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1c      	ldr	r2, [pc, #112]	; (800187c <PIDControlInit+0xe4>)
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
  pid->y_i2_limit = ROLL_PID_I2_LIMIT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <PIDControlInit+0xe8>)
 8001810:	651a      	str	r2, [r3, #80]	; 0x50
  pid->y_s1 = 0;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	661a      	str	r2, [r3, #96]	; 0x60
  pid->y_s2 = 0;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	665a      	str	r2, [r3, #100]	; 0x64

  pid->z_kp1 = YAW_PID_KP1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->z_ki1 = YAW_PID_KI1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
  pid->z_i1_limit = YAW_PID_I1_LIMIT;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001838:	649a      	str	r2, [r3, #72]	; 0x48
  pid->z_kp2 = YAW_PID_KP2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <PIDControlInit+0xec>)
 800183e:	635a      	str	r2, [r3, #52]	; 0x34
  pid->z_ki2 = YAW_PID_KI2;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <PIDControlInit+0xdc>)
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
  pid->z_kd2 = YAW_PID_KD2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <PIDControlInit+0xdc>)
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c
  pid->z_i2_limit = YAW_PID_I2_LIMIT;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001852:	655a      	str	r2, [r3, #84]	; 0x54
  pid->z_s1 = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	669a      	str	r2, [r3, #104]	; 0x68
  pid->z_s2 = 0;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	3aa3d70a 	.word	0x3aa3d70a
 8001874:	40400000 	.word	0x40400000
 8001878:	42a00000 	.word	0x42a00000
 800187c:	41200000 	.word	0x41200000
 8001880:	41a00000 	.word	0x41a00000
 8001884:	44610000 	.word	0x44610000

08001888 <FlightControlPID_OuterLoop>:


}

void FlightControlPID_OuterLoop(EulerAngleTypeDef *euler_rc, EulerAngleTypeDef *euler_ahrs, AHRS_State_TypeDef *ahrs, P_PI_PIDControlTypeDef *pid)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  float error;

  if(gTHR<MIN_THR)
 8001896:	4b86      	ldr	r3, [pc, #536]	; (8001ab0 <FlightControlPID_OuterLoop+0x228>)
 8001898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189c:	2bc7      	cmp	r3, #199	; 0xc7
 800189e:	dc0b      	bgt.n	80018b8 <FlightControlPID_OuterLoop+0x30>
  {
    pid_x_integ1 = 0;
 80018a0:	4b84      	ldr	r3, [pc, #528]	; (8001ab4 <FlightControlPID_OuterLoop+0x22c>)
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
    pid_y_integ1 = 0;
 80018a8:	4b83      	ldr	r3, [pc, #524]	; (8001ab8 <FlightControlPID_OuterLoop+0x230>)
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
    pid_z_integ1 = 0;
 80018b0:	4b82      	ldr	r3, [pc, #520]	; (8001abc <FlightControlPID_OuterLoop+0x234>)
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
  }

  //x-axis pid
  error = euler_rc->thx - euler_ahrs->thx;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c8:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ1 += error*pid->ts;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	ed93 7a00 	vldr	s14, [r3]
 80018d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <FlightControlPID_OuterLoop+0x22c>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <FlightControlPID_OuterLoop+0x22c>)
 80018e6:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ1 > pid->x_i1_limit)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80018f0:	4b70      	ldr	r3, [pc, #448]	; (8001ab4 <FlightControlPID_OuterLoop+0x22c>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	d504      	bpl.n	800190a <FlightControlPID_OuterLoop+0x82>
    pid_x_integ1 = pid->x_i1_limit;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a6b      	ldr	r2, [pc, #428]	; (8001ab4 <FlightControlPID_OuterLoop+0x22c>)
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e014      	b.n	8001934 <FlightControlPID_OuterLoop+0xac>
  else if(pid_x_integ1 < -pid->x_i1_limit)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001910:	eeb1 7a67 	vneg.f32	s14, s15
 8001914:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <FlightControlPID_OuterLoop+0x22c>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	dd07      	ble.n	8001934 <FlightControlPID_OuterLoop+0xac>
    pid_x_integ1 = -pid->x_i1_limit;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800192a:	eef1 7a67 	vneg.f32	s15, s15
 800192e:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <FlightControlPID_OuterLoop+0x22c>)
 8001930:	edc3 7a00 	vstr	s15, [r3]
  pid->x_s1 =  pid->x_kp1*error + pid->x_ki1*pid_x_integ1;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	ed93 7a01 	vldr	s14, [r3, #4]
 800193a:	edd7 7a05 	vldr	s15, [r7, #20]
 800193e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	edd3 6a02 	vldr	s13, [r3, #8]
 8001948:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <FlightControlPID_OuterLoop+0x22c>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  //y-axis pid
  error = euler_rc->thy - euler_ahrs->thy;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	edd3 7a01 	vldr	s15, [r3, #4]
 8001968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196c:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ1 += error*pid->ts;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	ed93 7a00 	vldr	s14, [r3]
 8001976:	edd7 7a05 	vldr	s15, [r7, #20]
 800197a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197e:	4b4e      	ldr	r3, [pc, #312]	; (8001ab8 <FlightControlPID_OuterLoop+0x230>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <FlightControlPID_OuterLoop+0x230>)
 800198a:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ1 > pid->y_i1_limit)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001994:	4b48      	ldr	r3, [pc, #288]	; (8001ab8 <FlightControlPID_OuterLoop+0x230>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d504      	bpl.n	80019ae <FlightControlPID_OuterLoop+0x126>
    pid_y_integ1 = pid->y_i1_limit;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	4a43      	ldr	r2, [pc, #268]	; (8001ab8 <FlightControlPID_OuterLoop+0x230>)
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e014      	b.n	80019d8 <FlightControlPID_OuterLoop+0x150>
  else if(pid_y_integ1 < -pid->y_i1_limit)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80019b4:	eeb1 7a67 	vneg.f32	s14, s15
 80019b8:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <FlightControlPID_OuterLoop+0x230>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dd07      	ble.n	80019d8 <FlightControlPID_OuterLoop+0x150>
    pid_y_integ1 = -pid->y_i1_limit;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80019ce:	eef1 7a67 	vneg.f32	s15, s15
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <FlightControlPID_OuterLoop+0x230>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
  pid->y_s1 =  pid->y_kp1*error + pid->y_ki1*pid_y_integ1;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	ed93 7a06 	vldr	s14, [r3, #24]
 80019de:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	edd3 6a07 	vldr	s13, [r3, #28]
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <FlightControlPID_OuterLoop+0x230>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  //z-axis pid
  error = euler_rc->thz - euler_ahrs->thz;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a10:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ1 += error*pid->ts;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <FlightControlPID_OuterLoop+0x234>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <FlightControlPID_OuterLoop+0x234>)
 8001a2e:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ1 > pid->z_i1_limit)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <FlightControlPID_OuterLoop+0x234>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d504      	bpl.n	8001a52 <FlightControlPID_OuterLoop+0x1ca>
    pid_z_integ1 = pid->z_i1_limit;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <FlightControlPID_OuterLoop+0x234>)
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e014      	b.n	8001a7c <FlightControlPID_OuterLoop+0x1f4>
  else if(pid_z_integ1 < -pid->z_i1_limit)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001a58:	eeb1 7a67 	vneg.f32	s14, s15
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <FlightControlPID_OuterLoop+0x234>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	dd07      	ble.n	8001a7c <FlightControlPID_OuterLoop+0x1f4>
    pid_z_integ1 = -pid->z_i1_limit;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001a72:	eef1 7a67 	vneg.f32	s15, s15
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <FlightControlPID_OuterLoop+0x234>)
 8001a78:	edc3 7a00 	vstr	s15, [r3]
  pid->z_s1 =  pid->z_kp1*error + pid->z_ki1*pid_z_integ1;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <FlightControlPID_OuterLoop+0x234>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
}
 8001aa4:	bf00      	nop
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	20000de2 	.word	0x20000de2
 8001ab4:	2000018c 	.word	0x2000018c
 8001ab8:	20000190 	.word	0x20000190
 8001abc:	20000194 	.word	0x20000194

08001ac0 <FlightControlPID_innerLoop>:

void FlightControlPID_innerLoop(EulerAngleTypeDef *euler_rc, Gyro_Rad *gyro_rad, AHRS_State_TypeDef *ahrs, P_PI_PIDControlTypeDef *pid, MotorControlTypeDef *motor_pwm)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  float error, deriv;

  if(gTHR<MIN_THR)
 8001ace:	4bbd      	ldr	r3, [pc, #756]	; (8001dc4 <FlightControlPID_innerLoop+0x304>)
 8001ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad4:	2bc7      	cmp	r3, #199	; 0xc7
 8001ad6:	dc0b      	bgt.n	8001af0 <FlightControlPID_innerLoop+0x30>
  {
    pid_x_integ2 = 0;
 8001ad8:	4bbb      	ldr	r3, [pc, #748]	; (8001dc8 <FlightControlPID_innerLoop+0x308>)
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
    pid_y_integ2 = 0;
 8001ae0:	4bba      	ldr	r3, [pc, #744]	; (8001dcc <FlightControlPID_innerLoop+0x30c>)
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    pid_z_integ2 = 0;
 8001ae8:	4bb9      	ldr	r3, [pc, #740]	; (8001dd0 <FlightControlPID_innerLoop+0x310>)
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
  }
  
  dt_recip = 1/pid->ts;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	ed93 7a00 	vldr	s14, [r3]
 8001af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001afe:	4bb5      	ldr	r3, [pc, #724]	; (8001dd4 <FlightControlPID_innerLoop+0x314>)
 8001b00:	edc3 7a00 	vstr	s15, [r3]

  //X Axis
  error = pid->x_s1 - gyro_rad->gx;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b14:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ2 += error*pid->ts;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b26:	4ba8      	ldr	r3, [pc, #672]	; (8001dc8 <FlightControlPID_innerLoop+0x308>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b30:	4ba5      	ldr	r3, [pc, #660]	; (8001dc8 <FlightControlPID_innerLoop+0x308>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ2 > pid->x_i2_limit)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001b3c:	4ba2      	ldr	r3, [pc, #648]	; (8001dc8 <FlightControlPID_innerLoop+0x308>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d504      	bpl.n	8001b56 <FlightControlPID_innerLoop+0x96>
    pid_x_integ2 = pid->x_i2_limit;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	4a9d      	ldr	r2, [pc, #628]	; (8001dc8 <FlightControlPID_innerLoop+0x308>)
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e014      	b.n	8001b80 <FlightControlPID_innerLoop+0xc0>
  else if(pid_x_integ2 < -pid->x_i2_limit)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b5c:	eeb1 7a67 	vneg.f32	s14, s15
 8001b60:	4b99      	ldr	r3, [pc, #612]	; (8001dc8 <FlightControlPID_innerLoop+0x308>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd07      	ble.n	8001b80 <FlightControlPID_innerLoop+0xc0>
    pid_x_integ2 = -pid->x_i2_limit;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b76:	eef1 7a67 	vneg.f32	s15, s15
 8001b7a:	4b93      	ldr	r3, [pc, #588]	; (8001dc8 <FlightControlPID_innerLoop+0x308>)
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_x_pre_error2)*dt_recip;
 8001b80:	4b95      	ldr	r3, [pc, #596]	; (8001dd8 <FlightControlPID_innerLoop+0x318>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b8e:	4b91      	ldr	r3, [pc, #580]	; (8001dd4 <FlightControlPID_innerLoop+0x314>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_error2 = error;
 8001b9c:	4a8e      	ldr	r2, [pc, #568]	; (8001dd8 <FlightControlPID_innerLoop+0x318>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	6013      	str	r3, [r2, #0]
  deriv = pid_x_pre_deriv + (deriv - pid_x_pre_deriv)*D_FILTER_COFF;
 8001ba2:	4b8e      	ldr	r3, [pc, #568]	; (8001ddc <FlightControlPID_innerLoop+0x31c>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb0:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001de0 <FlightControlPID_innerLoop+0x320>
 8001bb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bb8:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <FlightControlPID_innerLoop+0x31c>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc2:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_deriv = deriv;
 8001bc6:	4a85      	ldr	r2, [pc, #532]	; (8001ddc <FlightControlPID_innerLoop+0x31c>)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	6013      	str	r3, [r2, #0]
  pid->x_s2 = pid->x_kp2*error + pid->x_ki2*pid_x_integ2 + pid->x_kd2*deriv;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	edd3 6a04 	vldr	s13, [r3, #16]
 8001be0:	4b79      	ldr	r3, [pc, #484]	; (8001dc8 <FlightControlPID_innerLoop+0x308>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	edd3 6a05 	vldr	s13, [r3, #20]
 8001bf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
  
  if(pid->x_s2 > MAX_ADJ_AMOUNT)  pid->x_s2 = MAX_ADJ_AMOUNT;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001c0c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001de4 <FlightControlPID_innerLoop+0x324>
 8001c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	dd02      	ble.n	8001c20 <FlightControlPID_innerLoop+0x160>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4a72      	ldr	r2, [pc, #456]	; (8001de8 <FlightControlPID_innerLoop+0x328>)
 8001c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  if(pid->x_s2 < -MAX_ADJ_AMOUNT)  pid->x_s2 = -MAX_ADJ_AMOUNT;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001c26:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001dec <FlightControlPID_innerLoop+0x32c>
 8001c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	d502      	bpl.n	8001c3a <FlightControlPID_innerLoop+0x17a>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4a6e      	ldr	r2, [pc, #440]	; (8001df0 <FlightControlPID_innerLoop+0x330>)
 8001c38:	65da      	str	r2, [r3, #92]	; 0x5c

  //Y Axis
  error = pid->y_s1 - gyro_rad->gy;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4a:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ2 += error*pid->ts;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	ed93 7a00 	vldr	s14, [r3]
 8001c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <FlightControlPID_innerLoop+0x30c>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c66:	4b59      	ldr	r3, [pc, #356]	; (8001dcc <FlightControlPID_innerLoop+0x30c>)
 8001c68:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ2 > pid->y_i2_limit)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <FlightControlPID_innerLoop+0x30c>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	d504      	bpl.n	8001c8c <FlightControlPID_innerLoop+0x1cc>
    pid_y_integ2 = pid->y_i2_limit;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c86:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <FlightControlPID_innerLoop+0x30c>)
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e014      	b.n	8001cb6 <FlightControlPID_innerLoop+0x1f6>
  else if(pid_y_integ2 < -pid->y_i2_limit)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001c92:	eeb1 7a67 	vneg.f32	s14, s15
 8001c96:	4b4d      	ldr	r3, [pc, #308]	; (8001dcc <FlightControlPID_innerLoop+0x30c>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	dd07      	ble.n	8001cb6 <FlightControlPID_innerLoop+0x1f6>
    pid_y_integ2 = -pid->y_i2_limit;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001cac:	eef1 7a67 	vneg.f32	s15, s15
 8001cb0:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <FlightControlPID_innerLoop+0x30c>)
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_y_pre_error2)*dt_recip;
 8001cb6:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <FlightControlPID_innerLoop+0x334>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cc4:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <FlightControlPID_innerLoop+0x314>)
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cce:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_error2 = error;
 8001cd2:	4a48      	ldr	r2, [pc, #288]	; (8001df4 <FlightControlPID_innerLoop+0x334>)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	6013      	str	r3, [r2, #0]
  deriv = pid_y_pre_deriv + (deriv - pid_y_pre_deriv)*D_FILTER_COFF;
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <FlightControlPID_innerLoop+0x338>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001de0 <FlightControlPID_innerLoop+0x320>
 8001cea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cee:	4b42      	ldr	r3, [pc, #264]	; (8001df8 <FlightControlPID_innerLoop+0x338>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_deriv = deriv;
 8001cfc:	4a3e      	ldr	r2, [pc, #248]	; (8001df8 <FlightControlPID_innerLoop+0x338>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6013      	str	r3, [r2, #0]
  pid->y_s2 = pid->y_kp2*error + pid->y_ki2*pid_y_integ2 + pid->y_kd2*deriv;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <FlightControlPID_innerLoop+0x30c>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001d2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  if(pid->y_s2 > MAX_ADJ_AMOUNT)  pid->y_s2 = MAX_ADJ_AMOUNT;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001d42:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001de4 <FlightControlPID_innerLoop+0x324>
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	dd02      	ble.n	8001d56 <FlightControlPID_innerLoop+0x296>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <FlightControlPID_innerLoop+0x328>)
 8001d54:	665a      	str	r2, [r3, #100]	; 0x64
  if(pid->y_s2 < -MAX_ADJ_AMOUNT)  pid->y_s2 = -MAX_ADJ_AMOUNT;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001d5c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001dec <FlightControlPID_innerLoop+0x32c>
 8001d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	d502      	bpl.n	8001d70 <FlightControlPID_innerLoop+0x2b0>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <FlightControlPID_innerLoop+0x330>)
 8001d6e:	665a      	str	r2, [r3, #100]	; 0x64

  //Z Axis
  error = pid->z_s1 - gyro_rad->gz;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ2 += error*pid->ts;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	ed93 7a00 	vldr	s14, [r3]
 8001d8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <FlightControlPID_innerLoop+0x310>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <FlightControlPID_innerLoop+0x310>)
 8001d9e:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ2 > pid->z_i2_limit)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <FlightControlPID_innerLoop+0x310>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	d521      	bpl.n	8001dfc <FlightControlPID_innerLoop+0x33c>
    pid_z_integ2 = pid->z_i2_limit;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <FlightControlPID_innerLoop+0x310>)
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e031      	b.n	8001e26 <FlightControlPID_innerLoop+0x366>
 8001dc2:	bf00      	nop
 8001dc4:	20000de2 	.word	0x20000de2
 8001dc8:	20000198 	.word	0x20000198
 8001dcc:	2000019c 	.word	0x2000019c
 8001dd0:	200001a0 	.word	0x200001a0
 8001dd4:	20000644 	.word	0x20000644
 8001dd8:	200001a4 	.word	0x200001a4
 8001ddc:	200001b0 	.word	0x200001b0
 8001de0:	3ccccccd 	.word	0x3ccccccd
 8001de4:	44480000 	.word	0x44480000
 8001de8:	44480000 	.word	0x44480000
 8001dec:	c4480000 	.word	0xc4480000
 8001df0:	c4480000 	.word	0xc4480000
 8001df4:	200001a8 	.word	0x200001a8
 8001df8:	200001b4 	.word	0x200001b4
  else if(pid_z_integ2 < -pid->z_i2_limit)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001e02:	eeb1 7a67 	vneg.f32	s14, s15
 8001e06:	4b74      	ldr	r3, [pc, #464]	; (8001fd8 <FlightControlPID_innerLoop+0x518>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	dd07      	ble.n	8001e26 <FlightControlPID_innerLoop+0x366>
    pid_z_integ2 = -pid->z_i2_limit;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001e1c:	eef1 7a67 	vneg.f32	s15, s15
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <FlightControlPID_innerLoop+0x518>)
 8001e22:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_z_pre_error2)*dt_recip;
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <FlightControlPID_innerLoop+0x51c>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e34:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <FlightControlPID_innerLoop+0x520>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3e:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_z_pre_error2 = error;
 8001e42:	4a66      	ldr	r2, [pc, #408]	; (8001fdc <FlightControlPID_innerLoop+0x51c>)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	6013      	str	r3, [r2, #0]
  pid->z_s2 = pid->z_kp2*error + pid->z_ki2*pid_z_integ2 + pid->z_kd2*deriv;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001e4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001e5c:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <FlightControlPID_innerLoop+0x518>)
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001e70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  if(pid->z_s2 > MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = MAX_ADJ_AMOUNT_YAW;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001e88:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001fe4 <FlightControlPID_innerLoop+0x524>
 8001e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	dd02      	ble.n	8001e9c <FlightControlPID_innerLoop+0x3dc>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4a53      	ldr	r2, [pc, #332]	; (8001fe8 <FlightControlPID_innerLoop+0x528>)
 8001e9a:	66da      	str	r2, [r3, #108]	; 0x6c
  if(pid->z_s2 < -MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = -MAX_ADJ_AMOUNT_YAW;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001ea2:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001fec <FlightControlPID_innerLoop+0x52c>
 8001ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	d502      	bpl.n	8001eb6 <FlightControlPID_innerLoop+0x3f6>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4a4f      	ldr	r2, [pc, #316]	; (8001ff0 <FlightControlPID_innerLoop+0x530>)
 8001eb4:	66da      	str	r2, [r3, #108]	; 0x6c

  
#ifdef MOTOR_DC

  motor_thr = ((int16_t) (0.05f*(float)gTHR + 633.333f));           //Official MiniDrone Kit >> 630 to 1700
 8001eb6:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <FlightControlPID_innerLoop+0x534>)
 8001eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001ff8 <FlightControlPID_innerLoop+0x538>
 8001ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ecc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001ffc <FlightControlPID_innerLoop+0x53c>
 8001ed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed8:	ee17 3a90 	vmov	r3, s15
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	4b48      	ldr	r3, [pc, #288]	; (8002000 <FlightControlPID_innerLoop+0x540>)
 8001ee0:	801a      	strh	r2, [r3, #0]
  //motor_thr = 0.28f*gTHR + 750.0f;                 //TGY-i6 remocon and external ESC STEVAL-ESC001V1
    motor_thr = ((int16_t) (0.28f*(float)gTHR + 850.0f));                 //TGY-i6 remocon and external ESC Afro12A

#endif

  motor_pwm->motor1_pwm = motor_thr - pid->x_s2 - pid->y_s2 + pid->z_s2 + MOTOR_OFF1;
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <FlightControlPID_innerLoop+0x540>)
 8001ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002004 <FlightControlPID_innerLoop+0x544>
 8001f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	edc3 7a00 	vstr	s15, [r3]
  motor_pwm->motor2_pwm = motor_thr + pid->x_s2 - pid->y_s2 - pid->z_s2 + MOTOR_OFF2;
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <FlightControlPID_innerLoop+0x540>)
 8001f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001f30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001f3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f48:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002004 <FlightControlPID_innerLoop+0x544>
 8001f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	edc3 7a01 	vstr	s15, [r3, #4]
  motor_pwm->motor3_pwm = motor_thr + pid->x_s2 + pid->y_s2 + pid->z_s2 + MOTOR_OFF3;
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <FlightControlPID_innerLoop+0x540>)
 8001f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002004 <FlightControlPID_innerLoop+0x544>
 8001f86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	edc3 7a02 	vstr	s15, [r3, #8]
  motor_pwm->motor4_pwm = motor_thr - pid->x_s2 + pid->y_s2 - pid->z_s2 + MOTOR_OFF4;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <FlightControlPID_innerLoop+0x540>)
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002004 <FlightControlPID_innerLoop+0x544>
 8001fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	edc3 7a03 	vstr	s15, [r3, #12]

}
 8001fca:	bf00      	nop
 8001fcc:	371c      	adds	r7, #28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200001a0 	.word	0x200001a0
 8001fdc:	200001ac 	.word	0x200001ac
 8001fe0:	20000644 	.word	0x20000644
 8001fe4:	44480000 	.word	0x44480000
 8001fe8:	44480000 	.word	0x44480000
 8001fec:	c4480000 	.word	0xc4480000
 8001ff0:	c4480000 	.word	0xc4480000
 8001ff4:	20000de2 	.word	0x20000de2
 8001ff8:	3d4ccccd 	.word	0x3d4ccccd
 8001ffc:	441e5550 	.word	0x441e5550
 8002000:	20000640 	.word	0x20000640
 8002004:	00000000 	.word	0x00000000

08002008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int16_t pid_interval, i;

	  int mytimcnt = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
	  acc_fil.AXIS_X = 0;
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <main+0xd4>)
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
	  acc_fil.AXIS_Y = 0;
 800201a:	4b30      	ldr	r3, [pc, #192]	; (80020dc <main+0xd4>)
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
	  acc_fil.AXIS_Z = 0;
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <main+0xd4>)
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
	  mag_fil.AXIS_X = 0;
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <main+0xd8>)
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
	  mag_fil.AXIS_Y = 0;
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <main+0xd8>)
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
	  mag_fil.AXIS_Z = 0;
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <main+0xd8>)
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
	  gyro_fil.AXIS_X = 0;
 8002042:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <main+0xdc>)
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
	  gyro_fil.AXIS_Y = 0;
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <main+0xdc>)
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
	  gyro_fil.AXIS_Z = 0;
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <main+0xdc>)
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
	  euler_rc_fil.thx = 0;
 800205a:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <main+0xe0>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
	  euler_rc_fil.thy = 0;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <main+0xe0>)
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	605a      	str	r2, [r3, #4]
	  euler_rc_fil.thz = 0;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <main+0xe0>)
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
	  acc_off_calc.AXIS_X = 0;
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <main+0xe4>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
	  acc_off_calc.AXIS_Y = 0;
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <main+0xe4>)
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
	  acc_off_calc.AXIS_Z = 0;
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <main+0xe4>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
	  gyro_off_calc.AXIS_X = 0;
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <main+0xe8>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
	  gyro_off_calc.AXIS_Y = 0;
 800208a:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <main+0xe8>)
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
	  gyro_off_calc.AXIS_Z = 0;
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <main+0xe8>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
	  acc_offset.AXIS_X = 0;
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <main+0xec>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
	  acc_offset.AXIS_Y = 0;
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <main+0xec>)
 800209e:	2200      	movs	r2, #0
 80020a0:	605a      	str	r2, [r3, #4]
	  acc_offset.AXIS_Z = 1000;
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <main+0xec>)
 80020a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020a8:	609a      	str	r2, [r3, #8]
	  gyro_offset.AXIS_X = 0;
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <main+0xf0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
	  gyro_offset.AXIS_Y = 0;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <main+0xf0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
	  gyro_offset.AXIS_Z = 0;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <main+0xf0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
	  euler_rc.thz = euler_ahrs.thz;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <main+0xf4>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <main+0xf8>)
 80020c2:	6093      	str	r3, [r2, #8]
	  euler_ahrs_offset.thx = 0;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <main+0xfc>)
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
	  euler_ahrs_offset.thy = 0;
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <main+0xfc>)
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]

	  for(i=0;i<4;i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	81fb      	strh	r3, [r7, #14]
 80020d8:	e0ee      	b.n	80022b8 <main+0x2b0>
 80020da:	bf00      	nop
 80020dc:	20000884 	.word	0x20000884
 80020e0:	20000670 	.word	0x20000670
 80020e4:	2000083c 	.word	0x2000083c
 80020e8:	200008e8 	.word	0x200008e8
 80020ec:	20000a5c 	.word	0x20000a5c
 80020f0:	20000a34 	.word	0x20000a34
 80020f4:	200009e4 	.word	0x200009e4
 80020f8:	20000a68 	.word	0x20000a68
 80020fc:	20000da4 	.word	0x20000da4
 8002100:	20000acc 	.word	0x20000acc
 8002104:	20000984 	.word	0x20000984
	  {
	    acc_y_pre[i].AXIS_X = 0;
 8002108:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800210c:	49d4      	ldr	r1, [pc, #848]	; (8002460 <main+0x458>)
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
	    acc_y_pre[i].AXIS_Y = 0;
 800211e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002122:	49cf      	ldr	r1, [pc, #828]	; (8002460 <main+0x458>)
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3304      	adds	r3, #4
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
	    acc_y_pre[i].AXIS_Z = 0;
 8002136:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800213a:	49c9      	ldr	r1, [pc, #804]	; (8002460 <main+0x458>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3308      	adds	r3, #8
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
	    acc_x_pre[i].AXIS_X = 0;
 800214e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002152:	49c4      	ldr	r1, [pc, #784]	; (8002464 <main+0x45c>)
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
	    acc_x_pre[i].AXIS_Y = 0;
 8002164:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002168:	49be      	ldr	r1, [pc, #760]	; (8002464 <main+0x45c>)
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3304      	adds	r3, #4
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
	    acc_x_pre[i].AXIS_Z = 0;
 800217c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002180:	49b8      	ldr	r1, [pc, #736]	; (8002464 <main+0x45c>)
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3308      	adds	r3, #8
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
	    gyro_y_pre[i].AXIS_X = 0;
 8002194:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002198:	49b3      	ldr	r1, [pc, #716]	; (8002468 <main+0x460>)
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
	    gyro_y_pre[i].AXIS_Y = 0;
 80021aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021ae:	49ae      	ldr	r1, [pc, #696]	; (8002468 <main+0x460>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3304      	adds	r3, #4
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
	    gyro_y_pre[i].AXIS_Z = 0;
 80021c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021c6:	49a8      	ldr	r1, [pc, #672]	; (8002468 <main+0x460>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3308      	adds	r3, #8
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
	    gyro_x_pre[i].AXIS_X = 0;
 80021da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021de:	49a3      	ldr	r1, [pc, #652]	; (800246c <main+0x464>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
	    gyro_x_pre[i].AXIS_Y = 0;
 80021f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021f4:	499d      	ldr	r1, [pc, #628]	; (800246c <main+0x464>)
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3304      	adds	r3, #4
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
	    gyro_x_pre[i].AXIS_Z = 0;
 8002208:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800220c:	4997      	ldr	r1, [pc, #604]	; (800246c <main+0x464>)
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	3308      	adds	r3, #8
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
	    euler_rc_y_pre[i].thx = 0;
 8002220:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002224:	4992      	ldr	r1, [pc, #584]	; (8002470 <main+0x468>)
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
	    euler_rc_y_pre[i].thy = 0;
 8002236:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800223a:	498d      	ldr	r1, [pc, #564]	; (8002470 <main+0x468>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	3304      	adds	r3, #4
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
	    euler_rc_y_pre[i].thz = 0;
 800224e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002252:	4987      	ldr	r1, [pc, #540]	; (8002470 <main+0x468>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3308      	adds	r3, #8
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
	    euler_rc_x_pre[i].thx = 0;
 8002266:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800226a:	4982      	ldr	r1, [pc, #520]	; (8002474 <main+0x46c>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
	    euler_rc_x_pre[i].thy = 0;
 800227c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002280:	497c      	ldr	r1, [pc, #496]	; (8002474 <main+0x46c>)
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	3304      	adds	r3, #4
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
	    euler_rc_x_pre[i].thz = 0;
 8002294:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002298:	4976      	ldr	r1, [pc, #472]	; (8002474 <main+0x46c>)
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3308      	adds	r3, #8
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
	  for(i=0;i<4;i++)
 80022ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	81fb      	strh	r3, [r7, #14]
 80022b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	f77f af23 	ble.w	8002108 <main+0x100>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c2:	f006 ffef 	bl	80092a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  if (BSP_SPI2_Init()!=BSP_ERROR_NONE)
 80022c6:	f7ff f8d5 	bl	8001474 <BSP_SPI2_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <main+0x2cc>
 	  Error_Handler();
 80022d0:	f001 ff74 	bl	80041bc <Error_Handler>
  // if (HCI_TL_SPI_Init(NULL)!=BSP_ERROR_NONE)
  // 	  Error_Handler();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022d4:	f000 fbae 	bl	8002a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022d8:	f000 fe5a 	bl	8002f90 <MX_GPIO_Init>
  MX_ADC1_Init();
 80022dc:	f000 fc16 	bl	8002b0c <MX_ADC1_Init>
  MX_I2C2_Init();
 80022e0:	f000 fc66 	bl	8002bb0 <MX_I2C2_Init>
  MX_TIM2_Init();
 80022e4:	f000 fcc8 	bl	8002c78 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80022e8:	f000 fe28 	bl	8002f3c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80022ec:	f000 fd54 	bl	8002d98 <MX_TIM4_Init>
  MX_TIM9_Init();
 80022f0:	f000 fdea 	bl	8002ec8 <MX_TIM9_Init>
  MX_SPI1_Init();
 80022f4:	f000 fc8a 	bl	8002c0c <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */



  PRINTF("STEVAL-FCU001V2 FW rev.1.0 - May 2021\r\n\r\n");
 80022f8:	485f      	ldr	r0, [pc, #380]	; (8002478 <main+0x470>)
 80022fa:	f7ff fa17 	bl	800172c <myprintf>

 //  Initialize Onboard LED
  BSP_LED_Init(LED1);
 80022fe:	2000      	movs	r0, #0
 8002300:	f001 fc00 	bl	8003b04 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8002304:	2001      	movs	r0, #1
 8002306:	f001 fbfd 	bl	8003b04 <BSP_LED_Init>
  BSP_LED_Off(LED1);
 800230a:	2000      	movs	r0, #0
 800230c:	f001 fc5a 	bl	8003bc4 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8002310:	2001      	movs	r0, #1
 8002312:	f001 fc57 	bl	8003bc4 <BSP_LED_Off>

  // initialize All Sensors
  CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSR_0, MOTION_GYRO | MOTION_ACCELERO);
 8002316:	2103      	movs	r1, #3
 8002318:	2000      	movs	r0, #0
 800231a:	f00d fab9 	bl	800f890 <CUSTOM_MOTION_SENSOR_Init>
  CUSTOM_ENV_SENSOR_Init(CUSTOM_LPS22HH_0,ENV_PRESSURE | ENV_TEMPERATURE);
 800231e:	2103      	movs	r1, #3
 8002320:	2000      	movs	r0, #0
 8002322:	f00d f84f 	bl	800f3c4 <CUSTOM_ENV_SENSOR_Init>

  // Enable All Sensors
  CUSTOM_MOTION_SENSOR_Enable(CUSTOM_LSM6DSR_0, MOTION_GYRO | MOTION_ACCELERO);
 8002326:	2103      	movs	r1, #3
 8002328:	2000      	movs	r0, #0
 800232a:	f00d fb39 	bl	800f9a0 <CUSTOM_MOTION_SENSOR_Enable>
  CUSTOM_ENV_SENSOR_Enable(CUSTOM_LPS22HH_0,ENV_PRESSURE | ENV_TEMPERATURE);
 800232e:	2103      	movs	r1, #3
 8002330:	2000      	movs	r0, #0
 8002332:	f00d f8cf 	bl	800f4d4 <CUSTOM_ENV_SENSOR_Enable>

  /* Initialize settings for 6-axis MEMS Accelerometer */
   /* ODR 6.6kHz */
   /* FS 4g */
  CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_LSM6DSR_0,MOTION_ACCELERO,6660.0f);
 8002336:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800247c <main+0x474>
 800233a:	2102      	movs	r1, #2
 800233c:	2000      	movs	r0, #0
 800233e:	f00d fbb5 	bl	800faac <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
  CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_LSM6DSR_0,MOTION_ACCELERO,4);
 8002342:	2204      	movs	r2, #4
 8002344:	2102      	movs	r1, #2
 8002346:	2000      	movs	r0, #0
 8002348:	f00d fbf6 	bl	800fb38 <CUSTOM_MOTION_SENSOR_SetFullScale>
   /* ODR/2 low pass filtered sent to composite filter */
   /* Low pass filter enabled @ ODR/400 */
  // LSM6DSL_ACC_GYRO_IN_ODR_DIV_2      = 0x00,
  // LSM6DSL_ACC_GYRO_LPF2_XL_ENABLE      = 0x80,
  // LSM6DSL_ACC_GYRO_HPCF_XL_DIV400      = 0x60
  CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSR_0, LSM6DSR_CTRL8_XL, 0x80 | 0x60 | 0x00);
 800234c:	22e0      	movs	r2, #224	; 0xe0
 800234e:	2117      	movs	r1, #23
 8002350:	2000      	movs	r0, #0
 8002352:	f00d fdb7 	bl	800fec4 <CUSTOM_MOTION_SENSOR_Write_Register>
  CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSR_0,0x10, (uint8_t) tmp_6axis_reg_value);
  */

  /* Initialize settings for 6-axis MEMS Gyroscope */
  /* Gyroscope settings: full scale 2000dps, ODR 416Hz */
  CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSR_0,LSM6DSR_CTRL2_G, 0x6C);
 8002356:	226c      	movs	r2, #108	; 0x6c
 8002358:	2111      	movs	r1, #17
 800235a:	2000      	movs	r0, #0
 800235c:	f00d fdb2 	bl	800fec4 <CUSTOM_MOTION_SENSOR_Write_Register>

  /* LPF1 FTYPE set to 10b */
  uint8_t tmp_LPF1;
  CUSTOM_MOTION_SENSOR_Read_Register(CUSTOM_LSM6DSR_0,LSM6DSR_CTRL6_C, &tmp_LPF1);
 8002360:	1d7b      	adds	r3, r7, #5
 8002362:	461a      	mov	r2, r3
 8002364:	2115      	movs	r1, #21
 8002366:	2000      	movs	r0, #0
 8002368:	f00d fd84 	bl	800fe74 <CUSTOM_MOTION_SENSOR_Read_Register>
  CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSR_0,LSM6DSR_CTRL6_C, tmp_LPF1 & 0xFA);
 800236c:	797b      	ldrb	r3, [r7, #5]
 800236e:	f023 0305 	bic.w	r3, r3, #5
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	2115      	movs	r1, #21
 8002378:	2000      	movs	r0, #0
 800237a:	f00d fda3 	bl	800fec4 <CUSTOM_MOTION_SENSOR_Write_Register>

  /* Initialize Remote control*/
  init_remote_control();
 800237e:	f002 f89b 	bl	80044b8 <init_remote_control>

  /* Initialize TIM2 for External Remocon RF receiver PWM Input*/
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8002382:	2100      	movs	r1, #0
 8002384:	483e      	ldr	r0, [pc, #248]	; (8002480 <main+0x478>)
 8002386:	f009 ff79 	bl	800c27c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 800238a:	2104      	movs	r1, #4
 800238c:	483c      	ldr	r0, [pc, #240]	; (8002480 <main+0x478>)
 800238e:	f009 ff75 	bl	800c27c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_3);
 8002392:	2108      	movs	r1, #8
 8002394:	483a      	ldr	r0, [pc, #232]	; (8002480 <main+0x478>)
 8002396:	f009 ff71 	bl	800c27c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_4);
 800239a:	210c      	movs	r1, #12
 800239c:	4838      	ldr	r0, [pc, #224]	; (8002480 <main+0x478>)
 800239e:	f009 ff6d 	bl	800c27c <HAL_TIM_IC_Start_IT>

  /* Initialize TIM4 for Motors PWM Output*/
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80023a2:	2100      	movs	r1, #0
 80023a4:	4837      	ldr	r0, [pc, #220]	; (8002484 <main+0x47c>)
 80023a6:	f009 fe5f 	bl	800c068 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80023aa:	2104      	movs	r1, #4
 80023ac:	4835      	ldr	r0, [pc, #212]	; (8002484 <main+0x47c>)
 80023ae:	f009 fe5b 	bl	800c068 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80023b2:	2108      	movs	r1, #8
 80023b4:	4833      	ldr	r0, [pc, #204]	; (8002484 <main+0x47c>)
 80023b6:	f009 fe57 	bl	800c068 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80023ba:	210c      	movs	r1, #12
 80023bc:	4831      	ldr	r0, [pc, #196]	; (8002484 <main+0x47c>)
 80023be:	f009 fe53 	bl	800c068 <HAL_TIM_PWM_Start>

  /* Initialize General purpose TIM9 50Hz*/
  HAL_TIM_Base_Start_IT(&htim9);
 80023c2:	4831      	ldr	r0, [pc, #196]	; (8002488 <main+0x480>)
 80023c4:	f009 fd94 	bl	800bef0 <HAL_TIM_Base_Start_IT>

  /* Initialize PID and set Motor PWM to zero */
  PIDControlInit(&pid);
 80023c8:	4830      	ldr	r0, [pc, #192]	; (800248c <main+0x484>)
 80023ca:	f7ff f9e5 	bl	8001798 <PIDControlInit>
  set_motor_pwm_zero(&motor_pwm);
 80023ce:	4830      	ldr	r0, [pc, #192]	; (8002490 <main+0x488>)
 80023d0:	f001 ffa6 	bl	8004320 <set_motor_pwm_zero>

  /* Setup a timer with 1ms interval */
  pid_interval = (int16_t)(PID_SAMPLING_TIME*1000.0f);
 80023d4:	2301      	movs	r3, #1
 80023d6:	80fb      	strh	r3, [r7, #6]
  SetupTimer(&tim, pid_interval);
 80023d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023dc:	4619      	mov	r1, r3
 80023de:	482d      	ldr	r0, [pc, #180]	; (8002494 <main+0x48c>)
 80023e0:	f004 f880 	bl	80064e4 <SetupTimer>

  /* Start timer */
  StartTimer(&tim);
 80023e4:	482b      	ldr	r0, [pc, #172]	; (8002494 <main+0x48c>)
 80023e6:	f004 f894 	bl	8006512 <StartTimer>
  ch = 0;
 80023ea:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <main+0x490>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  ch_flag = 0;
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <main+0x494>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]


  /* BLE communication */
  PRINTF("BLE communication initialization...\n\n");
 80023f6:	482a      	ldr	r0, [pc, #168]	; (80024a0 <main+0x498>)
 80023f8:	f7ff f998 	bl	800172c <myprintf>
  BlueNRG_Init();
 80023fc:	f001 fc16 	bl	8003c2c <BlueNRG_Init>
  /* Initialize the BlueNRG Custom services */
  PRINTF("BLE services initialization...\r\n");
 8002400:	4828      	ldr	r0, [pc, #160]	; (80024a4 <main+0x49c>)
 8002402:	f7ff f993 	bl	800172c <myprintf>
  Init_BlueNRG_Custom_Services();
 8002406:	f001 fd53 	bl	8003eb0 <Init_BlueNRG_Custom_Services>

  CUSTOM_ENV_SENSOR_GetValue(CUSTOM_LPS22HH_0,ENV_PRESSURE,&press_zero_level);
 800240a:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <main+0x4a0>)
 800240c:	2102      	movs	r1, #2
 800240e:	2000      	movs	r0, #0
 8002410:	f00d f8a2 	bl	800f558 <CUSTOM_ENV_SENSOR_GetValue>
  CUSTOM_ENV_SENSOR_GetValue(CUSTOM_LPS22HH_0,ENV_TEMPERATURE,&temperature);
 8002414:	4a25      	ldr	r2, [pc, #148]	; (80024ac <main+0x4a4>)
 8002416:	2101      	movs	r1, #1
 8002418:	2000      	movs	r0, #0
 800241a:	f00d f89d 	bl	800f558 <CUSTOM_ENV_SENSOR_GetValue>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (HCI_ProcessEvent) {
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <main+0x4a8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <main+0x428>
			HCI_ProcessEvent = 0;
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <main+0x4a8>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
			HCI_Process();
 800242c:	f00c fb2a 	bl	800ea84 <HCI_Process>
		}

		if (set_connectable) {
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <main+0x4ac>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <main+0x43a>
			 //Now update the BLE advertize data and make the Board connectable
			setConnectable();
 8002438:	f002 ffb4 	bl	80053a4 <setConnectable>
			set_connectable = FALSE;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <main+0x4ac>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
		}

		if (tim9_event_flag == 1) {     // Timer9 event: frequency 800Hz
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <main+0x4b0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	f040 8285 	bne.w	8002956 <main+0x94e>
			tim9_event_flag = 0;
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <main+0x4b0>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

			count1++;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <main+0x4b4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	4a18      	ldr	r2, [pc, #96]	; (80024bc <main+0x4b4>)
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e030      	b.n	80024c0 <main+0x4b8>
 800245e:	bf00      	nop
 8002460:	20000d68 	.word	0x20000d68
 8002464:	20000b88 	.word	0x20000b88
 8002468:	200009b4 	.word	0x200009b4
 800246c:	20000cb8 	.word	0x20000cb8
 8002470:	200008b8 	.word	0x200008b8
 8002474:	200007b0 	.word	0x200007b0
 8002478:	08011390 	.word	0x08011390
 800247c:	45d02000 	.word	0x45d02000
 8002480:	20000b40 	.word	0x20000b40
 8002484:	2000072c 	.word	0x2000072c
 8002488:	20000a7c 	.word	0x20000a7c
 800248c:	200006b8 	.word	0x200006b8
 8002490:	200009a4 	.word	0x200009a4
 8002494:	20000e74 	.word	0x20000e74
 8002498:	20000d64 	.word	0x20000d64
 800249c:	20000990 	.word	0x20000990
 80024a0:	080113bc 	.word	0x080113bc
 80024a4:	080113e4 	.word	0x080113e4
 80024a8:	200009a0 	.word	0x200009a0
 80024ac:	2000089c 	.word	0x2000089c
 80024b0:	200001b8 	.word	0x200001b8
 80024b4:	20000024 	.word	0x20000024
 80024b8:	200001d4 	.word	0x200001d4
 80024bc:	200001ec 	.word	0x200001ec

			acc_ahrs.AXIS_X = 0;
 80024c0:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <main+0x4f0>)
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
			acc_ahrs.AXIS_Y = 0;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <main+0x4f0>)
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
			acc_ahrs.AXIS_Z = 0;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <main+0x4f0>)
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
			gyro_ahrs.AXIS_X = 0;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <main+0x4f4>)
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
			gyro_ahrs.AXIS_Y = 0;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <main+0x4f4>)
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
			gyro_ahrs.AXIS_Z = 0;
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <main+0x4f4>)
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]

			for (i = 0; i < FIFO_Order; i++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	81fb      	strh	r3, [r7, #14]
 80024f4:	e07a      	b.n	80025ec <main+0x5e4>
 80024f6:	bf00      	nop
 80024f8:	200008ac 	.word	0x200008ac
 80024fc:	20000890 	.word	0x20000890
				acc_ahrs.AXIS_X += acc_ahrs_FIFO[i].AXIS_X;
 8002500:	4bbd      	ldr	r3, [pc, #756]	; (80027f8 <main+0x7f0>)
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800250a:	49bc      	ldr	r1, [pc, #752]	; (80027fc <main+0x7f4>)
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	4bb6      	ldr	r3, [pc, #728]	; (80027f8 <main+0x7f0>)
 8002520:	edc3 7a00 	vstr	s15, [r3]
				acc_ahrs.AXIS_Y += acc_ahrs_FIFO[i].AXIS_Y;
 8002524:	4bb4      	ldr	r3, [pc, #720]	; (80027f8 <main+0x7f0>)
 8002526:	ed93 7a01 	vldr	s14, [r3, #4]
 800252a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800252e:	49b3      	ldr	r1, [pc, #716]	; (80027fc <main+0x7f4>)
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	3304      	adds	r3, #4
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	4bac      	ldr	r3, [pc, #688]	; (80027f8 <main+0x7f0>)
 8002546:	edc3 7a01 	vstr	s15, [r3, #4]
				acc_ahrs.AXIS_Z += acc_ahrs_FIFO[i].AXIS_Z;
 800254a:	4bab      	ldr	r3, [pc, #684]	; (80027f8 <main+0x7f0>)
 800254c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002550:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002554:	49a9      	ldr	r1, [pc, #676]	; (80027fc <main+0x7f4>)
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3308      	adds	r3, #8
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256a:	4ba3      	ldr	r3, [pc, #652]	; (80027f8 <main+0x7f0>)
 800256c:	edc3 7a02 	vstr	s15, [r3, #8]
				gyro_ahrs.AXIS_X += gyro_ahrs_FIFO[i].AXIS_X;
 8002570:	4ba3      	ldr	r3, [pc, #652]	; (8002800 <main+0x7f8>)
 8002572:	ed93 7a00 	vldr	s14, [r3]
 8002576:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800257a:	49a2      	ldr	r1, [pc, #648]	; (8002804 <main+0x7fc>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258e:	4b9c      	ldr	r3, [pc, #624]	; (8002800 <main+0x7f8>)
 8002590:	edc3 7a00 	vstr	s15, [r3]
				gyro_ahrs.AXIS_Y += gyro_ahrs_FIFO[i].AXIS_Y;
 8002594:	4b9a      	ldr	r3, [pc, #616]	; (8002800 <main+0x7f8>)
 8002596:	ed93 7a01 	vldr	s14, [r3, #4]
 800259a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800259e:	4999      	ldr	r1, [pc, #612]	; (8002804 <main+0x7fc>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3304      	adds	r3, #4
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b4:	4b92      	ldr	r3, [pc, #584]	; (8002800 <main+0x7f8>)
 80025b6:	edc3 7a01 	vstr	s15, [r3, #4]
				gyro_ahrs.AXIS_Z += gyro_ahrs_FIFO[i].AXIS_Z;
 80025ba:	4b91      	ldr	r3, [pc, #580]	; (8002800 <main+0x7f8>)
 80025bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80025c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80025c4:	498f      	ldr	r1, [pc, #572]	; (8002804 <main+0x7fc>)
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	3308      	adds	r3, #8
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <main+0x7f8>)
 80025dc:	edc3 7a02 	vstr	s15, [r3, #8]
			for (i = 0; i < FIFO_Order; i++) {
 80025e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	81fb      	strh	r3, [r7, #14]
 80025ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	dd85      	ble.n	8002500 <main+0x4f8>
			}

			acc_ahrs.AXIS_X *= FIFO_Order_Recip;
 80025f4:	4b80      	ldr	r3, [pc, #512]	; (80027f8 <main+0x7f0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffa5 	bl	8000548 <__aeabi_f2d>
 80025fe:	a37c      	add	r3, pc, #496	; (adr r3, 80027f0 <main+0x7e8>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd fff8 	bl	80005f8 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe faa2 	bl	8000b58 <__aeabi_d2f>
 8002614:	4603      	mov	r3, r0
 8002616:	4a78      	ldr	r2, [pc, #480]	; (80027f8 <main+0x7f0>)
 8002618:	6013      	str	r3, [r2, #0]
			acc_ahrs.AXIS_Y *= FIFO_Order_Recip;
 800261a:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <main+0x7f0>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ff92 	bl	8000548 <__aeabi_f2d>
 8002624:	a372      	add	r3, pc, #456	; (adr r3, 80027f0 <main+0x7e8>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	f7fd ffe5 	bl	80005f8 <__aeabi_dmul>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fe fa8f 	bl	8000b58 <__aeabi_d2f>
 800263a:	4603      	mov	r3, r0
 800263c:	4a6e      	ldr	r2, [pc, #440]	; (80027f8 <main+0x7f0>)
 800263e:	6053      	str	r3, [r2, #4]
			acc_ahrs.AXIS_Z *= FIFO_Order_Recip;
 8002640:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <main+0x7f0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff7f 	bl	8000548 <__aeabi_f2d>
 800264a:	a369      	add	r3, pc, #420	; (adr r3, 80027f0 <main+0x7e8>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd ffd2 	bl	80005f8 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fa7c 	bl	8000b58 <__aeabi_d2f>
 8002660:	4603      	mov	r3, r0
 8002662:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <main+0x7f0>)
 8002664:	6093      	str	r3, [r2, #8]
			gyro_ahrs.AXIS_X *= FIFO_Order_Recip;
 8002666:	4b66      	ldr	r3, [pc, #408]	; (8002800 <main+0x7f8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff6c 	bl	8000548 <__aeabi_f2d>
 8002670:	a35f      	add	r3, pc, #380	; (adr r3, 80027f0 <main+0x7e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fd ffbf 	bl	80005f8 <__aeabi_dmul>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fa69 	bl	8000b58 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <main+0x7f8>)
 800268a:	6013      	str	r3, [r2, #0]
			gyro_ahrs.AXIS_Y *= FIFO_Order_Recip;
 800268c:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <main+0x7f8>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff59 	bl	8000548 <__aeabi_f2d>
 8002696:	a356      	add	r3, pc, #344	; (adr r3, 80027f0 <main+0x7e8>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fd ffac 	bl	80005f8 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fa56 	bl	8000b58 <__aeabi_d2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4a54      	ldr	r2, [pc, #336]	; (8002800 <main+0x7f8>)
 80026b0:	6053      	str	r3, [r2, #4]
			gyro_ahrs.AXIS_Z *= FIFO_Order_Recip;
 80026b2:	4b53      	ldr	r3, [pc, #332]	; (8002800 <main+0x7f8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd ff46 	bl	8000548 <__aeabi_f2d>
 80026bc:	a34c      	add	r3, pc, #304	; (adr r3, 80027f0 <main+0x7e8>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fd ff99 	bl	80005f8 <__aeabi_dmul>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7fe fa43 	bl	8000b58 <__aeabi_d2f>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <main+0x7f8>)
 80026d6:	6093      	str	r3, [r2, #8]

			acc_fil_int.AXIS_X = (int32_t) acc_ahrs.AXIS_X;
 80026d8:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <main+0x7f0>)
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e2:	ee17 2a90 	vmov	r2, s15
 80026e6:	4b48      	ldr	r3, [pc, #288]	; (8002808 <main+0x800>)
 80026e8:	601a      	str	r2, [r3, #0]
			acc_fil_int.AXIS_Y = (int32_t) acc_ahrs.AXIS_Y;
 80026ea:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <main+0x7f0>)
 80026ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80026f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f4:	ee17 2a90 	vmov	r2, s15
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <main+0x800>)
 80026fa:	605a      	str	r2, [r3, #4]
			acc_fil_int.AXIS_Z = (int32_t) acc_ahrs.AXIS_Z;
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <main+0x7f0>)
 80026fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002706:	ee17 2a90 	vmov	r2, s15
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <main+0x800>)
 800270c:	609a      	str	r2, [r3, #8]
			gyro_fil_int.AXIS_X = (int32_t) gyro_ahrs.AXIS_X;
 800270e:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <main+0x7f8>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002718:	ee17 2a90 	vmov	r2, s15
 800271c:	4b3b      	ldr	r3, [pc, #236]	; (800280c <main+0x804>)
 800271e:	601a      	str	r2, [r3, #0]
			gyro_fil_int.AXIS_Y = (int32_t) gyro_ahrs.AXIS_Y;
 8002720:	4b37      	ldr	r3, [pc, #220]	; (8002800 <main+0x7f8>)
 8002722:	edd3 7a01 	vldr	s15, [r3, #4]
 8002726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272a:	ee17 2a90 	vmov	r2, s15
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <main+0x804>)
 8002730:	605a      	str	r2, [r3, #4]
			gyro_fil_int.AXIS_Z = (int32_t) gyro_ahrs.AXIS_Z;
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <main+0x7f8>)
 8002734:	edd3 7a02 	vldr	s15, [r3, #8]
 8002738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800273c:	ee17 2a90 	vmov	r2, s15
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <main+0x804>)
 8002742:	609a      	str	r2, [r3, #8]

			//PRINTF("%f %f %f %f\n", acc_ahrs.AXIS_X, acc_ahrs.AXIS_Y, gyro_ahrs.AXIS_X, gyro_ahrs.AXIS_Y);

			// AHRS update, quaternion & true gyro data are stored in ahrs
			ahrs_fusion_ag(&acc_ahrs, &gyro_ahrs, &ahrs);
 8002744:	4a32      	ldr	r2, [pc, #200]	; (8002810 <main+0x808>)
 8002746:	492e      	ldr	r1, [pc, #184]	; (8002800 <main+0x7f8>)
 8002748:	482b      	ldr	r0, [pc, #172]	; (80027f8 <main+0x7f0>)
 800274a:	f7fe fbd1 	bl	8000ef0 <ahrs_fusion_ag>

			// Calculate euler angle drone
			QuaternionToEuler(&ahrs.q, &euler_ahrs);
 800274e:	4931      	ldr	r1, [pc, #196]	; (8002814 <main+0x80c>)
 8002750:	482f      	ldr	r0, [pc, #188]	; (8002810 <main+0x808>)
 8002752:	f001 fdff 	bl	8004354 <QuaternionToEuler>

			//          gRUD = (joydata[3]-128)*(-13);
			//          gTHR = joydata[4]*13;
			//          gAIL = (joydata[5]-128)*(-13);
			//          gELE = (joydata[6]-128)*13;
			gRUD = (joydata[2] - 128) * (-13);
 8002756:	4b30      	ldr	r3, [pc, #192]	; (8002818 <main+0x810>)
 8002758:	789b      	ldrb	r3, [r3, #2]
 800275a:	3b80      	subs	r3, #128	; 0x80
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	0312      	lsls	r2, r2, #12
 8002762:	1ad2      	subs	r2, r2, r3
 8002764:	00d2      	lsls	r2, r2, #3
 8002766:	441a      	add	r2, r3
 8002768:	0052      	lsls	r2, r2, #1
 800276a:	4413      	add	r3, r2
 800276c:	b29b      	uxth	r3, r3
 800276e:	b21a      	sxth	r2, r3
 8002770:	4b2a      	ldr	r3, [pc, #168]	; (800281c <main+0x814>)
 8002772:	801a      	strh	r2, [r3, #0]
			gTHR = joydata[3] * 13;
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <main+0x810>)
 8002776:	78db      	ldrb	r3, [r3, #3]
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	0052      	lsls	r2, r2, #1
 800277e:	441a      	add	r2, r3
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	4413      	add	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	b21a      	sxth	r2, r3
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <main+0x818>)
 800278a:	801a      	strh	r2, [r3, #0]
			gAIL = (joydata[4] - 128) * (-13);
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <main+0x810>)
 800278e:	791b      	ldrb	r3, [r3, #4]
 8002790:	3b80      	subs	r3, #128	; 0x80
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	0312      	lsls	r2, r2, #12
 8002798:	1ad2      	subs	r2, r2, r3
 800279a:	00d2      	lsls	r2, r2, #3
 800279c:	441a      	add	r2, r3
 800279e:	0052      	lsls	r2, r2, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <main+0x81c>)
 80027a8:	801a      	strh	r2, [r3, #0]
			gELE = (joydata[5] - 128) * 13;
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <main+0x810>)
 80027ac:	795b      	ldrb	r3, [r3, #5]
 80027ae:	3b80      	subs	r3, #128	; 0x80
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	0052      	lsls	r2, r2, #1
 80027b6:	441a      	add	r2, r3
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b21a      	sxth	r2, r3
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <main+0x820>)
 80027c2:	801a      	strh	r2, [r3, #0]
			/* joydata[6]: seek bar data*/
			/* joydata[7]: additional button data
			 first bit: Takeoff (0 = Land,  1 = Takeoff)
			 second bit: Calibration When it changes status is active
			 third bit: Arming (0 = Disarmed,  1 = Armed) */
			gJoystick_status = joydata[7];
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <main+0x810>)
 80027c6:	79db      	ldrb	r3, [r3, #7]
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <main+0x824>)
 80027cc:	801a      	strh	r2, [r3, #0]
			if ((gJoystick_status & 0x04) == 0x04) {
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <main+0x824>)
 80027d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02f      	beq.n	800283e <main+0x836>
				rc_enable_motor = 1;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <main+0x828>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
				fly_ready = 1;
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <main+0x82c>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
				BSP_LED_On(LED2);
 80027ea:	2001      	movs	r0, #1
 80027ec:	e024      	b.n	8002838 <main+0x830>
 80027ee:	bf00      	nop
 80027f0:	9999999a 	.word	0x9999999a
 80027f4:	3fc99999 	.word	0x3fc99999
 80027f8:	200008ac 	.word	0x200008ac
 80027fc:	20000774 	.word	0x20000774
 8002800:	20000890 	.word	0x20000890
 8002804:	20000848 	.word	0x20000848
 8002808:	20000978 	.word	0x20000978
 800280c:	200008a0 	.word	0x200008a0
 8002810:	20000654 	.word	0x20000654
 8002814:	20000da4 	.word	0x20000da4
 8002818:	200001bc 	.word	0x200001bc
 800281c:	20000e36 	.word	0x20000e36
 8002820:	20000de2 	.word	0x20000de2
 8002824:	20000de4 	.word	0x20000de4
 8002828:	20000de0 	.word	0x20000de0
 800282c:	200008f8 	.word	0x200008f8
 8002830:	200001c8 	.word	0x200001c8
 8002834:	200001d0 	.word	0x200001d0
 8002838:	f001 f9aa 	bl	8003b90 <BSP_LED_On>
 800283c:	e005      	b.n	800284a <main+0x842>
			} else {
				rc_enable_motor = 0;
 800283e:	4b69      	ldr	r3, [pc, #420]	; (80029e4 <main+0x9dc>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
				fly_ready = 0;
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <main+0x9e0>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
			}

			if (connected) {
 800284a:	4b68      	ldr	r3, [pc, #416]	; (80029ec <main+0x9e4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <main+0x85e>
				rc_connection_flag = 1; /* BLE Remocon connected flag for enabling motor output */
 8002852:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <main+0x9e8>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
				SendMotionData();
 8002858:	f001 fb68 	bl	8003f2c <SendMotionData>
				SendBattEnvData();
 800285c:	f001 fb8c 	bl	8003f78 <SendBattEnvData>
				SendArmingData();
 8002860:	f001 fca0 	bl	80041a4 <SendArmingData>
 8002864:	e011      	b.n	800288a <main+0x882>
			} else {
				rc_connection_flag = 0;
 8002866:	4b62      	ldr	r3, [pc, #392]	; (80029f0 <main+0x9e8>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
				gTHR = 0;
 800286c:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <main+0x9ec>)
 800286e:	2200      	movs	r2, #0
 8002870:	801a      	strh	r2, [r3, #0]
				rc_enable_motor = 0;
 8002872:	4b5c      	ldr	r3, [pc, #368]	; (80029e4 <main+0x9dc>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
				fly_ready = 0;
 8002878:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <main+0x9e0>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
				BSP_LED_Off(LED1);
 800287e:	2000      	movs	r0, #0
 8002880:	f001 f9a0 	bl	8003bc4 <BSP_LED_Off>
				BSP_LED_Off(LED2);
 8002884:	2001      	movs	r0, #1
 8002886:	f001 f99d 	bl	8003bc4 <BSP_LED_Off>
			}

			if (joydata[7] & 0x02) {
 800288a:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <main+0x9f0>)
 800288c:	79db      	ldrb	r3, [r3, #7]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <main+0x89a>
				rc_cal_flag = 1;
 8002896:	4b59      	ldr	r3, [pc, #356]	; (80029fc <main+0x9f4>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
				BSP_LED_On(LED1);
 800289c:	2000      	movs	r0, #0
 800289e:	f001 f977 	bl	8003b90 <BSP_LED_On>
	              BSP_LED_On(LED2);
	            }
#endif

			// Get target euler angle from remote control
			GetTargetEulerAngle(&euler_rc, &euler_ahrs);
 80028a2:	4957      	ldr	r1, [pc, #348]	; (8002a00 <main+0x9f8>)
 80028a4:	4857      	ldr	r0, [pc, #348]	; (8002a04 <main+0x9fc>)
 80028a6:	f001 fed1 	bl	800464c <GetTargetEulerAngle>

			if (gTHR < MIN_THR) {
 80028aa:	4b52      	ldr	r3, [pc, #328]	; (80029f4 <main+0x9ec>)
 80028ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b0:	2bc7      	cmp	r3, #199	; 0xc7
 80028b2:	dc07      	bgt.n	80028c4 <main+0x8bc>
				euler_ahrs_offset.thx = 0;
 80028b4:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <main+0xa00>)
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
				euler_ahrs_offset.thy = 0;
 80028bc:	4b52      	ldr	r3, [pc, #328]	; (8002a08 <main+0xa00>)
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
			}

			Fly_origin.X_Degree = (int16_t) (euler_ahrs.thx * 5730);
 80028c4:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <main+0x9f8>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002a0c <main+0xa04>
 80028ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d6:	ee17 3a90 	vmov	r3, s15
 80028da:	b21a      	sxth	r2, r3
 80028dc:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <main+0xa08>)
 80028de:	801a      	strh	r2, [r3, #0]
			Fly_origin.Y_Degree = (int16_t) (euler_ahrs.thy * 5730);
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <main+0x9f8>)
 80028e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80028e6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002a0c <main+0xa04>
 80028ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028f2:	ee17 3a90 	vmov	r3, s15
 80028f6:	b21a      	sxth	r2, r3
 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <main+0xa08>)
 80028fa:	805a      	strh	r2, [r3, #2]
			Fly_origin.Z_Degree = (int16_t) (euler_ahrs.thz * 5730);
 80028fc:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <main+0x9f8>)
 80028fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002902:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002a0c <main+0xa04>
 8002906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800290e:	ee17 3a90 	vmov	r3, s15
 8002912:	b21a      	sxth	r2, r3
 8002914:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <main+0xa08>)
 8002916:	809a      	strh	r2, [r3, #4]

			if (gTHR < MIN_THR) {
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <main+0x9ec>)
 800291a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291e:	2bc7      	cmp	r3, #199	; 0xc7
 8002920:	dc07      	bgt.n	8002932 <main+0x92a>
				euler_rc.thz = 0;
 8002922:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <main+0x9fc>)
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
				euler_ahrs.thz = 0;
 800292a:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <main+0x9f8>)
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
			}

			euler_rc_fil.thx = euler_rc.thx;
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <main+0x9fc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a37      	ldr	r2, [pc, #220]	; (8002a14 <main+0xa0c>)
 8002938:	6013      	str	r3, [r2, #0]
			euler_rc_fil.thy = euler_rc.thy;
 800293a:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <main+0x9fc>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a35      	ldr	r2, [pc, #212]	; (8002a14 <main+0xa0c>)
 8002940:	6053      	str	r3, [r2, #4]
			euler_rc_fil.thz = euler_rc.thz;
 8002942:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <main+0x9fc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <main+0xa0c>)
 8002948:	6093      	str	r3, [r2, #8]

			FlightControlPID_OuterLoop(&euler_rc_fil, &euler_ahrs, &ahrs, &pid);
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <main+0xa10>)
 800294c:	4a33      	ldr	r2, [pc, #204]	; (8002a1c <main+0xa14>)
 800294e:	492c      	ldr	r1, [pc, #176]	; (8002a00 <main+0x9f8>)
 8002950:	4830      	ldr	r0, [pc, #192]	; (8002a14 <main+0xa0c>)
 8002952:	f7fe ff99 	bl	8001888 <FlightControlPID_OuterLoop>
			/* Magnetometer data on UART for debug*/
			//PRINTF("Magnetometer X = %d\tY = %d\tZ = %d\n\n", mag.AXIS_X, mag.AXIS_Y, mag.AXIS_Z);

		}

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET) {
 8002956:	2102      	movs	r1, #2
 8002958:	4831      	ldr	r0, [pc, #196]	; (8002a20 <main+0xa18>)
 800295a:	f007 fd63 	bl	800a424 <HAL_GPIO_ReadPin>
 800295e:	4603      	mov	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <main+0x962>
			ch_flag = 1;
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <main+0xa1c>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
		}

		if (isTimerEventExist(&tim))    // Check if a timer event is present
 800296a:	482f      	ldr	r0, [pc, #188]	; (8002a28 <main+0xa20>)
 800296c:	f003 fdf1 	bl	8006552 <isTimerEventExist>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f43f ad53 	beq.w	800241e <main+0x416>
				{

			ClearTimer(&tim);           // Clear current event;
 8002978:	482b      	ldr	r0, [pc, #172]	; (8002a28 <main+0xa20>)
 800297a:	f003 fddd 	bl	8006538 <ClearTimer>

			count2++;
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <main+0xa24>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <main+0xa24>)
 8002986:	6013      	str	r3, [r2, #0]

			mytimcnt++;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3301      	adds	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
			if (rc_connection_flag && rc_enable_motor) {
 800298e:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <main+0x9e8>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d014      	beq.n	80029c0 <main+0x9b8>
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <main+0x9dc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <main+0x9b8>
				if (mytimcnt % 50 == 0)
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <main+0xa28>)
 80029a2:	fb83 1302 	smull	r1, r3, r3, r2
 80029a6:	1119      	asrs	r1, r3, #4
 80029a8:	17d3      	asrs	r3, r2, #31
 80029aa:	1acb      	subs	r3, r1, r3
 80029ac:	2132      	movs	r1, #50	; 0x32
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d114      	bne.n	80029e2 <main+0x9da>
					BSP_LED_On(LED2);
 80029b8:	2001      	movs	r0, #1
 80029ba:	f001 f8e9 	bl	8003b90 <BSP_LED_On>
				if (mytimcnt % 50 == 0)
 80029be:	e010      	b.n	80029e2 <main+0x9da>
			} else {
				if (mytimcnt % 50 == 0)
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <main+0xa28>)
 80029c4:	fb83 1302 	smull	r1, r3, r3, r2
 80029c8:	1119      	asrs	r1, r3, #4
 80029ca:	17d3      	asrs	r3, r2, #31
 80029cc:	1acb      	subs	r3, r1, r3
 80029ce:	2132      	movs	r1, #50	; 0x32
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f47f ad21 	bne.w	800241e <main+0x416>
					BSP_LED_Toggle(LED2);
 80029dc:	2001      	movs	r0, #1
 80029de:	f001 f90b 	bl	8003bf8 <BSP_LED_Toggle>
		if (HCI_ProcessEvent) {
 80029e2:	e51c      	b.n	800241e <main+0x416>
 80029e4:	200001c8 	.word	0x200001c8
 80029e8:	200001d0 	.word	0x200001d0
 80029ec:	200001fc 	.word	0x200001fc
 80029f0:	20000de6 	.word	0x20000de6
 80029f4:	20000de2 	.word	0x20000de2
 80029f8:	200001bc 	.word	0x200001bc
 80029fc:	200001c4 	.word	0x200001c4
 8002a00:	20000da4 	.word	0x20000da4
 8002a04:	20000acc 	.word	0x20000acc
 8002a08:	20000984 	.word	0x20000984
 8002a0c:	45b31000 	.word	0x45b31000
 8002a10:	20000a74 	.word	0x20000a74
 8002a14:	200008e8 	.word	0x200008e8
 8002a18:	200006b8 	.word	0x200006b8
 8002a1c:	20000654 	.word	0x20000654
 8002a20:	40020000 	.word	0x40020000
 8002a24:	20000990 	.word	0x20000990
 8002a28:	20000e74 	.word	0x20000e74
 8002a2c:	200001f0 	.word	0x200001f0
 8002a30:	51eb851f 	.word	0x51eb851f

08002a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b094      	sub	sp, #80	; 0x50
 8002a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a3a:	f107 0320 	add.w	r3, r7, #32
 8002a3e:	2230      	movs	r2, #48	; 0x30
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00d faa0 	bl	800ff88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a48:	f107 030c 	add.w	r3, r7, #12
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <SystemClock_Config+0xd0>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <SystemClock_Config+0xd0>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	; 0x40
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <SystemClock_Config+0xd0>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <SystemClock_Config+0xd4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a80:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <SystemClock_Config+0xd4>)
 8002a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <SystemClock_Config+0xd4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002aac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ab0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aba:	f107 0320 	add.w	r3, r7, #32
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f007 fe58 	bl	800a774 <HAL_RCC_OscConfig>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002aca:	f001 fb77 	bl	80041bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ace:	230f      	movs	r3, #15
 8002ad0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	2102      	movs	r1, #2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f008 f8ba 	bl	800ac64 <HAL_RCC_ClockConfig>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002af6:	f001 fb61 	bl	80041bc <Error_Handler>
  }
}
 8002afa:	bf00      	nop
 8002afc:	3750      	adds	r7, #80	; 0x50
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40007000 	.word	0x40007000

08002b0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b12:	463b      	mov	r3, r7
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b20:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <MX_ADC1_Init+0x9c>)
 8002b22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <MX_ADC1_Init+0xa0>)
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b6c:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b6e:	f006 fc39 	bl	80093e4 <HAL_ADC_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002b78:	f001 fb20 	bl	80041bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002b7c:	2309      	movs	r3, #9
 8002b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b88:	463b      	mov	r3, r7
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_ADC1_Init+0x98>)
 8002b8e:	f006 fded 	bl	800976c <HAL_ADC_ConfigChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002b98:	f001 fb10 	bl	80041bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000930 	.word	0x20000930
 8002ba8:	40012000 	.word	0x40012000
 8002bac:	0f000001 	.word	0x0f000001

08002bb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <MX_I2C2_Init+0x54>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bbc:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_I2C2_Init+0x58>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bd2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002bec:	4804      	ldr	r0, [pc, #16]	; (8002c00 <MX_I2C2_Init+0x50>)
 8002bee:	f007 fc7d 	bl	800a4ec <HAL_I2C_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002bf8:	f001 fae0 	bl	80041bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200007e8 	.word	0x200007e8
 8002c04:	40005800 	.word	0x40005800
 8002c08:	000186a0 	.word	0x000186a0

08002c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <MX_SPI1_Init+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c40:	2218      	movs	r2, #24
 8002c42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c58:	220a      	movs	r2, #10
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c5c:	4804      	ldr	r0, [pc, #16]	; (8002c70 <MX_SPI1_Init+0x64>)
 8002c5e:	f008 f9fb 	bl	800b058 <HAL_SPI_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c68:	f001 faa8 	bl	80041bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000ae8 	.word	0x20000ae8
 8002c74:	40013000 	.word	0x40013000

08002c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7e:	f107 0318 	add.w	r3, r7, #24
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c96:	463b      	mov	r3, r7
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ca2:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ca8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8002caa:	4b3a      	ldr	r3, [pc, #232]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002cac:	2214      	movs	r2, #20
 8002cae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb0:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32767;
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002cb8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002cbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbe:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc4:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cca:	4832      	ldr	r0, [pc, #200]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002ccc:	f009 f8c0 	bl	800be50 <HAL_TIM_Base_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002cd6:	f001 fa71 	bl	80041bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cde:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ce0:	f107 0318 	add.w	r3, r7, #24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	482b      	ldr	r0, [pc, #172]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002ce8:	f009 fe36 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002cf2:	f001 fa63 	bl	80041bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002cf6:	4827      	ldr	r0, [pc, #156]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002cf8:	f009 fa66 	bl	800c1c8 <HAL_TIM_IC_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d02:	f001 fa5b 	bl	80041bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d0e:	f107 0310 	add.w	r3, r7, #16
 8002d12:	4619      	mov	r1, r3
 8002d14:	481f      	ldr	r0, [pc, #124]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002d16:	f00a faeb 	bl	800d2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002d20:	f001 fa4c 	bl	80041bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002d24:	230a      	movs	r3, #10
 8002d26:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d34:	463b      	mov	r3, r7
 8002d36:	2200      	movs	r2, #0
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4816      	ldr	r0, [pc, #88]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002d3c:	f009 fcba 	bl	800c6b4 <HAL_TIM_IC_ConfigChannel>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002d46:	f001 fa39 	bl	80041bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4810      	ldr	r0, [pc, #64]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002d52:	f009 fcaf 	bl	800c6b4 <HAL_TIM_IC_ConfigChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002d5c:	f001 fa2e 	bl	80041bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002d60:	463b      	mov	r3, r7
 8002d62:	2208      	movs	r2, #8
 8002d64:	4619      	mov	r1, r3
 8002d66:	480b      	ldr	r0, [pc, #44]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002d68:	f009 fca4 	bl	800c6b4 <HAL_TIM_IC_ConfigChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8002d72:	f001 fa23 	bl	80041bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002d76:	463b      	mov	r3, r7
 8002d78:	220c      	movs	r2, #12
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <MX_TIM2_Init+0x11c>)
 8002d7e:	f009 fc99 	bl	800c6b4 <HAL_TIM_IC_ConfigChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8002d88:	f001 fa18 	bl	80041bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000b40 	.word	0x20000b40

08002d98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	; 0x38
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dac:	f107 0320 	add.w	r3, r7, #32
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
 8002dc4:	615a      	str	r2, [r3, #20]
 8002dc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
#ifdef MOTOR_DC
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002dca:	4a3e      	ldr	r2, [pc, #248]	; (8002ec4 <MX_TIM4_Init+0x12c>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8002dce:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002dd0:	2254      	movs	r2, #84	; 0x54
 8002dd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002ddc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002de0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dee:	4834      	ldr	r0, [pc, #208]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002df0:	f009 f82e 	bl	800be50 <HAL_TIM_Base_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002dfa:	f001 f9df 	bl	80041bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e08:	4619      	mov	r1, r3
 8002e0a:	482d      	ldr	r0, [pc, #180]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002e0c:	f009 fda4 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002e16:	f001 f9d1 	bl	80041bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e1a:	4829      	ldr	r0, [pc, #164]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002e1c:	f009 f8ca 	bl	800bfb4 <HAL_TIM_PWM_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002e26:	f001 f9c9 	bl	80041bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e32:	f107 0320 	add.w	r3, r7, #32
 8002e36:	4619      	mov	r1, r3
 8002e38:	4821      	ldr	r0, [pc, #132]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002e3a:	f00a fa59 	bl	800d2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002e44:	f001 f9ba 	bl	80041bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e48:	2360      	movs	r3, #96	; 0x60
 8002e4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4818      	ldr	r0, [pc, #96]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002e60:	f009 fcbc 	bl	800c7dc <HAL_TIM_PWM_ConfigChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002e6a:	f001 f9a7 	bl	80041bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2204      	movs	r2, #4
 8002e72:	4619      	mov	r1, r3
 8002e74:	4812      	ldr	r0, [pc, #72]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002e76:	f009 fcb1 	bl	800c7dc <HAL_TIM_PWM_ConfigChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002e80:	f001 f99c 	bl	80041bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	2208      	movs	r2, #8
 8002e88:	4619      	mov	r1, r3
 8002e8a:	480d      	ldr	r0, [pc, #52]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002e8c:	f009 fca6 	bl	800c7dc <HAL_TIM_PWM_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002e96:	f001 f991 	bl	80041bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	220c      	movs	r2, #12
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4807      	ldr	r0, [pc, #28]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002ea2:	f009 fc9b 	bl	800c7dc <HAL_TIM_PWM_ConfigChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002eac:	f001 f986 	bl	80041bc <Error_Handler>
    {
      Error_Handler();
    }
#endif
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002eb0:	4803      	ldr	r0, [pc, #12]	; (8002ec0 <MX_TIM4_Init+0x128>)
 8002eb2:	f003 f9d9 	bl	8006268 <HAL_TIM_MspPostInit>

}
 8002eb6:	bf00      	nop
 8002eb8:	3738      	adds	r7, #56	; 0x38
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000072c 	.word	0x2000072c
 8002ec4:	40000800 	.word	0x40000800

08002ec8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ece:	463b      	mov	r3, r7
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <MX_TIM9_Init+0x6c>)
 8002edc:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <MX_TIM9_Init+0x70>)
 8002ede:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 51;
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <MX_TIM9_Init+0x6c>)
 8002ee2:	2233      	movs	r2, #51	; 0x33
 8002ee4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <MX_TIM9_Init+0x6c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1999;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <MX_TIM9_Init+0x6c>)
 8002eee:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002ef2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <MX_TIM9_Init+0x6c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <MX_TIM9_Init+0x6c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002f00:	480c      	ldr	r0, [pc, #48]	; (8002f34 <MX_TIM9_Init+0x6c>)
 8002f02:	f008 ffa5 	bl	800be50 <HAL_TIM_Base_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002f0c:	f001 f956 	bl	80041bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f14:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002f16:	463b      	mov	r3, r7
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4806      	ldr	r0, [pc, #24]	; (8002f34 <MX_TIM9_Init+0x6c>)
 8002f1c:	f009 fd1c 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002f26:	f001 f949 	bl	80041bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000a7c 	.word	0x20000a7c
 8002f38:	40014000 	.word	0x40014000

08002f3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <MX_USART1_UART_Init+0x50>)
 8002f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f62:	220c      	movs	r2, #12
 8002f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f72:	4805      	ldr	r0, [pc, #20]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f74:	f00a fa3e 	bl	800d3f4 <HAL_UART_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f7e:	f001 f91d 	bl	80041bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200009f0 	.word	0x200009f0
 8002f8c:	40011000 	.word	0x40011000

08002f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]
 8002fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b65      	ldr	r3, [pc, #404]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a64      	ldr	r2, [pc, #400]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b62      	ldr	r3, [pc, #392]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b5e      	ldr	r3, [pc, #376]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a5d      	ldr	r2, [pc, #372]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b57      	ldr	r3, [pc, #348]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a56      	ldr	r2, [pc, #344]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b54      	ldr	r3, [pc, #336]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	4b50      	ldr	r3, [pc, #320]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <MX_GPIO_Init+0x1b0>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <MX_GPIO_Init+0x1b0>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LPS22HH_CS_GPIO_Port, LPS22HH_CS_Pin, GPIO_PIN_SET);
 8003016:	2201      	movs	r2, #1
 8003018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800301c:	4849      	ldr	r0, [pc, #292]	; (8003144 <MX_GPIO_Init+0x1b4>)
 800301e:	f007 fa19 	bl	800a454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8003022:	2201      	movs	r2, #1
 8003024:	2101      	movs	r1, #1
 8003026:	4848      	ldr	r0, [pc, #288]	; (8003148 <MX_GPIO_Init+0x1b8>)
 8003028:	f007 fa14 	bl	800a454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_RSTN_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800302c:	2200      	movs	r2, #0
 800302e:	2134      	movs	r1, #52	; 0x34
 8003030:	4845      	ldr	r0, [pc, #276]	; (8003148 <MX_GPIO_Init+0x1b8>)
 8003032:	f007 fa0f 	bl	800a454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSR_CS_GPIO_Port, LSM6DSR_CS_Pin, GPIO_PIN_SET);
 8003036:	2201      	movs	r2, #1
 8003038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800303c:	4843      	ldr	r0, [pc, #268]	; (800314c <MX_GPIO_Init+0x1bc>)
 800303e:	f007 fa09 	bl	800a454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LPS22HH_CS_Pin */
  GPIO_InitStruct.Pin = LPS22HH_CS_Pin;
 8003042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003048:	2301      	movs	r3, #1
 800304a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LPS22HH_CS_GPIO_Port, &GPIO_InitStruct);
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	4619      	mov	r1, r3
 800305a:	483a      	ldr	r0, [pc, #232]	; (8003144 <MX_GPIO_Init+0x1b4>)
 800305c:	f006 ff7a 	bl	8009f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Monitor_Pin */
  GPIO_InitStruct.Pin = USB_Monitor_Pin;
 8003060:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003066:	2303      	movs	r3, #3
 8003068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_Monitor_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	4833      	ldr	r0, [pc, #204]	; (8003144 <MX_GPIO_Init+0x1b4>)
 8003076:	f006 ff6d 	bl	8009f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_IRQ_Pin */
  GPIO_InitStruct.Pin = BLE_IRQ_Pin;
 800307a:	2310      	movs	r3, #16
 800307c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800307e:	4b34      	ldr	r3, [pc, #208]	; (8003150 <MX_GPIO_Init+0x1c0>)
 8003080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	482f      	ldr	r0, [pc, #188]	; (800314c <MX_GPIO_Init+0x1bc>)
 800308e:	f006 ff61 	bl	8009f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8003092:	2301      	movs	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003096:	2301      	movs	r3, #1
 8003098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800309a:	2301      	movs	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	4827      	ldr	r0, [pc, #156]	; (8003148 <MX_GPIO_Init+0x1b8>)
 80030aa:	f006 ff53 	bl	8009f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RSTN_Pin */
  GPIO_InitStruct.Pin = BLE_RSTN_Pin;
 80030ae:	2304      	movs	r3, #4
 80030b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b2:	2301      	movs	r3, #1
 80030b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_RSTN_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4619      	mov	r1, r3
 80030c4:	4820      	ldr	r0, [pc, #128]	; (8003148 <MX_GPIO_Init+0x1b8>)
 80030c6:	f006 ff45 	bl	8009f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSR_CS_Pin */
  GPIO_InitStruct.Pin = LSM6DSR_CS_Pin;
 80030ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d0:	2301      	movs	r3, #1
 80030d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LSM6DSR_CS_GPIO_Port, &GPIO_InitStruct);
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	4619      	mov	r1, r3
 80030e2:	481a      	ldr	r0, [pc, #104]	; (800314c <MX_GPIO_Init+0x1bc>)
 80030e4:	f006 ff36 	bl	8009f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80030ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030fa:	230a      	movs	r3, #10
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4619      	mov	r1, r3
 8003104:	4811      	ldr	r0, [pc, #68]	; (800314c <MX_GPIO_Init+0x1bc>)
 8003106:	f006 ff25 	bl	8009f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800310a:	2330      	movs	r3, #48	; 0x30
 800310c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800310e:	2311      	movs	r3, #17
 8003110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	4619      	mov	r1, r3
 8003120:	4809      	ldr	r0, [pc, #36]	; (8003148 <MX_GPIO_Init+0x1b8>)
 8003122:	f006 ff17 	bl	8009f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	200a      	movs	r0, #10
 800312c:	f006 fe3b 	bl	8009da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003130:	200a      	movs	r0, #10
 8003132:	f006 fe54 	bl	8009dde <HAL_NVIC_EnableIRQ>

}
 8003136:	bf00      	nop
 8003138:	3728      	adds	r7, #40	; 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	40020800 	.word	0x40020800
 8003148:	40020400 	.word	0x40020400
 800314c:	40020000 	.word	0x40020000
 8003150:	10110000 	.word	0x10110000

08003154 <ReadSensorRawData>:
 *      Acc - mg
 *      Gyro - mdps
 *      Mag - mguass
 */
void ReadSensorRawData( AxesRaw_TypeDef *acc, AxesRaw_TypeDef *gyro,  float *pre)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
    int32_t t1;
    CUSTOM_MOTION_SENSOR_AxesRaw_t acc_temp_int16, gyro_temp_int16;            /* Data Type int16_t */
    AxesRaw_TypeDef acc_temp, gyro_temp;
    /* Data Type int32_t */
    // Read data is in mg unit
    CUSTOM_MOTION_SENSOR_GetAxesRaw(CUSTOM_LSM6DSR_0, MOTION_ACCELERO, &acc_temp_int16);
 8003160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003164:	461a      	mov	r2, r3
 8003166:	2102      	movs	r1, #2
 8003168:	2000      	movs	r0, #0
 800316a:	f00c fc5b 	bl	800fa24 <CUSTOM_MOTION_SENSOR_GetAxesRaw>
    acc_temp.AXIS_X = (int32_t) acc_temp_int16.x;                /* Casting data to int32_t */
 800316e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8003172:	61fb      	str	r3, [r7, #28]
    acc_temp.AXIS_Y = (int32_t) acc_temp_int16.y;
 8003174:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003178:	623b      	str	r3, [r7, #32]
    acc_temp.AXIS_Z = (int32_t) acc_temp_int16.z;
 800317a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    // Read data is in mdps unit
    CUSTOM_MOTION_SENSOR_GetAxesRaw(CUSTOM_LSM6DSR_0, MOTION_GYRO, &gyro_temp_int16);
 8003180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003184:	461a      	mov	r2, r3
 8003186:	2101      	movs	r1, #1
 8003188:	2000      	movs	r0, #0
 800318a:	f00c fc4b 	bl	800fa24 <CUSTOM_MOTION_SENSOR_GetAxesRaw>
    gyro_temp.AXIS_X = (int32_t) gyro_temp_int16.x;                /* Casting data to int32_t */
 800318e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003192:	613b      	str	r3, [r7, #16]
    gyro_temp.AXIS_Y = (int32_t) gyro_temp_int16.y;
 8003194:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003198:	617b      	str	r3, [r7, #20]
    gyro_temp.AXIS_Z = (int32_t) gyro_temp_int16.z;
 800319a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800319e:	61bb      	str	r3, [r7, #24]

    if (USE_PRESSURE_SENSOR)
    	CUSTOM_ENV_SENSOR_GetValue(CUSTOM_LPS22HH_0,ENV_PRESSURE, pre);
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	2102      	movs	r1, #2
 80031a4:	2000      	movs	r0, #0
 80031a6:	f00c f9d7 	bl	800f558 <CUSTOM_ENV_SENSOR_GetValue>
        // No need to convert in this case
    }
    else if (COORDINATE_SYSTEM == 3)
    {

      acc->AXIS_X = -acc_temp.AXIS_Y;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	425a      	negs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]
      acc->AXIS_Y = acc_temp.AXIS_X;
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	605a      	str	r2, [r3, #4]
      acc->AXIS_Z = acc_temp.AXIS_Z;
 80031b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	609a      	str	r2, [r3, #8]

      gyro->AXIS_X = -gyro_temp.AXIS_Y;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	425a      	negs	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	601a      	str	r2, [r3, #0]
      gyro->AXIS_Y = gyro_temp.AXIS_X;
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	605a      	str	r2, [r3, #4]
      gyro->AXIS_Z = gyro_temp.AXIS_Z;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
        // convert gyro
        gyro->AXIS_X = - gyro->AXIS_X;
        gyro->AXIS_Y = - gyro->AXIS_Y;

    }
}
 80031d2:	bf00      	nop
 80031d4:	3738      	adds	r7, #56	; 0x38
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_TIM_PeriodElapsedCallback>:
/*
 *  Handle Timer9 interrupt @ 800Hz
 *  Set the event flag and increase time index
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	6078      	str	r0, [r7, #4]
  if(sensor_init_cali == 0)
 80031e4:	4bab      	ldr	r3, [pc, #684]	; (8003494 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f040 80b7 	bne.w	800335c <HAL_TIM_PeriodElapsedCallback+0x180>
  {
    sensor_init_cali_count++;
 80031ee:	4baa      	ldr	r3, [pc, #680]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4aa8      	ldr	r2, [pc, #672]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80031f6:	6013      	str	r3, [r2, #0]

    if(sensor_init_cali_count > 800)
 80031f8:	4ba7      	ldr	r3, [pc, #668]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003200:	f340 80ac 	ble.w	800335c <HAL_TIM_PeriodElapsedCallback+0x180>
    {
      // Read sensor data and prepare for specific coodinate system
      ReadSensorRawData( &acc, &gyro, &press);
 8003204:	4aa5      	ldr	r2, [pc, #660]	; (800349c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003206:	49a6      	ldr	r1, [pc, #664]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003208:	48a6      	ldr	r0, [pc, #664]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800320a:	f7ff ffa3 	bl	8003154 <ReadSensorRawData>

      acc_off_calc.AXIS_X += acc.AXIS_X;
 800320e:	4ba6      	ldr	r3, [pc, #664]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4ba4      	ldr	r3, [pc, #656]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4413      	add	r3, r2
 8003218:	4aa3      	ldr	r2, [pc, #652]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800321a:	6013      	str	r3, [r2, #0]
      acc_off_calc.AXIS_Y += acc.AXIS_Y;
 800321c:	4ba2      	ldr	r3, [pc, #648]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4ba0      	ldr	r3, [pc, #640]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4413      	add	r3, r2
 8003226:	4aa0      	ldr	r2, [pc, #640]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003228:	6053      	str	r3, [r2, #4]
      acc_off_calc.AXIS_Z += acc.AXIS_Z;
 800322a:	4b9f      	ldr	r3, [pc, #636]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	4b9d      	ldr	r3, [pc, #628]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4413      	add	r3, r2
 8003234:	4a9c      	ldr	r2, [pc, #624]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003236:	6093      	str	r3, [r2, #8]

      gyro_off_calc.AXIS_X += gyro.AXIS_X;
 8003238:	4b9c      	ldr	r3, [pc, #624]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b98      	ldr	r3, [pc, #608]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4413      	add	r3, r2
 8003242:	4a9a      	ldr	r2, [pc, #616]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003244:	6013      	str	r3, [r2, #0]
      gyro_off_calc.AXIS_Y += gyro.AXIS_Y;
 8003246:	4b99      	ldr	r3, [pc, #612]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4b95      	ldr	r3, [pc, #596]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4413      	add	r3, r2
 8003250:	4a96      	ldr	r2, [pc, #600]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003252:	6053      	str	r3, [r2, #4]
      gyro_off_calc.AXIS_Z += gyro.AXIS_Z;
 8003254:	4b95      	ldr	r3, [pc, #596]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	4b91      	ldr	r3, [pc, #580]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4413      	add	r3, r2
 800325e:	4a93      	ldr	r2, [pc, #588]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003260:	6093      	str	r3, [r2, #8]

      if (sensor_init_cali_count >= 1600)
 8003262:	4b8d      	ldr	r3, [pc, #564]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800326a:	db77      	blt.n	800335c <HAL_TIM_PeriodElapsedCallback+0x180>
      {
        acc_offset.AXIS_X = (int32_t) (acc_off_calc.AXIS_X * 0.00125f);
 800326c:	4b8e      	ldr	r3, [pc, #568]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003278:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 800327c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003284:	ee17 2a90 	vmov	r2, s15
 8003288:	4b8a      	ldr	r3, [pc, #552]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800328a:	601a      	str	r2, [r3, #0]
        acc_offset.AXIS_Y = (int32_t) (acc_off_calc.AXIS_Y * 0.00125f);
 800328c:	4b86      	ldr	r3, [pc, #536]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003298:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 800329c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a4:	ee17 2a90 	vmov	r2, s15
 80032a8:	4b82      	ldr	r3, [pc, #520]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80032aa:	605a      	str	r2, [r3, #4]
        acc_offset.AXIS_Z = (int32_t) (acc_off_calc.AXIS_Z * 0.00125f);
 80032ac:	4b7e      	ldr	r3, [pc, #504]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b8:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 80032bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032c4:	ee17 2a90 	vmov	r2, s15
 80032c8:	4b7a      	ldr	r3, [pc, #488]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80032ca:	609a      	str	r2, [r3, #8]

        gyro_offset.AXIS_X = (int32_t) (gyro_off_calc.AXIS_X * 0.00125f);
 80032cc:	4b77      	ldr	r3, [pc, #476]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	ee07 3a90 	vmov	s15, r3
 80032d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032d8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 80032dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e4:	ee17 2a90 	vmov	r2, s15
 80032e8:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80032ea:	601a      	str	r2, [r3, #0]
        gyro_offset.AXIS_Y = (int32_t) (gyro_off_calc.AXIS_Y * 0.00125f);
 80032ec:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f8:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 80032fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003304:	ee17 2a90 	vmov	r2, s15
 8003308:	4b6b      	ldr	r3, [pc, #428]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800330a:	605a      	str	r2, [r3, #4]
        gyro_offset.AXIS_Z = (int32_t) (gyro_off_calc.AXIS_Z * 0.00125f);
 800330c:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003318:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 800331c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003324:	ee17 2a90 	vmov	r2, s15
 8003328:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800332a:	609a      	str	r2, [r3, #8]

        acc_off_calc.AXIS_X = 0;
 800332c:	4b5e      	ldr	r3, [pc, #376]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
        acc_off_calc.AXIS_Y = 0;
 8003332:	4b5d      	ldr	r3, [pc, #372]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]
        acc_off_calc.AXIS_Z = 0;
 8003338:	4b5b      	ldr	r3, [pc, #364]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
        gyro_off_calc.AXIS_X = 0;
 800333e:	4b5b      	ldr	r3, [pc, #364]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
        gyro_off_calc.AXIS_Y = 0;
 8003344:	4b59      	ldr	r3, [pc, #356]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003346:	2200      	movs	r2, #0
 8003348:	605a      	str	r2, [r3, #4]
        gyro_off_calc.AXIS_Z = 0;
 800334a:	4b58      	ldr	r3, [pc, #352]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]

        sensor_init_cali_count = 0;
 8003350:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
        sensor_init_cali = 1;
 8003356:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if(sensor_init_cali == 1)
 800335c:	4b4d      	ldr	r3, [pc, #308]	; (8003494 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	f040 83a8 	bne.w	8003ab6 <HAL_TIM_PeriodElapsedCallback+0x8da>
  {
    tim9_cnt++;
 8003366:	4b55      	ldr	r3, [pc, #340]	; (80034bc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	4a53      	ldr	r2, [pc, #332]	; (80034bc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800336e:	6013      	str	r3, [r2, #0]
    tim9_cnt2++;
 8003370:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003378:	6013      	str	r3, [r2, #0]

    // Read sensor data and prepare for specific coodinate system
    ReadSensorRawData( &acc, &gyro, &press);
 800337a:	4a48      	ldr	r2, [pc, #288]	; (800349c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800337c:	4948      	ldr	r1, [pc, #288]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800337e:	4849      	ldr	r0, [pc, #292]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003380:	f7ff fee8 	bl	8003154 <ReadSensorRawData>

    if (rc_cal_flag == 1)
 8003384:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 80cb 	bne.w	8003524 <HAL_TIM_PeriodElapsedCallback+0x348>
    {
      acc_off_calc.AXIS_X += acc.AXIS_X;
 800338e:	4b46      	ldr	r3, [pc, #280]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b44      	ldr	r3, [pc, #272]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4413      	add	r3, r2
 8003398:	4a43      	ldr	r2, [pc, #268]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800339a:	6013      	str	r3, [r2, #0]
      acc_off_calc.AXIS_Y += acc.AXIS_Y;
 800339c:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	4a40      	ldr	r2, [pc, #256]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80033a8:	6053      	str	r3, [r2, #4]
      acc_off_calc.AXIS_Z += acc.AXIS_Z;
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4413      	add	r3, r2
 80033b4:	4a3c      	ldr	r2, [pc, #240]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80033b6:	6093      	str	r3, [r2, #8]

      gyro_off_calc.AXIS_X += gyro.AXIS_X;
 80033b8:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80033c4:	6013      	str	r3, [r2, #0]
      gyro_off_calc.AXIS_Y += gyro.AXIS_Y;
 80033c6:	4b39      	ldr	r3, [pc, #228]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	4a36      	ldr	r2, [pc, #216]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80033d2:	6053      	str	r3, [r2, #4]
      gyro_off_calc.AXIS_Z += gyro.AXIS_Z;
 80033d4:	4b35      	ldr	r3, [pc, #212]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4413      	add	r3, r2
 80033de:	4a33      	ldr	r2, [pc, #204]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80033e0:	6093      	str	r3, [r2, #8]

      rc_cal_cnt++;
 80033e2:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a37      	ldr	r2, [pc, #220]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80033ea:	6013      	str	r3, [r2, #0]

      if (rc_cal_cnt >= 800)
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80033f4:	f2c0 8096 	blt.w	8003524 <HAL_TIM_PeriodElapsedCallback+0x348>
      {
        acc_offset.AXIS_X = (int32_t) (acc_off_calc.AXIS_X * 0.00125f);
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003404:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8003408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003410:	ee17 2a90 	vmov	r2, s15
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003416:	601a      	str	r2, [r3, #0]
        acc_offset.AXIS_Y = (int32_t) (acc_off_calc.AXIS_Y * 0.00125f);
 8003418:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003424:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8003428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800342c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003430:	ee17 2a90 	vmov	r2, s15
 8003434:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003436:	605a      	str	r2, [r3, #4]
        acc_offset.AXIS_Z = (int32_t) (acc_off_calc.AXIS_Z * 0.00125f);
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003444:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8003448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003450:	ee17 2a90 	vmov	r2, s15
 8003454:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003456:	609a      	str	r2, [r3, #8]

        gyro_offset.AXIS_X = (int32_t) (gyro_off_calc.AXIS_X * 0.00125f);
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003464:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8003468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800346c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003470:	ee17 2a90 	vmov	r2, s15
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003476:	601a      	str	r2, [r3, #0]
        gyro_offset.AXIS_Y = (int32_t) (gyro_off_calc.AXIS_Y * 0.00125f);
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003484:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80034b0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8003488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800348c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003490:	e01c      	b.n	80034cc <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8003492:	bf00      	nop
 8003494:	200001e4 	.word	0x200001e4
 8003498:	200001e8 	.word	0x200001e8
 800349c:	20000ae4 	.word	0x20000ae4
 80034a0:	20000994 	.word	0x20000994
 80034a4:	20000648 	.word	0x20000648
 80034a8:	20000a5c 	.word	0x20000a5c
 80034ac:	20000a34 	.word	0x20000a34
 80034b0:	3aa3d70a 	.word	0x3aa3d70a
 80034b4:	200009e4 	.word	0x200009e4
 80034b8:	20000a68 	.word	0x20000a68
 80034bc:	200001d8 	.word	0x200001d8
 80034c0:	200001dc 	.word	0x200001dc
 80034c4:	200001c4 	.word	0x200001c4
 80034c8:	200001cc 	.word	0x200001cc
 80034cc:	ee17 2a90 	vmov	r2, s15
 80034d0:	4b97      	ldr	r3, [pc, #604]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80034d2:	605a      	str	r2, [r3, #4]
        gyro_offset.AXIS_Z = (int32_t) (gyro_off_calc.AXIS_Z * 0.00125f);
 80034d4:	4b97      	ldr	r3, [pc, #604]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003738 <HAL_TIM_PeriodElapsedCallback+0x55c>
 80034e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ec:	ee17 2a90 	vmov	r2, s15
 80034f0:	4b8f      	ldr	r3, [pc, #572]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80034f2:	609a      	str	r2, [r3, #8]

        acc_off_calc.AXIS_X = 0;
 80034f4:	4b91      	ldr	r3, [pc, #580]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x560>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
        acc_off_calc.AXIS_Y = 0;
 80034fa:	4b90      	ldr	r3, [pc, #576]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x560>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
        acc_off_calc.AXIS_Z = 0;
 8003500:	4b8e      	ldr	r3, [pc, #568]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
        gyro_off_calc.AXIS_X = 0;
 8003506:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
        gyro_off_calc.AXIS_Y = 0;
 800350c:	4b89      	ldr	r3, [pc, #548]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x558>)
 800350e:	2200      	movs	r2, #0
 8003510:	605a      	str	r2, [r3, #4]
        gyro_off_calc.AXIS_Z = 0;
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]

        rc_cal_cnt = 0;
 8003518:	4b89      	ldr	r3, [pc, #548]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
        rc_cal_flag = 0;
 800351e:	4b89      	ldr	r3, [pc, #548]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
      }
    }

    acc.AXIS_X -= acc_offset.AXIS_X;
 8003524:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b88      	ldr	r3, [pc, #544]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x570>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	4a86      	ldr	r2, [pc, #536]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003530:	6013      	str	r3, [r2, #0]
    acc.AXIS_Y -= acc_offset.AXIS_Y;
 8003532:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4b85      	ldr	r3, [pc, #532]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	4a82      	ldr	r2, [pc, #520]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800353e:	6053      	str	r3, [r2, #4]
    acc.AXIS_Z -= (acc_offset.AXIS_Z - 1000);
 8003540:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4b81      	ldr	r3, [pc, #516]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	4a7e      	ldr	r2, [pc, #504]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003550:	6093      	str	r3, [r2, #8]
    gyro.AXIS_X -= gyro_offset.AXIS_X;
 8003552:	4b7f      	ldr	r3, [pc, #508]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	4a7c      	ldr	r2, [pc, #496]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800355e:	6013      	str	r3, [r2, #0]
    gyro.AXIS_Y -= gyro_offset.AXIS_Y;
 8003560:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4b72      	ldr	r3, [pc, #456]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	4a79      	ldr	r2, [pc, #484]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800356c:	6053      	str	r3, [r2, #4]
    gyro.AXIS_Z -= gyro_offset.AXIS_Z;
 800356e:	4b78      	ldr	r3, [pc, #480]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	4a75      	ldr	r2, [pc, #468]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800357a:	6093      	str	r3, [r2, #8]

    // Save filtered data to acc_FIFO
    acc_FIFO[tim9_cnt2-1].AXIS_X = acc.AXIS_X;
 800357c:	4b72      	ldr	r3, [pc, #456]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	4b74      	ldr	r3, [pc, #464]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	1e5a      	subs	r2, r3, #1
 8003586:	ee07 1a90 	vmov	s15, r1
 800358a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358e:	4972      	ldr	r1, [pc, #456]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	edc3 7a00 	vstr	s15, [r3]
    acc_FIFO[tim9_cnt2-1].AXIS_Y = acc.AXIS_Y;
 800359e:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	ee07 1a90 	vmov	s15, r1
 80035ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b0:	4969      	ldr	r1, [pc, #420]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80035b2:	4613      	mov	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3304      	adds	r3, #4
 80035be:	edc3 7a00 	vstr	s15, [r3]
    acc_FIFO[tim9_cnt2-1].AXIS_Z = acc.AXIS_Z;
 80035c2:	4b61      	ldr	r3, [pc, #388]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	1e5a      	subs	r2, r3, #1
 80035cc:	ee07 1a90 	vmov	s15, r1
 80035d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d4:	4960      	ldr	r1, [pc, #384]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3308      	adds	r3, #8
 80035e2:	edc3 7a00 	vstr	s15, [r3]

    // IIR Filtering on gyro
    gyro_fil.AXIS_X = gyro_fil_coeff.b0*gyro.AXIS_X + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_X + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_X
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 80035e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80035ec:	4b58      	ldr	r3, [pc, #352]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	ee07 3a90 	vmov	s15, r3
 80035f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035fc:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 80035fe:	edd3 6a03 	vldr	s13, [r3, #12]
 8003602:	4b57      	ldr	r3, [pc, #348]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800360c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003610:	4b52      	ldr	r3, [pc, #328]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003612:	edd3 6a04 	vldr	s13, [r3, #16]
 8003616:	4b52      	ldr	r3, [pc, #328]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003618:	edd3 7a03 	vldr	s15, [r3, #12]
 800361c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003620:	ee37 7a27 	vadd.f32	s14, s14, s15
                                                    + gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_X + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_X;
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003626:	edd3 6a00 	vldr	s13, [r3]
 800362a:	4b4e      	ldr	r3, [pc, #312]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003638:	4b48      	ldr	r3, [pc, #288]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 800363a:	edd3 6a01 	vldr	s13, [r3, #4]
 800363e:	4b49      	ldr	r3, [pc, #292]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8003640:	edd3 7a03 	vldr	s15, [r3, #12]
 8003644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003648:	ee77 7a27 	vadd.f32	s15, s14, s15
    gyro_fil.AXIS_X = gyro_fil_coeff.b0*gyro.AXIS_X + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_X + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_X
 800364c:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800364e:	edc3 7a00 	vstr	s15, [r3]
    gyro_fil.AXIS_Y = gyro_fil_coeff.b0*gyro.AXIS_Y + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Y + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Y
 8003652:	4b42      	ldr	r3, [pc, #264]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003654:	ed93 7a02 	vldr	s14, [r3, #8]
 8003658:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003668:	4b3c      	ldr	r3, [pc, #240]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 800366a:	edd3 6a03 	vldr	s13, [r3, #12]
 800366e:	4b3c      	ldr	r3, [pc, #240]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003670:	edd3 7a01 	vldr	s15, [r3, #4]
 8003674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800367c:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 800367e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003684:	edd3 7a04 	vldr	s15, [r3, #16]
 8003688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800368c:	ee37 7a27 	vadd.f32	s14, s14, s15
                                                    + gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_Y + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_Y;
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003692:	edd3 6a00 	vldr	s13, [r3]
 8003696:	4b33      	ldr	r3, [pc, #204]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8003698:	edd3 7a01 	vldr	s15, [r3, #4]
 800369c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80036aa:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80036ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80036b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    gyro_fil.AXIS_Y = gyro_fil_coeff.b0*gyro.AXIS_Y + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Y + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Y
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80036ba:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_fil.AXIS_Z = gyro_fil_coeff.b0*gyro.AXIS_Z + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Z + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Z
 80036be:	4b27      	ldr	r3, [pc, #156]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80036c4:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036d4:	4b21      	ldr	r3, [pc, #132]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80036da:	4b21      	ldr	r3, [pc, #132]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80036dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80036e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036e8:	4b1c      	ldr	r3, [pc, #112]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036ea:	edd3 6a04 	vldr	s13, [r3, #16]
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80036f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80036f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036f8:	ee37 7a27 	vadd.f32	s14, s14, s15
                                                    + gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_Z + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_Z;
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036fe:	edd3 6a00 	vldr	s13, [r3]
 8003702:	4b18      	ldr	r3, [pc, #96]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8003704:	edd3 7a02 	vldr	s15, [r3, #8]
 8003708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800370c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003712:	edd3 6a01 	vldr	s13, [r3, #4]
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8003718:	edd3 7a05 	vldr	s15, [r3, #20]
 800371c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003720:	ee77 7a27 	vadd.f32	s15, s14, s15
    gyro_fil.AXIS_Z = gyro_fil_coeff.b0*gyro.AXIS_Z + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Z + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Z
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8003726:	edc3 7a02 	vstr	s15, [r3, #8]
    // Shift IIR filter state
    for(int i=1;i>0;i--)
 800372a:	2301      	movs	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	e08e      	b.n	800384e <HAL_TIM_PeriodElapsedCallback+0x672>
 8003730:	20000a68 	.word	0x20000a68
 8003734:	20000a34 	.word	0x20000a34
 8003738:	3aa3d70a 	.word	0x3aa3d70a
 800373c:	20000a5c 	.word	0x20000a5c
 8003740:	200001cc 	.word	0x200001cc
 8003744:	200001c4 	.word	0x200001c4
 8003748:	20000648 	.word	0x20000648
 800374c:	200009e4 	.word	0x200009e4
 8003750:	20000994 	.word	0x20000994
 8003754:	200001dc 	.word	0x200001dc
 8003758:	2000067c 	.word	0x2000067c
 800375c:	20000004 	.word	0x20000004
 8003760:	20000cb8 	.word	0x20000cb8
 8003764:	200009b4 	.word	0x200009b4
 8003768:	2000083c 	.word	0x2000083c
    {
      gyro_x_pre[i].AXIS_X = gyro_x_pre[i-1].AXIS_X;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e5a      	subs	r2, r3, #1
 8003770:	4966      	ldr	r1, [pc, #408]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	6819      	ldr	r1, [r3, #0]
 800377e:	4863      	ldr	r0, [pc, #396]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4403      	add	r3, r0
 800378c:	6019      	str	r1, [r3, #0]
      gyro_x_pre[i].AXIS_Y = gyro_x_pre[i-1].AXIS_Y;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e5a      	subs	r2, r3, #1
 8003792:	495e      	ldr	r1, [pc, #376]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3304      	adds	r3, #4
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	485a      	ldr	r0, [pc, #360]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4403      	add	r3, r0
 80037b0:	3304      	adds	r3, #4
 80037b2:	6019      	str	r1, [r3, #0]
      gyro_x_pre[i].AXIS_Z = gyro_x_pre[i-1].AXIS_Z;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	4954      	ldr	r1, [pc, #336]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3308      	adds	r3, #8
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	4850      	ldr	r0, [pc, #320]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4403      	add	r3, r0
 80037d6:	3308      	adds	r3, #8
 80037d8:	6019      	str	r1, [r3, #0]
      gyro_y_pre[i].AXIS_X = gyro_y_pre[i-1].AXIS_X;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	494c      	ldr	r1, [pc, #304]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	4848      	ldr	r0, [pc, #288]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4403      	add	r3, r0
 80037fa:	6019      	str	r1, [r3, #0]
      gyro_y_pre[i].AXIS_Y = gyro_y_pre[i-1].AXIS_Y;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	4943      	ldr	r1, [pc, #268]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3304      	adds	r3, #4
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	483f      	ldr	r0, [pc, #252]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4403      	add	r3, r0
 800381e:	3304      	adds	r3, #4
 8003820:	6019      	str	r1, [r3, #0]
      gyro_y_pre[i].AXIS_Z = gyro_y_pre[i-1].AXIS_Z;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1e5a      	subs	r2, r3, #1
 8003826:	493a      	ldr	r1, [pc, #232]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	3308      	adds	r3, #8
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	4836      	ldr	r0, [pc, #216]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4403      	add	r3, r0
 8003844:	3308      	adds	r3, #8
 8003846:	6019      	str	r1, [r3, #0]
    for(int i=1;i>0;i--)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	dc8b      	bgt.n	800376c <HAL_TIM_PeriodElapsedCallback+0x590>
    }
    gyro_x_pre[0].AXIS_X = gyro.AXIS_X;
 8003854:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003862:	edc3 7a00 	vstr	s15, [r3]
    gyro_x_pre[0].AXIS_Y = gyro.AXIS_Y;
 8003866:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003874:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_x_pre[0].AXIS_Z = gyro.AXIS_Z;
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003884:	4b21      	ldr	r3, [pc, #132]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003886:	edc3 7a02 	vstr	s15, [r3, #8]
    gyro_y_pre[0].AXIS_X = gyro_fil.AXIS_X;
 800388a:	4b23      	ldr	r3, [pc, #140]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a20      	ldr	r2, [pc, #128]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003890:	6013      	str	r3, [r2, #0]
    gyro_y_pre[0].AXIS_Y = gyro_fil.AXIS_Y;
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003898:	6053      	str	r3, [r2, #4]
    gyro_y_pre[0].AXIS_Z = gyro_fil.AXIS_Z;
 800389a:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80038a0:	6093      	str	r3, [r2, #8]

    //  Save filtered data to gyro_FIFO
    gyro_FIFO[tim9_cnt2-1].AXIS_X = gyro_fil.AXIS_X;
 80038a2:	4b1e      	ldr	r3, [pc, #120]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x740>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1e5a      	subs	r2, r3, #1
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	481c      	ldr	r0, [pc, #112]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x744>)
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4403      	add	r3, r0
 80038b8:	6019      	str	r1, [r3, #0]
    gyro_FIFO[tim9_cnt2-1].AXIS_Y = gyro_fil.AXIS_Y;
 80038ba:	4b18      	ldr	r3, [pc, #96]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x740>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1e5a      	subs	r2, r3, #1
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	4816      	ldr	r0, [pc, #88]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x744>)
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4403      	add	r3, r0
 80038d0:	3304      	adds	r3, #4
 80038d2:	6019      	str	r1, [r3, #0]
    gyro_FIFO[tim9_cnt2-1].AXIS_Z = gyro_fil.AXIS_Z;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x740>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	1e5a      	subs	r2, r3, #1
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80038dc:	6899      	ldr	r1, [r3, #8]
 80038de:	4810      	ldr	r0, [pc, #64]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x744>)
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4403      	add	r3, r0
 80038ea:	3308      	adds	r3, #8
 80038ec:	6019      	str	r1, [r3, #0]


    if(tim9_cnt2 == FIFO_Order)
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x740>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	f040 8086 	bne.w	8003a04 <HAL_TIM_PeriodElapsedCallback+0x828>
    {
      tim9_cnt2 = 0;
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x740>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
      tim9_event_flag = 1;
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
      for(int i=0;i<FIFO_Order;i++)
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	e079      	b.n	80039fe <HAL_TIM_PeriodElapsedCallback+0x822>
 800390a:	bf00      	nop
 800390c:	20000cb8 	.word	0x20000cb8
 8003910:	200009b4 	.word	0x200009b4
 8003914:	20000994 	.word	0x20000994
 8003918:	2000083c 	.word	0x2000083c
 800391c:	200001dc 	.word	0x200001dc
 8003920:	20000cf4 	.word	0x20000cf4
 8003924:	200001d4 	.word	0x200001d4
      {
        acc_ahrs_FIFO[i].AXIS_X = acc_FIFO[i].AXIS_X;
 8003928:	4965      	ldr	r1, [pc, #404]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	4862      	ldr	r0, [pc, #392]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4403      	add	r3, r0
 8003946:	6019      	str	r1, [r3, #0]
        acc_ahrs_FIFO[i].AXIS_Y = acc_FIFO[i].AXIS_Y;
 8003948:	495d      	ldr	r1, [pc, #372]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3304      	adds	r3, #4
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	485a      	ldr	r0, [pc, #360]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4403      	add	r3, r0
 8003968:	3304      	adds	r3, #4
 800396a:	6019      	str	r1, [r3, #0]
        acc_ahrs_FIFO[i].AXIS_Z = acc_FIFO[i].AXIS_Z;
 800396c:	4954      	ldr	r1, [pc, #336]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3308      	adds	r3, #8
 800397c:	6819      	ldr	r1, [r3, #0]
 800397e:	4851      	ldr	r0, [pc, #324]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4403      	add	r3, r0
 800398c:	3308      	adds	r3, #8
 800398e:	6019      	str	r1, [r3, #0]
        gyro_ahrs_FIFO[i].AXIS_X = gyro_FIFO[i].AXIS_X;
 8003990:	494d      	ldr	r1, [pc, #308]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	484a      	ldr	r0, [pc, #296]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4403      	add	r3, r0
 80039ae:	6019      	str	r1, [r3, #0]
        gyro_ahrs_FIFO[i].AXIS_Y = gyro_FIFO[i].AXIS_Y;
 80039b0:	4945      	ldr	r1, [pc, #276]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3304      	adds	r3, #4
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	4842      	ldr	r0, [pc, #264]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4403      	add	r3, r0
 80039d0:	3304      	adds	r3, #4
 80039d2:	6019      	str	r1, [r3, #0]
        gyro_ahrs_FIFO[i].AXIS_Z = gyro_FIFO[i].AXIS_Z;
 80039d4:	493c      	ldr	r1, [pc, #240]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3308      	adds	r3, #8
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	4839      	ldr	r0, [pc, #228]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4403      	add	r3, r0
 80039f4:	3308      	adds	r3, #8
 80039f6:	6019      	str	r1, [r3, #0]
      for(int i=0;i<FIFO_Order;i++)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3301      	adds	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	dd91      	ble.n	8003928 <HAL_TIM_PeriodElapsedCallback+0x74c>
      }
    }


      gyro_rad.gx = ((float)gyro_fil.AXIS_X)*((float)COE_MDPS_TO_RADPS);
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003a06:	edd3 7a00 	vldr	s15, [r3]
 8003a0a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8f8>
 8003a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a12:	4b31      	ldr	r3, [pc, #196]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a14:	edc3 7a00 	vstr	s15, [r3]
      gyro_rad.gy = ((float)gyro_fil.AXIS_Y)*((float)COE_MDPS_TO_RADPS);
 8003a18:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003a1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a1e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8f8>
 8003a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a26:	4b2c      	ldr	r3, [pc, #176]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a28:	edc3 7a01 	vstr	s15, [r3, #4]
      gyro_rad.gz = ((float)gyro_fil.AXIS_Z)*((float)COE_MDPS_TO_RADPS);
 8003a2c:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003a2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a32:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8f8>
 8003a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a3a:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a3c:	edc3 7a02 	vstr	s15, [r3, #8]

      euler_ahrs.thz += gyro_rad.gz*PID_SAMPLING_TIME;
 8003a40:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003a42:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a46:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a48:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a4c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003ae0 <HAL_TIM_PeriodElapsedCallback+0x904>
 8003a50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a58:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003a5a:	edc3 7a02 	vstr	s15, [r3, #8]

      if(gTHR<MIN_THR)
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a64:	2bc7      	cmp	r3, #199	; 0xc7
 8003a66:	dc07      	bgt.n	8003a78 <HAL_TIM_PeriodElapsedCallback+0x89c>
      {
        euler_rc.thz = 0;
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
        euler_ahrs.thz = 0;
 8003a70:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
      }

      if (rc_connection_flag && rc_enable_motor)
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x910>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00c      	beq.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0x8be>
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x914>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0x8be>
      {   // Do PID Control
        FlightControlPID_innerLoop(&euler_rc_fil, &gyro_rad, &ahrs, &pid, &motor_pwm);
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 8003a8e:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x920>)
 8003a90:	4911      	ldr	r1, [pc, #68]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a92:	481b      	ldr	r0, [pc, #108]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8003a94:	f7fe f814 	bl	8001ac0 <FlightControlPID_innerLoop>
 8003a98:	e002      	b.n	8003aa0 <HAL_TIM_PeriodElapsedCallback+0x8c4>
      }
      else
      {
        // set motor output zero
        set_motor_pwm_zero(&motor_pwm);
 8003a9a:	4816      	ldr	r0, [pc, #88]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003a9c:	f000 fc40 	bl	8004320 <set_motor_pwm_zero>
      }

      if(gTHR<MIN_THR)
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aa6:	2bc7      	cmp	r3, #199	; 0xc7
 8003aa8:	dc02      	bgt.n	8003ab0 <HAL_TIM_PeriodElapsedCallback+0x8d4>
      {
        set_motor_pwm_zero(&motor_pwm);
 8003aaa:	4812      	ldr	r0, [pc, #72]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003aac:	f000 fc38 	bl	8004320 <set_motor_pwm_zero>
      }

      set_motor_pwm(&motor_pwm);      /* To comment if want to debug remocon calibration switching off the motors */
 8003ab0:	4810      	ldr	r0, [pc, #64]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003ab2:	f000 fb8b 	bl	80041cc <set_motor_pwm>
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	2000067c 	.word	0x2000067c
 8003ac4:	20000774 	.word	0x20000774
 8003ac8:	20000cf4 	.word	0x20000cf4
 8003acc:	20000848 	.word	0x20000848
 8003ad0:	2000083c 	.word	0x2000083c
 8003ad4:	379268a9 	.word	0x379268a9
 8003ad8:	20000a50 	.word	0x20000a50
 8003adc:	20000da4 	.word	0x20000da4
 8003ae0:	3aa3d70a 	.word	0x3aa3d70a
 8003ae4:	20000de2 	.word	0x20000de2
 8003ae8:	20000acc 	.word	0x20000acc
 8003aec:	20000de6 	.word	0x20000de6
 8003af0:	200001c8 	.word	0x200001c8
 8003af4:	200009a4 	.word	0x200009a4
 8003af8:	200006b8 	.word	0x200006b8
 8003afc:	20000654 	.word	0x20000654
 8003b00:	200008e8 	.word	0x200008e8

08003b04 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10d      	bne.n	8003b30 <BSP_LED_Init+0x2c>
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <BSP_LED_Init+0x80>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <BSP_LED_Init+0x80>)
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	6313      	str	r3, [r2, #48]	; 0x30
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <BSP_LED_Init+0x80>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10d      	bne.n	8003b52 <BSP_LED_Init+0x4e>
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <BSP_LED_Init+0x80>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <BSP_LED_Init+0x80>)
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <BSP_LED_Init+0x80>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	4a0c      	ldr	r2, [pc, #48]	; (8003b88 <BSP_LED_Init+0x84>)
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003b64:	2302      	movs	r3, #2
 8003b66:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <BSP_LED_Init+0x88>)
 8003b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b70:	f107 0214 	add.w	r2, r7, #20
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f006 f9ec 	bl	8009f54 <HAL_GPIO_Init>
}
 8003b7c:	bf00      	nop
 8003b7e:	3728      	adds	r7, #40	; 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	080119e4 	.word	0x080119e4
 8003b8c:	20000018 	.word	0x20000018

08003b90 <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <BSP_LED_On+0x2c>)
 8003b9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <BSP_LED_On+0x30>)
 8003ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2200      	movs	r2, #0
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f006 fc50 	bl	800a454 <HAL_GPIO_WritePin>
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000018 	.word	0x20000018
 8003bc0:	080119e4 	.word	0x080119e4

08003bc4 <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <BSP_LED_Off+0x2c>)
 8003bd2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	4a06      	ldr	r2, [pc, #24]	; (8003bf4 <BSP_LED_Off+0x30>)
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2201      	movs	r2, #1
 8003be2:	4619      	mov	r1, r3
 8003be4:	f006 fc36 	bl	800a454 <HAL_GPIO_WritePin>
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000018 	.word	0x20000018
 8003bf4:	080119e4 	.word	0x080119e4

08003bf8 <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <BSP_LED_Toggle+0x2c>)
 8003c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	4906      	ldr	r1, [pc, #24]	; (8003c28 <BSP_LED_Toggle+0x30>)
 8003c0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f006 fc35 	bl	800a486 <HAL_GPIO_TogglePin>

}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000018 	.word	0x20000018
 8003c28:	080119e4 	.word	0x080119e4

08003c2c <BlueNRG_Init>:
}*/



void BlueNRG_Init(void)
{
 8003c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2e:	b08f      	sub	sp, #60	; 0x3c
 8003c30:	af08      	add	r7, sp, #32

  int ret = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	617b      	str	r3, [r7, #20]
  uint8_t  hwVersion=0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	74fb      	strb	r3, [r7, #19]
  uint16_t fwVersion=0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	823b      	strh	r3, [r7, #16]

  PRINTF("****** START BLE TESTS ******\r\n");
 8003c3e:	4883      	ldr	r0, [pc, #524]	; (8003e4c <BlueNRG_Init+0x220>)
 8003c40:	f7fd fd74 	bl	800172c <myprintf>
  BNRG_SPI_Init();
 8003c44:	f002 fcfe 	bl	8006644 <BNRG_SPI_Init>
  /* Commented on Jan 15, 2020 */
  //for(i=0;i<6;i++)
  //  bdaddr[i] = tmp_bdaddr[i];

  /* Added on Jan 15, 2020 */
  bdaddr[0] = (STM32_UUID[1]>>24)&0xFF;
 8003c48:	4b81      	ldr	r3, [pc, #516]	; (8003e50 <BlueNRG_Init+0x224>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	4b80      	ldr	r3, [pc, #512]	; (8003e54 <BlueNRG_Init+0x228>)
 8003c52:	701a      	strb	r2, [r3, #0]
  bdaddr[1] = (STM32_UUID[0]    )&0xFF;
 8003c54:	4b80      	ldr	r3, [pc, #512]	; (8003e58 <BlueNRG_Init+0x22c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4b7e      	ldr	r3, [pc, #504]	; (8003e54 <BlueNRG_Init+0x228>)
 8003c5c:	705a      	strb	r2, [r3, #1]
  bdaddr[2] = (STM32_UUID[2] >>8)&0xFF;
 8003c5e:	4b7f      	ldr	r3, [pc, #508]	; (8003e5c <BlueNRG_Init+0x230>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4b7b      	ldr	r3, [pc, #492]	; (8003e54 <BlueNRG_Init+0x228>)
 8003c68:	709a      	strb	r2, [r3, #2]
  bdaddr[3] = (STM32_UUID[0]>>16)&0xFF;
 8003c6a:	4b7b      	ldr	r3, [pc, #492]	; (8003e58 <BlueNRG_Init+0x22c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b78      	ldr	r3, [pc, #480]	; (8003e54 <BlueNRG_Init+0x228>)
 8003c74:	70da      	strb	r2, [r3, #3]
  bdaddr[4] = (hwVersion > 0x30) ?
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	2b30      	cmp	r3, #48	; 0x30
 8003c7a:	d901      	bls.n	8003c80 <BlueNRG_Init+0x54>
 8003c7c:	228c      	movs	r2, #140	; 0x8c
 8003c7e:	e000      	b.n	8003c82 <BlueNRG_Init+0x56>
 8003c80:	2228      	movs	r2, #40	; 0x28
 8003c82:	4b74      	ldr	r3, [pc, #464]	; (8003e54 <BlueNRG_Init+0x228>)
 8003c84:	711a      	strb	r2, [r3, #4]
            ((((0x34-48)*10) + (0x30-48)+100)&0xFF) :
            ((((0x34-48)*10) + (0x30-48)    )&0xFF) ;
  bdaddr[5] = 0xC0; /* for a Legal BLE Random MAC */
 8003c86:	4b73      	ldr	r3, [pc, #460]	; (8003e54 <BlueNRG_Init+0x228>)
 8003c88:	22c0      	movs	r2, #192	; 0xc0
 8003c8a:	715a      	strb	r2, [r3, #5]

  /* Initialize the BlueNRG HCI */
  HCI_Init();
 8003c8c:	f00a feb2 	bl	800e9f4 <HCI_Init>

 /* Reset BlueNRG hardware */
  BlueNRG_RST();
 8003c90:	f002 fd0a 	bl	80066a8 <BlueNRG_RST>

  /* get the BlueNRG HW and FW versions */
  PRINTF("\r\nReading BlueNRG version ...\r\n");
 8003c94:	4872      	ldr	r0, [pc, #456]	; (8003e60 <BlueNRG_Init+0x234>)
 8003c96:	f7fd fd49 	bl	800172c <myprintf>
  if (getBlueNRGVersion(&hwVersion, &fwVersion)== BLE_STATUS_SUCCESS)
 8003c9a:	f107 0210 	add.w	r2, r7, #16
 8003c9e:	f107 0313 	add.w	r3, r7, #19
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f00a fe57 	bl	800e958 <getBlueNRGVersion>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f040 80bc 	bne.w	8003e2a <BlueNRG_Init+0x1fe>
  {

    /*
     * Reset BlueNRG again otherwise it will fail.
     */
    BlueNRG_RST();
 8003cb2:	f002 fcf9 	bl	80066a8 <BlueNRG_RST>
    //  testStatus = COMPONENT_ERROR;
    //  PRINTF("\r\nSetting Pubblic BD_ADDR failed *****\r\n");
    //  goto fail;
    //}

    PRINTF("GATT Initializzation...\r\n");
 8003cb6:	486b      	ldr	r0, [pc, #428]	; (8003e64 <BlueNRG_Init+0x238>)
 8003cb8:	f7fd fd38 	bl	800172c <myprintf>
    ret = aci_gatt_init();
 8003cbc:	f00a fb90 	bl	800e3e0 <aci_gatt_init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	617b      	str	r3, [r7, #20]
    if(ret){
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <BlueNRG_Init+0xac>
      testStatus = COMPONENT_ERROR;
 8003cca:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <BlueNRG_Init+0x23c>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
      PRINTF("\r\nGATT_Init failed ****\r\n");
 8003cd0:	4866      	ldr	r0, [pc, #408]	; (8003e6c <BlueNRG_Init+0x240>)
 8003cd2:	f7fd fd2b 	bl	800172c <myprintf>
      goto fail;
 8003cd6:	e0b2      	b.n	8003e3e <BlueNRG_Init+0x212>
//       PRINTF("\r\naci_gatt_update_char_value failed\r\n");
//      while(1);
//    }

    /* Set the GAP INIT like X-NUCLEO-IDB05A1 eval board  since using same SPBTLE_RF module*/
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8003cd8:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <BlueNRG_Init+0x244>)
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <BlueNRG_Init+0x248>)
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	4b65      	ldr	r3, [pc, #404]	; (8003e78 <BlueNRG_Init+0x24c>)
 8003ce2:	2207      	movs	r2, #7
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f00a f98c 	bl	800e004 <aci_gap_init_IDB05A1>
 8003cec:	4603      	mov	r3, r0
 8003cee:	617b      	str	r3, [r7, #20]

    if(ret != BLE_STATUS_SUCCESS){
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <BlueNRG_Init+0xd2>
      PRINTF("\r\nGAP_Init failed\r\n");
 8003cf6:	4861      	ldr	r0, [pc, #388]	; (8003e7c <BlueNRG_Init+0x250>)
 8003cf8:	f7fd fd18 	bl	800172c <myprintf>
      goto fail;
 8003cfc:	e09f      	b.n	8003e3e <BlueNRG_Init+0x212>
    }

    // Added Jan 10th
    ret = hci_le_set_random_address(bdaddr);
 8003cfe:	4855      	ldr	r0, [pc, #340]	; (8003e54 <BlueNRG_Init+0x228>)
 8003d00:	f00b f989 	bl	800f016 <hci_le_set_random_address>
 8003d04:	6178      	str	r0, [r7, #20]
    // Added Jan 10th
    const char BoardName[7] = {NAME_BLUEMS};
 8003d06:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <BlueNRG_Init+0x254>)
 8003d08:	f107 0308 	add.w	r3, r7, #8
 8003d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d10:	6018      	str	r0, [r3, #0]
 8003d12:	3304      	adds	r3, #4
 8003d14:	8019      	strh	r1, [r3, #0]
 8003d16:	3302      	adds	r3, #2
 8003d18:	0c0a      	lsrs	r2, r1, #16
 8003d1a:	701a      	strb	r2, [r3, #0]
    // Added Jan 10th
    ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8003d1c:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <BlueNRG_Init+0x24c>)
 8003d1e:	8818      	ldrh	r0, [r3, #0]
 8003d20:	4b54      	ldr	r3, [pc, #336]	; (8003e74 <BlueNRG_Init+0x248>)
 8003d22:	8819      	ldrh	r1, [r3, #0]
 8003d24:	f107 0308 	add.w	r3, r7, #8
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2307      	movs	r3, #7
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f00a fcdb 	bl	800e6e8 <aci_gatt_update_char_value>
 8003d32:	4603      	mov	r3, r0
 8003d34:	617b      	str	r3, [r7, #20]
                                       7/*strlen(BoardName)*/, (uint8_t *)BoardName);

    PRINTF("GAP setting Authentication ....\r\n");
 8003d36:	4853      	ldr	r0, [pc, #332]	; (8003e84 <BlueNRG_Init+0x258>)
 8003d38:	f7fd fcf8 	bl	800172c <myprintf>
    ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	9303      	str	r3, [sp, #12]
 8003d40:	4b51      	ldr	r3, [pc, #324]	; (8003e88 <BlueNRG_Init+0x25c>)
 8003d42:	9302      	str	r3, [sp, #8]
 8003d44:	2300      	movs	r3, #0
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	2310      	movs	r3, #16
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2307      	movs	r3, #7
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2100      	movs	r1, #0
 8003d52:	2001      	movs	r0, #1
 8003d54:	f00a faa1 	bl	800e29a <aci_gap_set_auth_requirement>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	617b      	str	r3, [r7, #20]
                                       OOB_AUTH_DATA_ABSENT,
                                       NULL, 7, 16,
                                       USE_FIXED_PIN_FOR_PAIRING, 123456,
                                       BONDING);
    if (ret != BLE_STATUS_SUCCESS) {
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d006      	beq.n	8003d70 <BlueNRG_Init+0x144>
      testStatus = COMPONENT_ERROR;
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <BlueNRG_Init+0x23c>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
       PRINTF("\r\nGAP setting Authentication failed ******\r\n");
 8003d68:	4848      	ldr	r0, [pc, #288]	; (8003e8c <BlueNRG_Init+0x260>)
 8003d6a:	f7fd fcdf 	bl	800172c <myprintf>
       goto fail;
 8003d6e:	e066      	b.n	8003e3e <BlueNRG_Init+0x212>
    }

    PRINTF("SERVER: BLE Stack Initialized \r\n"
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	469c      	mov	ip, r3
 8003d74:	8a3b      	ldrh	r3, [r7, #16]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	469e      	mov	lr, r3
 8003d7c:	8a3b      	ldrh	r3, [r7, #16]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	2b30      	cmp	r3, #48	; 0x30
 8003d8a:	d904      	bls.n	8003d96 <BlueNRG_Init+0x16a>
 8003d8c:	8a3b      	ldrh	r3, [r7, #16]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	3360      	adds	r3, #96	; 0x60
 8003d94:	e000      	b.n	8003d98 <BlueNRG_Init+0x16c>
 8003d96:	2361      	movs	r3, #97	; 0x61
 8003d98:	492e      	ldr	r1, [pc, #184]	; (8003e54 <BlueNRG_Init+0x228>)
 8003d9a:	7949      	ldrb	r1, [r1, #5]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	492d      	ldr	r1, [pc, #180]	; (8003e54 <BlueNRG_Init+0x228>)
 8003da0:	7909      	ldrb	r1, [r1, #4]
 8003da2:	460c      	mov	r4, r1
 8003da4:	492b      	ldr	r1, [pc, #172]	; (8003e54 <BlueNRG_Init+0x228>)
 8003da6:	78c9      	ldrb	r1, [r1, #3]
 8003da8:	460d      	mov	r5, r1
 8003daa:	492a      	ldr	r1, [pc, #168]	; (8003e54 <BlueNRG_Init+0x228>)
 8003dac:	7889      	ldrb	r1, [r1, #2]
 8003dae:	460e      	mov	r6, r1
 8003db0:	4928      	ldr	r1, [pc, #160]	; (8003e54 <BlueNRG_Init+0x228>)
 8003db2:	7849      	ldrb	r1, [r1, #1]
 8003db4:	6079      	str	r1, [r7, #4]
 8003db6:	4927      	ldr	r1, [pc, #156]	; (8003e54 <BlueNRG_Init+0x228>)
 8003db8:	7809      	ldrb	r1, [r1, #0]
 8003dba:	9106      	str	r1, [sp, #24]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	9105      	str	r1, [sp, #20]
 8003dc0:	9604      	str	r6, [sp, #16]
 8003dc2:	9503      	str	r5, [sp, #12]
 8003dc4:	9402      	str	r4, [sp, #8]
 8003dc6:	9001      	str	r0, [sp, #4]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	4672      	mov	r2, lr
 8003dce:	4661      	mov	r1, ip
 8003dd0:	482f      	ldr	r0, [pc, #188]	; (8003e90 <BlueNRG_Init+0x264>)
 8003dd2:	f7fd fcab 	bl	800172c <myprintf>
           (fwVersion>>4)&0xF,
           (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a',
           bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);

    /* Set output power level */
    aci_hal_set_tx_power_level(1,4);    /* -2.1dBm */
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f00a fd4a 	bl	800e872 <aci_hal_set_tx_power_level>

    ret = Add_ConsoleW2ST_Service();
 8003dde:	f000 fdc9 	bl	8004974 <Add_ConsoleW2ST_Service>
 8003de2:	4603      	mov	r3, r0
 8003de4:	617b      	str	r3, [r7, #20]
    if(ret == BLE_STATUS_SUCCESS)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <BlueNRG_Init+0x1c8>
       PRINTF("Console Service W2ST added successfully\r\n");
 8003dec:	4829      	ldr	r0, [pc, #164]	; (8003e94 <BlueNRG_Init+0x268>)
 8003dee:	f7fd fc9d 	bl	800172c <myprintf>
 8003df2:	e005      	b.n	8003e00 <BlueNRG_Init+0x1d4>
    else{
       testStatus = COMPONENT_ERROR;
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <BlueNRG_Init+0x23c>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
       PRINTF("\r\nError while adding Console Service W2ST\r\n");
 8003dfa:	4827      	ldr	r0, [pc, #156]	; (8003e98 <BlueNRG_Init+0x26c>)
 8003dfc:	f7fd fc96 	bl	800172c <myprintf>
    }

    ret = Add_ConfigW2ST_Service();
 8003e00:	f000 fd42 	bl	8004888 <Add_ConfigW2ST_Service>
 8003e04:	4603      	mov	r3, r0
 8003e06:	617b      	str	r3, [r7, #20]
    if(ret == BLE_STATUS_SUCCESS)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <BlueNRG_Init+0x1ea>
       PRINTF("Config  Service W2ST added successfully\r\n");
 8003e0e:	4823      	ldr	r0, [pc, #140]	; (8003e9c <BlueNRG_Init+0x270>)
 8003e10:	f7fd fc8c 	bl	800172c <myprintf>
 8003e14:	e005      	b.n	8003e22 <BlueNRG_Init+0x1f6>
    else{
       testStatus = COMPONENT_ERROR;
 8003e16:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <BlueNRG_Init+0x23c>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
       PRINTF("\r\nError while adding Config Service W2ST\r\n");
 8003e1c:	4820      	ldr	r0, [pc, #128]	; (8003ea0 <BlueNRG_Init+0x274>)
 8003e1e:	f7fd fc85 	bl	800172c <myprintf>
    }

    PRINTF("\r\nAll test passed!\r\n");
 8003e22:	4820      	ldr	r0, [pc, #128]	; (8003ea4 <BlueNRG_Init+0x278>)
 8003e24:	f7fd fc82 	bl	800172c <myprintf>
 8003e28:	e005      	b.n	8003e36 <BlueNRG_Init+0x20a>
  }
  else {
       testStatus = COMPONENT_ERROR;
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <BlueNRG_Init+0x23c>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
       PRINTF("\r\nError in BlueNRG tests. ******\r\n");
 8003e30:	481d      	ldr	r0, [pc, #116]	; (8003ea8 <BlueNRG_Init+0x27c>)
 8003e32:	f7fd fc7b 	bl	800172c <myprintf>
  }
  PRINTF("****** END BLE TESTS ******\r\n");
 8003e36:	481d      	ldr	r0, [pc, #116]	; (8003eac <BlueNRG_Init+0x280>)
 8003e38:	f7fd fc78 	bl	800172c <myprintf>
  return;
 8003e3c:	e003      	b.n	8003e46 <BlueNRG_Init+0x21a>

fail:
  testStatus = COMPONENT_ERROR;
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <BlueNRG_Init+0x23c>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
  return;
 8003e44:	bf00      	nop
}
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4c:	08011408 	.word	0x08011408
 8003e50:	1fff7a14 	.word	0x1fff7a14
 8003e54:	200007e0 	.word	0x200007e0
 8003e58:	1fff7a10 	.word	0x1fff7a10
 8003e5c:	1fff7a18 	.word	0x1fff7a18
 8003e60:	08011428 	.word	0x08011428
 8003e64:	08011448 	.word	0x08011448
 8003e68:	200001e0 	.word	0x200001e0
 8003e6c:	08011464 	.word	0x08011464
 8003e70:	20000728 	.word	0x20000728
 8003e74:	20000a40 	.word	0x20000a40
 8003e78:	20000d30 	.word	0x20000d30
 8003e7c:	08011480 	.word	0x08011480
 8003e80:	08011654 	.word	0x08011654
 8003e84:	08011494 	.word	0x08011494
 8003e88:	0001e240 	.word	0x0001e240
 8003e8c:	080114b8 	.word	0x080114b8
 8003e90:	080114e8 	.word	0x080114e8
 8003e94:	08011548 	.word	0x08011548
 8003e98:	08011574 	.word	0x08011574
 8003e9c:	080115a0 	.word	0x080115a0
 8003ea0:	080115cc 	.word	0x080115cc
 8003ea4:	080115f8 	.word	0x080115f8
 8003ea8:	08011610 	.word	0x08011610
 8003eac:	08011634 	.word	0x08011634

08003eb0 <Init_BlueNRG_Custom_Services>:
/** @brief Initialize all the Custom BlueNRG services
 * @param None
 * @retval None
 */
static void Init_BlueNRG_Custom_Services(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
  int ret;

  ret = Add_HWServW2ST_Service();
 8003eb6:	f000 ff0b 	bl	8004cd0 <Add_HWServW2ST_Service>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	607b      	str	r3, [r7, #4]
  if(ret == BLE_STATUS_SUCCESS) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d103      	bne.n	8003ecc <Init_BlueNRG_Custom_Services+0x1c>
     PRINTF("HW      Service W2ST added successfully\r\n");
 8003ec4:	4813      	ldr	r0, [pc, #76]	; (8003f14 <Init_BlueNRG_Custom_Services+0x64>)
 8003ec6:	f7fd fc31 	bl	800172c <myprintf>
 8003eca:	e002      	b.n	8003ed2 <Init_BlueNRG_Custom_Services+0x22>
  } else {
     PRINTF("\r\nError while adding HW Service W2ST\r\n");
 8003ecc:	4812      	ldr	r0, [pc, #72]	; (8003f18 <Init_BlueNRG_Custom_Services+0x68>)
 8003ece:	f7fd fc2d 	bl	800172c <myprintf>
  }

  ret = Add_ConsoleW2ST_Service();
 8003ed2:	f000 fd4f 	bl	8004974 <Add_ConsoleW2ST_Service>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	607b      	str	r3, [r7, #4]
  if(ret == BLE_STATUS_SUCCESS) {
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <Init_BlueNRG_Custom_Services+0x38>
     PRINTF("Console Service W2ST added successfully\r\n");
 8003ee0:	480e      	ldr	r0, [pc, #56]	; (8003f1c <Init_BlueNRG_Custom_Services+0x6c>)
 8003ee2:	f7fd fc23 	bl	800172c <myprintf>
 8003ee6:	e002      	b.n	8003eee <Init_BlueNRG_Custom_Services+0x3e>
  } else {
     PRINTF("\r\nError while adding Console Service W2ST\r\n");
 8003ee8:	480d      	ldr	r0, [pc, #52]	; (8003f20 <Init_BlueNRG_Custom_Services+0x70>)
 8003eea:	f7fd fc1f 	bl	800172c <myprintf>
  }

  ret = Add_ConfigW2ST_Service();
 8003eee:	f000 fccb 	bl	8004888 <Add_ConfigW2ST_Service>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	607b      	str	r3, [r7, #4]
  if(ret == BLE_STATUS_SUCCESS) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <Init_BlueNRG_Custom_Services+0x54>
     PRINTF("Config  Service W2ST added successfully\r\n");
 8003efc:	4809      	ldr	r0, [pc, #36]	; (8003f24 <Init_BlueNRG_Custom_Services+0x74>)
 8003efe:	f7fd fc15 	bl	800172c <myprintf>
  } else {
     PRINTF("\r\nError while adding Config Service W2ST\r\n");
  }
}
 8003f02:	e002      	b.n	8003f0a <Init_BlueNRG_Custom_Services+0x5a>
     PRINTF("\r\nError while adding Config Service W2ST\r\n");
 8003f04:	4808      	ldr	r0, [pc, #32]	; (8003f28 <Init_BlueNRG_Custom_Services+0x78>)
 8003f06:	f7fd fc11 	bl	800172c <myprintf>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	0801165c 	.word	0x0801165c
 8003f18:	08011688 	.word	0x08011688
 8003f1c:	08011548 	.word	0x08011548
 8003f20:	08011574 	.word	0x08011574
 8003f24:	080115a0 	.word	0x080115a0
 8003f28:	080115cc 	.word	0x080115cc

08003f2c <SendMotionData>:
  * @brief  Send Motion Data Acc/Mag/Gyro to BLE
  * @param  None
  * @retval None
  */
static void SendMotionData(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
  AxesRaw_TypeDef ACC_Value;
  AxesRaw_TypeDef GYR_Value;



  ACC_Value.AXIS_X = acc.AXIS_X;
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <SendMotionData+0x40>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]
  ACC_Value.AXIS_Y = acc.AXIS_Y;
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <SendMotionData+0x40>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]
  ACC_Value.AXIS_Z = acc.AXIS_Z;
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <SendMotionData+0x40>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	617b      	str	r3, [r7, #20]
  GYR_Value.AXIS_X = gyro.AXIS_X;
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <SendMotionData+0x44>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	603b      	str	r3, [r7, #0]
  GYR_Value.AXIS_Y = gyro.AXIS_Y;
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <SendMotionData+0x44>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	607b      	str	r3, [r7, #4]
  GYR_Value.AXIS_Z = gyro.AXIS_Z;
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <SendMotionData+0x44>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	60bb      	str	r3, [r7, #8]
  /*Debug */
  //PRINTF("ACC[X, Y, Z]: %d\t%d\t%d\t\r\n", ACC_Value.AXIS_X, ACC_Value.AXIS_Y, ACC_Value.AXIS_Z);
  //PRINTF("GYRO[X, Y, Z]: %d\t%d\t%d\t\r", GYR_Value.AXIS_X, GYR_Value.AXIS_Y, GYR_Value.AXIS_Z);
  //PRINTF("MAG[X, Y, Z]: %d\t%d\t%d\t\n", MAG_Value.AXIS_X, MAG_Value.AXIS_Y, MAG_Value.AXIS_Z);

  AccGyroMag_Update(&ACC_Value, &GYR_Value, &GYR_Value);
 8003f56:	463a      	mov	r2, r7
 8003f58:	4639      	mov	r1, r7
 8003f5a:	f107 030c 	add.w	r3, r7, #12
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 f84c 	bl	8004ffc <AccGyroMag_Update>

}
 8003f64:	bf00      	nop
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000648 	.word	0x20000648
 8003f70:	20000994 	.word	0x20000994
 8003f74:	00000000 	.word	0x00000000

08003f78 <SendBattEnvData>:

static void SendBattEnvData(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
   int32_t decPart, intPart;
   int32_t PressToSend=0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
   uint16_t BattToSend=0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	82fb      	strh	r3, [r7, #22]
   int16_t RSSIToSend=0, TempToSend=0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	81fb      	strh	r3, [r7, #14]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	81bb      	strh	r3, [r7, #12]
   int8_t rssi;
   uint16_t conn_handle;

   HAL_ADC_Start(&hadc1);
 8003f8e:	487a      	ldr	r0, [pc, #488]	; (8004178 <SendBattEnvData+0x200>)
 8003f90:	f005 fa6c 	bl	800946c <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8003f94:	4979      	ldr	r1, [pc, #484]	; (800417c <SendBattEnvData+0x204>)
 8003f96:	4878      	ldr	r0, [pc, #480]	; (8004178 <SendBattEnvData+0x200>)
 8003f98:	f005 fb4f 	bl	800963a <HAL_ADC_PollForConversion>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d133      	bne.n	800400a <SendBattEnvData+0x92>
        {
            VBAT_Sense = HAL_ADC_GetValue(&hadc1);
 8003fa2:	4875      	ldr	r0, [pc, #468]	; (8004178 <SendBattEnvData+0x200>)
 8003fa4:	f005 fbd4 	bl	8009750 <HAL_ADC_GetValue>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	4a75      	ldr	r2, [pc, #468]	; (8004180 <SendBattEnvData+0x208>)
 8003fac:	6013      	str	r3, [r2, #0]
            VBAT = (((VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW;
 8003fae:	4b74      	ldr	r3, [pc, #464]	; (8004180 <SendBattEnvData+0x208>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc faa6 	bl	8000504 <__aeabi_ui2d>
 8003fb8:	a36b      	add	r3, pc, #428	; (adr r3, 8004168 <SendBattEnvData+0x1f0>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f7fc fb1b 	bl	80005f8 <__aeabi_dmul>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	a369      	add	r3, pc, #420	; (adr r3, 8004170 <SendBattEnvData+0x1f8>)
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f7fc fc3c 	bl	800084c <__aeabi_ddiv>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	4b68      	ldr	r3, [pc, #416]	; (8004184 <SendBattEnvData+0x20c>)
 8003fe2:	f7fc fb09 	bl	80005f8 <__aeabi_dmul>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4610      	mov	r0, r2
 8003fec:	4619      	mov	r1, r3
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <SendBattEnvData+0x210>)
 8003ff4:	f7fc fc2a 	bl	800084c <__aeabi_ddiv>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	f7fc fdaa 	bl	8000b58 <__aeabi_d2f>
 8004004:	4603      	mov	r3, r0
 8004006:	4a61      	ldr	r2, [pc, #388]	; (800418c <SendBattEnvData+0x214>)
 8004008:	6013      	str	r3, [r2, #0]
            //PRINTF("Battery voltage = %fV\n\n", VBAT);
        }
    HAL_ADC_Stop(&hadc1);
 800400a:	485b      	ldr	r0, [pc, #364]	; (8004178 <SendBattEnvData+0x200>)
 800400c:	f005 fae2 	bl	80095d4 <HAL_ADC_Stop>

    // Pressure to Send
    MCR_BLUEMS_F2I_2D(press, intPart, decPart);
 8004010:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <SendBattEnvData+0x218>)
 8004012:	edd3 7a00 	vldr	s15, [r3]
 8004016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800401a:	ee17 3a90 	vmov	r3, s15
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <SendBattEnvData+0x218>)
 8004022:	ed93 7a00 	vldr	s14, [r3]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004034:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004194 <SendBattEnvData+0x21c>
 8004038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800403c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004040:	ee17 3a90 	vmov	r3, s15
 8004044:	607b      	str	r3, [r7, #4]
    PressToSend=intPart*100+decPart;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2264      	movs	r2, #100	; 0x64
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

    // Battery to Send
    VBAT = ((VBAT - 3.7f)*100.0f)/(4.2f-3.7f);
 8004054:	4b4d      	ldr	r3, [pc, #308]	; (800418c <SendBattEnvData+0x214>)
 8004056:	edd3 7a00 	vldr	s15, [r3]
 800405a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004198 <SendBattEnvData+0x220>
 800405e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004062:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004194 <SendBattEnvData+0x21c>
 8004066:	ee27 7a87 	vmul.f32	s14, s15, s14
 800406a:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800419c <SendBattEnvData+0x224>
 800406e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004072:	4b46      	ldr	r3, [pc, #280]	; (800418c <SendBattEnvData+0x214>)
 8004074:	edc3 7a00 	vstr	s15, [r3]
    if (VBAT < 0) VBAT = 0;
 8004078:	4b44      	ldr	r3, [pc, #272]	; (800418c <SendBattEnvData+0x214>)
 800407a:	edd3 7a00 	vldr	s15, [r3]
 800407e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004086:	d503      	bpl.n	8004090 <SendBattEnvData+0x118>
 8004088:	4b40      	ldr	r3, [pc, #256]	; (800418c <SendBattEnvData+0x214>)
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
    MCR_BLUEMS_F2I_1D((int32_t)VBAT, intPart, decPart);
 8004090:	4b3e      	ldr	r3, [pc, #248]	; (800418c <SendBattEnvData+0x214>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800409a:	ee17 3a90 	vmov	r3, s15
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	4b3a      	ldr	r3, [pc, #232]	; (800418c <SendBattEnvData+0x214>)
 80040a2:	edd3 7a00 	vldr	s15, [r3]
 80040a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040aa:	ee17 2a90 	vmov	r2, s15
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	1ad2      	subs	r2, r2, r3
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	607b      	str	r3, [r7, #4]
    BattToSend = intPart*10+decPart;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	0092      	lsls	r2, r2, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	82fb      	strh	r3, [r7, #22]
    if (BattToSend > 1000){
 80040d2:	8afb      	ldrh	r3, [r7, #22]
 80040d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040d8:	d902      	bls.n	80040e0 <SendBattEnvData+0x168>
      BattToSend =1000;
 80040da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040de:	82fb      	strh	r3, [r7, #22]
    }

    // Temperature to Send
    MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 80040e0:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <SendBattEnvData+0x228>)
 80040e2:	edd3 7a00 	vldr	s15, [r3]
 80040e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ea:	ee17 3a90 	vmov	r3, s15
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <SendBattEnvData+0x228>)
 80040f2:	ed93 7a00 	vldr	s14, [r3]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004104:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800410c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004110:	ee17 3a90 	vmov	r3, s15
 8004114:	607b      	str	r3, [r7, #4]
    TempToSend = intPart*10+decPart;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	0092      	lsls	r2, r2, #2
 800411e:	4413      	add	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	b29b      	uxth	r3, r3
 8004128:	4413      	add	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	81bb      	strh	r3, [r7, #12]

    // RSSI to send
    hci_read_rssi(&conn_handle, &rssi);
 800412e:	1cfa      	adds	r2, r7, #3
 8004130:	463b      	mov	r3, r7
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f00a ffa5 	bl	800f084 <hci_read_rssi>
    RSSIToSend = (int16_t)rssi*10;
 800413a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800413e:	b29b      	uxth	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	0092      	lsls	r2, r2, #2
 8004144:	4413      	add	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	b29b      	uxth	r3, r3
 800414a:	81fb      	strh	r3, [r7, #14]

    Batt_Env_RSSI_Update(PressToSend,BattToSend,(int16_t) TempToSend,RSSIToSend );
 800414c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004150:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004154:	8af9      	ldrh	r1, [r7, #22]
 8004156:	6938      	ldr	r0, [r7, #16]
 8004158:	f001 f816 	bl	8005188 <Batt_Env_RSSI_Update>

}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	f3af 8000 	nop.w
 8004168:	66666666 	.word	0x66666666
 800416c:	400a6666 	.word	0x400a6666
 8004170:	00000000 	.word	0x00000000
 8004174:	40affe00 	.word	0x40affe00
 8004178:	20000930 	.word	0x20000930
 800417c:	000f4240 	.word	0x000f4240
 8004180:	200008f4 	.word	0x200008f4
 8004184:	403e0000 	.word	0x403e0000
 8004188:	40340000 	.word	0x40340000
 800418c:	200001f4 	.word	0x200001f4
 8004190:	20000ae4 	.word	0x20000ae4
 8004194:	42c80000 	.word	0x42c80000
 8004198:	406ccccd 	.word	0x406ccccd
 800419c:	3efffff8 	.word	0x3efffff8
 80041a0:	2000089c 	.word	0x2000089c

080041a4 <SendArmingData>:


static void SendArmingData(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
   ARMING_Update(rc_enable_motor);
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <SendArmingData+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 f8a6 	bl	8005300 <ARMING_Update>
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200001c8 	.word	0x200001c8

080041bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <set_motor_pwm>:
/*
 * Setup the driving power for 4 motors. p1~p4 data range is 0~1999, which equals
 * to 0~100% duty cycle (for DC motor configuration)
 */
void set_motor_pwm(MotorControlTypeDef *motor_pwm)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  if (motor_pwm->motor1_pwm >= MOTOR_MAX_PWM_VALUE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	edd3 7a00 	vldr	s15, [r3]
 80041da:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004318 <set_motor_pwm+0x14c>
 80041de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e6:	db05      	blt.n	80041f4 <set_motor_pwm+0x28>
    htim4.Instance->CCR1 = MOTOR_MAX_PWM_VALUE;
 80041e8:	4b4c      	ldr	r3, [pc, #304]	; (800431c <set_motor_pwm+0x150>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f240 726c 	movw	r2, #1900	; 0x76c
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34
 80041f2:	e016      	b.n	8004222 <set_motor_pwm+0x56>
  else if (motor_pwm->motor1_pwm <= MOTOR_MIN_PWM_VALUE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004202:	d804      	bhi.n	800420e <set_motor_pwm+0x42>
    htim4.Instance->CCR1 = MOTOR_MIN_PWM_VALUE;
 8004204:	4b45      	ldr	r3, [pc, #276]	; (800431c <set_motor_pwm+0x150>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2200      	movs	r2, #0
 800420a:	635a      	str	r2, [r3, #52]	; 0x34
 800420c:	e009      	b.n	8004222 <set_motor_pwm+0x56>
  else
    htim4.Instance->CCR1 = (uint32_t) motor_pwm->motor1_pwm; 
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	edd3 7a00 	vldr	s15, [r3]
 8004214:	4b41      	ldr	r3, [pc, #260]	; (800431c <set_motor_pwm+0x150>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421c:	ee17 2a90 	vmov	r2, s15
 8004220:	635a      	str	r2, [r3, #52]	; 0x34
  
  if (motor_pwm->motor2_pwm >= MOTOR_MAX_PWM_VALUE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	edd3 7a01 	vldr	s15, [r3, #4]
 8004228:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004318 <set_motor_pwm+0x14c>
 800422c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	db05      	blt.n	8004242 <set_motor_pwm+0x76>
    htim4.Instance->CCR2 = MOTOR_MAX_PWM_VALUE;
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <set_motor_pwm+0x150>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f240 726c 	movw	r2, #1900	; 0x76c
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
 8004240:	e016      	b.n	8004270 <set_motor_pwm+0xa4>
  else if (motor_pwm->motor2_pwm <= MOTOR_MIN_PWM_VALUE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	edd3 7a01 	vldr	s15, [r3, #4]
 8004248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d804      	bhi.n	800425c <set_motor_pwm+0x90>
    htim4.Instance->CCR2 = MOTOR_MIN_PWM_VALUE;
 8004252:	4b32      	ldr	r3, [pc, #200]	; (800431c <set_motor_pwm+0x150>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
 800425a:	e009      	b.n	8004270 <set_motor_pwm+0xa4>
  else
    htim4.Instance->CCR2 = (uint32_t) motor_pwm->motor2_pwm;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004262:	4b2e      	ldr	r3, [pc, #184]	; (800431c <set_motor_pwm+0x150>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426a:	ee17 2a90 	vmov	r2, s15
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (motor_pwm->motor3_pwm >= MOTOR_MAX_PWM_VALUE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	edd3 7a02 	vldr	s15, [r3, #8]
 8004276:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004318 <set_motor_pwm+0x14c>
 800427a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004282:	db05      	blt.n	8004290 <set_motor_pwm+0xc4>
    htim4.Instance->CCR3 = MOTOR_MAX_PWM_VALUE;
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <set_motor_pwm+0x150>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f240 726c 	movw	r2, #1900	; 0x76c
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c
 800428e:	e016      	b.n	80042be <set_motor_pwm+0xf2>
  else if (motor_pwm->motor3_pwm <= MOTOR_MIN_PWM_VALUE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	edd3 7a02 	vldr	s15, [r3, #8]
 8004296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429e:	d804      	bhi.n	80042aa <set_motor_pwm+0xde>
    htim4.Instance->CCR3 = MOTOR_MIN_PWM_VALUE;
 80042a0:	4b1e      	ldr	r3, [pc, #120]	; (800431c <set_motor_pwm+0x150>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2200      	movs	r2, #0
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80042a8:	e009      	b.n	80042be <set_motor_pwm+0xf2>
  else
    htim4.Instance->CCR3 = (uint32_t) motor_pwm->motor3_pwm;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80042b0:	4b1a      	ldr	r3, [pc, #104]	; (800431c <set_motor_pwm+0x150>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b8:	ee17 2a90 	vmov	r2, s15
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c
  
  if (motor_pwm->motor4_pwm >= MOTOR_MAX_PWM_VALUE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80042c4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004318 <set_motor_pwm+0x14c>
 80042c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	db05      	blt.n	80042de <set_motor_pwm+0x112>
    htim4.Instance->CCR4 = MOTOR_MAX_PWM_VALUE;
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <set_motor_pwm+0x150>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f240 726c 	movw	r2, #1900	; 0x76c
 80042da:	641a      	str	r2, [r3, #64]	; 0x40
  else if (motor_pwm->motor4_pwm <= MOTOR_MIN_PWM_VALUE)
    htim4.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
  else
    htim4.Instance->CCR4 = (uint32_t) motor_pwm->motor4_pwm;
}
 80042dc:	e016      	b.n	800430c <set_motor_pwm+0x140>
  else if (motor_pwm->motor4_pwm <= MOTOR_MIN_PWM_VALUE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80042e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	d804      	bhi.n	80042f8 <set_motor_pwm+0x12c>
    htim4.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <set_motor_pwm+0x150>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042f6:	e009      	b.n	800430c <set_motor_pwm+0x140>
    htim4.Instance->CCR4 = (uint32_t) motor_pwm->motor4_pwm;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <set_motor_pwm+0x150>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 2a90 	vmov	r2, s15
 800430a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	44ed8000 	.word	0x44ed8000
 800431c:	2000072c 	.word	0x2000072c

08004320 <set_motor_pwm_zero>:


void set_motor_pwm_zero(MotorControlTypeDef *motor_pwm)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  motor_pwm->motor1_pwm = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
  motor_pwm->motor2_pwm = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	605a      	str	r2, [r3, #4]
  motor_pwm->motor3_pwm = 0;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  motor_pwm->motor4_pwm = 0;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	60da      	str	r2, [r3, #12]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <QuaternionToEuler>:

/*
 * Convert Quaternion to Euler Angle
 */
void QuaternionToEuler(QuaternionTypeDef *qr, EulerAngleTypeDef *ea)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b08e      	sub	sp, #56	; 0x38
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    float q0q0, q1q1, q2q2, q3q3;
    float dq0, dq1, dq2;
    float dq1q3, dq0q2/*, dq1q2*/;
    float dq0q1, dq2q3/*, dq0q3*/;

    q0q0 = qr->q0*qr->q0;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	ed93 7a00 	vldr	s14, [r3]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	edd3 7a00 	vldr	s15, [r3]
 800436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    q1q1 = qr->q1*qr->q1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	ed93 7a01 	vldr	s14, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	edd3 7a01 	vldr	s15, [r3, #4]
 800437e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004382:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    q2q2 = qr->q2*qr->q2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	ed93 7a02 	vldr	s14, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004396:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    q3q3 = qr->q3*qr->q3;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	ed93 7a03 	vldr	s14, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80043a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    dq0 = 2*qr->q0;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	edd3 7a00 	vldr	s15, [r3]
 80043b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    dq1 = 2*qr->q1;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	edd3 7a01 	vldr	s15, [r3, #4]
 80043c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043c6:	edc7 7a08 	vstr	s15, [r7, #32]
    dq2 = 2*qr->q2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80043d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043d4:	edc7 7a07 	vstr	s15, [r7, #28]
    //dq1q2 = dq1 * qr->q2;
    dq1q3 = dq1 * qr->q3;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	edd3 7a03 	vldr	s15, [r3, #12]
 80043de:	ed97 7a08 	vldr	s14, [r7, #32]
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	edc7 7a06 	vstr	s15, [r7, #24]
    dq0q2 = dq0 * qr->q2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80043f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f8:	edc7 7a05 	vstr	s15, [r7, #20]
    //dq0q3 = dq0 * qr->q3;
    dq0q1 = dq0 * qr->q1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004402:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440a:	edc7 7a04 	vstr	s15, [r7, #16]
    dq2q3 = dq2 * qr->q3;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	edd3 7a03 	vldr	s15, [r3, #12]
 8004414:	ed97 7a07 	vldr	s14, [r7, #28]
 8004418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441c:	edc7 7a03 	vstr	s15, [r7, #12]

    ea->thx = atan2(dq0q1+dq2q3, q0q0+q3q3-q1q1-q2q2);
 8004420:	ed97 7a04 	vldr	s14, [r7, #16]
 8004424:	edd7 7a03 	vldr	s15, [r7, #12]
 8004428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800442c:	ee17 0a90 	vmov	r0, s15
 8004430:	f7fc f88a 	bl	8000548 <__aeabi_f2d>
 8004434:	4604      	mov	r4, r0
 8004436:	460d      	mov	r5, r1
 8004438:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800443c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004444:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004448:	ee37 7a67 	vsub.f32	s14, s14, s15
 800444c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004454:	ee17 0a90 	vmov	r0, s15
 8004458:	f7fc f876 	bl	8000548 <__aeabi_f2d>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	ec43 2b11 	vmov	d1, r2, r3
 8004464:	ec45 4b10 	vmov	d0, r4, r5
 8004468:	f00c fa3c 	bl	80108e4 <atan2>
 800446c:	ec53 2b10 	vmov	r2, r3, d0
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f7fc fb70 	bl	8000b58 <__aeabi_d2f>
 8004478:	4602      	mov	r2, r0
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	601a      	str	r2, [r3, #0]
    ea->thy = asin(dq0q2-dq1q3);
 800447e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004482:	edd7 7a06 	vldr	s15, [r7, #24]
 8004486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800448a:	ee17 0a90 	vmov	r0, s15
 800448e:	f7fc f85b 	bl	8000548 <__aeabi_f2d>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	ec43 2b10 	vmov	d0, r2, r3
 800449a:	f00c f9e9 	bl	8010870 <asin>
 800449e:	ec53 2b10 	vmov	r2, r3, d0
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fc fb57 	bl	8000b58 <__aeabi_d2f>
 80044aa:	4602      	mov	r2, r0
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	605a      	str	r2, [r3, #4]
    
    

    //ea->thz = atan2(dq1q2+dq0q3, q0q0+q1q1-q2q2-q3q3);

}
 80044b0:	bf00      	nop
 80044b2:	3738      	adds	r7, #56	; 0x38
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bdb0      	pop	{r4, r5, r7, pc}

080044b8 <init_remote_control>:

// privite function
void init_rc_variables(void);

void init_remote_control(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  rc_connection_flag = 0;
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <init_remote_control+0x40>)
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
  rc_timeout = 1000;
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <init_remote_control+0x44>)
 80044c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044c8:	601a      	str	r2, [r3, #0]

  // Initial R/C global variables
  gAIL = 0;
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <init_remote_control+0x48>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	801a      	strh	r2, [r3, #0]
  gELE = 0;
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <init_remote_control+0x4c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	801a      	strh	r2, [r3, #0]
  gTHR = 0;
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <init_remote_control+0x50>)
 80044d8:	2200      	movs	r2, #0
 80044da:	801a      	strh	r2, [r3, #0]
  gRUD = 0;
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <init_remote_control+0x54>)
 80044de:	2200      	movs	r2, #0
 80044e0:	801a      	strh	r2, [r3, #0]

  init_rc_variables();
 80044e2:	f000 f819 	bl	8004518 <init_rc_variables>
  // queue for test purpose
  cnt = 0;
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <init_remote_control+0x58>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
  init_queue(&que);
 80044ec:	4809      	ldr	r0, [pc, #36]	; (8004514 <init_remote_control+0x5c>)
 80044ee:	f000 f967 	bl	80047c0 <init_queue>
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000de6 	.word	0x20000de6
 80044fc:	20000db4 	.word	0x20000db4
 8004500:	20000de4 	.word	0x20000de4
 8004504:	20000de0 	.word	0x20000de0
 8004508:	20000de2 	.word	0x20000de2
 800450c:	20000e36 	.word	0x20000e36
 8004510:	20000db8 	.word	0x20000db8
 8004514:	20000dec 	.word	0x20000dec

08004518 <init_rc_variables>:

void init_rc_variables(void)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
  uint32_t i;
  rc_connection_flag = 0;
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <init_rc_variables+0x54>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
  for (i=0;i<4;i++)
 8004524:	2300      	movs	r3, #0
 8004526:	607b      	str	r3, [r7, #4]
 8004528:	e016      	b.n	8004558 <init_rc_variables+0x40>
  {
    rc_flag[i] = 0;
 800452a:	4a11      	ldr	r2, [pc, #68]	; (8004570 <init_rc_variables+0x58>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
    rc_t_rise[i] = 0;
 8004534:	4a0f      	ldr	r2, [pc, #60]	; (8004574 <init_rc_variables+0x5c>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2100      	movs	r1, #0
 800453a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rc_t_fall[i] = 0;
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <init_rc_variables+0x60>)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2100      	movs	r1, #0
 8004544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rc_t[i] = 0;
 8004548:	4a0c      	ldr	r2, [pc, #48]	; (800457c <init_rc_variables+0x64>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2100      	movs	r1, #0
 800454e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i=0;i<4;i++)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3301      	adds	r3, #1
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b03      	cmp	r3, #3
 800455c:	d9e5      	bls.n	800452a <init_rc_variables+0x12>
  }
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20000de6 	.word	0x20000de6
 8004570:	20000dbc 	.word	0x20000dbc
 8004574:	20000dc0 	.word	0x20000dc0
 8004578:	20000e38 	.word	0x20000e38
 800457c:	20000dd0 	.word	0x20000dd0

08004580 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
      }
  }
  #endif
  #ifdef REMOCON_BLE
        
        update_rc_data(0);
 8004588:	2000      	movs	r0, #0
 800458a:	f000 f805 	bl	8004598 <update_rc_data>
      
  #endif
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <update_rc_data>:
}


/* Update global variables of R/C data */
void update_rc_data(int32_t idx)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
      default: break;
    }
  #endif
  
  // Activate Calibration Procedure  
  if ( (gTHR == 0) && (gELE < - RC_CAL_THRESHOLD) && (gAIL > RC_CAL_THRESHOLD) && (gRUD < - RC_CAL_THRESHOLD))
 80045a0:	4b23      	ldr	r3, [pc, #140]	; (8004630 <update_rc_data+0x98>)
 80045a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d114      	bne.n	80045d4 <update_rc_data+0x3c>
 80045aa:	4b22      	ldr	r3, [pc, #136]	; (8004634 <update_rc_data+0x9c>)
 80045ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b0:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 80045b4:	da0e      	bge.n	80045d4 <update_rc_data+0x3c>
 80045b6:	4b20      	ldr	r3, [pc, #128]	; (8004638 <update_rc_data+0xa0>)
 80045b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045bc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80045c0:	dd08      	ble.n	80045d4 <update_rc_data+0x3c>
 80045c2:	4b1e      	ldr	r3, [pc, #120]	; (800463c <update_rc_data+0xa4>)
 80045c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c8:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 80045cc:	da02      	bge.n	80045d4 <update_rc_data+0x3c>
  {
    rc_cal_flag = 1;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <update_rc_data+0xa8>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
  }

  // Activate Arming/Disarming 
  if ( (gTHR == 0) && (gELE < - RC_CAL_THRESHOLD) && (gAIL < - RC_CAL_THRESHOLD) && (gRUD > RC_CAL_THRESHOLD))
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <update_rc_data+0x98>)
 80045d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d122      	bne.n	8004624 <update_rc_data+0x8c>
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <update_rc_data+0x9c>)
 80045e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e4:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 80045e8:	da1c      	bge.n	8004624 <update_rc_data+0x8c>
 80045ea:	4b13      	ldr	r3, [pc, #76]	; (8004638 <update_rc_data+0xa0>)
 80045ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f0:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 80045f4:	da16      	bge.n	8004624 <update_rc_data+0x8c>
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <update_rc_data+0xa4>)
 80045f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045fc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004600:	dd10      	ble.n	8004624 <update_rc_data+0x8c>
  {
    if (rc_enable_motor==0) // if not armed -> arm
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <update_rc_data+0xac>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <update_rc_data+0x80>
    {
      rc_enable_motor = 1;
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <update_rc_data+0xac>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
      fly_ready = 1;
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <update_rc_data+0xb0>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]
    {
      rc_enable_motor = 0;
      fly_ready = 0;
    }
  }
}
 8004616:	e005      	b.n	8004624 <update_rc_data+0x8c>
      rc_enable_motor = 0;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <update_rc_data+0xac>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
      fly_ready = 0;
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <update_rc_data+0xb0>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	20000de2 	.word	0x20000de2
 8004634:	20000de0 	.word	0x20000de0
 8004638:	20000de4 	.word	0x20000de4
 800463c:	20000e36 	.word	0x20000e36
 8004640:	200001c4 	.word	0x200001c4
 8004644:	200001c8 	.word	0x200001c8
 8004648:	200001d0 	.word	0x200001d0

0800464c <GetTargetEulerAngle>:

/*
 * Convert RC received gAIL, gELE, gRUD
 */
void GetTargetEulerAngle(EulerAngleTypeDef *euler_rc, EulerAngleTypeDef *euler_ahrs)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
    t1 = gELE;
 8004656:	4b51      	ldr	r3, [pc, #324]	; (800479c <GetTargetEulerAngle+0x150>)
 8004658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800465c:	461a      	mov	r2, r3
 800465e:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004660:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8004662:	4b4f      	ldr	r3, [pc, #316]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800466a:	dd04      	ble.n	8004676 <GetTargetEulerAngle+0x2a>
        t1 = RC_FULLSCALE;
 800466c:	4b4c      	ldr	r3, [pc, #304]	; (80047a0 <GetTargetEulerAngle+0x154>)
 800466e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e007      	b.n	8004686 <GetTargetEulerAngle+0x3a>
    else if (t1 < -RC_FULLSCALE)
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
 800467e:	da02      	bge.n	8004686 <GetTargetEulerAngle+0x3a>
        t1 = - RC_FULLSCALE;
 8004680:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004682:	4a48      	ldr	r2, [pc, #288]	; (80047a4 <GetTargetEulerAngle+0x158>)
 8004684:	601a      	str	r2, [r3, #0]
    euler_rc->thx = -t1 * max_pitch_rad / RC_FULLSCALE;
 8004686:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	425b      	negs	r3, r3
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004694:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80047a8 <GetTargetEulerAngle+0x15c>
 8004698:	ee27 7a87 	vmul.f32	s14, s15, s14
 800469c:	eddf 6a43 	vldr	s13, [pc, #268]	; 80047ac <GetTargetEulerAngle+0x160>
 80046a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	edc3 7a00 	vstr	s15, [r3]

    t1 = gAIL;
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <GetTargetEulerAngle+0x164>)
 80046ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <GetTargetEulerAngle+0x154>)
 80046b4:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80046b6:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <GetTargetEulerAngle+0x154>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80046be:	dd04      	ble.n	80046ca <GetTargetEulerAngle+0x7e>
        t1 = RC_FULLSCALE;
 80046c0:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <GetTargetEulerAngle+0x154>)
 80046c2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e007      	b.n	80046da <GetTargetEulerAngle+0x8e>
    else if (t1 < -RC_FULLSCALE)
 80046ca:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <GetTargetEulerAngle+0x154>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
 80046d2:	da02      	bge.n	80046da <GetTargetEulerAngle+0x8e>
        t1 = - RC_FULLSCALE;
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <GetTargetEulerAngle+0x154>)
 80046d6:	4a33      	ldr	r2, [pc, #204]	; (80047a4 <GetTargetEulerAngle+0x158>)
 80046d8:	601a      	str	r2, [r3, #0]
    euler_rc->thy = -t1 * max_roll_rad / RC_FULLSCALE;
 80046da:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <GetTargetEulerAngle+0x154>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	425b      	negs	r3, r3
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80047a8 <GetTargetEulerAngle+0x15c>
 80046ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046f0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80047ac <GetTargetEulerAngle+0x160>
 80046f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	edc3 7a01 	vstr	s15, [r3, #4]

    t1 = gRUD;
 80046fe:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <GetTargetEulerAngle+0x168>)
 8004700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004704:	461a      	mov	r2, r3
 8004706:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004708:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 800470a:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <GetTargetEulerAngle+0x154>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004712:	dd04      	ble.n	800471e <GetTargetEulerAngle+0xd2>
        t1 = RC_FULLSCALE;
 8004714:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004716:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e007      	b.n	800472e <GetTargetEulerAngle+0xe2>
    else if (t1 < -RC_FULLSCALE)
 800471e:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
 8004726:	da02      	bge.n	800472e <GetTargetEulerAngle+0xe2>
        t1 = - RC_FULLSCALE;
 8004728:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <GetTargetEulerAngle+0x154>)
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <GetTargetEulerAngle+0x158>)
 800472c:	601a      	str	r2, [r3, #0]

    if(rc_z_control_flag == 1)
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <GetTargetEulerAngle+0x16c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d11f      	bne.n	8004776 <GetTargetEulerAngle+0x12a>
    {
      if(t1 > EULER_Z_TH)
 8004736:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800473e:	dd0a      	ble.n	8004756 <GetTargetEulerAngle+0x10a>
      {
        euler_rc->thz = euler_rc->thz + max_yaw_rad;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	edd3 7a02 	vldr	s15, [r3, #8]
 8004746:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047bc <GetTargetEulerAngle+0x170>
 800474a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	edc3 7a02 	vstr	s15, [r3, #8]
      if(t1 > -EULER_Z_TH&&t1 < EULER_Z_TH)
      {
           rc_z_control_flag = 1;
      }
    }
}
 8004754:	e01c      	b.n	8004790 <GetTargetEulerAngle+0x144>
      else if(t1 < -EULER_Z_TH)
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f513 7f16 	cmn.w	r3, #600	; 0x258
 800475e:	da17      	bge.n	8004790 <GetTargetEulerAngle+0x144>
        euler_rc->thz = euler_rc->thz - max_yaw_rad;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	edd3 7a02 	vldr	s15, [r3, #8]
 8004766:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80047bc <GetTargetEulerAngle+0x170>
 800476a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004774:	e00c      	b.n	8004790 <GetTargetEulerAngle+0x144>
      if(t1 > -EULER_Z_TH&&t1 < EULER_Z_TH)
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f513 7f16 	cmn.w	r3, #600	; 0x258
 800477e:	dd07      	ble.n	8004790 <GetTargetEulerAngle+0x144>
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <GetTargetEulerAngle+0x154>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004788:	da02      	bge.n	8004790 <GetTargetEulerAngle+0x144>
           rc_z_control_flag = 1;
 800478a:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <GetTargetEulerAngle+0x16c>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	20000de0 	.word	0x20000de0
 80047a0:	20000de8 	.word	0x20000de8
 80047a4:	fffff8f8 	.word	0xfffff8f8
 80047a8:	3f060a92 	.word	0x3f060a92
 80047ac:	44e10000 	.word	0x44e10000
 80047b0:	20000de4 	.word	0x20000de4
 80047b4:	20000e36 	.word	0x20000e36
 80047b8:	20000020 	.word	0x20000020
 80047bc:	3bd67750 	.word	0x3bd67750

080047c0 <init_queue>:


void init_queue(Queue_TypeDef *q)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  int32_t i;

  q->header = 0;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	801a      	strh	r2, [r3, #0]
  q->tail = 0;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	805a      	strh	r2, [r3, #2]
  q->length = QUEUE_LENGTH;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2210      	movs	r2, #16
 80047d8:	809a      	strh	r2, [r3, #4]
  q->full = 0;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	80da      	strh	r2, [r3, #6]
  q->empty = 1;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	811a      	strh	r2, [r3, #8]
  for (i=0;i<QUEUE_LENGTH;i++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e00f      	b.n	800480c <init_queue+0x4c>
  {
    q->buffer[i][0] = 0;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3302      	adds	r3, #2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	805a      	strh	r2, [r3, #2]
    q->buffer[i][1] = 0;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	2200      	movs	r2, #0
 8004804:	819a      	strh	r2, [r3, #12]
  for (i=0;i<QUEUE_LENGTH;i++)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3301      	adds	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b0f      	cmp	r3, #15
 8004810:	ddec      	ble.n	80047ec <init_queue+0x2c>
  }
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <safe_aci_gatt_update_char_value>:
tBleStatus safe_aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
				      const uint8_t *charValue)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b087      	sub	sp, #28
 8004824:	af02      	add	r7, sp, #8
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4623      	mov	r3, r4
 8004830:	80fb      	strh	r3, [r7, #6]
 8004832:	4603      	mov	r3, r0
 8004834:	80bb      	strh	r3, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	70fb      	strb	r3, [r7, #3]
 800483a:	4613      	mov	r3, r2
 800483c:	70bb      	strb	r3, [r7, #2]
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 800483e:	2364      	movs	r3, #100	; 0x64
 8004840:	73fb      	strb	r3, [r7, #15]
  
  if (breath > 0) {
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <safe_aci_gatt_update_char_value+0x64>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	dd05      	ble.n	8004856 <safe_aci_gatt_update_char_value+0x36>
    breath--;
 800484a:	4b0e      	ldr	r3, [pc, #56]	; (8004884 <safe_aci_gatt_update_char_value+0x64>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	4a0c      	ldr	r2, [pc, #48]	; (8004884 <safe_aci_gatt_update_char_value+0x64>)
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e010      	b.n	8004878 <safe_aci_gatt_update_char_value+0x58>
  } else {
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
 8004856:	78bc      	ldrb	r4, [r7, #2]
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	88b9      	ldrh	r1, [r7, #4]
 800485c:	88f8      	ldrh	r0, [r7, #6]
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	4623      	mov	r3, r4
 8004864:	f009 ff40 	bl	800e6e8 <aci_gatt_update_char_value>
 8004868:	4603      	mov	r3, r0
 800486a:	73fb      	strb	r3, [r7, #15]
    
    if (ret != BLE_STATUS_SUCCESS){
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <safe_aci_gatt_update_char_value+0x58>
      breath = ACC_BLUENRG_CONGESTION_SKIP;
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <safe_aci_gatt_update_char_value+0x64>)
 8004874:	221e      	movs	r2, #30
 8004876:	601a      	str	r2, [r3, #0]
    }
  }
  
  return (ret);
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bd90      	pop	{r4, r7, pc}
 8004882:	bf00      	nop
 8004884:	20000248 	.word	0x20000248

08004888 <Add_ConfigW2ST_Service>:
 * @brief  Add the Config service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_ConfigW2ST_Service(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08c      	sub	sp, #48	; 0x30
 800488c:	af06      	add	r7, sp, #24
  tBleStatus ret;

  uint8_t uuid[16];

  COPY_CONFIG_SERVICE_UUID(uuid);
 800488e:	231b      	movs	r3, #27
 8004890:	713b      	strb	r3, [r7, #4]
 8004892:	23c5      	movs	r3, #197	; 0xc5
 8004894:	717b      	strb	r3, [r7, #5]
 8004896:	23d5      	movs	r3, #213	; 0xd5
 8004898:	71bb      	strb	r3, [r7, #6]
 800489a:	23a5      	movs	r3, #165	; 0xa5
 800489c:	71fb      	strb	r3, [r7, #7]
 800489e:	2302      	movs	r3, #2
 80048a0:	723b      	strb	r3, [r7, #8]
 80048a2:	2300      	movs	r3, #0
 80048a4:	727b      	strb	r3, [r7, #9]
 80048a6:	23b4      	movs	r3, #180	; 0xb4
 80048a8:	72bb      	strb	r3, [r7, #10]
 80048aa:	239a      	movs	r3, #154	; 0x9a
 80048ac:	72fb      	strb	r3, [r7, #11]
 80048ae:	23e1      	movs	r3, #225	; 0xe1
 80048b0:	733b      	strb	r3, [r7, #12]
 80048b2:	2311      	movs	r3, #17
 80048b4:	737b      	strb	r3, [r7, #13]
 80048b6:	230f      	movs	r3, #15
 80048b8:	73bb      	strb	r3, [r7, #14]
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	2300      	movs	r3, #0
 80048c0:	743b      	strb	r3, [r7, #16]
 80048c2:	2300      	movs	r3, #0
 80048c4:	747b      	strb	r3, [r7, #17]
 80048c6:	2300      	movs	r3, #0
 80048c8:	74bb      	strb	r3, [r7, #18]
 80048ca:	2300      	movs	r3, #0
 80048cc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3,&ConfigServW2STHandle);
 80048ce:	1d39      	adds	r1, r7, #4
 80048d0:	4b26      	ldr	r3, [pc, #152]	; (800496c <Add_ConfigW2ST_Service+0xe4>)
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2304      	movs	r3, #4
 80048d6:	2201      	movs	r2, #1
 80048d8:	2002      	movs	r0, #2
 80048da:	f009 fda4 	bl	800e426 <aci_gatt_add_serv>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

  if (ret != BLE_STATUS_SUCCESS)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d139      	bne.n	800495c <Add_ConfigW2ST_Service+0xd4>
    goto fail;

  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 80048e8:	231b      	movs	r3, #27
 80048ea:	713b      	strb	r3, [r7, #4]
 80048ec:	23c5      	movs	r3, #197	; 0xc5
 80048ee:	717b      	strb	r3, [r7, #5]
 80048f0:	23d5      	movs	r3, #213	; 0xd5
 80048f2:	71bb      	strb	r3, [r7, #6]
 80048f4:	23a5      	movs	r3, #165	; 0xa5
 80048f6:	71fb      	strb	r3, [r7, #7]
 80048f8:	2302      	movs	r3, #2
 80048fa:	723b      	strb	r3, [r7, #8]
 80048fc:	2300      	movs	r3, #0
 80048fe:	727b      	strb	r3, [r7, #9]
 8004900:	2336      	movs	r3, #54	; 0x36
 8004902:	72bb      	strb	r3, [r7, #10]
 8004904:	23ac      	movs	r3, #172	; 0xac
 8004906:	72fb      	strb	r3, [r7, #11]
 8004908:	23e1      	movs	r3, #225	; 0xe1
 800490a:	733b      	strb	r3, [r7, #12]
 800490c:	2311      	movs	r3, #17
 800490e:	737b      	strb	r3, [r7, #13]
 8004910:	230f      	movs	r3, #15
 8004912:	73bb      	strb	r3, [r7, #14]
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	2302      	movs	r3, #2
 800491a:	743b      	strb	r3, [r7, #16]
 800491c:	2300      	movs	r3, #0
 800491e:	747b      	strb	r3, [r7, #17]
 8004920:	2300      	movs	r3, #0
 8004922:	74bb      	strb	r3, [r7, #18]
 8004924:	2300      	movs	r3, #0
 8004926:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 8004928:	4b10      	ldr	r3, [pc, #64]	; (800496c <Add_ConfigW2ST_Service+0xe4>)
 800492a:	8818      	ldrh	r0, [r3, #0]
 800492c:	1d3a      	adds	r2, r7, #4
 800492e:	4b10      	ldr	r3, [pc, #64]	; (8004970 <Add_ConfigW2ST_Service+0xe8>)
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	2301      	movs	r3, #1
 8004934:	9304      	str	r3, [sp, #16]
 8004936:	2310      	movs	r3, #16
 8004938:	9303      	str	r3, [sp, #12]
 800493a:	2305      	movs	r3, #5
 800493c:	9302      	str	r3, [sp, #8]
 800493e:	2300      	movs	r3, #0
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	2314      	movs	r3, #20
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2314      	movs	r3, #20
 8004948:	2102      	movs	r1, #2
 800494a:	f009 fdf8 	bl	800e53e <aci_gatt_add_char>
 800494e:	4603      	mov	r3, r0
 8004950:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &ConfigCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d103      	bne.n	8004960 <Add_ConfigW2ST_Service+0xd8>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8004958:	2300      	movs	r3, #0
 800495a:	e003      	b.n	8004964 <Add_ConfigW2ST_Service+0xdc>
    goto fail;
 800495c:	bf00      	nop
 800495e:	e000      	b.n	8004962 <Add_ConfigW2ST_Service+0xda>
    goto fail;
 8004960:	bf00      	nop

fail:
  //PRINTF("Error while adding Configuration service.\n");
  return BLE_STATUS_ERROR;
 8004962:	2347      	movs	r3, #71	; 0x47
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	2000020c 	.word	0x2000020c
 8004970:	2000020e 	.word	0x2000020e

08004974 <Add_ConsoleW2ST_Service>:
 * @brief  Add the Console service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_ConsoleW2ST_Service(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	; 0x30
 8004978:	af06      	add	r7, sp, #24
  tBleStatus ret;

  uint8_t uuid[16];

  COPY_CONSOLE_SERVICE_UUID(uuid);
 800497a:	231b      	movs	r3, #27
 800497c:	713b      	strb	r3, [r7, #4]
 800497e:	23c5      	movs	r3, #197	; 0xc5
 8004980:	717b      	strb	r3, [r7, #5]
 8004982:	23d5      	movs	r3, #213	; 0xd5
 8004984:	71bb      	strb	r3, [r7, #6]
 8004986:	23a5      	movs	r3, #165	; 0xa5
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	2302      	movs	r3, #2
 800498c:	723b      	strb	r3, [r7, #8]
 800498e:	2300      	movs	r3, #0
 8004990:	727b      	strb	r3, [r7, #9]
 8004992:	23b4      	movs	r3, #180	; 0xb4
 8004994:	72bb      	strb	r3, [r7, #10]
 8004996:	239a      	movs	r3, #154	; 0x9a
 8004998:	72fb      	strb	r3, [r7, #11]
 800499a:	23e1      	movs	r3, #225	; 0xe1
 800499c:	733b      	strb	r3, [r7, #12]
 800499e:	2311      	movs	r3, #17
 80049a0:	737b      	strb	r3, [r7, #13]
 80049a2:	230e      	movs	r3, #14
 80049a4:	73bb      	strb	r3, [r7, #14]
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	2300      	movs	r3, #0
 80049ac:	743b      	strb	r3, [r7, #16]
 80049ae:	2300      	movs	r3, #0
 80049b0:	747b      	strb	r3, [r7, #17]
 80049b2:	2300      	movs	r3, #0
 80049b4:	74bb      	strb	r3, [r7, #18]
 80049b6:	2300      	movs	r3, #0
 80049b8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3*2,&ConsoleW2STHandle);
 80049ba:	1d39      	adds	r1, r7, #4
 80049bc:	4b43      	ldr	r3, [pc, #268]	; (8004acc <Add_ConsoleW2ST_Service+0x158>)
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2307      	movs	r3, #7
 80049c2:	2201      	movs	r2, #1
 80049c4:	2002      	movs	r0, #2
 80049c6:	f009 fd2e 	bl	800e426 <aci_gatt_add_serv>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]

  if (ret != BLE_STATUS_SUCCESS) {
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d171      	bne.n	8004ab8 <Add_ConsoleW2ST_Service+0x144>
    goto fail;
  }

  COPY_TERM_CHAR_UUID(uuid);
 80049d4:	231b      	movs	r3, #27
 80049d6:	713b      	strb	r3, [r7, #4]
 80049d8:	23c5      	movs	r3, #197	; 0xc5
 80049da:	717b      	strb	r3, [r7, #5]
 80049dc:	23d5      	movs	r3, #213	; 0xd5
 80049de:	71bb      	strb	r3, [r7, #6]
 80049e0:	23a5      	movs	r3, #165	; 0xa5
 80049e2:	71fb      	strb	r3, [r7, #7]
 80049e4:	2302      	movs	r3, #2
 80049e6:	723b      	strb	r3, [r7, #8]
 80049e8:	2300      	movs	r3, #0
 80049ea:	727b      	strb	r3, [r7, #9]
 80049ec:	2336      	movs	r3, #54	; 0x36
 80049ee:	72bb      	strb	r3, [r7, #10]
 80049f0:	23ac      	movs	r3, #172	; 0xac
 80049f2:	72fb      	strb	r3, [r7, #11]
 80049f4:	23e1      	movs	r3, #225	; 0xe1
 80049f6:	733b      	strb	r3, [r7, #12]
 80049f8:	2311      	movs	r3, #17
 80049fa:	737b      	strb	r3, [r7, #13]
 80049fc:	230e      	movs	r3, #14
 80049fe:	73bb      	strb	r3, [r7, #14]
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	2301      	movs	r3, #1
 8004a06:	743b      	strb	r3, [r7, #16]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	747b      	strb	r3, [r7, #17]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	74bb      	strb	r3, [r7, #18]
 8004a10:	2300      	movs	r3, #0
 8004a12:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConsoleW2STHandle, UUID_TYPE_128, uuid, W2ST_CONSOLE_MAX_CHAR_LEN,
 8004a14:	4b2d      	ldr	r3, [pc, #180]	; (8004acc <Add_ConsoleW2ST_Service+0x158>)
 8004a16:	8818      	ldrh	r0, [r3, #0]
 8004a18:	1d3a      	adds	r2, r7, #4
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <Add_ConsoleW2ST_Service+0x15c>)
 8004a1c:	9305      	str	r3, [sp, #20]
 8004a1e:	2301      	movs	r3, #1
 8004a20:	9304      	str	r3, [sp, #16]
 8004a22:	2310      	movs	r3, #16
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	2305      	movs	r3, #5
 8004a28:	9302      	str	r3, [sp, #8]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	231e      	movs	r3, #30
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2314      	movs	r3, #20
 8004a34:	2102      	movs	r1, #2
 8004a36:	f009 fd82 	bl	800e53e <aci_gatt_add_char>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE | CHAR_PROP_READ ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &TermCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d13b      	bne.n	8004abc <Add_ConsoleW2ST_Service+0x148>
    goto fail;
  }

  COPY_STDERR_CHAR_UUID(uuid);
 8004a44:	231b      	movs	r3, #27
 8004a46:	713b      	strb	r3, [r7, #4]
 8004a48:	23c5      	movs	r3, #197	; 0xc5
 8004a4a:	717b      	strb	r3, [r7, #5]
 8004a4c:	23d5      	movs	r3, #213	; 0xd5
 8004a4e:	71bb      	strb	r3, [r7, #6]
 8004a50:	23a5      	movs	r3, #165	; 0xa5
 8004a52:	71fb      	strb	r3, [r7, #7]
 8004a54:	2302      	movs	r3, #2
 8004a56:	723b      	strb	r3, [r7, #8]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	727b      	strb	r3, [r7, #9]
 8004a5c:	2336      	movs	r3, #54	; 0x36
 8004a5e:	72bb      	strb	r3, [r7, #10]
 8004a60:	23ac      	movs	r3, #172	; 0xac
 8004a62:	72fb      	strb	r3, [r7, #11]
 8004a64:	23e1      	movs	r3, #225	; 0xe1
 8004a66:	733b      	strb	r3, [r7, #12]
 8004a68:	2311      	movs	r3, #17
 8004a6a:	737b      	strb	r3, [r7, #13]
 8004a6c:	230e      	movs	r3, #14
 8004a6e:	73bb      	strb	r3, [r7, #14]
 8004a70:	2300      	movs	r3, #0
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	2302      	movs	r3, #2
 8004a76:	743b      	strb	r3, [r7, #16]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	747b      	strb	r3, [r7, #17]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	74bb      	strb	r3, [r7, #18]
 8004a80:	2300      	movs	r3, #0
 8004a82:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConsoleW2STHandle, UUID_TYPE_128, uuid, W2ST_CONSOLE_MAX_CHAR_LEN,
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <Add_ConsoleW2ST_Service+0x158>)
 8004a86:	8818      	ldrh	r0, [r3, #0]
 8004a88:	1d3a      	adds	r2, r7, #4
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <Add_ConsoleW2ST_Service+0x160>)
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	2301      	movs	r3, #1
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	2310      	movs	r3, #16
 8004a94:	9303      	str	r3, [sp, #12]
 8004a96:	2304      	movs	r3, #4
 8004a98:	9302      	str	r3, [sp, #8]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	2312      	movs	r3, #18
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	2314      	movs	r3, #20
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	f009 fd4a 	bl	800e53e <aci_gatt_add_char>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &StdErrCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <Add_ConsoleW2ST_Service+0x14c>
     goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e005      	b.n	8004ac4 <Add_ConsoleW2ST_Service+0x150>
    goto fail;
 8004ab8:	bf00      	nop
 8004aba:	e002      	b.n	8004ac2 <Add_ConsoleW2ST_Service+0x14e>
    goto fail;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <Add_ConsoleW2ST_Service+0x14e>
     goto fail;
 8004ac0:	bf00      	nop

fail:
  //PRINTF("Error while adding Console service.\n");
  return BLE_STATUS_ERROR;
 8004ac2:	2347      	movs	r3, #71	; 0x47
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000210 	.word	0x20000210
 8004ad0:	20000212 	.word	0x20000212
 8004ad4:	20000214 	.word	0x20000214

08004ad8 <Stderr_Update>:
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */
tBleStatus Stderr_Update(uint8_t *data,uint8_t length)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;

  /* Split the code in packages*/
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	73fb      	strb	r3, [r7, #15]
 8004ae8:	e02d      	b.n	8004b46 <Stderr_Update+0x6e>
    DataToSend = (length-Offset);
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 8004af2:	7bbb      	ldrb	r3, [r7, #14]
 8004af4:	2b14      	cmp	r3, #20
 8004af6:	bf28      	it	cs
 8004af8:	2314      	movcs	r3, #20
 8004afa:	73bb      	strb	r3, [r7, #14]

    /* keep a copy */
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	7bba      	ldrb	r2, [r7, #14]
 8004b04:	4619      	mov	r1, r3
 8004b06:	4814      	ldr	r0, [pc, #80]	; (8004b58 <Stderr_Update+0x80>)
 8004b08:	f00b fa30 	bl	800ff6c <memcpy>
    LastStderrLen = DataToSend;
 8004b0c:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <Stderr_Update+0x84>)
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
 8004b10:	7013      	strb	r3, [r2, #0]

    ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, DataToSend , data+Offset);
 8004b12:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <Stderr_Update+0x88>)
 8004b14:	8818      	ldrh	r0, [r3, #0]
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <Stderr_Update+0x8c>)
 8004b18:	8819      	ldrh	r1, [r3, #0]
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	7bba      	ldrb	r2, [r7, #14]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	2200      	movs	r2, #0
 8004b28:	f009 fdde 	bl	800e6e8 <aci_gatt_update_char_value>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS) {
 8004b30:	7b7b      	ldrb	r3, [r7, #13]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <Stderr_Update+0x62>
      return BLE_STATUS_ERROR;
 8004b36:	2347      	movs	r3, #71	; 0x47
 8004b38:	e00a      	b.n	8004b50 <Stderr_Update+0x78>
    }
    HAL_Delay(10);
 8004b3a:	200a      	movs	r0, #10
 8004b3c:	f004 fc24 	bl	8009388 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	3314      	adds	r3, #20
 8004b44:	73fb      	strb	r3, [r7, #15]
 8004b46:	7bfa      	ldrb	r2, [r7, #15]
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3cd      	bcc.n	8004aea <Stderr_Update+0x12>
  }

  return BLE_STATUS_SUCCESS;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000218 	.word	0x20000218
 8004b5c:	2000022c 	.word	0x2000022c
 8004b60:	20000210 	.word	0x20000210
 8004b64:	20000214 	.word	0x20000214

08004b68 <Term_Update>:
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */
tBleStatus Term_Update(uint8_t *data,uint8_t length)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;

  /* Split the code in packages */
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
 8004b78:	e030      	b.n	8004bdc <Term_Update+0x74>
    DataToSend = (length-Offset);
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 8004b82:	7bbb      	ldrb	r3, [r7, #14]
 8004b84:	2b14      	cmp	r3, #20
 8004b86:	bf28      	it	cs
 8004b88:	2314      	movcs	r3, #20
 8004b8a:	73bb      	strb	r3, [r7, #14]

    /* keep a copy */
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	7bba      	ldrb	r2, [r7, #14]
 8004b94:	4619      	mov	r1, r3
 8004b96:	4816      	ldr	r0, [pc, #88]	; (8004bf0 <Term_Update+0x88>)
 8004b98:	f00b f9e8 	bl	800ff6c <memcpy>
    LastTermLen = DataToSend;
 8004b9c:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <Term_Update+0x8c>)
 8004b9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ba0:	7013      	strb	r3, [r2, #0]

    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <Term_Update+0x90>)
 8004ba4:	8818      	ldrh	r0, [r3, #0]
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <Term_Update+0x94>)
 8004ba8:	8819      	ldrh	r1, [r3, #0]
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4413      	add	r3, r2
 8004bb0:	7bba      	ldrb	r2, [r7, #14]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f009 fd96 	bl	800e6e8 <aci_gatt_update_char_value>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS) {
 8004bc0:	7b7b      	ldrb	r3, [r7, #13]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <Term_Update+0x68>
        PRINTF("Error Updating Stdout Char\r\n");
 8004bc6:	480e      	ldr	r0, [pc, #56]	; (8004c00 <Term_Update+0x98>)
 8004bc8:	f7fc fdb0 	bl	800172c <myprintf>
      return BLE_STATUS_ERROR;
 8004bcc:	2347      	movs	r3, #71	; 0x47
 8004bce:	e00a      	b.n	8004be6 <Term_Update+0x7e>
    }
    HAL_Delay(20);
 8004bd0:	2014      	movs	r0, #20
 8004bd2:	f004 fbd9 	bl	8009388 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	3314      	adds	r3, #20
 8004bda:	73fb      	strb	r3, [r7, #15]
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3ca      	bcc.n	8004b7a <Term_Update+0x12>
  }

  return BLE_STATUS_SUCCESS;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000230 	.word	0x20000230
 8004bf4:	20000244 	.word	0x20000244
 8004bf8:	20000210 	.word	0x20000210
 8004bfc:	20000212 	.word	0x20000212
 8004c00:	080116b0 	.word	0x080116b0

08004c04 <Stderr_Update_AfterRead>:
 * @brief  Update Stderr characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Stderr_Update_AfterRead(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af02      	add	r7, sp, #8
  tBleStatus ret;

  ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, LastStderrLen , LastStderrBuffer);
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <Stderr_Update_AfterRead+0x34>)
 8004c0c:	8818      	ldrh	r0, [r3, #0]
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <Stderr_Update_AfterRead+0x38>)
 8004c10:	8819      	ldrh	r1, [r3, #0]
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <Stderr_Update_AfterRead+0x3c>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <Stderr_Update_AfterRead+0x40>)
 8004c18:	9200      	str	r2, [sp, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f009 fd64 	bl	800e6e8 <aci_gatt_update_char_value>
 8004c20:	4603      	mov	r3, r0
 8004c22:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) {
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <Stderr_Update_AfterRead+0x2a>
    return BLE_STATUS_ERROR;
 8004c2a:	2347      	movs	r3, #71	; 0x47
 8004c2c:	e000      	b.n	8004c30 <Stderr_Update_AfterRead+0x2c>
  }

  return BLE_STATUS_SUCCESS;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000210 	.word	0x20000210
 8004c3c:	20000214 	.word	0x20000214
 8004c40:	2000022c 	.word	0x2000022c
 8004c44:	20000218 	.word	0x20000218

08004c48 <Term_Update_AfterRead>:
 * @brief  Update Terminal characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Term_Update_AfterRead(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af02      	add	r7, sp, #8
  tBleStatus ret;

  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 8004c4e:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <Term_Update_AfterRead+0x68>)
 8004c50:	8818      	ldrh	r0, [r3, #0]
 8004c52:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <Term_Update_AfterRead+0x6c>)
 8004c54:	8819      	ldrh	r1, [r3, #0]
 8004c56:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <Term_Update_AfterRead+0x70>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <Term_Update_AfterRead+0x74>)
 8004c5c:	9200      	str	r2, [sp, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f009 fd42 	bl	800e6e8 <aci_gatt_update_char_value>
 8004c64:	4603      	mov	r3, r0
 8004c66:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) {
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01b      	beq.n	8004ca6 <Term_Update_AfterRead+0x5e>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR)){
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <Term_Update_AfterRead+0x78>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	0a5b      	lsrs	r3, r3, #9
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00e      	beq.n	8004c9c <Term_Update_AfterRead+0x54>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Stdout Char\r\n");
 8004c7e:	4911      	ldr	r1, [pc, #68]	; (8004cc4 <Term_Update_AfterRead+0x7c>)
 8004c80:	4811      	ldr	r0, [pc, #68]	; (8004cc8 <Term_Update_AfterRead+0x80>)
 8004c82:	f00b f989 	bl	800ff98 <siprintf>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <Term_Update_AfterRead+0x84>)
 8004c8a:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <Term_Update_AfterRead+0x84>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4619      	mov	r1, r3
 8004c94:	480c      	ldr	r0, [pc, #48]	; (8004cc8 <Term_Update_AfterRead+0x80>)
 8004c96:	f7ff ff1f 	bl	8004ad8 <Stderr_Update>
 8004c9a:	e002      	b.n	8004ca2 <Term_Update_AfterRead+0x5a>
    } else {
      PRINTF("Error Updating Stdout Char\r\n");
 8004c9c:	4809      	ldr	r0, [pc, #36]	; (8004cc4 <Term_Update_AfterRead+0x7c>)
 8004c9e:	f7fc fd45 	bl	800172c <myprintf>
    }
    return BLE_STATUS_ERROR;
 8004ca2:	2347      	movs	r3, #71	; 0x47
 8004ca4:	e000      	b.n	8004ca8 <Term_Update_AfterRead+0x60>
  }

  return BLE_STATUS_SUCCESS;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000210 	.word	0x20000210
 8004cb4:	20000212 	.word	0x20000212
 8004cb8:	20000244 	.word	0x20000244
 8004cbc:	20000230 	.word	0x20000230
 8004cc0:	200001f8 	.word	0x200001f8
 8004cc4:	080116b0 	.word	0x080116b0
 8004cc8:	20000bb8 	.word	0x20000bb8
 8004ccc:	20000db0 	.word	0x20000db0

08004cd0 <Add_HWServW2ST_Service>:
 * @brief  Add the HW Features service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberChars = 5;
 8004cd6:	2305      	movs	r3, #5
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Battery Present */
    NumberChars++;
  }
#endif /* STM32_SENSORTILE */

  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8004cda:	231b      	movs	r3, #27
 8004cdc:	703b      	strb	r3, [r7, #0]
 8004cde:	23c5      	movs	r3, #197	; 0xc5
 8004ce0:	707b      	strb	r3, [r7, #1]
 8004ce2:	23d5      	movs	r3, #213	; 0xd5
 8004ce4:	70bb      	strb	r3, [r7, #2]
 8004ce6:	23a5      	movs	r3, #165	; 0xa5
 8004ce8:	70fb      	strb	r3, [r7, #3]
 8004cea:	2302      	movs	r3, #2
 8004cec:	713b      	strb	r3, [r7, #4]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	717b      	strb	r3, [r7, #5]
 8004cf2:	23b4      	movs	r3, #180	; 0xb4
 8004cf4:	71bb      	strb	r3, [r7, #6]
 8004cf6:	239a      	movs	r3, #154	; 0x9a
 8004cf8:	71fb      	strb	r3, [r7, #7]
 8004cfa:	23e1      	movs	r3, #225	; 0xe1
 8004cfc:	723b      	strb	r3, [r7, #8]
 8004cfe:	2311      	movs	r3, #17
 8004d00:	727b      	strb	r3, [r7, #9]
 8004d02:	2301      	movs	r3, #1
 8004d04:	72bb      	strb	r3, [r7, #10]
 8004d06:	2300      	movs	r3, #0
 8004d08:	72fb      	strb	r3, [r7, #11]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	733b      	strb	r3, [r7, #12]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	737b      	strb	r3, [r7, #13]
 8004d12:	2300      	movs	r3, #0
 8004d14:	73bb      	strb	r3, [r7, #14]
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	0052      	lsls	r2, r2, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	3301      	adds	r3, #1
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	4aac      	ldr	r2, [pc, #688]	; (8004fe0 <Add_HWServW2ST_Service+0x310>)
 8004d2e:	9200      	str	r2, [sp, #0]
 8004d30:	2201      	movs	r2, #1
 8004d32:	2002      	movs	r0, #2
 8004d34:	f009 fb77 	bl	800e426 <aci_gatt_add_serv>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberChars,
                          &HWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f040 813d 	bne.w	8004fbe <Add_HWServW2ST_Service+0x2ee>
    goto fail;
  }

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8004d44:	231b      	movs	r3, #27
 8004d46:	703b      	strb	r3, [r7, #0]
 8004d48:	23c5      	movs	r3, #197	; 0xc5
 8004d4a:	707b      	strb	r3, [r7, #1]
 8004d4c:	23d5      	movs	r3, #213	; 0xd5
 8004d4e:	70bb      	strb	r3, [r7, #2]
 8004d50:	23a5      	movs	r3, #165	; 0xa5
 8004d52:	70fb      	strb	r3, [r7, #3]
 8004d54:	2302      	movs	r3, #2
 8004d56:	713b      	strb	r3, [r7, #4]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	717b      	strb	r3, [r7, #5]
 8004d5c:	2336      	movs	r3, #54	; 0x36
 8004d5e:	71bb      	strb	r3, [r7, #6]
 8004d60:	23ac      	movs	r3, #172	; 0xac
 8004d62:	71fb      	strb	r3, [r7, #7]
 8004d64:	23e1      	movs	r3, #225	; 0xe1
 8004d66:	723b      	strb	r3, [r7, #8]
 8004d68:	2311      	movs	r3, #17
 8004d6a:	727b      	strb	r3, [r7, #9]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	72bb      	strb	r3, [r7, #10]
 8004d70:	2300      	movs	r3, #0
 8004d72:	72fb      	strb	r3, [r7, #11]
 8004d74:	2300      	movs	r3, #0
 8004d76:	733b      	strb	r3, [r7, #12]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	737b      	strb	r3, [r7, #13]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73bb      	strb	r3, [r7, #14]
 8004d80:	2300      	movs	r3, #0
 8004d82:	73fb      	strb	r3, [r7, #15]
//    uuid[14] |= 0x04; /* One Temperature value*/
//    EnvironmentalCharSize+=2;
//  }

  
    uuid[14] |= 0x05; /* Two Temperature values*/
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	f043 0305 	orr.w	r3, r3, #5
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2*2;
 8004d8e:	4b95      	ldr	r3, [pc, #596]	; (8004fe4 <Add_HWServW2ST_Service+0x314>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	3304      	adds	r3, #4
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	4b93      	ldr	r3, [pc, #588]	; (8004fe4 <Add_HWServW2ST_Service+0x314>)
 8004d98:	701a      	strb	r2, [r3, #0]
 

  
   uuid[14] |= 0x08; /* Battery level (percentage of full battery) */
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	f043 0308 	orr.w	r3, r3, #8
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	73bb      	strb	r3, [r7, #14]
   EnvironmentalCharSize+=2;
 8004da4:	4b8f      	ldr	r3, [pc, #572]	; (8004fe4 <Add_HWServW2ST_Service+0x314>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	3302      	adds	r3, #2
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	4b8d      	ldr	r3, [pc, #564]	; (8004fe4 <Add_HWServW2ST_Service+0x314>)
 8004dae:	701a      	strb	r2, [r3, #0]
 
    uuid[14] |= 0x10; /* Pressure value*/
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	f043 0310 	orr.w	r3, r3, #16
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=4;
 8004dba:	4b8a      	ldr	r3, [pc, #552]	; (8004fe4 <Add_HWServW2ST_Service+0x314>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <Add_HWServW2ST_Service+0x314>)
 8004dc4:	701a      	strb	r2, [r3, #0]
//                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
//                           ATTR_PERMISSION_NONE,
//                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
//                           16, 0, &EnvironmentalCharHandle);
//  
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+4+2+2+2,
 8004dc6:	4b86      	ldr	r3, [pc, #536]	; (8004fe0 <Add_HWServW2ST_Service+0x310>)
 8004dc8:	8818      	ldrh	r0, [r3, #0]
 8004dca:	463a      	mov	r2, r7
 8004dcc:	4b86      	ldr	r3, [pc, #536]	; (8004fe8 <Add_HWServW2ST_Service+0x318>)
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9304      	str	r3, [sp, #16]
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	2304      	movs	r3, #4
 8004dda:	9302      	str	r3, [sp, #8]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	2312      	movs	r3, #18
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	230c      	movs	r3, #12
 8004de6:	2102      	movs	r1, #2
 8004de8:	f009 fba9 	bl	800e53e <aci_gatt_add_char>
 8004dec:	4603      	mov	r3, r0
 8004dee:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 80e5 	bne.w	8004fc2 <Add_HWServW2ST_Service+0x2f2>
    goto fail;
  }

  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8004df8:	231b      	movs	r3, #27
 8004dfa:	703b      	strb	r3, [r7, #0]
 8004dfc:	23c5      	movs	r3, #197	; 0xc5
 8004dfe:	707b      	strb	r3, [r7, #1]
 8004e00:	23d5      	movs	r3, #213	; 0xd5
 8004e02:	70bb      	strb	r3, [r7, #2]
 8004e04:	23a5      	movs	r3, #165	; 0xa5
 8004e06:	70fb      	strb	r3, [r7, #3]
 8004e08:	2302      	movs	r3, #2
 8004e0a:	713b      	strb	r3, [r7, #4]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	717b      	strb	r3, [r7, #5]
 8004e10:	2336      	movs	r3, #54	; 0x36
 8004e12:	71bb      	strb	r3, [r7, #6]
 8004e14:	23ac      	movs	r3, #172	; 0xac
 8004e16:	71fb      	strb	r3, [r7, #7]
 8004e18:	23e1      	movs	r3, #225	; 0xe1
 8004e1a:	723b      	strb	r3, [r7, #8]
 8004e1c:	2311      	movs	r3, #17
 8004e1e:	727b      	strb	r3, [r7, #9]
 8004e20:	2301      	movs	r3, #1
 8004e22:	72bb      	strb	r3, [r7, #10]
 8004e24:	2300      	movs	r3, #0
 8004e26:	72fb      	strb	r3, [r7, #11]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	733b      	strb	r3, [r7, #12]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	737b      	strb	r3, [r7, #13]
 8004e30:	23e0      	movs	r3, #224	; 0xe0
 8004e32:	73bb      	strb	r3, [r7, #14]
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+3*3*2,
 8004e38:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <Add_HWServW2ST_Service+0x310>)
 8004e3a:	8818      	ldrh	r0, [r3, #0]
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	4b6b      	ldr	r3, [pc, #428]	; (8004fec <Add_HWServW2ST_Service+0x31c>)
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9304      	str	r3, [sp, #16]
 8004e46:	2310      	movs	r3, #16
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	9302      	str	r3, [sp, #8]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	2310      	movs	r3, #16
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	2314      	movs	r3, #20
 8004e58:	2102      	movs	r1, #2
 8004e5a:	f009 fb70 	bl	800e53e <aci_gatt_add_char>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 80ae 	bne.w	8004fc6 <Add_HWServW2ST_Service+0x2f6>
    goto fail;
  }

  COPY_ACC_EVENT_W2ST_CHAR_UUID(uuid);
 8004e6a:	231b      	movs	r3, #27
 8004e6c:	703b      	strb	r3, [r7, #0]
 8004e6e:	23c5      	movs	r3, #197	; 0xc5
 8004e70:	707b      	strb	r3, [r7, #1]
 8004e72:	23d5      	movs	r3, #213	; 0xd5
 8004e74:	70bb      	strb	r3, [r7, #2]
 8004e76:	23a5      	movs	r3, #165	; 0xa5
 8004e78:	70fb      	strb	r3, [r7, #3]
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	713b      	strb	r3, [r7, #4]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	717b      	strb	r3, [r7, #5]
 8004e82:	2336      	movs	r3, #54	; 0x36
 8004e84:	71bb      	strb	r3, [r7, #6]
 8004e86:	23ac      	movs	r3, #172	; 0xac
 8004e88:	71fb      	strb	r3, [r7, #7]
 8004e8a:	23e1      	movs	r3, #225	; 0xe1
 8004e8c:	723b      	strb	r3, [r7, #8]
 8004e8e:	2311      	movs	r3, #17
 8004e90:	727b      	strb	r3, [r7, #9]
 8004e92:	2301      	movs	r3, #1
 8004e94:	72bb      	strb	r3, [r7, #10]
 8004e96:	2300      	movs	r3, #0
 8004e98:	72fb      	strb	r3, [r7, #11]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	733b      	strb	r3, [r7, #12]
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	737b      	strb	r3, [r7, #13]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73bb      	strb	r3, [r7, #14]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+2,
 8004eaa:	4b4d      	ldr	r3, [pc, #308]	; (8004fe0 <Add_HWServW2ST_Service+0x310>)
 8004eac:	8818      	ldrh	r0, [r3, #0]
 8004eae:	463a      	mov	r2, r7
 8004eb0:	4b4f      	ldr	r3, [pc, #316]	; (8004ff0 <Add_HWServW2ST_Service+0x320>)
 8004eb2:	9305      	str	r3, [sp, #20]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	2310      	movs	r3, #16
 8004eba:	9303      	str	r3, [sp, #12]
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	2312      	movs	r3, #18
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2304      	movs	r3, #4
 8004eca:	2102      	movs	r1, #2
 8004ecc:	f009 fb37 	bl	800e53e <aci_gatt_add_char>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccEventCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d177      	bne.n	8004fca <Add_HWServW2ST_Service+0x2fa>
    goto fail;
  }

  COPY_ARMING_W2ST_CHAR_UUID(uuid);
 8004eda:	231b      	movs	r3, #27
 8004edc:	703b      	strb	r3, [r7, #0]
 8004ede:	23c5      	movs	r3, #197	; 0xc5
 8004ee0:	707b      	strb	r3, [r7, #1]
 8004ee2:	23d5      	movs	r3, #213	; 0xd5
 8004ee4:	70bb      	strb	r3, [r7, #2]
 8004ee6:	23a5      	movs	r3, #165	; 0xa5
 8004ee8:	70fb      	strb	r3, [r7, #3]
 8004eea:	2302      	movs	r3, #2
 8004eec:	713b      	strb	r3, [r7, #4]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	717b      	strb	r3, [r7, #5]
 8004ef2:	2336      	movs	r3, #54	; 0x36
 8004ef4:	71bb      	strb	r3, [r7, #6]
 8004ef6:	23ac      	movs	r3, #172	; 0xac
 8004ef8:	71fb      	strb	r3, [r7, #7]
 8004efa:	23e1      	movs	r3, #225	; 0xe1
 8004efc:	723b      	strb	r3, [r7, #8]
 8004efe:	2311      	movs	r3, #17
 8004f00:	727b      	strb	r3, [r7, #9]
 8004f02:	2301      	movs	r3, #1
 8004f04:	72bb      	strb	r3, [r7, #10]
 8004f06:	2300      	movs	r3, #0
 8004f08:	72fb      	strb	r3, [r7, #11]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	733b      	strb	r3, [r7, #12]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	737b      	strb	r3, [r7, #13]
 8004f12:	2300      	movs	r3, #0
 8004f14:	73bb      	strb	r3, [r7, #14]
 8004f16:	2320      	movs	r3, #32
 8004f18:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+1,
 8004f1a:	4b31      	ldr	r3, [pc, #196]	; (8004fe0 <Add_HWServW2ST_Service+0x310>)
 8004f1c:	8818      	ldrh	r0, [r3, #0]
 8004f1e:	463a      	mov	r2, r7
 8004f20:	4b34      	ldr	r3, [pc, #208]	; (8004ff4 <Add_HWServW2ST_Service+0x324>)
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	2300      	movs	r3, #0
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	2310      	movs	r3, #16
 8004f2a:	9303      	str	r3, [sp, #12]
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	9302      	str	r3, [sp, #8]
 8004f30:	2300      	movs	r3, #0
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	2312      	movs	r3, #18
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2303      	movs	r3, #3
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	f009 faff 	bl	800e53e <aci_gatt_add_char>
 8004f40:	4603      	mov	r3, r0
 8004f42:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &ArmingCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d141      	bne.n	8004fce <Add_HWServW2ST_Service+0x2fe>
  }
#endif /* STM32_SENSORTILE */
	
	
	/* MAX charecteristic */
	COPY_MAX_W2ST_CHAR_UUID(uuid);
 8004f4a:	231b      	movs	r3, #27
 8004f4c:	703b      	strb	r3, [r7, #0]
 8004f4e:	23c5      	movs	r3, #197	; 0xc5
 8004f50:	707b      	strb	r3, [r7, #1]
 8004f52:	23d5      	movs	r3, #213	; 0xd5
 8004f54:	70bb      	strb	r3, [r7, #2]
 8004f56:	23a5      	movs	r3, #165	; 0xa5
 8004f58:	70fb      	strb	r3, [r7, #3]
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	713b      	strb	r3, [r7, #4]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	717b      	strb	r3, [r7, #5]
 8004f62:	2336      	movs	r3, #54	; 0x36
 8004f64:	71bb      	strb	r3, [r7, #6]
 8004f66:	23ac      	movs	r3, #172	; 0xac
 8004f68:	71fb      	strb	r3, [r7, #7]
 8004f6a:	23e1      	movs	r3, #225	; 0xe1
 8004f6c:	723b      	strb	r3, [r7, #8]
 8004f6e:	2311      	movs	r3, #17
 8004f70:	727b      	strb	r3, [r7, #9]
 8004f72:	2301      	movs	r3, #1
 8004f74:	72bb      	strb	r3, [r7, #10]
 8004f76:	2300      	movs	r3, #0
 8004f78:	72fb      	strb	r3, [r7, #11]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	733b      	strb	r3, [r7, #12]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	737b      	strb	r3, [r7, #13]
 8004f82:	2300      	movs	r3, #0
 8004f84:	73bb      	strb	r3, [r7, #14]
 8004f86:	2300      	movs	r3, #0
 8004f88:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 7,
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <Add_HWServW2ST_Service+0x310>)
 8004f8c:	8818      	ldrh	r0, [r3, #0]
 8004f8e:	463a      	mov	r2, r7
 8004f90:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <Add_HWServW2ST_Service+0x328>)
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	2300      	movs	r3, #0
 8004f96:	9304      	str	r3, [sp, #16]
 8004f98:	2310      	movs	r3, #16
 8004f9a:	9303      	str	r3, [sp, #12]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	9302      	str	r3, [sp, #8]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	2307      	movs	r3, #7
 8004faa:	2102      	movs	r1, #2
 8004fac:	f009 fac7 	bl	800e53e <aci_gatt_add_char>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	74fb      	strb	r3, [r7, #19]
                          CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE,
                           16, 0, &MaxCharHandle);
	
  if (ret != BLE_STATUS_SUCCESS) {
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <Add_HWServW2ST_Service+0x302>
    goto fail;
  }
	

  return BLE_STATUS_SUCCESS;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e00b      	b.n	8004fd6 <Add_HWServW2ST_Service+0x306>
    goto fail;
 8004fbe:	bf00      	nop
 8004fc0:	e008      	b.n	8004fd4 <Add_HWServW2ST_Service+0x304>
    goto fail;
 8004fc2:	bf00      	nop
 8004fc4:	e006      	b.n	8004fd4 <Add_HWServW2ST_Service+0x304>
    goto fail;
 8004fc6:	bf00      	nop
 8004fc8:	e004      	b.n	8004fd4 <Add_HWServW2ST_Service+0x304>
    goto fail;
 8004fca:	bf00      	nop
 8004fcc:	e002      	b.n	8004fd4 <Add_HWServW2ST_Service+0x304>
    goto fail;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <Add_HWServW2ST_Service+0x304>
    goto fail;
 8004fd2:	bf00      	nop

fail:
  //PRINTF("Error while adding HW's Characteristcs service.\n");
  return BLE_STATUS_ERROR;
 8004fd4:	2347      	movs	r3, #71	; 0x47
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000200 	.word	0x20000200
 8004fe4:	20000025 	.word	0x20000025
 8004fe8:	20000202 	.word	0x20000202
 8004fec:	20000204 	.word	0x20000204
 8004ff0:	20000206 	.word	0x20000206
 8004ff4:	20000208 	.word	0x20000208
 8004ff8:	2000020a 	.word	0x2000020a

08004ffc <AccGyroMag_Update>:
 * @param  SensorAxes_t Gyro Structure containing Gyroscope value
 * @param  SensorAxes_t Mag Structure containing magneto value
 * @retval tBleStatus      Status
 */
tBleStatus AccGyroMag_Update(AxesRaw_TypeDef *Acc,AxesRaw_TypeDef *Gyro,AxesRaw_TypeDef *Mag)
{  
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08c      	sub	sp, #48	; 0x30
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  tBleStatus ret;

  uint8_t buff[2+3*3*2];

  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8005008:	f004 f9b2 	bl	8009370 <HAL_GetTick>
 800500c:	4603      	mov	r3, r0
 800500e:	08db      	lsrs	r3, r3, #3
 8005010:	b2db      	uxtb	r3, r3
 8005012:	743b      	strb	r3, [r7, #16]
 8005014:	f004 f9ac 	bl	8009370 <HAL_GetTick>
 8005018:	4603      	mov	r3, r0
 800501a:	0adb      	lsrs	r3, r3, #11
 800501c:	b2db      	uxtb	r3, r3
 800501e:	747b      	strb	r3, [r7, #17]
  
  STORE_LE_16(buff+2 ,Acc->AXIS_X);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	74bb      	strb	r3, [r7, #18]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	121b      	asrs	r3, r3, #8
 800502e:	b2db      	uxtb	r3, r3
 8005030:	74fb      	strb	r3, [r7, #19]
  STORE_LE_16(buff+4 ,Acc->AXIS_Y);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	753b      	strb	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	121b      	asrs	r3, r3, #8
 8005040:	b2db      	uxtb	r3, r3
 8005042:	757b      	strb	r3, [r7, #21]
  STORE_LE_16(buff+6 ,Acc->AXIS_Z);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	75bb      	strb	r3, [r7, #22]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	121b      	asrs	r3, r3, #8
 8005052:	b2db      	uxtb	r3, r3
 8005054:	75fb      	strb	r3, [r7, #23]
  
  Gyro->AXIS_X/=100;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a44      	ldr	r2, [pc, #272]	; (800516c <AccGyroMag_Update+0x170>)
 800505c:	fb82 1203 	smull	r1, r2, r2, r3
 8005060:	1152      	asrs	r2, r2, #5
 8005062:	17db      	asrs	r3, r3, #31
 8005064:	1ad2      	subs	r2, r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	601a      	str	r2, [r3, #0]
  Gyro->AXIS_Y/=100;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4a3f      	ldr	r2, [pc, #252]	; (800516c <AccGyroMag_Update+0x170>)
 8005070:	fb82 1203 	smull	r1, r2, r2, r3
 8005074:	1152      	asrs	r2, r2, #5
 8005076:	17db      	asrs	r3, r3, #31
 8005078:	1ad2      	subs	r2, r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	605a      	str	r2, [r3, #4]
  Gyro->AXIS_Z/=100;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4a3a      	ldr	r2, [pc, #232]	; (800516c <AccGyroMag_Update+0x170>)
 8005084:	fb82 1203 	smull	r1, r2, r2, r3
 8005088:	1152      	asrs	r2, r2, #5
 800508a:	17db      	asrs	r3, r3, #31
 800508c:	1ad2      	subs	r2, r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	609a      	str	r2, [r3, #8]

  STORE_LE_16(buff+8 ,Gyro->AXIS_X);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	763b      	strb	r3, [r7, #24]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	121b      	asrs	r3, r3, #8
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	767b      	strb	r3, [r7, #25]
  STORE_LE_16(buff+10,Gyro->AXIS_Y);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	76bb      	strb	r3, [r7, #26]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	121b      	asrs	r3, r3, #8
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	76fb      	strb	r3, [r7, #27]
  STORE_LE_16(buff+12,Gyro->AXIS_Z);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	773b      	strb	r3, [r7, #28]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	121b      	asrs	r3, r3, #8
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	777b      	strb	r3, [r7, #29]

  STORE_LE_16(buff+14,Mag->AXIS_X);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	77bb      	strb	r3, [r7, #30]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	121b      	asrs	r3, r3, #8
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	77fb      	strb	r3, [r7, #31]
  STORE_LE_16(buff+16,Mag->AXIS_Y);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f887 3020 	strb.w	r3, [r7, #32]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	121b      	asrs	r3, r3, #8
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  STORE_LE_16(buff+18,Mag->AXIS_Z);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	121b      	asrs	r3, r3, #8
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  
  ret = ACI_GATT_UPDATE_CHAR_VALUE(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+3*3*2, buff);
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <AccGyroMag_Update+0x174>)
 8005108:	8818      	ldrh	r0, [r3, #0]
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <AccGyroMag_Update+0x178>)
 800510c:	8819      	ldrh	r1, [r3, #0]
 800510e:	f107 0310 	add.w	r3, r7, #16
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2314      	movs	r3, #20
 8005116:	2200      	movs	r2, #0
 8005118:	f7ff fb82 	bl	8004820 <safe_aci_gatt_update_char_value>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
  if (ret != BLE_STATUS_SUCCESS){
 8005122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01b      	beq.n	8005162 <AccGyroMag_Update+0x166>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR)){
 800512a:	4b13      	ldr	r3, [pc, #76]	; (8005178 <AccGyroMag_Update+0x17c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	0a5b      	lsrs	r3, r3, #9
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00e      	beq.n	8005158 <AccGyroMag_Update+0x15c>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Acc/Gyro/Mag Char\r\n");
 800513a:	4910      	ldr	r1, [pc, #64]	; (800517c <AccGyroMag_Update+0x180>)
 800513c:	4810      	ldr	r0, [pc, #64]	; (8005180 <AccGyroMag_Update+0x184>)
 800513e:	f00a ff2b 	bl	800ff98 <siprintf>
 8005142:	4603      	mov	r3, r0
 8005144:	4a0f      	ldr	r2, [pc, #60]	; (8005184 <AccGyroMag_Update+0x188>)
 8005146:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <AccGyroMag_Update+0x188>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4619      	mov	r1, r3
 8005150:	480b      	ldr	r0, [pc, #44]	; (8005180 <AccGyroMag_Update+0x184>)
 8005152:	f7ff fcc1 	bl	8004ad8 <Stderr_Update>
 8005156:	e002      	b.n	800515e <AccGyroMag_Update+0x162>
    } else {
      PRINTF("Error Updating Acc/Gyro/Mag Char\r\n");
 8005158:	4808      	ldr	r0, [pc, #32]	; (800517c <AccGyroMag_Update+0x180>)
 800515a:	f7fc fae7 	bl	800172c <myprintf>
    }
    return BLE_STATUS_ERROR;
 800515e:	2347      	movs	r3, #71	; 0x47
 8005160:	e000      	b.n	8005164 <AccGyroMag_Update+0x168>
  }
  return BLE_STATUS_SUCCESS;	
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3728      	adds	r7, #40	; 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	51eb851f 	.word	0x51eb851f
 8005170:	20000200 	.word	0x20000200
 8005174:	20000204 	.word	0x20000204
 8005178:	200001f8 	.word	0x200001f8
 800517c:	0801171c 	.word	0x0801171c
 8005180:	20000bb8 	.word	0x20000bb8
 8005184:	20000db0 	.word	0x20000db0

08005188 <Batt_Env_RSSI_Update>:
 * @param  int16_t Temp Temperature in tenths of degree second sensor
 * @param  int16_t RSSI level in dB
 * @retval tBleStatus   Status
 */
tBleStatus Batt_Env_RSSI_Update(int32_t Press,uint16_t Batt,int16_t Temp,int16_t RSSI)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	4608      	mov	r0, r1
 8005192:	4611      	mov	r1, r2
 8005194:	461a      	mov	r2, r3
 8005196:	4603      	mov	r3, r0
 8005198:	817b      	strh	r3, [r7, #10]
 800519a:	460b      	mov	r3, r1
 800519c:	813b      	strh	r3, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;
  uint8_t BuffPos;
  
  uint8_t buff[2+4/*Press*/+2/*Batt*/+2/*Temp*/+2/*RSSI*/];

  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 80051a2:	f004 f8e5 	bl	8009370 <HAL_GetTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	08db      	lsrs	r3, r3, #3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	743b      	strb	r3, [r7, #16]
 80051ae:	f004 f8df 	bl	8009370 <HAL_GetTick>
 80051b2:	4603      	mov	r3, r0
 80051b4:	0adb      	lsrs	r3, r3, #11
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	747b      	strb	r3, [r7, #17]
  BuffPos=2;
 80051ba:	2302      	movs	r3, #2
 80051bc:	77fb      	strb	r3, [r7, #31]
  
  STORE_LE_32(buff+BuffPos,Press);
 80051be:	7ffb      	ldrb	r3, [r7, #31]
 80051c0:	f107 0210 	add.w	r2, r7, #16
 80051c4:	4413      	add	r3, r2
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1219      	asrs	r1, r3, #8
 80051d0:	7ffb      	ldrb	r3, [r7, #31]
 80051d2:	3301      	adds	r3, #1
 80051d4:	f107 0210 	add.w	r2, r7, #16
 80051d8:	4413      	add	r3, r2
 80051da:	b2ca      	uxtb	r2, r1
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1419      	asrs	r1, r3, #16
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
 80051e4:	3302      	adds	r3, #2
 80051e6:	f107 0210 	add.w	r2, r7, #16
 80051ea:	4413      	add	r3, r2
 80051ec:	b2ca      	uxtb	r2, r1
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	1619      	asrs	r1, r3, #24
 80051f4:	7ffb      	ldrb	r3, [r7, #31]
 80051f6:	3303      	adds	r3, #3
 80051f8:	f107 0210 	add.w	r2, r7, #16
 80051fc:	4413      	add	r3, r2
 80051fe:	b2ca      	uxtb	r2, r1
 8005200:	701a      	strb	r2, [r3, #0]
  BuffPos+=4;
 8005202:	7ffb      	ldrb	r3, [r7, #31]
 8005204:	3304      	adds	r3, #4
 8005206:	77fb      	strb	r3, [r7, #31]
  
  STORE_LE_16(buff+BuffPos,Batt);
 8005208:	7ffb      	ldrb	r3, [r7, #31]
 800520a:	f107 0210 	add.w	r2, r7, #16
 800520e:	4413      	add	r3, r2
 8005210:	897a      	ldrh	r2, [r7, #10]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	0a1b      	lsrs	r3, r3, #8
 800521a:	b299      	uxth	r1, r3
 800521c:	7ffb      	ldrb	r3, [r7, #31]
 800521e:	3301      	adds	r3, #1
 8005220:	f107 0210 	add.w	r2, r7, #16
 8005224:	4413      	add	r3, r2
 8005226:	b2ca      	uxtb	r2, r1
 8005228:	701a      	strb	r2, [r3, #0]
  BuffPos+=2;
 800522a:	7ffb      	ldrb	r3, [r7, #31]
 800522c:	3302      	adds	r3, #2
 800522e:	77fb      	strb	r3, [r7, #31]
 
  STORE_LE_16(buff+BuffPos,Temp);
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	f107 0210 	add.w	r2, r7, #16
 8005236:	4413      	add	r3, r2
 8005238:	893a      	ldrh	r2, [r7, #8]
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005242:	121b      	asrs	r3, r3, #8
 8005244:	b219      	sxth	r1, r3
 8005246:	7ffb      	ldrb	r3, [r7, #31]
 8005248:	3301      	adds	r3, #1
 800524a:	f107 0210 	add.w	r2, r7, #16
 800524e:	4413      	add	r3, r2
 8005250:	b2ca      	uxtb	r2, r1
 8005252:	701a      	strb	r2, [r3, #0]
  BuffPos+=2;
 8005254:	7ffb      	ldrb	r3, [r7, #31]
 8005256:	3302      	adds	r3, #2
 8005258:	77fb      	strb	r3, [r7, #31]

  STORE_LE_16(buff+BuffPos,RSSI);
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	f107 0210 	add.w	r2, r7, #16
 8005260:	4413      	add	r3, r2
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800526c:	121b      	asrs	r3, r3, #8
 800526e:	b219      	sxth	r1, r3
 8005270:	7ffb      	ldrb	r3, [r7, #31]
 8005272:	3301      	adds	r3, #1
 8005274:	f107 0210 	add.w	r2, r7, #16
 8005278:	4413      	add	r3, r2
 800527a:	b2ca      	uxtb	r2, r1
 800527c:	701a      	strb	r2, [r3, #0]
  BuffPos+=2;
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	3302      	adds	r3, #2
 8005282:	77fb      	strb	r3, [r7, #31]
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 0, 2+4+2+2+2,buff);
 8005284:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <Batt_Env_RSSI_Update+0x160>)
 8005286:	8818      	ldrh	r0, [r3, #0]
 8005288:	4b18      	ldr	r3, [pc, #96]	; (80052ec <Batt_Env_RSSI_Update+0x164>)
 800528a:	8819      	ldrh	r1, [r3, #0]
 800528c:	f107 0310 	add.w	r3, r7, #16
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	230c      	movs	r3, #12
 8005294:	2200      	movs	r2, #0
 8005296:	f009 fa27 	bl	800e6e8 <aci_gatt_update_char_value>
 800529a:	4603      	mov	r3, r0
 800529c:	77bb      	strb	r3, [r7, #30]

  if (ret != BLE_STATUS_SUCCESS){
 800529e:	7fbb      	ldrb	r3, [r7, #30]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <Batt_Env_RSSI_Update+0x154>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR)){
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <Batt_Env_RSSI_Update+0x168>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	0a5b      	lsrs	r3, r3, #9
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00e      	beq.n	80052d2 <Batt_Env_RSSI_Update+0x14a>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Environmental Char\r\n");
 80052b4:	490f      	ldr	r1, [pc, #60]	; (80052f4 <Batt_Env_RSSI_Update+0x16c>)
 80052b6:	4810      	ldr	r0, [pc, #64]	; (80052f8 <Batt_Env_RSSI_Update+0x170>)
 80052b8:	f00a fe6e 	bl	800ff98 <siprintf>
 80052bc:	4603      	mov	r3, r0
 80052be:	4a0f      	ldr	r2, [pc, #60]	; (80052fc <Batt_Env_RSSI_Update+0x174>)
 80052c0:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80052c2:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <Batt_Env_RSSI_Update+0x174>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	480b      	ldr	r0, [pc, #44]	; (80052f8 <Batt_Env_RSSI_Update+0x170>)
 80052cc:	f7ff fc04 	bl	8004ad8 <Stderr_Update>
 80052d0:	e002      	b.n	80052d8 <Batt_Env_RSSI_Update+0x150>
    } else {
      PRINTF("Error Updating Environmental Char\r\n");
 80052d2:	4808      	ldr	r0, [pc, #32]	; (80052f4 <Batt_Env_RSSI_Update+0x16c>)
 80052d4:	f7fc fa2a 	bl	800172c <myprintf>
    }
    return BLE_STATUS_ERROR;
 80052d8:	2347      	movs	r3, #71	; 0x47
 80052da:	e000      	b.n	80052de <Batt_Env_RSSI_Update+0x156>
  }
  return BLE_STATUS_SUCCESS;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000200 	.word	0x20000200
 80052ec:	20000202 	.word	0x20000202
 80052f0:	200001f8 	.word	0x200001f8
 80052f4:	08011740 	.word	0x08011740
 80052f8:	20000bb8 	.word	0x20000bb8
 80052fc:	20000db0 	.word	0x20000db0

08005300 <ARMING_Update>:
 * @brief  Update ARMING characteristic value
 * @param  uint8_t ArmingStatus Arming status 0/1 (off/on)
 * @retval tBleStatus   Status
 */
tBleStatus ARMING_Update(uint8_t ArmingStatus)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af02      	add	r7, sp, #8
 8005306:	4603      	mov	r3, r0
 8005308:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret;

  uint8_t buff[2+1];

  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 800530a:	f004 f831 	bl	8009370 <HAL_GetTick>
 800530e:	4603      	mov	r3, r0
 8005310:	08db      	lsrs	r3, r3, #3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	733b      	strb	r3, [r7, #12]
 8005316:	f004 f82b 	bl	8009370 <HAL_GetTick>
 800531a:	4603      	mov	r3, r0
 800531c:	0adb      	lsrs	r3, r3, #11
 800531e:	b2db      	uxtb	r3, r3
 8005320:	737b      	strb	r3, [r7, #13]
  buff[2] = ArmingStatus;
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	73bb      	strb	r3, [r7, #14]

  ret = aci_gatt_update_char_value(HWServW2STHandle, ArmingCharHandle, 0, 2+1,buff);
 8005326:	4b18      	ldr	r3, [pc, #96]	; (8005388 <ARMING_Update+0x88>)
 8005328:	8818      	ldrh	r0, [r3, #0]
 800532a:	4b18      	ldr	r3, [pc, #96]	; (800538c <ARMING_Update+0x8c>)
 800532c:	8819      	ldrh	r1, [r3, #0]
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2303      	movs	r3, #3
 8005336:	2200      	movs	r2, #0
 8005338:	f009 f9d6 	bl	800e6e8 <aci_gatt_update_char_value>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]

  if (ret != BLE_STATUS_SUCCESS){
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01b      	beq.n	800537e <ARMING_Update+0x7e>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR)){
 8005346:	4b12      	ldr	r3, [pc, #72]	; (8005390 <ARMING_Update+0x90>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	0a5b      	lsrs	r3, r3, #9
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <ARMING_Update+0x74>
      BytesToWrite = sprintf((char *)BufferToWrite, "Error Updating ARMING Char\r\n");
 8005356:	490f      	ldr	r1, [pc, #60]	; (8005394 <ARMING_Update+0x94>)
 8005358:	480f      	ldr	r0, [pc, #60]	; (8005398 <ARMING_Update+0x98>)
 800535a:	f00a fe1d 	bl	800ff98 <siprintf>
 800535e:	4603      	mov	r3, r0
 8005360:	4a0e      	ldr	r2, [pc, #56]	; (800539c <ARMING_Update+0x9c>)
 8005362:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8005364:	4b0d      	ldr	r3, [pc, #52]	; (800539c <ARMING_Update+0x9c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	4619      	mov	r1, r3
 800536c:	480a      	ldr	r0, [pc, #40]	; (8005398 <ARMING_Update+0x98>)
 800536e:	f7ff fbb3 	bl	8004ad8 <Stderr_Update>
 8005372:	e002      	b.n	800537a <ARMING_Update+0x7a>
    } else {
      PRINTF("Error Updating Temp Char\r\n");
 8005374:	480a      	ldr	r0, [pc, #40]	; (80053a0 <ARMING_Update+0xa0>)
 8005376:	f7fc f9d9 	bl	800172c <myprintf>
    }
    return BLE_STATUS_ERROR;
 800537a:	2347      	movs	r3, #71	; 0x47
 800537c:	e000      	b.n	8005380 <ARMING_Update+0x80>
  }
  return BLE_STATUS_SUCCESS;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000200 	.word	0x20000200
 800538c:	20000208 	.word	0x20000208
 8005390:	200001f8 	.word	0x200001f8
 8005394:	08011764 	.word	0x08011764
 8005398:	20000bb8 	.word	0x20000bb8
 800539c:	20000db0 	.word	0x20000db0
 80053a0:	08011784 	.word	0x08011784

080053a4 <setConnectable>:
 * @brief  Puts the device in connectable mode.
 * @param  None 
 * @retval None
 */
void setConnectable(void)
{  
 80053a4:	b5b0      	push	{r4, r5, r7, lr}
 80053a6:	b092      	sub	sp, #72	; 0x48
 80053a8:	af08      	add	r7, sp, #32
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_DRN};
 80053aa:	4a2e      	ldr	r2, [pc, #184]	; (8005464 <setConnectable+0xc0>)
 80053ac:	f107 0320 	add.w	r3, r7, #32
 80053b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053b4:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t manuf_data[26] = {
 80053b8:	4b2b      	ldr	r3, [pc, #172]	; (8005468 <setConnectable+0xc4>)
 80053ba:	1d3c      	adds	r4, r7, #4
 80053bc:	461d      	mov	r5, r3
 80053be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053c6:	c403      	stmia	r4!, {r0, r1}
 80053c8:	8022      	strh	r2, [r4, #0]
    0x00,
    0x00, /* BLE MAC stop */
  };

  /* BLE MAC */
  manuf_data[20] = bdaddr[5];
 80053ca:	4b28      	ldr	r3, [pc, #160]	; (800546c <setConnectable+0xc8>)
 80053cc:	795b      	ldrb	r3, [r3, #5]
 80053ce:	763b      	strb	r3, [r7, #24]
  manuf_data[21] = bdaddr[4];
 80053d0:	4b26      	ldr	r3, [pc, #152]	; (800546c <setConnectable+0xc8>)
 80053d2:	791b      	ldrb	r3, [r3, #4]
 80053d4:	767b      	strb	r3, [r7, #25]
  manuf_data[22] = bdaddr[3];
 80053d6:	4b25      	ldr	r3, [pc, #148]	; (800546c <setConnectable+0xc8>)
 80053d8:	78db      	ldrb	r3, [r3, #3]
 80053da:	76bb      	strb	r3, [r7, #26]
  manuf_data[23] = bdaddr[2];
 80053dc:	4b23      	ldr	r3, [pc, #140]	; (800546c <setConnectable+0xc8>)
 80053de:	789b      	ldrb	r3, [r3, #2]
 80053e0:	76fb      	strb	r3, [r7, #27]
  manuf_data[24] = bdaddr[1];
 80053e2:	4b22      	ldr	r3, [pc, #136]	; (800546c <setConnectable+0xc8>)
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	773b      	strb	r3, [r7, #28]
  manuf_data[25] = bdaddr[0];
 80053e8:	4b20      	ldr	r3, [pc, #128]	; (800546c <setConnectable+0xc8>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	777b      	strb	r3, [r7, #29]

  manuf_data[16] |= 0x20; /* Led */
 80053ee:	7d3b      	ldrb	r3, [r7, #20]
 80053f0:	f043 0320 	orr.w	r3, r3, #32
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	753b      	strb	r3, [r7, #20]
  manuf_data[17] |= 0x05; /* Temperature and RSSI values*/
 80053f8:	7d7b      	ldrb	r3, [r7, #21]
 80053fa:	f043 0305 	orr.w	r3, r3, #5
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	757b      	strb	r3, [r7, #21]
  manuf_data[17] |= 0x08; /* Battery level (percentage of full battery) */
 8005402:	7d7b      	ldrb	r3, [r7, #21]
 8005404:	f043 0308 	orr.w	r3, r3, #8
 8005408:	b2db      	uxtb	r3, r3
 800540a:	757b      	strb	r3, [r7, #21]
  manuf_data[17] |= 0x10; /* Pressure value*/
 800540c:	7d7b      	ldrb	r3, [r7, #21]
 800540e:	f043 0310 	orr.w	r3, r3, #16
 8005412:	b2db      	uxtb	r3, r3
 8005414:	757b      	strb	r3, [r7, #21]
    
  /* Max Char */
  manuf_data[18] |=0x80;
 8005416:	7dbb      	ldrb	r3, [r7, #22]
 8005418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800541c:	b2db      	uxtb	r3, r3
 800541e:	75bb      	strb	r3, [r7, #22]

  /* disable scan response */
  hci_le_set_scan_resp_data(0,NULL);
 8005420:	2100      	movs	r1, #0
 8005422:	2000      	movs	r0, #0
 8005424:	f009 fdb6 	bl	800ef94 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 8005428:	2300      	movs	r3, #0
 800542a:	9306      	str	r3, [sp, #24]
 800542c:	2300      	movs	r3, #0
 800542e:	9305      	str	r3, [sp, #20]
 8005430:	2300      	movs	r3, #0
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	2300      	movs	r3, #0
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	f107 0320 	add.w	r3, r7, #32
 800543c:	9302      	str	r3, [sp, #8]
 800543e:	2308      	movs	r3, #8
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	2300      	movs	r3, #0
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	2301      	movs	r3, #1
 8005448:	2200      	movs	r2, #0
 800544a:	2100      	movs	r1, #0
 800544c:	2000      	movs	r0, #0
 800544e:	f008 fe29 	bl	800e0a4 <aci_gap_set_discoverable>
//#endif /* MAC_MOTENV */
                           NO_WHITE_LIST_USE,
                           sizeof(local_name), local_name, 0, NULL, 0, 0);

  /* Send Advertising data */
  aci_gap_update_adv_data(26, manuf_data);
 8005452:	1d3b      	adds	r3, r7, #4
 8005454:	4619      	mov	r1, r3
 8005456:	201a      	movs	r0, #26
 8005458:	f008 ff70 	bl	800e33c <aci_gap_update_adv_data>
}
 800545c:	bf00      	nop
 800545e:	3728      	adds	r7, #40	; 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bdb0      	pop	{r4, r5, r7, pc}
 8005464:	080117a0 	.word	0x080117a0
 8005468:	080117a8 	.word	0x080117a8
 800546c:	200007e0 	.word	0x200007e0

08005470 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t addr[6] Address of peer device
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af04      	add	r7, sp, #16
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 800547c:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <GAP_ConnectionComplete_CB+0x84>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8005482:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <GAP_ConnectionComplete_CB+0x88>)
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	8013      	strh	r3, [r2, #0]

#ifdef MOTENV_DEBUG_CONNECTION
  PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3305      	adds	r3, #5
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	461c      	mov	r4, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3303      	adds	r3, #3
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	461d      	mov	r5, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3302      	adds	r3, #2
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3301      	adds	r3, #1
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	9302      	str	r3, [sp, #8]
 80054b6:	9101      	str	r1, [sp, #4]
 80054b8:	9200      	str	r2, [sp, #0]
 80054ba:	462b      	mov	r3, r5
 80054bc:	4622      	mov	r2, r4
 80054be:	4601      	mov	r1, r0
 80054c0:	480e      	ldr	r0, [pc, #56]	; (80054fc <GAP_ConnectionComplete_CB+0x8c>)
 80054c2:	f7fc f933 	bl	800172c <myprintf>
#endif /* MOTENV_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <GAP_ConnectionComplete_CB+0x90>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
  
  if(TargetBoardFeatures.HWAdvanceFeatures) {
 80054cc:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <GAP_ConnectionComplete_CB+0x94>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <GAP_ConnectionComplete_CB+0x68>
    DisableHWFeatures();
 80054d4:	f000 fc9c 	bl	8005e10 <DisableHWFeatures>
  }
  
aci_l2cap_connection_parameter_update_request(connection_handle,
 80054d8:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <GAP_ConnectionComplete_CB+0x88>)
 80054da:	8818      	ldrh	r0, [r3, #0]
 80054dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	2300      	movs	r3, #0
 80054e4:	220a      	movs	r2, #10
 80054e6:	210a      	movs	r1, #10
 80054e8:	f009 f9f4 	bl	800e8d4 <aci_l2cap_connection_parameter_update_request>
                                                      10 /* interval_min*/,
                                                      10 /* interval_max */,
                                                      0   /* slave_latency */,
                                                      400 /*timeout_multiplier*/);
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdb0      	pop	{r4, r5, r7, pc}
 80054f4:	200001fc 	.word	0x200001fc
 80054f8:	20000246 	.word	0x20000246
 80054fc:	080117c4 	.word	0x080117c4
 8005500:	200001f8 	.word	0x200001f8
 8005504:	20000e48 	.word	0x20000e48

08005508 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  connected = FALSE;
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <GAP_DisconnectionComplete_CB+0x2c>)
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]

#ifdef MOTENV_DEBUG_CONNECTION  
  PRINTF("<<<<<<DISCONNECTED\r\n");
 8005512:	4809      	ldr	r0, [pc, #36]	; (8005538 <GAP_DisconnectionComplete_CB+0x30>)
 8005514:	f7fc f90a 	bl	800172c <myprintf>
#endif /* MOTENV_DEBUG_CONNECTION */  

  /* Make the device connectable again. */
  set_connectable = TRUE;
 8005518:	4b08      	ldr	r3, [pc, #32]	; (800553c <GAP_DisconnectionComplete_CB+0x34>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]

  ConnectionBleStatus=0;
 800551e:	4b08      	ldr	r3, [pc, #32]	; (8005540 <GAP_DisconnectionComplete_CB+0x38>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
  
  if(TargetBoardFeatures.HWAdvanceFeatures) {
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <GAP_DisconnectionComplete_CB+0x3c>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <GAP_DisconnectionComplete_CB+0x28>
    DisableHWFeatures();
 800552c:	f000 fc70 	bl	8005e10 <DisableHWFeatures>
  }
  
}
 8005530:	bf00      	nop
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200001fc 	.word	0x200001fc
 8005538:	080117e8 	.word	0x080117e8
 800553c:	20000024 	.word	0x20000024
 8005540:	200001f8 	.word	0x200001f8
 8005544:	20000e48 	.word	0x20000e48

08005548 <Read_Request_CB>:
 * @brief  This function is called when there is a Bluetooth Read request
 * @param  uint16_t handle Handle of the attribute
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	80fb      	strh	r3, [r7, #6]
  //uint8_t Status;
  if(handle == EnvironmentalCharHandle + 1){
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	4b36      	ldr	r3, [pc, #216]	; (8005630 <Read_Request_CB+0xe8>)
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	429a      	cmp	r2, r3
 800555c:	d137      	bne.n	80055ce <Read_Request_CB+0x86>
    /* Read Request for Pressure,Battery, and Temperatures*/
    float SensorValue=0.0;
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
    int32_t PressToSend=0;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
    uint16_t BattToSend=0;
 8005568:	2300      	movs	r3, #0
 800556a:	82fb      	strh	r3, [r7, #22]
    int16_t TempToSend=0,RSSIToSend=0;
 800556c:	2300      	movs	r3, #0
 800556e:	82bb      	strh	r3, [r7, #20]
 8005570:	2300      	movs	r3, #0
 8005572:	827b      	strh	r3, [r7, #18]
    int32_t decPart, intPart;
    if(TargetBoardFeatures.HandlePressSensor) {
 8005574:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <Read_Request_CB+0xec>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <Read_Request_CB+0x74>
    //  if((TargetBoardFeatures.SnsAltFunc ? BSP_PRESSURE_IsInitialized : BSP_PRESSURE_IsInitialized)(TargetBoardFeatures.HandlePressSensor,&Status)==COMPONENT_OK) {
     //   (TargetBoardFeatures.SnsAltFunc ? BSP_PRESSURE_Get_Press : BSP_PRESSURE_Get_Press)(TargetBoardFeatures.HandlePressSensor,(float *)&SensorValue);
        MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 800557c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005584:	ee17 3a90 	vmov	r3, s15
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	ee07 3a90 	vmov	s15, r3
 8005590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005594:	ed97 7a06 	vldr	s14, [r7, #24]
 8005598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800559c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005638 <Read_Request_CB+0xf0>
 80055a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a8:	ee17 3a90 	vmov	r3, s15
 80055ac:	60bb      	str	r3, [r7, #8]
        PressToSend=intPart*100+decPart;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2264      	movs	r2, #100	; 0x64
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	4413      	add	r3, r2
 80055ba:	61fb      	str	r3, [r7, #28]
     // }
    }

    Batt_Env_RSSI_Update(PressToSend,BattToSend,TempToSend,RSSIToSend);
 80055bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80055c4:	8af9      	ldrh	r1, [r7, #22]
 80055c6:	69f8      	ldr	r0, [r7, #28]
 80055c8:	f7ff fdde 	bl	8005188 <Batt_Env_RSSI_Update>
 80055cc:	e023      	b.n	8005616 <Read_Request_CB+0xce>
  } else if(handle == ArmingCharHandle + 1){
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <Read_Request_CB+0xf4>)
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d106      	bne.n	80055e8 <Read_Request_CB+0xa0>
    /* Read Request for Arming Status */
    ARMING_Update(TargetBoardFeatures.LedStatus);
 80055da:	4b16      	ldr	r3, [pc, #88]	; (8005634 <Read_Request_CB+0xec>)
 80055dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff fe8d 	bl	8005300 <ARMING_Update>
 80055e6:	e016      	b.n	8005616 <Read_Request_CB+0xce>
  } else if(handle == AccEventCharHandle +1) {
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	4b15      	ldr	r3, [pc, #84]	; (8005640 <Read_Request_CB+0xf8>)
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	3301      	adds	r3, #1
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d010      	beq.n	8005616 <Read_Request_CB+0xce>
    
  }else if (handle == StdErrCharHandle + 1) {
 80055f4:	88fa      	ldrh	r2, [r7, #6]
 80055f6:	4b13      	ldr	r3, [pc, #76]	; (8005644 <Read_Request_CB+0xfc>)
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d102      	bne.n	8005606 <Read_Request_CB+0xbe>
    /* Send again the last packet for StdError */
    Stderr_Update_AfterRead();
 8005600:	f7ff fb00 	bl	8004c04 <Stderr_Update_AfterRead>
 8005604:	e007      	b.n	8005616 <Read_Request_CB+0xce>
  } else if (handle == TermCharHandle + 1) {
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <Read_Request_CB+0x100>)
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	429a      	cmp	r2, r3
 8005610:	d101      	bne.n	8005616 <Read_Request_CB+0xce>
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
 8005612:	f7ff fb19 	bl	8004c48 <Term_Update_AfterRead>
    GG_Update();
#endif /* STM32_SENSORTILE */
  }

  //EXIT:
  if(connection_handle != 0)
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <Read_Request_CB+0x104>)
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <Read_Request_CB+0xe0>
    aci_gatt_allow_read(connection_handle);
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <Read_Request_CB+0x104>)
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f009 f8f8 	bl	800e818 <aci_gatt_allow_read>
}
 8005628:	bf00      	nop
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000202 	.word	0x20000202
 8005634:	20000e48 	.word	0x20000e48
 8005638:	42c80000 	.word	0x42c80000
 800563c:	20000208 	.word	0x20000208
 8005640:	20000206 	.word	0x20000206
 8005644:	20000214 	.word	0x20000214
 8005648:	20000212 	.word	0x20000212
 800564c:	20000246 	.word	0x20000246

08005650 <Attribute_Modified_CB>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length) 
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	80fb      	strh	r3, [r7, #6]
 800565c:	4613      	mov	r3, r2
 800565e:	717b      	strb	r3, [r7, #5]
  if(attr_handle == ConfigCharHandle + 2) 
 8005660:	88fa      	ldrh	r2, [r7, #6]
 8005662:	4b7e      	ldr	r3, [pc, #504]	; (800585c <Attribute_Modified_CB+0x20c>)
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	3302      	adds	r3, #2
 8005668:	429a      	cmp	r2, r3
 800566a:	f000 80f3 	beq.w	8005854 <Attribute_Modified_CB+0x204>
  {
    ;/* do nothing... only for removing the message "Notification UNKNOW handle" */
  } 
  else if(attr_handle == StdErrCharHandle + 2)
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	4b7b      	ldr	r3, [pc, #492]	; (8005860 <Attribute_Modified_CB+0x210>)
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	3302      	adds	r3, #2
 8005676:	429a      	cmp	r2, r3
 8005678:	d116      	bne.n	80056a8 <Attribute_Modified_CB+0x58>
  {
    if (att_data[0] == 01) 
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d106      	bne.n	8005690 <Attribute_Modified_CB+0x40>
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
 8005682:	4b78      	ldr	r3, [pc, #480]	; (8005864 <Attribute_Modified_CB+0x214>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800568a:	4a76      	ldr	r2, [pc, #472]	; (8005864 <Attribute_Modified_CB+0x214>)
 800568c:	6013      	str	r3, [r2, #0]
    else 
    {
      PRINTF("Notification UNKNOW handle\r\n");
    }
  }
}
 800568e:	e0e1      	b.n	8005854 <Attribute_Modified_CB+0x204>
    } else if (att_data[0] == 0)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f040 80dd 	bne.w	8005854 <Attribute_Modified_CB+0x204>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
 800569a:	4b72      	ldr	r3, [pc, #456]	; (8005864 <Attribute_Modified_CB+0x214>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a2:	4a70      	ldr	r2, [pc, #448]	; (8005864 <Attribute_Modified_CB+0x214>)
 80056a4:	6013      	str	r3, [r2, #0]
}
 80056a6:	e0d5      	b.n	8005854 <Attribute_Modified_CB+0x204>
  else if(attr_handle == TermCharHandle + 2)
 80056a8:	88fa      	ldrh	r2, [r7, #6]
 80056aa:	4b6f      	ldr	r3, [pc, #444]	; (8005868 <Attribute_Modified_CB+0x218>)
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	3302      	adds	r3, #2
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d116      	bne.n	80056e2 <Attribute_Modified_CB+0x92>
    if (att_data[0] == 01) 
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d106      	bne.n	80056ca <Attribute_Modified_CB+0x7a>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_TERM);
 80056bc:	4b69      	ldr	r3, [pc, #420]	; (8005864 <Attribute_Modified_CB+0x214>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c4:	4a67      	ldr	r2, [pc, #412]	; (8005864 <Attribute_Modified_CB+0x214>)
 80056c6:	6013      	str	r3, [r2, #0]
}
 80056c8:	e0c4      	b.n	8005854 <Attribute_Modified_CB+0x204>
    else if (att_data[0] == 0)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f040 80c0 	bne.w	8005854 <Attribute_Modified_CB+0x204>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_TERM);
 80056d4:	4b63      	ldr	r3, [pc, #396]	; (8005864 <Attribute_Modified_CB+0x214>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056dc:	4a61      	ldr	r2, [pc, #388]	; (8005864 <Attribute_Modified_CB+0x214>)
 80056de:	6013      	str	r3, [r2, #0]
}
 80056e0:	e0b8      	b.n	8005854 <Attribute_Modified_CB+0x204>
  else if (attr_handle == TermCharHandle + 1)
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	4b60      	ldr	r3, [pc, #384]	; (8005868 <Attribute_Modified_CB+0x218>)
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d111      	bne.n	8005712 <Attribute_Modified_CB+0xc2>
    uint32_t SendBackData =1; /* By default Answer with the same message received */
 80056ee:	2301      	movs	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
      SendBackData = DebugConsoleCommandParsing(att_data,data_length);
 80056f2:	797b      	ldrb	r3, [r7, #5]
 80056f4:	4619      	mov	r1, r3
 80056f6:	6838      	ldr	r0, [r7, #0]
 80056f8:	f000 f8cc 	bl	8005894 <DebugConsoleCommandParsing>
 80056fc:	60f8      	str	r0, [r7, #12]
    if(SendBackData) 
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80a7 	beq.w	8005854 <Attribute_Modified_CB+0x204>
      Term_Update(att_data,data_length);
 8005706:	797b      	ldrb	r3, [r7, #5]
 8005708:	4619      	mov	r1, r3
 800570a:	6838      	ldr	r0, [r7, #0]
 800570c:	f7ff fa2c 	bl	8004b68 <Term_Update>
}
 8005710:	e0a0      	b.n	8005854 <Attribute_Modified_CB+0x204>
  else if(attr_handle == ArmingCharHandle + 2)
 8005712:	88fa      	ldrh	r2, [r7, #6]
 8005714:	4b55      	ldr	r3, [pc, #340]	; (800586c <Attribute_Modified_CB+0x21c>)
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	3302      	adds	r3, #2
 800571a:	429a      	cmp	r2, r3
 800571c:	d14d      	bne.n	80057ba <Attribute_Modified_CB+0x16a>
    if (att_data[0] == 01) 
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d10c      	bne.n	8005740 <Attribute_Modified_CB+0xf0>
      W2ST_ON_CONNECTION(W2ST_CONNECT_LED);
 8005726:	4b4f      	ldr	r3, [pc, #316]	; (8005864 <Attribute_Modified_CB+0x214>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f043 0302 	orr.w	r3, r3, #2
 800572e:	4a4d      	ldr	r2, [pc, #308]	; (8005864 <Attribute_Modified_CB+0x214>)
 8005730:	6013      	str	r3, [r2, #0]
      ARMING_Update(TargetBoardFeatures.LedStatus);
 8005732:	4b4f      	ldr	r3, [pc, #316]	; (8005870 <Attribute_Modified_CB+0x220>)
 8005734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fde1 	bl	8005300 <ARMING_Update>
 800573e:	e009      	b.n	8005754 <Attribute_Modified_CB+0x104>
    else if (att_data[0] == 0)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <Attribute_Modified_CB+0x104>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_LED);
 8005748:	4b46      	ldr	r3, [pc, #280]	; (8005864 <Attribute_Modified_CB+0x214>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f023 0302 	bic.w	r3, r3, #2
 8005750:	4a44      	ldr	r2, [pc, #272]	; (8005864 <Attribute_Modified_CB+0x214>)
 8005752:	6013      	str	r3, [r2, #0]
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 8005754:	4b43      	ldr	r3, [pc, #268]	; (8005864 <Attribute_Modified_CB+0x214>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01a      	beq.n	800579a <Attribute_Modified_CB+0x14a>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 8005764:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <Attribute_Modified_CB+0x214>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <Attribute_Modified_CB+0x128>
 8005774:	4b3f      	ldr	r3, [pc, #252]	; (8005874 <Attribute_Modified_CB+0x224>)
 8005776:	e000      	b.n	800577a <Attribute_Modified_CB+0x12a>
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <Attribute_Modified_CB+0x228>)
 800577a:	461a      	mov	r2, r3
 800577c:	493f      	ldr	r1, [pc, #252]	; (800587c <Attribute_Modified_CB+0x22c>)
 800577e:	4840      	ldr	r0, [pc, #256]	; (8005880 <Attribute_Modified_CB+0x230>)
 8005780:	f00a fc0a 	bl	800ff98 <siprintf>
 8005784:	4603      	mov	r3, r0
 8005786:	4a3f      	ldr	r2, [pc, #252]	; (8005884 <Attribute_Modified_CB+0x234>)
 8005788:	6013      	str	r3, [r2, #0]
     Term_Update(BufferToWrite,BytesToWrite);
 800578a:	4b3e      	ldr	r3, [pc, #248]	; (8005884 <Attribute_Modified_CB+0x234>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	4619      	mov	r1, r3
 8005792:	483b      	ldr	r0, [pc, #236]	; (8005880 <Attribute_Modified_CB+0x230>)
 8005794:	f7ff f9e8 	bl	8004b68 <Term_Update>
}
 8005798:	e05c      	b.n	8005854 <Attribute_Modified_CB+0x204>
      PRINTF("--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 800579a:	4b32      	ldr	r3, [pc, #200]	; (8005864 <Attribute_Modified_CB+0x214>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <Attribute_Modified_CB+0x15e>
 80057aa:	4b32      	ldr	r3, [pc, #200]	; (8005874 <Attribute_Modified_CB+0x224>)
 80057ac:	e000      	b.n	80057b0 <Attribute_Modified_CB+0x160>
 80057ae:	4b32      	ldr	r3, [pc, #200]	; (8005878 <Attribute_Modified_CB+0x228>)
 80057b0:	4619      	mov	r1, r3
 80057b2:	4832      	ldr	r0, [pc, #200]	; (800587c <Attribute_Modified_CB+0x22c>)
 80057b4:	f7fb ffba 	bl	800172c <myprintf>
}
 80057b8:	e04c      	b.n	8005854 <Attribute_Modified_CB+0x204>
  else if (attr_handle == ConfigCharHandle + 1) 
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	4b27      	ldr	r3, [pc, #156]	; (800585c <Attribute_Modified_CB+0x20c>)
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d105      	bne.n	80057d2 <Attribute_Modified_CB+0x182>
    ConfigCommandParsing(att_data, data_length);		
 80057c6:	797b      	ldrb	r3, [r7, #5]
 80057c8:	4619      	mov	r1, r3
 80057ca:	6838      	ldr	r0, [r7, #0]
 80057cc:	f000 fa9a 	bl	8005d04 <ConfigCommandParsing>
}
 80057d0:	e040      	b.n	8005854 <Attribute_Modified_CB+0x204>
  else if (attr_handle == MaxCharHandle+ 1)
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	4b2c      	ldr	r3, [pc, #176]	; (8005888 <Attribute_Modified_CB+0x238>)
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	429a      	cmp	r2, r3
 80057dc:	d120      	bne.n	8005820 <Attribute_Modified_CB+0x1d0>
     joydata[0] = att_data[1];
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	785a      	ldrb	r2, [r3, #1]
 80057e2:	4b2a      	ldr	r3, [pc, #168]	; (800588c <Attribute_Modified_CB+0x23c>)
 80057e4:	701a      	strb	r2, [r3, #0]
     joydata[1] = att_data[2];
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	789a      	ldrb	r2, [r3, #2]
 80057ea:	4b28      	ldr	r3, [pc, #160]	; (800588c <Attribute_Modified_CB+0x23c>)
 80057ec:	705a      	strb	r2, [r3, #1]
     joydata[2] = att_data[3];
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	78da      	ldrb	r2, [r3, #3]
 80057f2:	4b26      	ldr	r3, [pc, #152]	; (800588c <Attribute_Modified_CB+0x23c>)
 80057f4:	709a      	strb	r2, [r3, #2]
     joydata[3] = att_data[4];
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	791a      	ldrb	r2, [r3, #4]
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <Attribute_Modified_CB+0x23c>)
 80057fc:	70da      	strb	r2, [r3, #3]
     joydata[4] = att_data[5];
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	795a      	ldrb	r2, [r3, #5]
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <Attribute_Modified_CB+0x23c>)
 8005804:	711a      	strb	r2, [r3, #4]
     joydata[5] = att_data[6];
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	799a      	ldrb	r2, [r3, #6]
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <Attribute_Modified_CB+0x23c>)
 800580c:	715a      	strb	r2, [r3, #5]
     joydata[6] = att_data[7];
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	79da      	ldrb	r2, [r3, #7]
 8005812:	4b1e      	ldr	r3, [pc, #120]	; (800588c <Attribute_Modified_CB+0x23c>)
 8005814:	719a      	strb	r2, [r3, #6]
     joydata[7] = att_data[8];
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	7a1a      	ldrb	r2, [r3, #8]
 800581a:	4b1c      	ldr	r3, [pc, #112]	; (800588c <Attribute_Modified_CB+0x23c>)
 800581c:	71da      	strb	r2, [r3, #7]
}
 800581e:	e019      	b.n	8005854 <Attribute_Modified_CB+0x204>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8005820:	4b10      	ldr	r3, [pc, #64]	; (8005864 <Attribute_Modified_CB+0x214>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	0a5b      	lsrs	r3, r3, #9
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00e      	beq.n	800584e <Attribute_Modified_CB+0x1fe>
      BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
 8005830:	4917      	ldr	r1, [pc, #92]	; (8005890 <Attribute_Modified_CB+0x240>)
 8005832:	4813      	ldr	r0, [pc, #76]	; (8005880 <Attribute_Modified_CB+0x230>)
 8005834:	f00a fbb0 	bl	800ff98 <siprintf>
 8005838:	4603      	mov	r3, r0
 800583a:	4a12      	ldr	r2, [pc, #72]	; (8005884 <Attribute_Modified_CB+0x234>)
 800583c:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <Attribute_Modified_CB+0x234>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	4619      	mov	r1, r3
 8005846:	480e      	ldr	r0, [pc, #56]	; (8005880 <Attribute_Modified_CB+0x230>)
 8005848:	f7ff f946 	bl	8004ad8 <Stderr_Update>
}
 800584c:	e002      	b.n	8005854 <Attribute_Modified_CB+0x204>
      PRINTF("Notification UNKNOW handle\r\n");
 800584e:	4810      	ldr	r0, [pc, #64]	; (8005890 <Attribute_Modified_CB+0x240>)
 8005850:	f7fb ff6c 	bl	800172c <myprintf>
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	2000020e 	.word	0x2000020e
 8005860:	20000214 	.word	0x20000214
 8005864:	200001f8 	.word	0x200001f8
 8005868:	20000212 	.word	0x20000212
 800586c:	20000208 	.word	0x20000208
 8005870:	20000e48 	.word	0x20000e48
 8005874:	08011800 	.word	0x08011800
 8005878:	08011804 	.word	0x08011804
 800587c:	08011808 	.word	0x08011808
 8005880:	20000bb8 	.word	0x20000bb8
 8005884:	20000db0 	.word	0x20000db0
 8005888:	2000020a 	.word	0x2000020a
 800588c:	200001bc 	.word	0x200001bc
 8005890:	08011818 	.word	0x08011818

08005894 <DebugConsoleCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval uint32_t SendItBack true/false
 */
static uint32_t DebugConsoleCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8005894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005896:	b09d      	sub	sp, #116	; 0x74
 8005898:	af0c      	add	r7, sp, #48	; 0x30
 800589a:	6178      	str	r0, [r7, #20]
 800589c:	460b      	mov	r3, r1
 800589e:	74fb      	strb	r3, [r7, #19]
  uint32_t SendBackData = 1;
 80058a0:	2301      	movs	r3, #1
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if((att_data[0]=='?') & (att_data[1]=='?')) {
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b3f      	cmp	r3, #63	; 0x3f
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	3301      	adds	r3, #1
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b3f      	cmp	r3, #63	; 0x3f
 80058ba:	bf0c      	ite	eq
 80058bc:	2301      	moveq	r3, #1
 80058be:	2300      	movne	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	4013      	ands	r3, r2
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d010      	beq.n	80058ec <DebugConsoleCommandParsing+0x58>
    /* Print Legend */
    SendBackData=0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	63fb      	str	r3, [r7, #60]	; 0x3c

    BytesToWrite =sprintf((char *)BufferToWrite,"Command:\r\n"
 80058ce:	496a      	ldr	r1, [pc, #424]	; (8005a78 <DebugConsoleCommandParsing+0x1e4>)
 80058d0:	486a      	ldr	r0, [pc, #424]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 80058d2:	f00a fb61 	bl	800ff98 <siprintf>
 80058d6:	4603      	mov	r3, r0
 80058d8:	4a69      	ldr	r2, [pc, #420]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 80058da:	6013      	str	r3, [r2, #0]
       "versionFw-> FW Version\r\n"
       "versionBle-> Ble Version\r\n");
#else /* USE_STM32L0XX_NUCLEO */
       );
#endif /* USE_STM32L0XX_NUCLEO */
    Term_Update(BufferToWrite,BytesToWrite);
 80058dc:	4b68      	ldr	r3, [pc, #416]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	4619      	mov	r1, r3
 80058e4:	4865      	ldr	r0, [pc, #404]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 80058e6:	f7ff f93f 	bl	8004b68 <Term_Update>
 80058ea:	e15c      	b.n	8005ba6 <DebugConsoleCommandParsing+0x312>
  } else if((att_data[0]=='p') & (att_data[1]=='r')) {
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b70      	cmp	r3, #112	; 0x70
 80058f2:	bf0c      	ite	eq
 80058f4:	2301      	moveq	r3, #1
 80058f6:	2300      	movne	r3, #0
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	3301      	adds	r3, #1
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b72      	cmp	r3, #114	; 0x72
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	4013      	ands	r3, r2
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <DebugConsoleCommandParsing+0x84>
    SendBackData=0;
 8005912:	2300      	movs	r3, #0
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005916:	e146      	b.n	8005ba6 <DebugConsoleCommandParsing+0x312>
  }
#ifndef USE_STM32L0XX_NUCLEO
  else if(!strncmp("versionFw",(char *)(att_data),9)) {
 8005918:	2209      	movs	r2, #9
 800591a:	6979      	ldr	r1, [r7, #20]
 800591c:	4859      	ldr	r0, [pc, #356]	; (8005a84 <DebugConsoleCommandParsing+0x1f0>)
 800591e:	f00a fb5b 	bl	800ffd8 <strncmp>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d118      	bne.n	800595a <DebugConsoleCommandParsing+0xc6>
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%s_%c.%c.%c\r\n",
 8005928:	2330      	movs	r3, #48	; 0x30
 800592a:	9302      	str	r3, [sp, #8]
 800592c:	2330      	movs	r3, #48	; 0x30
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	2331      	movs	r3, #49	; 0x31
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	4b54      	ldr	r3, [pc, #336]	; (8005a88 <DebugConsoleCommandParsing+0x1f4>)
 8005936:	4a55      	ldr	r2, [pc, #340]	; (8005a8c <DebugConsoleCommandParsing+0x1f8>)
 8005938:	4955      	ldr	r1, [pc, #340]	; (8005a90 <DebugConsoleCommandParsing+0x1fc>)
 800593a:	4850      	ldr	r0, [pc, #320]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 800593c:	f00a fb2c 	bl	800ff98 <siprintf>
 8005940:	4603      	mov	r3, r0
 8005942:	4a4f      	ldr	r2, [pc, #316]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 8005944:	6013      	str	r3, [r2, #0]
#endif
                          ,DRN_PACKAGENAME,
                          DRN_VERSION_MAJOR,
                          DRN_VERSION_MINOR,
                          DRN_VERSION_PATCH);
    Term_Update(BufferToWrite,BytesToWrite);
 8005946:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	4619      	mov	r1, r3
 800594e:	484b      	ldr	r0, [pc, #300]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 8005950:	f7ff f90a 	bl	8004b68 <Term_Update>
    SendBackData=0;
 8005954:	2300      	movs	r3, #0
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005958:	e125      	b.n	8005ba6 <DebugConsoleCommandParsing+0x312>
  }
#endif /* USE_STM32L0XX_NUCLEO */
  else if(!strncmp("info",(char *)(att_data),4)) {
 800595a:	2204      	movs	r2, #4
 800595c:	6979      	ldr	r1, [r7, #20]
 800595e:	484d      	ldr	r0, [pc, #308]	; (8005a94 <DebugConsoleCommandParsing+0x200>)
 8005960:	f00a fb3a 	bl	800ffd8 <strncmp>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d13e      	bne.n	80059e8 <DebugConsoleCommandParsing+0x154>
    SendBackData=0;
 800596a:	2300      	movs	r3, #0
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\nSTMicroelectronics %s:\r\n"
 800596e:	2330      	movs	r3, #48	; 0x30
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	2330      	movs	r3, #48	; 0x30
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	2331      	movs	r3, #49	; 0x31
 8005978:	4a43      	ldr	r2, [pc, #268]	; (8005a88 <DebugConsoleCommandParsing+0x1f4>)
 800597a:	4947      	ldr	r1, [pc, #284]	; (8005a98 <DebugConsoleCommandParsing+0x204>)
 800597c:	483f      	ldr	r0, [pc, #252]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 800597e:	f00a fb0b 	bl	800ff98 <siprintf>
 8005982:	4603      	mov	r3, r0
 8005984:	4a3e      	ldr	r2, [pc, #248]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 8005986:	6013      	str	r3, [r2, #0]
        "\tSTM32L053R8-Nucleo board"
#endif /* USE_STM32F4XX_NUCLEO */
        "\r\n",
        DRN_PACKAGENAME,
        DRN_VERSION_MAJOR,DRN_VERSION_MINOR,DRN_VERSION_PATCH);
    Term_Update(BufferToWrite,BytesToWrite);
 8005988:	4b3d      	ldr	r3, [pc, #244]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	4619      	mov	r1, r3
 8005990:	483a      	ldr	r0, [pc, #232]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 8005992:	f7ff f8e9 	bl	8004b68 <Term_Update>
#elif defined (__CC_ARM)
      " (KEIL)\r\n",
#elif defined (__GNUC__)
      " (openstm32)\r\n",
#endif
         HAL_GetHalVersion() >>24,
 8005996:	f003 fd1b 	bl	80093d0 <HAL_GetHalVersion>
 800599a:	4603      	mov	r3, r0
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 800599c:	0e1d      	lsrs	r5, r3, #24
        (HAL_GetHalVersion() >>16)&0xFF,
 800599e:	f003 fd17 	bl	80093d0 <HAL_GetHalVersion>
 80059a2:	4603      	mov	r3, r0
 80059a4:	0c1b      	lsrs	r3, r3, #16
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80059a6:	b2de      	uxtb	r6, r3
        (HAL_GetHalVersion() >> 8)&0xFF,
 80059a8:	f003 fd12 	bl	80093d0 <HAL_GetHalVersion>
 80059ac:	4603      	mov	r3, r0
 80059ae:	0a1b      	lsrs	r3, r3, #8
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80059b0:	b2dc      	uxtb	r4, r3
         HAL_GetHalVersion()      &0xFF,
 80059b2:	f003 fd0d 	bl	80093d0 <HAL_GetHalVersion>
 80059b6:	4603      	mov	r3, r0
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	4a38      	ldr	r2, [pc, #224]	; (8005a9c <DebugConsoleCommandParsing+0x208>)
 80059bc:	9203      	str	r2, [sp, #12]
 80059be:	4a38      	ldr	r2, [pc, #224]	; (8005aa0 <DebugConsoleCommandParsing+0x20c>)
 80059c0:	9202      	str	r2, [sp, #8]
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	9400      	str	r4, [sp, #0]
 80059c6:	4633      	mov	r3, r6
 80059c8:	462a      	mov	r2, r5
 80059ca:	4936      	ldr	r1, [pc, #216]	; (8005aa4 <DebugConsoleCommandParsing+0x210>)
 80059cc:	482b      	ldr	r0, [pc, #172]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 80059ce:	f00a fae3 	bl	800ff98 <siprintf>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4a2a      	ldr	r2, [pc, #168]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 80059d6:	6013      	str	r3, [r2, #0]
         __DATE__,__TIME__);
    Term_Update(BufferToWrite,BytesToWrite);
 80059d8:	4b29      	ldr	r3, [pc, #164]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	4826      	ldr	r0, [pc, #152]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 80059e2:	f7ff f8c1 	bl	8004b68 <Term_Update>
 80059e6:	e0de      	b.n	8005ba6 <DebugConsoleCommandParsing+0x312>
  #endif /* USE_STM32L0XX_NUCLEO */
  Term_Update(BufferToWrite,BytesToWrite);
#endif /* STM32_NUCLEO */
  }
#ifndef USE_STM32L0XX_NUCLEO
  else if(!strncmp("upgradeFw",(char *)(att_data),9)) {
 80059e8:	2209      	movs	r2, #9
 80059ea:	6979      	ldr	r1, [r7, #20]
 80059ec:	482e      	ldr	r0, [pc, #184]	; (8005aa8 <DebugConsoleCommandParsing+0x214>)
 80059ee:	f00a faf3 	bl	800ffd8 <strncmp>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80d6 	beq.w	8005ba6 <DebugConsoleCommandParsing+0x312>
    /* DO nothing, OTA function not integrated */
  } else if(!strncmp("versionBle",(char *)(att_data),10)) {
 80059fa:	220a      	movs	r2, #10
 80059fc:	6979      	ldr	r1, [r7, #20]
 80059fe:	482b      	ldr	r0, [pc, #172]	; (8005aac <DebugConsoleCommandParsing+0x218>)
 8005a00:	f00a faea 	bl	800ffd8 <strncmp>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d158      	bne.n	8005abc <DebugConsoleCommandParsing+0x228>
    uint8_t  hwVersion;
    uint16_t fwVersion;
    /* get the BlueNRG HW and FW versions */
    getBlueNRGVersion(&hwVersion, &fwVersion);
 8005a0a:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8005a0e:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f008 ff9f 	bl	800e958 <getBlueNRGVersion>
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
                          (hwVersion > 0x30) ? "BleMS" : "Ble",
 8005a1a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 8005a1e:	2b30      	cmp	r3, #48	; 0x30
 8005a20:	d901      	bls.n	8005a26 <DebugConsoleCommandParsing+0x192>
 8005a22:	4923      	ldr	r1, [pc, #140]	; (8005ab0 <DebugConsoleCommandParsing+0x21c>)
 8005a24:	e000      	b.n	8005a28 <DebugConsoleCommandParsing+0x194>
 8005a26:	4923      	ldr	r1, [pc, #140]	; (8005ab4 <DebugConsoleCommandParsing+0x220>)
 8005a28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	4618      	mov	r0, r3
 8005a30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f003 020f 	and.w	r2, r3, #15
                          fwVersion>>8, 
                          (fwVersion>>4)&0xF,
                          (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a');
 8005a3a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 8005a3e:	2b30      	cmp	r3, #48	; 0x30
 8005a40:	d904      	bls.n	8005a4c <DebugConsoleCommandParsing+0x1b8>
                          (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a');
 8005a42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a44:	f003 030f 	and.w	r3, r3, #15
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 8005a48:	3360      	adds	r3, #96	; 0x60
 8005a4a:	e000      	b.n	8005a4e <DebugConsoleCommandParsing+0x1ba>
 8005a4c:	2361      	movs	r3, #97	; 0x61
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	9200      	str	r2, [sp, #0]
 8005a52:	4603      	mov	r3, r0
 8005a54:	460a      	mov	r2, r1
 8005a56:	4918      	ldr	r1, [pc, #96]	; (8005ab8 <DebugConsoleCommandParsing+0x224>)
 8005a58:	4808      	ldr	r0, [pc, #32]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 8005a5a:	f00a fa9d 	bl	800ff98 <siprintf>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	4a07      	ldr	r2, [pc, #28]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 8005a62:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <DebugConsoleCommandParsing+0x1ec>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4803      	ldr	r0, [pc, #12]	; (8005a7c <DebugConsoleCommandParsing+0x1e8>)
 8005a6e:	f7ff f87b 	bl	8004b68 <Term_Update>
    SendBackData=0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a76:	e096      	b.n	8005ba6 <DebugConsoleCommandParsing+0x312>
 8005a78:	08011838 	.word	0x08011838
 8005a7c:	20000bb8 	.word	0x20000bb8
 8005a80:	20000db0 	.word	0x20000db0
 8005a84:	080118a4 	.word	0x080118a4
 8005a88:	080118b0 	.word	0x080118b0
 8005a8c:	080118b8 	.word	0x080118b8
 8005a90:	080118c0 	.word	0x080118c0
 8005a94:	080118d4 	.word	0x080118d4
 8005a98:	080118dc 	.word	0x080118dc
 8005a9c:	08011944 	.word	0x08011944
 8005aa0:	08011950 	.word	0x08011950
 8005aa4:	0801190c 	.word	0x0801190c
 8005aa8:	0801195c 	.word	0x0801195c
 8005aac:	08011968 	.word	0x08011968
 8005ab0:	08011974 	.word	0x08011974
 8005ab4:	0801197c 	.word	0x0801197c
 8005ab8:	08011980 	.word	0x08011980
  }
#endif /* USE_STM32L0XX_NUCLEO */
  else if((att_data[0]=='u') & (att_data[1]=='i') & (att_data[2]=='d')) {
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b75      	cmp	r3, #117	; 0x75
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3301      	adds	r3, #1
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b69      	cmp	r3, #105	; 0x69
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	4013      	ands	r3, r2
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b64      	cmp	r3, #100	; 0x64
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d057      	beq.n	8005ba6 <DebugConsoleCommandParsing+0x312>
    /* Write back the STM32 UID */
    uint8_t *uid = (uint8_t *)STM32_UUID;
 8005af6:	4b7e      	ldr	r3, [pc, #504]	; (8005cf0 <DebugConsoleCommandParsing+0x45c>)
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 8005afa:	4b7e      	ldr	r3, [pc, #504]	; (8005cf4 <DebugConsoleCommandParsing+0x460>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
                          uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	3303      	adds	r3, #3
 8005b08:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b0a:	469c      	mov	ip, r3
                          uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	3302      	adds	r3, #2
 8005b10:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b12:	469e      	mov	lr, r3
                          uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	3301      	adds	r3, #1
 8005b18:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b1a:	461a      	mov	r2, r3
                          uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b20:	4619      	mov	r1, r3
                          uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	3307      	adds	r3, #7
 8005b26:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b28:	4618      	mov	r0, r3
                          uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	3306      	adds	r3, #6
 8005b2e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b30:	461c      	mov	r4, r3
                          uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	3305      	adds	r3, #5
 8005b36:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b38:	461d      	mov	r5, r3
                          uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b40:	461e      	mov	r6, r3
                          uid[11],uid[ 10],uid[9],uid[8],
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	330b      	adds	r3, #11
 8005b46:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b48:	60fb      	str	r3, [r7, #12]
                          uid[11],uid[ 10],uid[9],uid[8],
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	330a      	adds	r3, #10
 8005b4e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b50:	60bb      	str	r3, [r7, #8]
                          uid[11],uid[ 10],uid[9],uid[8],
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	3309      	adds	r3, #9
 8005b56:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b58:	607b      	str	r3, [r7, #4]
                          uid[11],uid[ 10],uid[9],uid[8],
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b64:	930a      	str	r3, [sp, #40]	; 0x28
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	9308      	str	r3, [sp, #32]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	9307      	str	r3, [sp, #28]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	9306      	str	r3, [sp, #24]
 8005b76:	9605      	str	r6, [sp, #20]
 8005b78:	9504      	str	r5, [sp, #16]
 8005b7a:	9403      	str	r4, [sp, #12]
 8005b7c:	9002      	str	r0, [sp, #8]
 8005b7e:	9101      	str	r1, [sp, #4]
 8005b80:	9200      	str	r2, [sp, #0]
 8005b82:	4673      	mov	r3, lr
 8005b84:	4662      	mov	r2, ip
 8005b86:	495c      	ldr	r1, [pc, #368]	; (8005cf8 <DebugConsoleCommandParsing+0x464>)
 8005b88:	485c      	ldr	r0, [pc, #368]	; (8005cfc <DebugConsoleCommandParsing+0x468>)
 8005b8a:	f00a fa05 	bl	800ff98 <siprintf>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4a5b      	ldr	r2, [pc, #364]	; (8005d00 <DebugConsoleCommandParsing+0x46c>)
 8005b92:	6013      	str	r3, [r2, #0]
                          MCU_ID);
    Term_Update(BufferToWrite,BytesToWrite);
 8005b94:	4b5a      	ldr	r3, [pc, #360]	; (8005d00 <DebugConsoleCommandParsing+0x46c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4857      	ldr	r0, [pc, #348]	; (8005cfc <DebugConsoleCommandParsing+0x468>)
 8005b9e:	f7fe ffe3 	bl	8004b68 <Term_Update>
    SendBackData=0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

#if 1
  /* If it's something not yet recognized... only for testing.. This must be removed */
  if(SendBackData) {
 8005ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 809c 	beq.w	8005ce6 <DebugConsoleCommandParsing+0x452>
    if(att_data[0]=='@') {
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	f040 8097 	bne.w	8005ce6 <DebugConsoleCommandParsing+0x452>
      if(att_data[1]=='T') {
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b54      	cmp	r3, #84	; 0x54
 8005bc0:	d148      	bne.n	8005c54 <DebugConsoleCommandParsing+0x3c0>
        uint8_t loc_att_data[8];
        uint8_t loc_data_length=8;
 8005bc2:	2308      	movs	r3, #8
 8005bc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


        loc_att_data[0] = (FEATURE_MASK_TEMP1>>24)&0xFF;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        loc_att_data[1] = (FEATURE_MASK_TEMP1>>16)&0xFF;
 8005bce:	2304      	movs	r3, #4
 8005bd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        loc_att_data[2] = (FEATURE_MASK_TEMP1>>8 )&0xFF;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        loc_att_data[3] = (FEATURE_MASK_TEMP1    )&0xFF;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        loc_att_data[4] = 255;
 8005be0:	23ff      	movs	r3, #255	; 0xff
 8005be2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        switch(att_data[2]) {
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	3302      	adds	r3, #2
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	3b44      	subs	r3, #68	; 0x44
 8005bee:	2b09      	cmp	r3, #9
 8005bf0:	d826      	bhi.n	8005c40 <DebugConsoleCommandParsing+0x3ac>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <DebugConsoleCommandParsing+0x364>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c39 	.word	0x08005c39
 8005bfc:	08005c41 	.word	0x08005c41
 8005c00:	08005c41 	.word	0x08005c41
 8005c04:	08005c41 	.word	0x08005c41
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c41 	.word	0x08005c41
 8005c10:	08005c41 	.word	0x08005c41
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	08005c21 	.word	0x08005c21
 8005c1c:	08005c29 	.word	0x08005c29
          case 'L':
            loc_att_data[5] = 50; /* @5S */
 8005c20:	2332      	movs	r3, #50	; 0x32
 8005c22:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          break;
 8005c26:	e00b      	b.n	8005c40 <DebugConsoleCommandParsing+0x3ac>
          case 'M':
            loc_att_data[5] = 10; /* @1S */
 8005c28:	230a      	movs	r3, #10
 8005c2a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          break;
 8005c2e:	e007      	b.n	8005c40 <DebugConsoleCommandParsing+0x3ac>
          case 'H':
            loc_att_data[5] = 1; /* @100mS */
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          break;
 8005c36:	e003      	b.n	8005c40 <DebugConsoleCommandParsing+0x3ac>
          case 'D':
            loc_att_data[5] = 0; /* Default */
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          break;
 8005c3e:	bf00      	nop
        }
        SendBackData = ConfigCommandParsing(loc_att_data,loc_data_length);
 8005c40:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8005c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f85a 	bl	8005d04 <ConfigCommandParsing>
 8005c50:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005c52:	e048      	b.n	8005ce6 <DebugConsoleCommandParsing+0x452>
      } else if(att_data[1]=='A') {
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3301      	adds	r3, #1
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b41      	cmp	r3, #65	; 0x41
 8005c5c:	d143      	bne.n	8005ce6 <DebugConsoleCommandParsing+0x452>
        uint8_t loc_att_data[8];
        uint8_t loc_data_length=8;
 8005c5e:	2308      	movs	r3, #8
 8005c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        
        loc_att_data[0] = (FEATURE_MASK_ACC>>24)&0xFF;
 8005c64:	2300      	movs	r3, #0
 8005c66:	773b      	strb	r3, [r7, #28]
        loc_att_data[1] = (FEATURE_MASK_ACC>>16)&0xFF;
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	777b      	strb	r3, [r7, #29]
        loc_att_data[2] = (FEATURE_MASK_ACC>>8 )&0xFF;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	77bb      	strb	r3, [r7, #30]
        loc_att_data[3] = (FEATURE_MASK_ACC    )&0xFF;
 8005c70:	2300      	movs	r3, #0
 8005c72:	77fb      	strb	r3, [r7, #31]
        loc_att_data[4] = 255;
 8005c74:	23ff      	movs	r3, #255	; 0xff
 8005c76:	f887 3020 	strb.w	r3, [r7, #32]

        switch(att_data[2]) {
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	3b44      	subs	r3, #68	; 0x44
 8005c82:	2b09      	cmp	r3, #9
 8005c84:	d826      	bhi.n	8005cd4 <DebugConsoleCommandParsing+0x440>
 8005c86:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <DebugConsoleCommandParsing+0x3f8>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005ccd 	.word	0x08005ccd
 8005c90:	08005cd5 	.word	0x08005cd5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005cd5 	.word	0x08005cd5
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005cb5 	.word	0x08005cb5
 8005cb0:	08005cbd 	.word	0x08005cbd
          case 'L':
            loc_att_data[5] = 50; /* @5S */
 8005cb4:	2332      	movs	r3, #50	; 0x32
 8005cb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
          break;
 8005cba:	e00b      	b.n	8005cd4 <DebugConsoleCommandParsing+0x440>
          case 'M':
            loc_att_data[5] = 10; /* @1S */
 8005cbc:	230a      	movs	r3, #10
 8005cbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
          break;
 8005cc2:	e007      	b.n	8005cd4 <DebugConsoleCommandParsing+0x440>
          case 'H':
            loc_att_data[5] = 1; /* @100mS */
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
          break;
 8005cca:	e003      	b.n	8005cd4 <DebugConsoleCommandParsing+0x440>
          case 'D':
            loc_att_data[5] = 0; /* Default */
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
          break;
 8005cd2:	bf00      	nop
        }
        SendBackData = ConfigCommandParsing(loc_att_data,loc_data_length);
 8005cd4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005cd8:	f107 031c 	add.w	r3, r7, #28
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f810 	bl	8005d04 <ConfigCommandParsing>
 8005ce4:	63f8      	str	r0, [r7, #60]	; 0x3c
      }
    }
  }
#endif
  return SendBackData;
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3744      	adds	r7, #68	; 0x44
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf0:	1fff7a10 	.word	0x1fff7a10
 8005cf4:	e0042000 	.word	0xe0042000
 8005cf8:	08011990 	.word	0x08011990
 8005cfc:	20000bb8 	.word	0x20000bb8
 8005d00:	20000db0 	.word	0x20000db0

08005d04 <ConfigCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval uint32_t SendItBack true/false
 */
static uint32_t ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t SendItBack = 1;
 8005d10:	2301      	movs	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
  return SendItBack;
 8005d14:	68fb      	ldr	r3, [r7, #12]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HCI_Event_CB>:
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pckt;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	3301      	adds	r3, #1
 8005d34:	623b      	str	r3, [r7, #32]
  
  if(hci_pckt->type != HCI_EVENT_PKT) {
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d15d      	bne.n	8005dfa <HCI_Event_CB+0xd6>
    return;
  }
  
  switch(event_pckt->evt){
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2bff      	cmp	r3, #255	; 0xff
 8005d44:	d01f      	beq.n	8005d86 <HCI_Event_CB+0x62>
 8005d46:	2bff      	cmp	r3, #255	; 0xff
 8005d48:	dc5c      	bgt.n	8005e04 <HCI_Event_CB+0xe0>
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d002      	beq.n	8005d54 <HCI_Event_CB+0x30>
 8005d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d50:	d003      	beq.n	8005d5a <HCI_Event_CB+0x36>
 8005d52:	e057      	b.n	8005e04 <HCI_Event_CB+0xe0>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8005d54:	f7ff fbd8 	bl	8005508 <GAP_DisconnectionComplete_CB>
    }
    break;
 8005d58:	e054      	b.n	8005e04 <HCI_Event_CB+0xe0>
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	60fb      	str	r3, [r7, #12]
      
      switch(evt->subevent){
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d14a      	bne.n	8005dfe <HCI_Event_CB+0xda>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	1d5a      	adds	r2, r3, #5
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f7ff fb77 	bl	8005470 <GAP_ConnectionComplete_CB>
        }
        break;
 8005d82:	bf00      	nop
      }
    }
    break;
 8005d84:	e03b      	b.n	8005dfe <HCI_Event_CB+0xda>
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	3302      	adds	r3, #2
 8005d8a:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f640 4201 	movw	r2, #3073	; 0xc01
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00d      	beq.n	8005db6 <HCI_Event_CB+0x92>
 8005d9a:	f640 4214 	movw	r2, #3092	; 0xc14
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d12f      	bne.n	8005e02 <HCI_Event_CB+0xde>
      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data; 
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	3302      	adds	r3, #2
 8005da6:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);                    
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	885b      	ldrh	r3, [r3, #2]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fbca 	bl	8005548 <Read_Request_CB>
        }
        break;
 8005db4:	e020      	b.n	8005df8 <HCI_Event_CB+0xd4>
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        if(TargetBoardFeatures.bnrg_expansion_board==IDB05A1) {
 8005db6:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <HCI_Event_CB+0xe8>)
 8005db8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10d      	bne.n	8005ddc <HCI_Event_CB+0xb8>
              evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	613b      	str	r3, [r7, #16]
              Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	885b      	ldrh	r3, [r3, #2]
 8005dca:	b298      	uxth	r0, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1dd9      	adds	r1, r3, #7
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	791b      	ldrb	r3, [r3, #4]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f7ff fc3b 	bl	8005650 <Attribute_Modified_CB>
            } else {
              evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
              Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
            }
        break;
 8005dda:	e00c      	b.n	8005df6 <HCI_Event_CB+0xd2>
              evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3302      	adds	r3, #2
 8005de0:	617b      	str	r3, [r7, #20]
              Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	885b      	ldrh	r3, [r3, #2]
 8005de6:	b298      	uxth	r0, r3
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1d59      	adds	r1, r3, #5
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	791b      	ldrb	r3, [r3, #4]
 8005df0:	461a      	mov	r2, r3
 8005df2:	f7ff fc2d 	bl	8005650 <Attribute_Modified_CB>
        break;
 8005df6:	bf00      	nop
      }
    }
    break;
 8005df8:	e003      	b.n	8005e02 <HCI_Event_CB+0xde>
    return;
 8005dfa:	bf00      	nop
 8005dfc:	e002      	b.n	8005e04 <HCI_Event_CB+0xe0>
    break;
 8005dfe:	bf00      	nop
 8005e00:	e000      	b.n	8005e04 <HCI_Event_CB+0xe0>
    break;
 8005e02:	bf00      	nop
  }
}
 8005e04:	3728      	adds	r7, #40	; 0x28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000e48 	.word	0x20000e48

08005e10 <DisableHWFeatures>:


static void DisableHWFeatures(void)
{  
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <HAL_MspInit+0x4c>)
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	4a0f      	ldr	r2, [pc, #60]	; (8005e6c <HAL_MspInit+0x4c>)
 8005e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e34:	6453      	str	r3, [r2, #68]	; 0x44
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <HAL_MspInit+0x4c>)
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e42:	2300      	movs	r3, #0
 8005e44:	603b      	str	r3, [r7, #0]
 8005e46:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <HAL_MspInit+0x4c>)
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <HAL_MspInit+0x4c>)
 8005e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e50:	6413      	str	r3, [r2, #64]	; 0x40
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <HAL_MspInit+0x4c>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800

08005e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a17      	ldr	r2, [pc, #92]	; (8005eec <HAL_ADC_MspInit+0x7c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d127      	bne.n	8005ee2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <HAL_ADC_MspInit+0x80>)
 8005e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_ADC_MspInit+0x80>)
 8005e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <HAL_ADC_MspInit+0x80>)
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <HAL_ADC_MspInit+0x80>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	4a0e      	ldr	r2, [pc, #56]	; (8005ef0 <HAL_ADC_MspInit+0x80>)
 8005eb8:	f043 0302 	orr.w	r3, r3, #2
 8005ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <HAL_ADC_MspInit+0x80>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8005ed6:	f107 0314 	add.w	r3, r7, #20
 8005eda:	4619      	mov	r1, r3
 8005edc:	4805      	ldr	r0, [pc, #20]	; (8005ef4 <HAL_ADC_MspInit+0x84>)
 8005ede:	f004 f839 	bl	8009f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ee2:	bf00      	nop
 8005ee4:	3728      	adds	r7, #40	; 0x28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40012000 	.word	0x40012000
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	40020400 	.word	0x40020400

08005ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f00:	f107 0314 	add.w	r3, r7, #20
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <HAL_I2C_MspInit+0xa4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d13c      	bne.n	8005f94 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <HAL_I2C_MspInit+0xa8>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <HAL_I2C_MspInit+0xa8>)
 8005f24:	f043 0302 	orr.w	r3, r3, #2
 8005f28:	6313      	str	r3, [r2, #48]	; 0x30
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <HAL_I2C_MspInit+0xa8>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f3c:	2312      	movs	r3, #18
 8005f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f40:	2301      	movs	r3, #1
 8005f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f44:	2303      	movs	r3, #3
 8005f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005f48:	2304      	movs	r3, #4
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	4619      	mov	r1, r3
 8005f52:	4814      	ldr	r0, [pc, #80]	; (8005fa4 <HAL_I2C_MspInit+0xac>)
 8005f54:	f003 fffe 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005f58:	2308      	movs	r3, #8
 8005f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f5c:	2312      	movs	r3, #18
 8005f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f60:	2301      	movs	r3, #1
 8005f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f64:	2303      	movs	r3, #3
 8005f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005f68:	2309      	movs	r3, #9
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f6c:	f107 0314 	add.w	r3, r7, #20
 8005f70:	4619      	mov	r1, r3
 8005f72:	480c      	ldr	r0, [pc, #48]	; (8005fa4 <HAL_I2C_MspInit+0xac>)
 8005f74:	f003 ffee 	bl	8009f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <HAL_I2C_MspInit+0xa8>)
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f80:	4a07      	ldr	r2, [pc, #28]	; (8005fa0 <HAL_I2C_MspInit+0xa8>)
 8005f82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f86:	6413      	str	r3, [r2, #64]	; 0x40
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <HAL_I2C_MspInit+0xa8>)
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005f94:	bf00      	nop
 8005f96:	3728      	adds	r7, #40	; 0x28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40005800 	.word	0x40005800
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	40020400 	.word	0x40020400

08005fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb0:	f107 031c 	add.w	r3, r7, #28
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a42      	ldr	r2, [pc, #264]	; (80060d0 <HAL_SPI_MspInit+0x128>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d144      	bne.n	8006054 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	4b41      	ldr	r3, [pc, #260]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	4a40      	ldr	r2, [pc, #256]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8005fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fda:	4b3e      	ldr	r3, [pc, #248]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	4b3a      	ldr	r3, [pc, #232]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	4a39      	ldr	r2, [pc, #228]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff6:	4b37      	ldr	r3, [pc, #220]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006002:	2320      	movs	r3, #32
 8006004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006006:	2302      	movs	r3, #2
 8006008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800600a:	2302      	movs	r3, #2
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800600e:	2303      	movs	r3, #3
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006012:	2305      	movs	r3, #5
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006016:	f107 031c 	add.w	r3, r7, #28
 800601a:	4619      	mov	r1, r3
 800601c:	482e      	ldr	r0, [pc, #184]	; (80060d8 <HAL_SPI_MspInit+0x130>)
 800601e:	f003 ff99 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006022:	23c0      	movs	r3, #192	; 0xc0
 8006024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006026:	2302      	movs	r3, #2
 8006028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602a:	2300      	movs	r3, #0
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800602e:	2303      	movs	r3, #3
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006032:	2305      	movs	r3, #5
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006036:	f107 031c 	add.w	r3, r7, #28
 800603a:	4619      	mov	r1, r3
 800603c:	4826      	ldr	r0, [pc, #152]	; (80060d8 <HAL_SPI_MspInit+0x130>)
 800603e:	f003 ff89 	bl	8009f54 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006042:	2200      	movs	r2, #0
 8006044:	2100      	movs	r1, #0
 8006046:	2023      	movs	r0, #35	; 0x23
 8006048:	f003 fead 	bl	8009da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800604c:	2023      	movs	r0, #35	; 0x23
 800604e:	f003 fec6 	bl	8009dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006052:	e039      	b.n	80060c8 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a20      	ldr	r2, [pc, #128]	; (80060dc <HAL_SPI_MspInit+0x134>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d134      	bne.n	80060c8 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8006068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800606c:	6413      	str	r3, [r2, #64]	; 0x40
 800606e:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	4a14      	ldr	r2, [pc, #80]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 8006084:	f043 0302 	orr.w	r3, r3, #2
 8006088:	6313      	str	r3, [r2, #48]	; 0x30
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <HAL_SPI_MspInit+0x12c>)
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006096:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800609a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800609c:	2302      	movs	r3, #2
 800609e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a4:	2303      	movs	r3, #3
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80060a8:	2305      	movs	r3, #5
 80060aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060ac:	f107 031c 	add.w	r3, r7, #28
 80060b0:	4619      	mov	r1, r3
 80060b2:	480b      	ldr	r0, [pc, #44]	; (80060e0 <HAL_SPI_MspInit+0x138>)
 80060b4:	f003 ff4e 	bl	8009f54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80060b8:	2200      	movs	r2, #0
 80060ba:	2100      	movs	r1, #0
 80060bc:	2024      	movs	r0, #36	; 0x24
 80060be:	f003 fe72 	bl	8009da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80060c2:	2024      	movs	r0, #36	; 0x24
 80060c4:	f003 fe8b 	bl	8009dde <HAL_NVIC_EnableIRQ>
}
 80060c8:	bf00      	nop
 80060ca:	3730      	adds	r7, #48	; 0x30
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40013000 	.word	0x40013000
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40020000 	.word	0x40020000
 80060dc:	40003800 	.word	0x40003800
 80060e0:	40020400 	.word	0x40020400

080060e4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a13      	ldr	r2, [pc, #76]	; (8006140 <HAL_SPI_MspDeInit+0x5c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d10d      	bne.n	8006112 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80060f6:	4b13      	ldr	r3, [pc, #76]	; (8006144 <HAL_SPI_MspDeInit+0x60>)
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	4a12      	ldr	r2, [pc, #72]	; (8006144 <HAL_SPI_MspDeInit+0x60>)
 80060fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006100:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8006102:	21e0      	movs	r1, #224	; 0xe0
 8006104:	4810      	ldr	r0, [pc, #64]	; (8006148 <HAL_SPI_MspDeInit+0x64>)
 8006106:	f004 f8a9 	bl	800a25c <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800610a:	2023      	movs	r0, #35	; 0x23
 800610c:	f003 fe75 	bl	8009dfa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8006110:	e012      	b.n	8006138 <HAL_SPI_MspDeInit+0x54>
  else if(hspi->Instance==SPI2)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a0d      	ldr	r2, [pc, #52]	; (800614c <HAL_SPI_MspDeInit+0x68>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10d      	bne.n	8006138 <HAL_SPI_MspDeInit+0x54>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_SPI_MspDeInit+0x60>)
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	4a08      	ldr	r2, [pc, #32]	; (8006144 <HAL_SPI_MspDeInit+0x60>)
 8006122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006126:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8006128:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800612c:	4808      	ldr	r0, [pc, #32]	; (8006150 <HAL_SPI_MspDeInit+0x6c>)
 800612e:	f004 f895 	bl	800a25c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8006132:	2024      	movs	r0, #36	; 0x24
 8006134:	f003 fe61 	bl	8009dfa <HAL_NVIC_DisableIRQ>
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40013000 	.word	0x40013000
 8006144:	40023800 	.word	0x40023800
 8006148:	40020000 	.word	0x40020000
 800614c:	40003800 	.word	0x40003800
 8006150:	40020400 	.word	0x40020400

08006154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	; 0x30
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800615c:	f107 031c 	add.w	r3, r7, #28
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	605a      	str	r2, [r3, #4]
 8006166:	609a      	str	r2, [r3, #8]
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006174:	d134      	bne.n	80061e0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006176:	2300      	movs	r3, #0
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	4b37      	ldr	r3, [pc, #220]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	4a36      	ldr	r2, [pc, #216]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	6413      	str	r3, [r2, #64]	; 0x40
 8006186:	4b34      	ldr	r3, [pc, #208]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	4b30      	ldr	r3, [pc, #192]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	4a2f      	ldr	r2, [pc, #188]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	6313      	str	r3, [r2, #48]	; 0x30
 80061a2:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80061ae:	230f      	movs	r3, #15
 80061b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b2:	2302      	movs	r3, #2
 80061b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ba:	2300      	movs	r3, #0
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80061be:	2301      	movs	r3, #1
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c2:	f107 031c 	add.w	r3, r7, #28
 80061c6:	4619      	mov	r1, r3
 80061c8:	4824      	ldr	r0, [pc, #144]	; (800625c <HAL_TIM_Base_MspInit+0x108>)
 80061ca:	f003 fec3 	bl	8009f54 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	201c      	movs	r0, #28
 80061d4:	f003 fde7 	bl	8009da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80061d8:	201c      	movs	r0, #28
 80061da:	f003 fe00 	bl	8009dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80061de:	e036      	b.n	800624e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1e      	ldr	r2, [pc, #120]	; (8006260 <HAL_TIM_Base_MspInit+0x10c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d116      	bne.n	8006218 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	4a19      	ldr	r2, [pc, #100]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 80061f4:	f043 0304 	orr.w	r3, r3, #4
 80061f8:	6413      	str	r3, [r2, #64]	; 0x40
 80061fa:	4b17      	ldr	r3, [pc, #92]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006206:	2200      	movs	r2, #0
 8006208:	2100      	movs	r1, #0
 800620a:	201e      	movs	r0, #30
 800620c:	f003 fdcb 	bl	8009da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006210:	201e      	movs	r0, #30
 8006212:	f003 fde4 	bl	8009dde <HAL_NVIC_EnableIRQ>
}
 8006216:	e01a      	b.n	800624e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM9)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a11      	ldr	r2, [pc, #68]	; (8006264 <HAL_TIM_Base_MspInit+0x110>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d115      	bne.n	800624e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	4a0b      	ldr	r2, [pc, #44]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 800622c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006230:	6453      	str	r3, [r2, #68]	; 0x44
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <HAL_TIM_Base_MspInit+0x104>)
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800623e:	2200      	movs	r2, #0
 8006240:	2100      	movs	r1, #0
 8006242:	2018      	movs	r0, #24
 8006244:	f003 fdaf 	bl	8009da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006248:	2018      	movs	r0, #24
 800624a:	f003 fdc8 	bl	8009dde <HAL_NVIC_EnableIRQ>
}
 800624e:	bf00      	nop
 8006250:	3730      	adds	r7, #48	; 0x30
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40023800 	.word	0x40023800
 800625c:	40020000 	.word	0x40020000
 8006260:	40000800 	.word	0x40000800
 8006264:	40014000 	.word	0x40014000

08006268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006270:	f107 030c 	add.w	r3, r7, #12
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	60da      	str	r2, [r3, #12]
 800627e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <HAL_TIM_MspPostInit+0x68>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d11e      	bne.n	80062c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <HAL_TIM_MspPostInit+0x6c>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <HAL_TIM_MspPostInit+0x6c>)
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	6313      	str	r3, [r2, #48]	; 0x30
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <HAL_TIM_MspPostInit+0x6c>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80062a6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80062aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ac:	2302      	movs	r3, #2
 80062ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062b8:	2302      	movs	r3, #2
 80062ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062bc:	f107 030c 	add.w	r3, r7, #12
 80062c0:	4619      	mov	r1, r3
 80062c2:	4805      	ldr	r0, [pc, #20]	; (80062d8 <HAL_TIM_MspPostInit+0x70>)
 80062c4:	f003 fe46 	bl	8009f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80062c8:	bf00      	nop
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40023800 	.word	0x40023800
 80062d8:	40020400 	.word	0x40020400

080062dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e4:	f107 0314 	add.w	r3, r7, #20
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	609a      	str	r2, [r3, #8]
 80062f0:	60da      	str	r2, [r3, #12]
 80062f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <HAL_UART_MspInit+0x94>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d134      	bne.n	8006368 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <HAL_UART_MspInit+0x98>)
 8006304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006306:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_UART_MspInit+0x98>)
 8006308:	f043 0310 	orr.w	r3, r3, #16
 800630c:	6453      	str	r3, [r2, #68]	; 0x44
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <HAL_UART_MspInit+0x98>)
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	4b15      	ldr	r3, [pc, #84]	; (8006374 <HAL_UART_MspInit+0x98>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	4a14      	ldr	r2, [pc, #80]	; (8006374 <HAL_UART_MspInit+0x98>)
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	6313      	str	r3, [r2, #48]	; 0x30
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <HAL_UART_MspInit+0x98>)
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006336:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800633a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800633c:	2302      	movs	r3, #2
 800633e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006344:	2303      	movs	r3, #3
 8006346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006348:	2307      	movs	r3, #7
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	4619      	mov	r1, r3
 8006352:	4809      	ldr	r0, [pc, #36]	; (8006378 <HAL_UART_MspInit+0x9c>)
 8006354:	f003 fdfe 	bl	8009f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006358:	2200      	movs	r2, #0
 800635a:	2100      	movs	r1, #0
 800635c:	2025      	movs	r0, #37	; 0x25
 800635e:	f003 fd22 	bl	8009da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006362:	2025      	movs	r0, #37	; 0x25
 8006364:	f003 fd3b 	bl	8009dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006368:	bf00      	nop
 800636a:	3728      	adds	r7, #40	; 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40011000 	.word	0x40011000
 8006374:	40023800 	.word	0x40023800
 8006378:	40020000 	.word	0x40020000

0800637c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006380:	bf00      	nop
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800638a:	b480      	push	{r7}
 800638c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800638e:	e7fe      	b.n	800638e <HardFault_Handler+0x4>

08006390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006394:	e7fe      	b.n	8006394 <MemManage_Handler+0x4>

08006396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006396:	b480      	push	{r7}
 8006398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800639a:	e7fe      	b.n	800639a <BusFault_Handler+0x4>

0800639c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063a0:	e7fe      	b.n	80063a0 <UsageFault_Handler+0x4>

080063a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063a2:	b480      	push	{r7}
 80063a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063a6:	bf00      	nop
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063be:	b480      	push	{r7}
 80063c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063c2:	bf00      	nop
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063d0:	f002 ffba 	bl	8009348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063d4:	bf00      	nop
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80063dc:	2010      	movs	r0, #16
 80063de:	f004 f86d 	bl	800a4bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80063e2:	bf00      	nop
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80063ec:	4802      	ldr	r0, [pc, #8]	; (80063f8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80063ee:	f006 f859 	bl	800c4a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000a7c 	.word	0x20000a7c

080063fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006400:	4802      	ldr	r0, [pc, #8]	; (800640c <TIM2_IRQHandler+0x10>)
 8006402:	f006 f84f 	bl	800c4a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006406:	bf00      	nop
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000b40 	.word	0x20000b40

08006410 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM4 global interrupt.
  */

void TIM4_IRQHandler(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
   HAL_TIM_IRQHandler(&htim4);
 8006414:	4802      	ldr	r0, [pc, #8]	; (8006420 <TIM4_IRQHandler+0x10>)
 8006416:	f006 f845 	bl	800c4a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800641a:	bf00      	nop
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	2000072c 	.word	0x2000072c

08006424 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006428:	4802      	ldr	r0, [pc, #8]	; (8006434 <SPI1_IRQHandler+0x10>)
 800642a:	f005 fab5 	bl	800b998 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800642e:	bf00      	nop
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000ae8 	.word	0x20000ae8

08006438 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800643c:	4802      	ldr	r0, [pc, #8]	; (8006448 <SPI2_IRQHandler+0x10>)
 800643e:	f005 faab 	bl	800b998 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006442:	bf00      	nop
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	200005e8 	.word	0x200005e8

0800644c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006450:	4802      	ldr	r0, [pc, #8]	; (800645c <USART1_IRQHandler+0x10>)
 8006452:	f007 f8af 	bl	800d5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006456:	bf00      	nop
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	200009f0 	.word	0x200009f0

08006460 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <_sbrk+0x50>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <_sbrk+0x16>
		heap_end = &end;
 8006470:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <_sbrk+0x50>)
 8006472:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <_sbrk+0x54>)
 8006474:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006476:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <_sbrk+0x50>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800647c:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <_sbrk+0x50>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4413      	add	r3, r2
 8006484:	466a      	mov	r2, sp
 8006486:	4293      	cmp	r3, r2
 8006488:	d907      	bls.n	800649a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800648a:	f009 fd45 	bl	800ff18 <__errno>
 800648e:	4603      	mov	r3, r0
 8006490:	220c      	movs	r2, #12
 8006492:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
 8006498:	e006      	b.n	80064a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <_sbrk+0x50>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	4a03      	ldr	r2, [pc, #12]	; (80064b0 <_sbrk+0x50>)
 80064a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80064a6:	68fb      	ldr	r3, [r7, #12]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	2000024c 	.word	0x2000024c
 80064b4:	20000f10 	.word	0x20000f10

080064b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064bc:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <SystemInit+0x28>)
 80064be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c2:	4a07      	ldr	r2, [pc, #28]	; (80064e0 <SystemInit+0x28>)
 80064c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <SystemInit+0x28>)
 80064ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064d2:	609a      	str	r2, [r3, #8]
#endif
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	e000ed00 	.word	0xe000ed00

080064e4 <SetupTimer>:


tUserTimer tim;

void SetupTimer(tUserTimer *t, uint32_t interval)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
    t->interval = interval;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	605a      	str	r2, [r3, #4]
    t->flag = 0;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	609a      	str	r2, [r3, #8]
    t->flag2 = 0;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	60da      	str	r2, [r3, #12]
    t->event_cnt = 0;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	611a      	str	r2, [r3, #16]
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <StartTimer>:

void StartTimer(tUserTimer *t)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
    t->target_tick = HAL_GetTick() + t->interval;
 800651a:	f002 ff29 	bl	8009370 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
    t->flag = 1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <ClearTimer>:
{
    t->flag = 0;
}

void ClearTimer(tUserTimer *t)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
    t->event_cnt = 0;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	611a      	str	r2, [r3, #16]
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <isTimerEventExist>:

    }
}

uint32_t isTimerEventExist(tUserTimer *t)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
    return t->event_cnt;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800656c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006570:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006572:	e003      	b.n	800657c <LoopCopyDataInit>

08006574 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006576:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006578:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800657a:	3104      	adds	r1, #4

0800657c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800657c:	480b      	ldr	r0, [pc, #44]	; (80065ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006580:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006582:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006584:	d3f6      	bcc.n	8006574 <CopyDataInit>
  ldr  r2, =_sbss
 8006586:	4a0b      	ldr	r2, [pc, #44]	; (80065b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006588:	e002      	b.n	8006590 <LoopFillZerobss>

0800658a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800658a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800658c:	f842 3b04 	str.w	r3, [r2], #4

08006590 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006592:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006594:	d3f9      	bcc.n	800658a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006596:	f7ff ff8f 	bl	80064b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800659a:	f009 fcc3 	bl	800ff24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800659e:	f7fb fd33 	bl	8002008 <main>
  bx  lr    
 80065a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065a4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80065a8:	08011ab8 	.word	0x08011ab8
  ldr  r0, =_sdata
 80065ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80065b0:	20000154 	.word	0x20000154
  ldr  r2, =_sbss
 80065b4:	20000154 	.word	0x20000154
  ldr  r3, = _ebss
 80065b8:	20000f0c 	.word	0x20000f0c

080065bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065bc:	e7fe      	b.n	80065bc <ADC_IRQHandler>
	...

080065c0 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d105      	bne.n	80065dc <HAL_GPIO_EXTI_Callback+0x1c>
    case BNRG_SPI_EXTI_PIN:
      HCI_Isr();
 80065d0:	f008 fa96 	bl	800eb00 <HCI_Isr>
      HCI_ProcessEvent=1;
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
    break;
 80065da:	bf00      	nop
  }
}
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200001b8 	.word	0x200001b8

080065e8 <Hal_Write_Serial>:
* @param  n_bytes2: number of bytes in 2nd buffer
* @retval None
*/
void Hal_Write_Serial(const void* data1, const void* data2, int32_t n_bytes1,
                      int32_t n_bytes2)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  struct timer t;
  
  Timer_Set(&t, CLOCK_SECOND/10);
 80065f6:	f107 0310 	add.w	r3, r7, #16
 80065fa:	2164      	movs	r1, #100	; 0x64
 80065fc:	4618      	mov	r0, r3
 80065fe:	f008 fe98 	bl	800f332 <Timer_Set>
  }
  PRINT_CSV("\n");
#endif
  
  while(1){
    if(BlueNRG_SPI_Write(&SpiHandle, (uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	b2da      	uxtb	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	480b      	ldr	r0, [pc, #44]	; (8006640 <Hal_Write_Serial+0x58>)
 8006614:	f000 f8e6 	bl	80067e4 <BlueNRG_SPI_Write>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <Hal_Write_Serial+0x48>
    if(Timer_Expired(&t)){
 800661e:	f107 0310 	add.w	r3, r7, #16
 8006622:	4618      	mov	r0, r3
 8006624:	f008 fe96 	bl	800f354 <Timer_Expired>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <Hal_Write_Serial+0x4c>
    if(BlueNRG_SPI_Write(&SpiHandle, (uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 800662e:	e7e8      	b.n	8006602 <Hal_Write_Serial+0x1a>
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <Hal_Write_Serial+0x4e>
      break;
 8006634:	bf00      	nop
    }
  }
}
 8006636:	bf00      	nop
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000e88 	.word	0x20000e88

08006644 <BNRG_SPI_Init>:
*         Expansion Board.
* @param  None
* @retval None
*/
void BNRG_SPI_Init(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  SpiHandle.Instance = BNRG_SPI_INSTANCE;
 8006648:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 800664a:	4a16      	ldr	r2, [pc, #88]	; (80066a4 <BNRG_SPI_Init+0x60>)
 800664c:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.Mode = BNRG_SPI_MODE;
 800664e:	4b14      	ldr	r3, [pc, #80]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 8006650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006654:	605a      	str	r2, [r3, #4]
  SpiHandle.Init.Direction = BNRG_SPI_DIRECTION;
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 8006658:	2200      	movs	r2, #0
 800665a:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.DataSize = BNRG_SPI_DATASIZE;
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 800665e:	2200      	movs	r2, #0
 8006660:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.CLKPolarity = BNRG_SPI_CLKPOLARITY;
 8006662:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 8006664:	2200      	movs	r2, #0
 8006666:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CLKPhase = BNRG_SPI_CLKPHASE;
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 800666a:	2200      	movs	r2, #0
 800666c:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.NSS = BNRG_SPI_NSS;
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 8006670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006674:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.FirstBit = BNRG_SPI_FIRSTBIT;
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 8006678:	2200      	movs	r2, #0
 800667a:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.TIMode = BNRG_SPI_TIMODE;
 800667c:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 800667e:	2200      	movs	r2, #0
 8006680:	625a      	str	r2, [r3, #36]	; 0x24
  SpiHandle.Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 8006682:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 8006684:	2207      	movs	r2, #7
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 800668a:	2218      	movs	r2, #24
 800668c:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 800668e:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 8006690:	2200      	movs	r2, #0
 8006692:	629a      	str	r2, [r3, #40]	; 0x28
  
  HAL_SPI_Init(&SpiHandle);
 8006694:	4802      	ldr	r0, [pc, #8]	; (80066a0 <BNRG_SPI_Init+0x5c>)
 8006696:	f004 fcdf 	bl	800b058 <HAL_SPI_Init>
}
 800669a:	bf00      	nop
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000e88 	.word	0x20000e88
 80066a4:	40013000 	.word	0x40013000

080066a8 <BlueNRG_RST>:
* @brief  Resets the BlueNRG.
* @param  None
* @retval None
*/
void BlueNRG_RST(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 80066ac:	2200      	movs	r2, #0
 80066ae:	2104      	movs	r1, #4
 80066b0:	4807      	ldr	r0, [pc, #28]	; (80066d0 <BlueNRG_RST+0x28>)
 80066b2:	f003 fecf 	bl	800a454 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80066b6:	2005      	movs	r0, #5
 80066b8:	f002 fe66 	bl	8009388 <HAL_Delay>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 80066bc:	2201      	movs	r2, #1
 80066be:	2104      	movs	r1, #4
 80066c0:	4803      	ldr	r0, [pc, #12]	; (80066d0 <BlueNRG_RST+0x28>)
 80066c2:	f003 fec7 	bl	800a454 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80066c6:	2005      	movs	r0, #5
 80066c8:	f002 fe5e 	bl	8009388 <HAL_Delay>
}
 80066cc:	bf00      	nop
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40020400 	.word	0x40020400

080066d4 <BlueNRG_DataPresent>:
* @param  None
* @retval 1 if data are present, 0 otherwise
*/
// FIXME: find a better way to handle this return value (bool type? TRUE and FALSE)
uint8_t BlueNRG_DataPresent(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(BNRG_SPI_EXTI_PORT, BNRG_SPI_EXTI_PIN) == GPIO_PIN_SET)
 80066d8:	2110      	movs	r1, #16
 80066da:	4805      	ldr	r0, [pc, #20]	; (80066f0 <BlueNRG_DataPresent+0x1c>)
 80066dc:	f003 fea2 	bl	800a424 <HAL_GPIO_ReadPin>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <BlueNRG_DataPresent+0x16>
    return 1;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <BlueNRG_DataPresent+0x18>
  else  
    return 0;
 80066ea:	2300      	movs	r3, #0
} /* end BlueNRG_DataPresent() */
 80066ec:	4618      	mov	r0, r3
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40020000 	.word	0x40020000

080066f4 <BlueNRG_SPI_Read_All>:
* @param  buff_size: Buffer size
* @retval int32_t  : Number of read bytes
*/
int32_t BlueNRG_SPI_Read_All(SPI_HandleTypeDef *hspi, uint8_t *buffer,
                             uint8_t buff_size)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08c      	sub	sp, #48	; 0x30
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	71fb      	strb	r3, [r7, #7]
  uint16_t byte_count;
  uint8_t len = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t char_ff = 0xff;
 8006708:	23ff      	movs	r3, #255	; 0xff
 800670a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  volatile uint8_t read_char;
  
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800670e:	4a33      	ldr	r2, [pc, #204]	; (80067dc <BlueNRG_SPI_Read_All+0xe8>)
 8006710:	f107 031c 	add.w	r3, r7, #28
 8006714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006718:	6018      	str	r0, [r3, #0]
 800671a:	3304      	adds	r3, #4
 800671c:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 800671e:	2200      	movs	r2, #0
 8006720:	2101      	movs	r1, #1
 8006722:	482f      	ldr	r0, [pc, #188]	; (80067e0 <BlueNRG_SPI_Read_All+0xec>)
 8006724:	f003 fe96 	bl	800a454 <HAL_GPIO_WritePin>
  
  /* Read the header */  
  HAL_SPI_TransmitReceive(hspi, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8006728:	f107 0214 	add.w	r2, r7, #20
 800672c:	f107 011c 	add.w	r1, r7, #28
 8006730:	230f      	movs	r3, #15
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	2305      	movs	r3, #5
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f004 ff8c 	bl	800b654 <HAL_SPI_TransmitReceive>
  
  if (header_slave[0] == 0x02) {
 800673c:	7d3b      	ldrb	r3, [r7, #20]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d136      	bne.n	80067b0 <BlueNRG_SPI_Read_All+0xbc>
    /* device is ready */
    byte_count = (header_slave[4]<<8)|header_slave[3];
 8006742:	7e3b      	ldrb	r3, [r7, #24]
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	b21a      	sxth	r2, r3
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	b21b      	sxth	r3, r3
 800674c:	4313      	orrs	r3, r2
 800674e:	b21b      	sxth	r3, r3
 8006750:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (byte_count > 0) {
 8006752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02b      	beq.n	80067b0 <BlueNRG_SPI_Read_All+0xbc>
      
      /* avoid to read more data that size of the buffer */
      if (byte_count > buff_size){
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	b29b      	uxth	r3, r3
 800675c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800675e:	429a      	cmp	r2, r3
 8006760:	d901      	bls.n	8006766 <BlueNRG_SPI_Read_All+0x72>
        byte_count = buff_size;
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	84fb      	strh	r3, [r7, #38]	; 0x26
      }
      
      for (len = 0; len < byte_count; len++){
 8006766:	2300      	movs	r3, #0
 8006768:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800676c:	e01a      	b.n	80067a4 <BlueNRG_SPI_Read_All+0xb0>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800676e:	b672      	cpsid	i
}
 8006770:	bf00      	nop
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, &char_ff, (uint8_t*)&read_char, 1, TIMEOUT_DURATION);
 8006772:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8006776:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800677a:	230f      	movs	r3, #15
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	2301      	movs	r3, #1
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f004 ff67 	bl	800b654 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8006786:	b662      	cpsie	i
}
 8006788:	bf00      	nop
        __enable_irq();
        buffer[len] = read_char;
 800678a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
      for (len = 0; len < byte_count; len++){
 800679a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800679e:	3301      	adds	r3, #1
 80067a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80067a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d8de      	bhi.n	800676e <BlueNRG_SPI_Read_All+0x7a>
      }
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80067b0:	2201      	movs	r2, #1
 80067b2:	2101      	movs	r1, #1
 80067b4:	480a      	ldr	r0, [pc, #40]	; (80067e0 <BlueNRG_SPI_Read_All+0xec>)
 80067b6:	f003 fe4d 	bl	800a454 <HAL_GPIO_WritePin>
  
  // Add a small delay to give time to the BlueNRG to set the IRQ pin low
  // to avoid a useless SPI read at the end of the transaction
  for(volatile int i = 0; i < 2; i++)__NOP();
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	e003      	b.n	80067c8 <BlueNRG_SPI_Read_All+0xd4>
 80067c0:	bf00      	nop
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3301      	adds	r3, #1
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	ddf8      	ble.n	80067c0 <BlueNRG_SPI_Read_All+0xcc>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;   
 80067ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3728      	adds	r7, #40	; 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	080119cc 	.word	0x080119cc
 80067e0:	40020400 	.word	0x40020400

080067e4 <BlueNRG_SPI_Write>:
* @param  Nb_bytes2: Size of second data buffer to be written
* @retval Number of read bytes
*/
int32_t BlueNRG_SPI_Write(SPI_HandleTypeDef *hspi, uint8_t* data1,
                          uint8_t* data2, uint8_t Nb_bytes1, uint8_t Nb_bytes2)
{  
 80067e4:	b590      	push	{r4, r7, lr}
 80067e6:	b0cd      	sub	sp, #308	; 0x134
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	f107 040c 	add.w	r4, r7, #12
 80067ee:	6020      	str	r0, [r4, #0]
 80067f0:	f107 0008 	add.w	r0, r7, #8
 80067f4:	6001      	str	r1, [r0, #0]
 80067f6:	1d39      	adds	r1, r7, #4
 80067f8:	600a      	str	r2, [r1, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	1cfb      	adds	r3, r7, #3
 80067fe:	701a      	strb	r2, [r3, #0]
  int32_t result = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  
  int32_t spi_fix_enabled = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  
#ifdef ENABLE_SPI_FIX
  spi_fix_enabled = 1;
#endif //ENABLE_SPI_FIX
  
  unsigned char header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800680c:	4a43      	ldr	r2, [pc, #268]	; (800691c <BlueNRG_SPI_Write+0x138>)
 800680e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006816:	6018      	str	r0, [r3, #0]
 8006818:	3304      	adds	r3, #4
 800681a:	7019      	strb	r1, [r3, #0]
  unsigned char header_slave[HEADER_SIZE]  = {0xaa, 0x00, 0x00, 0x00, 0x00};
 800681c:	4a40      	ldr	r2, [pc, #256]	; (8006920 <BlueNRG_SPI_Write+0x13c>)
 800681e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006826:	6018      	str	r0, [r3, #0]
 8006828:	3304      	adds	r3, #4
 800682a:	7019      	strb	r1, [r3, #0]
  
  unsigned char read_char_buf[MAX_BUFFER_SIZE];
  
  Disable_SPI_IRQ(); 
 800682c:	f000 f8d6 	bl	80069dc <Disable_SPI_IRQ>
  If the SPI_FIX is enabled the IRQ is set in Output mode, then it is pulled
  high and, after a delay of at least 112us, the CS line is asserted and the
  header transmit/receive operations are started.
  After these transmit/receive operations the IRQ is reset in input mode.
  */
  if (spi_fix_enabled) {
 8006830:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <BlueNRG_SPI_Write+0x5c>
    set_irq_as_output();
 8006838:	f000 f876 	bl	8006928 <set_irq_as_output>
    
    /* Assert CS line after at least 112us */
    us150Delay();
 800683c:	f000 f8b2 	bl	80069a4 <us150Delay>
  }
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8006840:	2200      	movs	r2, #0
 8006842:	2101      	movs	r1, #1
 8006844:	4837      	ldr	r0, [pc, #220]	; (8006924 <BlueNRG_SPI_Write+0x140>)
 8006846:	f003 fe05 	bl	800a454 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 800684a:	b672      	cpsid	i
}
 800684c:	bf00      	nop
  
  /* Exchange header */  
  __disable_irq();
  HAL_SPI_TransmitReceive(hspi, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 800684e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006852:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8006856:	f107 000c 	add.w	r0, r7, #12
 800685a:	230f      	movs	r3, #15
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2305      	movs	r3, #5
 8006860:	6800      	ldr	r0, [r0, #0]
 8006862:	f004 fef7 	bl	800b654 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8006866:	b662      	cpsie	i
}
 8006868:	bf00      	nop
  __enable_irq();
  
  if (spi_fix_enabled) {
 800686a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <BlueNRG_SPI_Write+0x92>
    set_irq_as_input();
 8006872:	f000 f875 	bl	8006960 <set_irq_as_input>
  }
  
  if (header_slave[0] == 0x02) {
 8006876:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800687a:	2b02      	cmp	r3, #2
 800687c:	d13b      	bne.n	80068f6 <BlueNRG_SPI_Write+0x112>
    /* SPI is ready */
    if (header_slave[1] >= (Nb_bytes1+Nb_bytes2)) {
 800687e:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8006882:	4619      	mov	r1, r3
 8006884:	1cfb      	adds	r3, r7, #3
 8006886:	781a      	ldrb	r2, [r3, #0]
 8006888:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800688c:	4413      	add	r3, r2
 800688e:	4299      	cmp	r1, r3
 8006890:	db2c      	blt.n	80068ec <BlueNRG_SPI_Write+0x108>
      
      /*  Buffer is big enough */
      if (Nb_bytes1 > 0) {
 8006892:	1cfb      	adds	r3, r7, #3
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d012      	beq.n	80068c0 <BlueNRG_SPI_Write+0xdc>
  __ASM volatile ("cpsid i" : : : "memory");
 800689a:	b672      	cpsid	i
}
 800689c:	bf00      	nop
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, data1, read_char_buf, Nb_bytes1, TIMEOUT_DURATION);
 800689e:	1cfb      	adds	r3, r7, #3
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f107 0210 	add.w	r2, r7, #16
 80068a8:	f107 0108 	add.w	r1, r7, #8
 80068ac:	f107 000c 	add.w	r0, r7, #12
 80068b0:	240f      	movs	r4, #15
 80068b2:	9400      	str	r4, [sp, #0]
 80068b4:	6809      	ldr	r1, [r1, #0]
 80068b6:	6800      	ldr	r0, [r0, #0]
 80068b8:	f004 fecc 	bl	800b654 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80068bc:	b662      	cpsie	i
}
 80068be:	bf00      	nop
        __enable_irq();
        
      }
      if (Nb_bytes2 > 0) {
 80068c0:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01a      	beq.n	80068fe <BlueNRG_SPI_Write+0x11a>
  __ASM volatile ("cpsid i" : : : "memory");
 80068c8:	b672      	cpsid	i
}
 80068ca:	bf00      	nop
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, data2, read_char_buf, Nb_bytes2, TIMEOUT_DURATION);
 80068cc:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f107 0210 	add.w	r2, r7, #16
 80068d6:	1d39      	adds	r1, r7, #4
 80068d8:	f107 000c 	add.w	r0, r7, #12
 80068dc:	240f      	movs	r4, #15
 80068de:	9400      	str	r4, [sp, #0]
 80068e0:	6809      	ldr	r1, [r1, #0]
 80068e2:	6800      	ldr	r0, [r0, #0]
 80068e4:	f004 feb6 	bl	800b654 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80068e8:	b662      	cpsie	i
}
 80068ea:	e008      	b.n	80068fe <BlueNRG_SPI_Write+0x11a>
        
      }
      
    } else {
      /* Buffer is too small */
      result = -2;
 80068ec:	f06f 0301 	mvn.w	r3, #1
 80068f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068f4:	e003      	b.n	80068fe <BlueNRG_SPI_Write+0x11a>
    }
  } else {
    /* SPI is not ready */
    result = -1;
 80068f6:	f04f 33ff 	mov.w	r3, #4294967295
 80068fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  }
  
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80068fe:	2201      	movs	r2, #1
 8006900:	2101      	movs	r1, #1
 8006902:	4808      	ldr	r0, [pc, #32]	; (8006924 <BlueNRG_SPI_Write+0x140>)
 8006904:	f003 fda6 	bl	800a454 <HAL_GPIO_WritePin>
  
  
  Enable_SPI_IRQ();
 8006908:	f000 f861 	bl	80069ce <Enable_SPI_IRQ>
  
  return result;
 800690c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
}
 8006910:	4618      	mov	r0, r3
 8006912:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8006916:	46bd      	mov	sp, r7
 8006918:	bd90      	pop	{r4, r7, pc}
 800691a:	bf00      	nop
 800691c:	080119d4 	.word	0x080119d4
 8006920:	080119dc 	.word	0x080119dc
 8006924:	40020400 	.word	0x40020400

08006928 <set_irq_as_output>:
* @brief  Set in Output mode the IRQ.
* @param  None
* @retval None
*/
void set_irq_as_output(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Pull IRQ high */
  GPIO_InitStructure.Pin = BNRG_SPI_IRQ_PIN;
 800692e:	2310      	movs	r3, #16
 8006930:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8006932:	2301      	movs	r3, #1
 8006934:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = BNRG_SPI_IRQ_SPEED;
 8006936:	2303      	movs	r3, #3
 8006938:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 800693e:	1d3b      	adds	r3, r7, #4
 8006940:	4619      	mov	r1, r3
 8006942:	4806      	ldr	r0, [pc, #24]	; (800695c <set_irq_as_output+0x34>)
 8006944:	f003 fb06 	bl	8009f54 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN, GPIO_PIN_SET);
 8006948:	2201      	movs	r2, #1
 800694a:	2110      	movs	r1, #16
 800694c:	4803      	ldr	r0, [pc, #12]	; (800695c <set_irq_as_output+0x34>)
 800694e:	f003 fd81 	bl	800a454 <HAL_GPIO_WritePin>
}
 8006952:	bf00      	nop
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40020000 	.word	0x40020000

08006960 <set_irq_as_input>:
* @brief  Set the IRQ in input mode.
* @param  None
* @retval None
*/
void set_irq_as_input(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* IRQ input */  
  GPIO_InitStructure.Pin = BNRG_SPI_IRQ_PIN;
 8006966:	2310      	movs	r3, #16
 8006968:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = BNRG_SPI_IRQ_MODE;
 800696a:	4b0c      	ldr	r3, [pc, #48]	; (800699c <set_irq_as_input+0x3c>)
 800696c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800696e:	2302      	movs	r3, #2
 8006970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = BNRG_SPI_IRQ_SPEED;
 8006972:	2303      	movs	r3, #3
 8006974:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate = BNRG_SPI_IRQ_ALTERNATE;    
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 800697a:	1d3b      	adds	r3, r7, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4808      	ldr	r0, [pc, #32]	; (80069a0 <set_irq_as_input+0x40>)
 8006980:	f003 fae8 	bl	8009f54 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pull = BNRG_SPI_IRQ_PULL;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 8006988:	1d3b      	adds	r3, r7, #4
 800698a:	4619      	mov	r1, r3
 800698c:	4804      	ldr	r0, [pc, #16]	; (80069a0 <set_irq_as_input+0x40>)
 800698e:	f003 fae1 	bl	8009f54 <HAL_GPIO_Init>
}
 8006992:	bf00      	nop
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	10110000 	.word	0x10110000
 80069a0:	40020000 	.word	0x40020000

080069a4 <us150Delay>:
* @param  None
* @retval None
* NOTE: TODO: implement with clock-independent function.
*/
static void us150Delay(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
#if SYSCLK_FREQ == 4000000
  for(volatile int i = 0; i < 35; i++)__NOP();
#elif SYSCLK_FREQ == 32000000
  for(volatile int i = 0; i < 420; i++)__NOP();
#elif SYSCLK_FREQ == 80000000
  for(volatile int i = 0; i < 1072; i++)__NOP();
 80069aa:	2300      	movs	r3, #0
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	e003      	b.n	80069b8 <us150Delay+0x14>
 80069b0:	bf00      	nop
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3301      	adds	r3, #1
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80069be:	dbf7      	blt.n	80069b0 <us150Delay+0xc>
#elif SYSCLK_FREQ == 168000000
  for(volatile int i = 0; i < 2250; i++)__NOP();
#else
#error Implement delay function.
#endif    
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <Enable_SPI_IRQ>:
* @brief  Enable SPI IRQ.
* @param  None
* @retval None
*/
void Enable_SPI_IRQ(void)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);  
 80069d2:	200a      	movs	r0, #10
 80069d4:	f003 fa03 	bl	8009dde <HAL_NVIC_EnableIRQ>
}
 80069d8:	bf00      	nop
 80069da:	bd80      	pop	{r7, pc}

080069dc <Disable_SPI_IRQ>:
* @brief  Disable SPI IRQ.
* @param  None
* @retval None
*/
void Disable_SPI_IRQ(void)
{ 
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 80069e0:	200a      	movs	r0, #10
 80069e2:	f003 fa0a 	bl	8009dfa <HAL_NVIC_DisableIRQ>
}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <Clear_SPI_EXTI_Flag>:
* @brief  Clear EXTI (External Interrupt) line for SPI IRQ.
* @param  None
* @retval None
*/
void Clear_SPI_EXTI_Flag(void)
{  
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);  
 80069f0:	4b03      	ldr	r3, [pc, #12]	; (8006a00 <Clear_SPI_EXTI_Flag+0x14>)
 80069f2:	2210      	movs	r2, #16
 80069f4:	615a      	str	r2, [r3, #20]
}
 80069f6:	bf00      	nop
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40013c00 	.word	0x40013c00

08006a04 <LPS22HH_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d103      	bne.n	8006a20 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e04d      	b.n	8006abc <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	7b1a      	ldrb	r2, [r3, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	699a      	ldr	r2, [r3, #24]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a1b      	ldr	r2, [pc, #108]	; (8006ac8 <LPS22HH_RegisterBusIO+0xc4>)
 8006a5c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a1a      	ldr	r2, [pc, #104]	; (8006acc <LPS22HH_RegisterBusIO+0xc8>)
 8006a62:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d103      	bne.n	8006a7a <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	e020      	b.n	8006abc <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4798      	blx	r3
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e016      	b.n	8006abc <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d112      	bne.n	8006abc <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	2110      	movs	r1, #16
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9df 	bl	8006e6e <LPS22HH_Write_Reg>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 8006ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aba:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006abc:	68fb      	ldr	r3, [r7, #12]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08007197 	.word	0x08007197
 8006acc:	080071cd 	.word	0x080071cd

08006ad0 <LPS22HH_Init>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d108      	bne.n	8006af4 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fb0e 	bl	8007104 <LPS22HH_Initialize>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	e004      	b.n	8006afe <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <LPS22HH_DeInit>:
 * @brief  Deinitialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d111      	bne.n	8006b3c <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f877 	bl	8006c0c <LPS22HH_PRESS_Disable>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8006b24:	f04f 33ff 	mov.w	r3, #4294967295
 8006b28:	e00d      	b.n	8006b46 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f918 	bl	8006d60 <LPS22HH_TEMP_Disable>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8006b36:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3a:	e004      	b.n	8006b46 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HH_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <LPS22HH_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	331c      	adds	r3, #28
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fd1a 	bl	8007598 <lps22hh_device_id_get>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8006b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6e:	e000      	b.n	8006b72 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <LPS22HH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	4a05      	ldr	r2, [pc, #20]	; (8006bc0 <LPS22HH_GetCapabilities+0x44>)
 8006baa:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	4a04      	ldr	r2, [pc, #16]	; (8006bc0 <LPS22HH_GetCapabilities+0x44>)
 8006bb0:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	43480000 	.word	0x43480000

08006bc4 <LPS22HH_PRESS_Enable>:
 * @brief  Enable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e014      	b.n	8006c04 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f103 021c 	add.w	r2, r3, #28
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f000 fb93 	bl	8007314 <lps22hh_data_rate_set>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf8:	e004      	b.n	8006c04 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <LPS22HH_PRESS_Disable>:
 * @brief  Disable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e024      	b.n	8006c6c <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d11a      	bne.n	8006c62 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f103 021c 	add.w	r2, r3, #28
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	332b      	adds	r3, #43	; 0x2b
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f000 fbb9 	bl	80073b0 <lps22hh_data_rate_get>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
 8006c48:	e010      	b.n	8006c6c <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	331c      	adds	r3, #28
 8006c4e:	2100      	movs	r1, #0
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fb5f 	bl	8007314 <lps22hh_data_rate_set>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c60:	e004      	b.n	8006c6c <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HH_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <LPS22HH_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f90f 	bl	8006ea4 <LPS22HH_GetOutputDataRate>
 8006c86:	4603      	mov	r3, r0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <LPS22HH_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d106      	bne.n	8006cb4 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006ca6:	ed97 0a00 	vldr	s0, [r7]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f95e 	bl	8006f6c <LPS22HH_SetOutputDataRate_When_Enabled>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	e005      	b.n	8006cc0 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006cb4:	ed97 0a00 	vldr	s0, [r7]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f9c9 	bl	8007050 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006cbe:	4603      	mov	r3, r0
  }
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <LPS22HH_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8006cd2:	f107 030c 	add.w	r3, r7, #12
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f009 f954 	bl	800ff88 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	331c      	adds	r3, #28
 8006ce4:	f107 020c 	add.w	r2, r7, #12
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fc08 	bl	8007500 <lps22hh_pressure_raw_get>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfa:	e009      	b.n	8006d10 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fab0 	bl	8007264 <lps22hh_from_lsb_to_hpa>
 8006d04:	eef0 7a40 	vmov.f32	s15, s0
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <LPS22HH_TEMP_Enable>:
 * @brief  Enable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e014      	b.n	8006d58 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f103 021c 	add.w	r2, r3, #28
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f000 fae9 	bl	8007314 <lps22hh_data_rate_set>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	e004      	b.n	8006d58 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <LPS22HH_TEMP_Disable>:
 * @brief  Disable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e024      	b.n	8006dc0 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11a      	bne.n	8006db6 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f103 021c 	add.w	r2, r3, #28
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	332b      	adds	r3, #43	; 0x2b
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f000 fb0f 	bl	80073b0 <lps22hh_data_rate_get>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006d98:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9c:	e010      	b.n	8006dc0 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	331c      	adds	r3, #28
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fab5 	bl	8007314 <lps22hh_data_rate_set>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295
 8006db4:	e004      	b.n	8006dc0 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HH_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <LPS22HH_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f865 	bl	8006ea4 <LPS22HH_GetOutputDataRate>
 8006dda:	4603      	mov	r3, r0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <LPS22HH_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d106      	bne.n	8006e08 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006dfa:	ed97 0a00 	vldr	s0, [r7]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f8b4 	bl	8006f6c <LPS22HH_SetOutputDataRate_When_Enabled>
 8006e04:	4603      	mov	r3, r0
 8006e06:	e005      	b.n	8006e14 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006e08:	ed97 0a00 	vldr	s0, [r7]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f91f 	bl	8007050 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006e12:	4603      	mov	r3, r0
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <LPS22HH_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8006e26:	f107 030c 	add.w	r3, r7, #12
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f009 f8aa 	bl	800ff88 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	331c      	adds	r3, #28
 8006e38:	f107 020c 	add.w	r2, r7, #12
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fb87 	bl	8007552 <lps22hh_temperature_raw_get>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4e:	e00a      	b.n	8006e66 <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8006e50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fa1d 	bl	8007294 <lps22hh_from_lsb_to_celsius>
 8006e5a:	eef0 7a40 	vmov.f32	s15, s0
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <LPS22HH_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f103 001c 	add.w	r0, r3, #28
 8006e84:	1cba      	adds	r2, r7, #2
 8006e86:	78f9      	ldrb	r1, [r7, #3]
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f000 f9d2 	bl	8007232 <lps22hh_write_reg>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8006e94:	f04f 33ff 	mov.w	r3, #4294967295
 8006e98:	e000      	b.n	8006e9c <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <LPS22HH_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	331c      	adds	r3, #28
 8006eb6:	f107 020b 	add.w	r2, r7, #11
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fa77 	bl	80073b0 <lps22hh_data_rate_get>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	e03d      	b.n	8006f4a <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8006ece:	7afb      	ldrb	r3, [r7, #11]
 8006ed0:	2b07      	cmp	r3, #7
 8006ed2:	d835      	bhi.n	8006f40 <LPS22HH_GetOutputDataRate+0x9c>
 8006ed4:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <LPS22HH_GetOutputDataRate+0x38>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006efd 	.word	0x08006efd
 8006ee0:	08006f07 	.word	0x08006f07
 8006ee4:	08006f11 	.word	0x08006f11
 8006ee8:	08006f19 	.word	0x08006f19
 8006eec:	08006f21 	.word	0x08006f21
 8006ef0:	08006f29 	.word	0x08006f29
 8006ef4:	08006f31 	.word	0x08006f31
 8006ef8:	08006f39 	.word	0x08006f39
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
      break;
 8006f04:	e020      	b.n	8006f48 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006f0c:	601a      	str	r2, [r3, #0]
      break;
 8006f0e:	e01b      	b.n	8006f48 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	4a10      	ldr	r2, [pc, #64]	; (8006f54 <LPS22HH_GetOutputDataRate+0xb0>)
 8006f14:	601a      	str	r2, [r3, #0]
      break;
 8006f16:	e017      	b.n	8006f48 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	4a0f      	ldr	r2, [pc, #60]	; (8006f58 <LPS22HH_GetOutputDataRate+0xb4>)
 8006f1c:	601a      	str	r2, [r3, #0]
      break;
 8006f1e:	e013      	b.n	8006f48 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	4a0e      	ldr	r2, [pc, #56]	; (8006f5c <LPS22HH_GetOutputDataRate+0xb8>)
 8006f24:	601a      	str	r2, [r3, #0]
      break;
 8006f26:	e00f      	b.n	8006f48 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	4a0d      	ldr	r2, [pc, #52]	; (8006f60 <LPS22HH_GetOutputDataRate+0xbc>)
 8006f2c:	601a      	str	r2, [r3, #0]
      break;
 8006f2e:	e00b      	b.n	8006f48 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	4a0c      	ldr	r2, [pc, #48]	; (8006f64 <LPS22HH_GetOutputDataRate+0xc0>)
 8006f34:	601a      	str	r2, [r3, #0]
      break;
 8006f36:	e007      	b.n	8006f48 <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	4a0b      	ldr	r2, [pc, #44]	; (8006f68 <LPS22HH_GetOutputDataRate+0xc4>)
 8006f3c:	601a      	str	r2, [r3, #0]
      break;
 8006f3e:	e003      	b.n	8006f48 <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295
 8006f44:	60fb      	str	r3, [r7, #12]
      break;
 8006f46:	bf00      	nop
  }

  return ret;
 8006f48:	68fb      	ldr	r3, [r7, #12]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	41200000 	.word	0x41200000
 8006f58:	41c80000 	.word	0x41c80000
 8006f5c:	42480000 	.word	0x42480000
 8006f60:	42960000 	.word	0x42960000
 8006f64:	42c80000 	.word	0x42c80000
 8006f68:	43480000 	.word	0x43480000

08006f6c <LPS22HH_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006f78:	edd7 7a00 	vldr	s15, [r7]
 8006f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f88:	d801      	bhi.n	8006f8e <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e037      	b.n	8006ffe <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006f8e:	edd7 7a00 	vldr	s15, [r7]
 8006f92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f9e:	d801      	bhi.n	8006fa4 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e02c      	b.n	8006ffe <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006fa4:	edd7 7a00 	vldr	s15, [r7]
 8006fa8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb4:	d801      	bhi.n	8006fba <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e021      	b.n	8006ffe <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006fba:	edd7 7a00 	vldr	s15, [r7]
 8006fbe:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007044 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8006fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fca:	d801      	bhi.n	8006fd0 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	e016      	b.n	8006ffe <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006fd0:	edd7 7a00 	vldr	s15, [r7]
 8006fd4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007048 <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8006fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe0:	d801      	bhi.n	8006fe6 <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8006fe2:	2305      	movs	r3, #5
 8006fe4:	e00b      	b.n	8006ffe <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006fe6:	edd7 7a00 	vldr	s15, [r7]
 8006fea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800704c <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8006fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d801      	bhi.n	8006ffc <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8006ff8:	2306      	movs	r3, #6
 8006ffa:	e000      	b.n	8006ffe <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006ffc:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006ffe:	73fb      	strb	r3, [r7, #15]
          : (Odr <=  50.0f) ? LPS22HH_50_Hz
          : (Odr <=  75.0f) ? LPS22HH_75_Hz
          : (Odr <= 100.0f) ? LPS22HH_100_Hz
          :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	331c      	adds	r3, #28
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f983 	bl	8007314 <lps22hh_data_rate_set>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8007014:	f04f 33ff 	mov.w	r3, #4294967295
 8007018:	e00f      	b.n	800703a <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f103 021c 	add.w	r2, r3, #28
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	332b      	adds	r3, #43	; 0x2b
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f000 f9c2 	bl	80073b0 <lps22hh_data_rate_get>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8007032:	f04f 33ff 	mov.w	r3, #4294967295
 8007036:	e000      	b.n	800703a <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	42480000 	.word	0x42480000
 8007048:	42960000 	.word	0x42960000
 800704c:	42c80000 	.word	0x42c80000

08007050 <LPS22HH_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800705c:	edd7 7a00 	vldr	s15, [r7]
 8007060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706c:	d801      	bhi.n	8007072 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 800706e:	2301      	movs	r3, #1
 8007070:	e037      	b.n	80070e2 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8007072:	edd7 7a00 	vldr	s15, [r7]
 8007076:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800707a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007082:	d801      	bhi.n	8007088 <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8007084:	2302      	movs	r3, #2
 8007086:	e02c      	b.n	80070e2 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8007088:	edd7 7a00 	vldr	s15, [r7]
 800708c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007098:	d801      	bhi.n	800709e <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 800709a:	2303      	movs	r3, #3
 800709c:	e021      	b.n	80070e2 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800709e:	edd7 7a00 	vldr	s15, [r7]
 80070a2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80070f8 <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 80070a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ae:	d801      	bhi.n	80070b4 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 80070b0:	2304      	movs	r3, #4
 80070b2:	e016      	b.n	80070e2 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80070b4:	edd7 7a00 	vldr	s15, [r7]
 80070b8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80070fc <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 80070bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c4:	d801      	bhi.n	80070ca <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80070c6:	2305      	movs	r3, #5
 80070c8:	e00b      	b.n	80070e2 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80070ca:	edd7 7a00 	vldr	s15, [r7]
 80070ce:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007100 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 80070d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070da:	d801      	bhi.n	80070e0 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 80070dc:	2306      	movs	r3, #6
 80070de:	e000      	b.n	80070e2 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80070e0:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                 : (Odr <=  50.0f) ? LPS22HH_50_Hz
                 : (Odr <=  75.0f) ? LPS22HH_75_Hz
                 : (Odr <= 100.0f) ? LPS22HH_100_Hz
                 :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	42480000 	.word	0x42480000
 80070fc:	42960000 	.word	0x42960000
 8007100:	42c80000 	.word	0x42c80000

08007104 <LPS22HH_Initialize>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	331c      	adds	r3, #28
 8007110:	2111      	movs	r1, #17
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fa9d 	bl	8007652 <lps22hh_i3c_interface_set>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295
 8007122:	e034      	b.n	800718e <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	331c      	adds	r3, #28
 8007128:	2110      	movs	r1, #16
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f8f2 	bl	8007314 <lps22hh_data_rate_set>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8007136:	f04f 33ff 	mov.w	r3, #4294967295
 800713a:	e028      	b.n	800718e <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	331c      	adds	r3, #28
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fa5f 	bl	8007606 <lps22hh_lp_bandwidth_set>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 800714e:	f04f 33ff 	mov.w	r3, #4294967295
 8007152:	e01c      	b.n	800718e <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	331c      	adds	r3, #28
 8007158:	2101      	movs	r1, #1
 800715a:	4618      	mov	r0, r3
 800715c:	f000 f8b4 	bl	80072c8 <lps22hh_block_data_update_set>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	e010      	b.n	800718e <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	331c      	adds	r3, #28
 8007170:	2101      	movs	r1, #1
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fa21 	bl	80075ba <lps22hh_auto_increment_set>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 800717e:	f04f 33ff 	mov.w	r3, #4294967295
 8007182:	e004      	b.n	800718e <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2203      	movs	r2, #3
 8007188:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HH_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007196:	b590      	push	{r4, r7, lr}
 8007198:	b087      	sub	sp, #28
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	461a      	mov	r2, r3
 80071a2:	460b      	mov	r3, r1
 80071a4:	72fb      	strb	r3, [r7, #11]
 80071a6:	4613      	mov	r3, r2
 80071a8:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	695c      	ldr	r4, [r3, #20]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	7b1b      	ldrb	r3, [r3, #12]
 80071b6:	b298      	uxth	r0, r3
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	b299      	uxth	r1, r3
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	47a0      	blx	r4
 80071c2:	4603      	mov	r3, r0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd90      	pop	{r4, r7, pc}

080071cc <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	461a      	mov	r2, r3
 80071d8:	460b      	mov	r3, r1
 80071da:	72fb      	strb	r3, [r7, #11]
 80071dc:	4613      	mov	r3, r2
 80071de:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	691c      	ldr	r4, [r3, #16]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	7b1b      	ldrb	r3, [r3, #12]
 80071ec:	b298      	uxth	r0, r3
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	b299      	uxth	r1, r3
 80071f2:	893b      	ldrh	r3, [r7, #8]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	47a0      	blx	r4
 80071f8:	4603      	mov	r3, r0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd90      	pop	{r4, r7, pc}

08007202 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007202:	b590      	push	{r4, r7, lr}
 8007204:	b087      	sub	sp, #28
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	461a      	mov	r2, r3
 800720e:	460b      	mov	r3, r1
 8007210:	72fb      	strb	r3, [r7, #11]
 8007212:	4613      	mov	r3, r2
 8007214:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	685c      	ldr	r4, [r3, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6898      	ldr	r0, [r3, #8]
 800721e:	893b      	ldrh	r3, [r7, #8]
 8007220:	7af9      	ldrb	r1, [r7, #11]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	47a0      	blx	r4
 8007226:	6178      	str	r0, [r7, #20]
  return ret;
 8007228:	697b      	ldr	r3, [r7, #20]
}
 800722a:	4618      	mov	r0, r3
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	bd90      	pop	{r4, r7, pc}

08007232 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007232:	b590      	push	{r4, r7, lr}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	461a      	mov	r2, r3
 800723e:	460b      	mov	r3, r1
 8007240:	72fb      	strb	r3, [r7, #11]
 8007242:	4613      	mov	r3, r2
 8007244:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681c      	ldr	r4, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6898      	ldr	r0, [r3, #8]
 800724e:	893b      	ldrh	r3, [r7, #8]
 8007250:	7af9      	ldrb	r1, [r7, #11]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	47a0      	blx	r4
 8007256:	6178      	str	r0, [r7, #20]
  return ret;
 8007258:	697b      	ldr	r3, [r7, #20]
}
 800725a:	4618      	mov	r0, r3
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	bd90      	pop	{r4, r7, pc}
	...

08007264 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007290 <lps22hh_from_lsb_to_hpa+0x2c>
 800727a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800727e:	eef0 7a66 	vmov.f32	s15, s13
}
 8007282:	eeb0 0a67 	vmov.f32	s0, s15
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	49800000 	.word	0x49800000

08007294 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 800729e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80072c4 <lps22hh_from_lsb_to_celsius+0x30>
 80072ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80072b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80072b6:	eeb0 0a67 	vmov.f32	s0, s15
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	42c80000 	.word	0x42c80000

080072c8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80072d4:	f107 0208 	add.w	r2, r7, #8
 80072d8:	2301      	movs	r3, #1
 80072da:	2110      	movs	r1, #16
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff90 	bl	8007202 <lps22hh_read_reg>
 80072e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10f      	bne.n	800730a <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	7a3b      	ldrb	r3, [r7, #8]
 80072f4:	f362 0341 	bfi	r3, r2, #1, #1
 80072f8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80072fa:	f107 0208 	add.w	r2, r7, #8
 80072fe:	2301      	movs	r3, #1
 8007300:	2110      	movs	r1, #16
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ff95 	bl	8007232 <lps22hh_write_reg>
 8007308:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8007320:	f107 0210 	add.w	r2, r7, #16
 8007324:	2301      	movs	r3, #1
 8007326:	2110      	movs	r1, #16
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff ff6a 	bl	8007202 <lps22hh_read_reg>
 800732e:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d107      	bne.n	8007346 <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8007336:	f107 020c 	add.w	r2, r7, #12
 800733a:	2301      	movs	r3, #1
 800733c:	2111      	movs	r1, #17
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff ff5f 	bl	8007202 <lps22hh_read_reg>
 8007344:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10f      	bne.n	800736c <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	b2da      	uxtb	r2, r3
 8007354:	7c3b      	ldrb	r3, [r7, #16]
 8007356:	f362 1306 	bfi	r3, r2, #4, #3
 800735a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800735c:	f107 0210 	add.w	r2, r7, #16
 8007360:	2301      	movs	r3, #1
 8007362:	2110      	movs	r1, #16
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff ff64 	bl	8007232 <lps22hh_write_reg>
 800736a:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d119      	bne.n	80073a6 <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	091b      	lsrs	r3, r3, #4
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	b2da      	uxtb	r2, r3
 800737c:	7b3b      	ldrb	r3, [r7, #12]
 800737e:	f362 0341 	bfi	r3, r2, #1, #1
 8007382:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	08db      	lsrs	r3, r3, #3
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	b2da      	uxtb	r2, r3
 800738e:	7b3b      	ldrb	r3, [r7, #12]
 8007390:	f362 0300 	bfi	r3, r2, #0, #1
 8007394:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8007396:	f107 020c 	add.w	r2, r7, #12
 800739a:	2301      	movs	r3, #1
 800739c:	2111      	movs	r1, #17
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff ff47 	bl	8007232 <lps22hh_write_reg>
 80073a4:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 80073a6:	697b      	ldr	r3, [r7, #20]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80073ba:	f107 0210 	add.w	r2, r7, #16
 80073be:	2301      	movs	r3, #1
 80073c0:	2110      	movs	r1, #16
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff ff1d 	bl	8007202 <lps22hh_read_reg>
 80073c8:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d107      	bne.n	80073e0 <lps22hh_data_rate_get+0x30>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80073d0:	f107 020c 	add.w	r2, r7, #12
 80073d4:	2301      	movs	r3, #1
 80073d6:	2111      	movs	r1, #17
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff ff12 	bl	8007202 <lps22hh_read_reg>
 80073de:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f040 8086 	bne.w	80074f4 <lps22hh_data_rate_get+0x144>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80073e8:	f107 020c 	add.w	r2, r7, #12
 80073ec:	2301      	movs	r3, #1
 80073ee:	2111      	movs	r1, #17
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ff06 	bl	8007202 <lps22hh_read_reg>
 80073f6:	6178      	str	r0, [r7, #20]
                           1);

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80073f8:	7b3b      	ldrb	r3, [r7, #12]
 80073fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	011a      	lsls	r2, r3, #4
 8007402:	7b3b      	ldrb	r3, [r7, #12]
 8007404:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007408:	b2db      	uxtb	r3, r3
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4413      	add	r3, r2
             ctrl_reg1.odr )) {
 800740e:	7c3a      	ldrb	r2, [r7, #16]
 8007410:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007414:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8007416:	4413      	add	r3, r2
 8007418:	2b15      	cmp	r3, #21
 800741a:	d867      	bhi.n	80074ec <lps22hh_data_rate_get+0x13c>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <lps22hh_data_rate_get+0x74>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	0800747d 	.word	0x0800747d
 8007428:	0800748d 	.word	0x0800748d
 800742c:	08007495 	.word	0x08007495
 8007430:	0800749d 	.word	0x0800749d
 8007434:	080074a5 	.word	0x080074a5
 8007438:	080074ad 	.word	0x080074ad
 800743c:	080074dd 	.word	0x080074dd
 8007440:	080074e5 	.word	0x080074e5
 8007444:	08007485 	.word	0x08007485
 8007448:	080074ed 	.word	0x080074ed
 800744c:	080074ed 	.word	0x080074ed
 8007450:	080074ed 	.word	0x080074ed
 8007454:	080074ed 	.word	0x080074ed
 8007458:	080074ed 	.word	0x080074ed
 800745c:	080074ed 	.word	0x080074ed
 8007460:	080074ed 	.word	0x080074ed
 8007464:	080074ed 	.word	0x080074ed
 8007468:	080074b5 	.word	0x080074b5
 800746c:	080074bd 	.word	0x080074bd
 8007470:	080074c5 	.word	0x080074c5
 8007474:	080074cd 	.word	0x080074cd
 8007478:	080074d5 	.word	0x080074d5
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
        break;
 8007482:	e038      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2208      	movs	r2, #8
 8007488:	701a      	strb	r2, [r3, #0]
        break;
 800748a:	e034      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	701a      	strb	r2, [r3, #0]
        break;
 8007492:	e030      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2202      	movs	r2, #2
 8007498:	701a      	strb	r2, [r3, #0]
        break;
 800749a:	e02c      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2203      	movs	r2, #3
 80074a0:	701a      	strb	r2, [r3, #0]
        break;
 80074a2:	e028      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2204      	movs	r2, #4
 80074a8:	701a      	strb	r2, [r3, #0]
        break;
 80074aa:	e024      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2205      	movs	r2, #5
 80074b0:	701a      	strb	r2, [r3, #0]
        break;
 80074b2:	e020      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2211      	movs	r2, #17
 80074b8:	701a      	strb	r2, [r3, #0]
        break;
 80074ba:	e01c      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2212      	movs	r2, #18
 80074c0:	701a      	strb	r2, [r3, #0]
        break;
 80074c2:	e018      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2213      	movs	r2, #19
 80074c8:	701a      	strb	r2, [r3, #0]
        break;
 80074ca:	e014      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2214      	movs	r2, #20
 80074d0:	701a      	strb	r2, [r3, #0]
        break;
 80074d2:	e010      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2215      	movs	r2, #21
 80074d8:	701a      	strb	r2, [r3, #0]
        break;
 80074da:	e00c      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2206      	movs	r2, #6
 80074e0:	701a      	strb	r2, [r3, #0]
        break;
 80074e2:	e008      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2207      	movs	r2, #7
 80074e8:	701a      	strb	r2, [r3, #0]
        break;
 80074ea:	e004      	b.n	80074f6 <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]
        break;
 80074f2:	e000      	b.n	80074f6 <lps22hh_data_rate_get+0x146>
    }
  }
 80074f4:	bf00      	nop

  return ret;
 80074f6:	697b      	ldr	r3, [r7, #20]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800750a:	f107 0208 	add.w	r2, r7, #8
 800750e:	2303      	movs	r3, #3
 8007510:	2128      	movs	r1, #40	; 0x28
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff fe75 	bl	8007202 <lps22hh_read_reg>
 8007518:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800751a:	7abb      	ldrb	r3, [r7, #10]
 800751c:	461a      	mov	r2, r3
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	7a7a      	ldrb	r2, [r7, #9]
 800752a:	441a      	add	r2, r3
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	7a3a      	ldrb	r2, [r7, #8]
 8007538:	441a      	add	r2, r3
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	021a      	lsls	r2, r3, #8
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	601a      	str	r2, [r3, #0]
  return ret;
 8007548:	68fb      	ldr	r3, [r7, #12]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800755c:	f107 0208 	add.w	r2, r7, #8
 8007560:	2302      	movs	r3, #2
 8007562:	212b      	movs	r1, #43	; 0x2b
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff fe4c 	bl	8007202 <lps22hh_read_reg>
 800756a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800756c:	7a7b      	ldrb	r3, [r7, #9]
 800756e:	b21a      	sxth	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800757a:	b29b      	uxth	r3, r3
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	b29a      	uxth	r2, r3
 8007580:	7a3b      	ldrb	r3, [r7, #8]
 8007582:	b29b      	uxth	r3, r3
 8007584:	4413      	add	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	b21a      	sxth	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	801a      	strh	r2, [r3, #0]
  return ret;
 800758e:	68fb      	ldr	r3, [r7, #12]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80075a2:	2301      	movs	r3, #1
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	210f      	movs	r1, #15
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff fe2a 	bl	8007202 <lps22hh_read_reg>
 80075ae:	60f8      	str	r0, [r7, #12]
  return ret;
 80075b0:	68fb      	ldr	r3, [r7, #12]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80075c6:	f107 0208 	add.w	r2, r7, #8
 80075ca:	2301      	movs	r3, #1
 80075cc:	2111      	movs	r1, #17
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fe17 	bl	8007202 <lps22hh_read_reg>
 80075d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10f      	bne.n	80075fc <lps22hh_auto_increment_set+0x42>
    reg.if_add_inc = val;
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	7a3b      	ldrb	r3, [r7, #8]
 80075e6:	f362 1304 	bfi	r3, r2, #4, #1
 80075ea:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80075ec:	f107 0208 	add.w	r2, r7, #8
 80075f0:	2301      	movs	r3, #1
 80075f2:	2111      	movs	r1, #17
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff fe1c 	bl	8007232 <lps22hh_write_reg>
 80075fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075fc:	68fb      	ldr	r3, [r7, #12]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8007612:	f107 0208 	add.w	r2, r7, #8
 8007616:	2301      	movs	r3, #1
 8007618:	2110      	movs	r1, #16
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff fdf1 	bl	8007202 <lps22hh_read_reg>
 8007620:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10f      	bne.n	8007648 <lps22hh_lp_bandwidth_set+0x42>
    reg.lpfp_cfg = (uint8_t)val;
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	b2da      	uxtb	r2, r3
 8007630:	7a3b      	ldrb	r3, [r7, #8]
 8007632:	f362 0383 	bfi	r3, r2, #2, #2
 8007636:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8007638:	f107 0208 	add.w	r2, r7, #8
 800763c:	2301      	movs	r3, #1
 800763e:	2110      	movs	r1, #16
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff fdf6 	bl	8007232 <lps22hh_write_reg>
 8007646:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007648:	68fb      	ldr	r3, [r7, #12]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 800765e:	f107 0208 	add.w	r2, r7, #8
 8007662:	2301      	movs	r3, #1
 8007664:	210e      	movs	r1, #14
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7ff fdcb 	bl	8007202 <lps22hh_read_reg>
 800766c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d118      	bne.n	80076a6 <lps22hh_i3c_interface_set+0x54>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	7a3b      	ldrb	r3, [r7, #8]
 800767e:	f362 0341 	bfi	r3, r2, #1, #1
 8007682:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	091b      	lsrs	r3, r3, #4
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	b2da      	uxtb	r2, r3
 800768e:	7a3b      	ldrb	r3, [r7, #8]
 8007690:	f362 13c7 	bfi	r3, r2, #7, #1
 8007694:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8007696:	f107 0208 	add.w	r2, r7, #8
 800769a:	2301      	movs	r3, #1
 800769c:	210e      	movs	r1, #14
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff fdc7 	bl	8007232 <lps22hh_write_reg>
 80076a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80076a6:	68fb      	ldr	r3, [r7, #12]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <LSM6DSR_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_RegisterBusIO(LSM6DSR_Object_t *pObj, LSM6DSR_IO_t *pIO)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d103      	bne.n	80076cc <LSM6DSR_RegisterBusIO+0x1c>
  {
    ret = LSM6DSR_ERROR;
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e04d      	b.n	8007768 <LSM6DSR_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	7b1a      	ldrb	r2, [r3, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	695a      	ldr	r2, [r3, #20]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a1b      	ldr	r2, [pc, #108]	; (8007774 <LSM6DSR_RegisterBusIO+0xc4>)
 8007708:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a1a      	ldr	r2, [pc, #104]	; (8007778 <LSM6DSR_RegisterBusIO+0xc8>)
 800770e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d103      	bne.n	8007726 <LSM6DSR_RegisterBusIO+0x76>
    {
      ret = LSM6DSR_ERROR;
 800771e:	f04f 33ff 	mov.w	r3, #4294967295
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e020      	b.n	8007768 <LSM6DSR_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSR_OK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4798      	blx	r3
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <LSM6DSR_RegisterBusIO+0x8a>
    {
      ret = LSM6DSR_ERROR;
 8007732:	f04f 33ff 	mov.w	r3, #4294967295
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	e016      	b.n	8007768 <LSM6DSR_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d112      	bne.n	8007768 <LSM6DSR_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10d      	bne.n	8007768 <LSM6DSR_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800774c:	230c      	movs	r3, #12
 800774e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSR_Write_Reg(pObj, LSM6DSR_CTRL3_C, data) != LSM6DSR_OK)
 8007750:	7afb      	ldrb	r3, [r7, #11]
 8007752:	461a      	mov	r2, r3
 8007754:	2112      	movs	r1, #18
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fd75 	bl	8008246 <LSM6DSR_Write_Reg>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <LSM6DSR_RegisterBusIO+0xb8>
          {
            ret = LSM6DSR_ERROR;
 8007762:	f04f 33ff 	mov.w	r3, #4294967295
 8007766:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007768:	68fb      	ldr	r3, [r7, #12]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	080086b5 	.word	0x080086b5
 8007778:	080086eb 	.word	0x080086eb

0800777c <LSM6DSR_Init>:
 * @brief  Initialize the LSM6DSR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_Init(LSM6DSR_Object_t *pObj)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dsr_i3c_disable_set(&(pObj->Ctx), LSM6DSR_I3C_DISABLE) != LSM6DSR_OK)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	331c      	adds	r3, #28
 8007788:	2180      	movs	r1, #128	; 0x80
 800778a:	4618      	mov	r0, r3
 800778c:	f001 fca9 	bl	80090e2 <lsm6dsr_i3c_disable_set>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <LSM6DSR_Init+0x20>
  {
    return LSM6DSR_ERROR;
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	e060      	b.n	800785e <LSM6DSR_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsr_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSR_OK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	331c      	adds	r3, #28
 80077a0:	2101      	movs	r1, #1
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 fc77 	bl	8009096 <lsm6dsr_auto_increment_set>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <LSM6DSR_Init+0x38>
  {
    return LSM6DSR_ERROR;
 80077ae:	f04f 33ff 	mov.w	r3, #4294967295
 80077b2:	e054      	b.n	800785e <LSM6DSR_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dsr_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSR_OK)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	331c      	adds	r3, #28
 80077b8:	2101      	movs	r1, #1
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fb78 	bl	8008eb0 <lsm6dsr_block_data_update_set>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <LSM6DSR_Init+0x50>
  {
    return LSM6DSR_ERROR;
 80077c6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ca:	e048      	b.n	800785e <LSM6DSR_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dsr_fifo_mode_set(&(pObj->Ctx), LSM6DSR_BYPASS_MODE) != LSM6DSR_OK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	331c      	adds	r3, #28
 80077d0:	2100      	movs	r1, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f001 fccb 	bl	800916e <lsm6dsr_fifo_mode_set>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <LSM6DSR_Init+0x68>
  {
    return LSM6DSR_ERROR;
 80077de:	f04f 33ff 	mov.w	r3, #4294967295
 80077e2:	e03c      	b.n	800785e <LSM6DSR_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSR_XL_ODR_104Hz;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2204      	movs	r2, #4
 80077e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), LSM6DSR_XL_ODR_OFF) != LSM6DSR_OK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	331c      	adds	r3, #28
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 f822 	bl	800883c <lsm6dsr_xl_data_rate_set>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <LSM6DSR_Init+0x88>
  {
    return LSM6DSR_ERROR;
 80077fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007802:	e02c      	b.n	800785e <LSM6DSR_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsr_xl_full_scale_set(&(pObj->Ctx), LSM6DSR_2g) != LSM6DSR_OK)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	331c      	adds	r3, #28
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f000 ffb8 	bl	8008780 <lsm6dsr_xl_full_scale_set>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <LSM6DSR_Init+0xa0>
  {
    return LSM6DSR_ERROR;
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
 800781a:	e020      	b.n	800785e <LSM6DSR_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSR_GY_ODR_104Hz;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2204      	movs	r2, #4
 8007820:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), LSM6DSR_GY_ODR_OFF) != LSM6DSR_OK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	331c      	adds	r3, #28
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f9e2 	bl	8008bf4 <lsm6dsr_gy_data_rate_set>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <LSM6DSR_Init+0xc0>
  {
    return LSM6DSR_ERROR;
 8007836:	f04f 33ff 	mov.w	r3, #4294967295
 800783a:	e010      	b.n	800785e <LSM6DSR_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsr_gy_full_scale_set(&(pObj->Ctx), LSM6DSR_2000dps) != LSM6DSR_OK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	331c      	adds	r3, #28
 8007840:	210c      	movs	r1, #12
 8007842:	4618      	mov	r0, r3
 8007844:	f001 f95e 	bl	8008b04 <lsm6dsr_gy_full_scale_set>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <LSM6DSR_Init+0xd8>
  {
    return LSM6DSR_ERROR;
 800784e:	f04f 33ff 	mov.w	r3, #4294967295
 8007852:	e004      	b.n	800785e <LSM6DSR_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSR_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <LSM6DSR_DeInit>:
 * @brief  Deinitialize the LSM6DSR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_DeInit(LSM6DSR_Object_t *pObj)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSR_ACC_Disable(pObj) != LSM6DSR_OK)
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f888 	bl	8007984 <LSM6DSR_ACC_Disable>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <LSM6DSR_DeInit+0x1a>
  {
    return LSM6DSR_ERROR;
 800787a:	f04f 33ff 	mov.w	r3, #4294967295
 800787e:	e015      	b.n	80078ac <LSM6DSR_DeInit+0x46>
  }

  if (LSM6DSR_GYRO_Disable(pObj) != LSM6DSR_OK)
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa92 	bl	8007daa <LSM6DSR_GYRO_Disable>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <LSM6DSR_DeInit+0x2c>
  {
    return LSM6DSR_ERROR;
 800788c:	f04f 33ff 	mov.w	r3, #4294967295
 8007890:	e00c      	b.n	80078ac <LSM6DSR_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSR_XL_ODR_OFF;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSR_GY_ODR_OFF;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSR_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <LSM6DSR_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ReadID(LSM6DSR_Object_t *pObj, uint8_t *Id)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  if (lsm6dsr_device_id_get(&(pObj->Ctx), Id) != LSM6DSR_OK)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	331c      	adds	r3, #28
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 fbd5 	bl	8009074 <lsm6dsr_device_id_get>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <LSM6DSR_ReadID+0x22>
  {
    return LSM6DSR_ERROR;
 80078d0:	f04f 33ff 	mov.w	r3, #4294967295
 80078d4:	e000      	b.n	80078d8 <LSM6DSR_ReadID+0x24>
  }

  return LSM6DSR_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <LSM6DSR_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSR sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GetCapabilities(LSM6DSR_Object_t *pObj, LSM6DSR_Capabilities_t *Capabilities)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2201      	movs	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2201      	movs	r2, #1
 80078f4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2200      	movs	r2, #0
 80078fa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8007908:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2210      	movs	r2, #16
 800790e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	4a07      	ldr	r2, [pc, #28]	; (8007938 <LSM6DSR_GetCapabilities+0x58>)
 800791a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	4a06      	ldr	r2, [pc, #24]	; (8007938 <LSM6DSR_GetCapabilities+0x58>)
 8007920:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	619a      	str	r2, [r3, #24]
  return LSM6DSR_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	45d02000 	.word	0x45d02000

0800793c <LSM6DSR_ACC_Enable>:
 * @brief  Enable the LSM6DSR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_Enable(LSM6DSR_Object_t *pObj)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <LSM6DSR_ACC_Enable+0x16>
  {
    return LSM6DSR_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	e014      	b.n	800797c <LSM6DSR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSR_OK)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f103 021c 	add.w	r2, r3, #28
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f000 ff6b 	bl	800883c <lsm6dsr_xl_data_rate_set>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <LSM6DSR_ACC_Enable+0x36>
  {
    return LSM6DSR_ERROR;
 800796c:	f04f 33ff 	mov.w	r3, #4294967295
 8007970:	e004      	b.n	800797c <LSM6DSR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSR_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <LSM6DSR_ACC_Disable>:
 * @brief  Disable the LSM6DSR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_Disable(LSM6DSR_Object_t *pObj)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <LSM6DSR_ACC_Disable+0x16>
  {
    return LSM6DSR_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e01f      	b.n	80079da <LSM6DSR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSR_OK)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f103 021c 	add.w	r2, r3, #28
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	332b      	adds	r3, #43	; 0x2b
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f001 f844 	bl	8008a34 <lsm6dsr_xl_data_rate_get>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <LSM6DSR_ACC_Disable+0x34>
  {
    return LSM6DSR_ERROR;
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	e010      	b.n	80079da <LSM6DSR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), LSM6DSR_XL_ODR_OFF) != LSM6DSR_OK)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	331c      	adds	r3, #28
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 ff3c 	bl	800883c <lsm6dsr_xl_data_rate_set>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <LSM6DSR_ACC_Disable+0x4c>
  {
    return LSM6DSR_ERROR;
 80079ca:	f04f 33ff 	mov.w	r3, #4294967295
 80079ce:	e004      	b.n	80079da <LSM6DSR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSR_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <LSM6DSR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetSensitivity(LSM6DSR_Object_t *pObj, float *Sensitivity)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSR_OK)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	331c      	adds	r3, #28
 80079f6:	f107 020b 	add.w	r2, r7, #11
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fee5 	bl	80087cc <lsm6dsr_xl_full_scale_get>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <LSM6DSR_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSR_ERROR;
 8007a08:	f04f 33ff 	mov.w	r3, #4294967295
 8007a0c:	e023      	b.n	8007a56 <LSM6DSR_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d81b      	bhi.n	8007a4c <LSM6DSR_ACC_GetSensitivity+0x68>
 8007a14:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <LSM6DSR_ACC_GetSensitivity+0x38>)
 8007a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1a:	bf00      	nop
 8007a1c:	08007a2d 	.word	0x08007a2d
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a3d 	.word	0x08007a3d
  {
    case LSM6DSR_2g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_2G;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <LSM6DSR_ACC_GetSensitivity+0x7c>)
 8007a30:	601a      	str	r2, [r3, #0]
      break;
 8007a32:	e00f      	b.n	8007a54 <LSM6DSR_ACC_GetSensitivity+0x70>

    case LSM6DSR_4g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_4G;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	4a0b      	ldr	r2, [pc, #44]	; (8007a64 <LSM6DSR_ACC_GetSensitivity+0x80>)
 8007a38:	601a      	str	r2, [r3, #0]
      break;
 8007a3a:	e00b      	b.n	8007a54 <LSM6DSR_ACC_GetSensitivity+0x70>

    case LSM6DSR_8g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_8G;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	4a0a      	ldr	r2, [pc, #40]	; (8007a68 <LSM6DSR_ACC_GetSensitivity+0x84>)
 8007a40:	601a      	str	r2, [r3, #0]
      break;
 8007a42:	e007      	b.n	8007a54 <LSM6DSR_ACC_GetSensitivity+0x70>

    case LSM6DSR_16g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_16G;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	4a09      	ldr	r2, [pc, #36]	; (8007a6c <LSM6DSR_ACC_GetSensitivity+0x88>)
 8007a48:	601a      	str	r2, [r3, #0]
      break;
 8007a4a:	e003      	b.n	8007a54 <LSM6DSR_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSR_ERROR;
 8007a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a50:	60fb      	str	r3, [r7, #12]
      break;
 8007a52:	bf00      	nop
  }

  return ret;
 8007a54:	68fb      	ldr	r3, [r7, #12]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	3d79db23 	.word	0x3d79db23
 8007a64:	3df9db23 	.word	0x3df9db23
 8007a68:	3e79db23 	.word	0x3e79db23
 8007a6c:	3ef9db23 	.word	0x3ef9db23

08007a70 <LSM6DSR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetOutputDataRate(LSM6DSR_Object_t *pObj, float *Odr)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
  lsm6dsr_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSR_OK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	331c      	adds	r3, #28
 8007a82:	f107 020b 	add.w	r2, r7, #11
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 ffd3 	bl	8008a34 <lsm6dsr_xl_data_rate_get>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <LSM6DSR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSR_ERROR;
 8007a94:	f04f 33ff 	mov.w	r3, #4294967295
 8007a98:	e04e      	b.n	8007b38 <LSM6DSR_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	2b0a      	cmp	r3, #10
 8007a9e:	d846      	bhi.n	8007b2e <LSM6DSR_ACC_GetOutputDataRate+0xbe>
 8007aa0:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <LSM6DSR_ACC_GetOutputDataRate+0x38>)
 8007aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa6:	bf00      	nop
 8007aa8:	08007ad5 	.word	0x08007ad5
 8007aac:	08007adf 	.word	0x08007adf
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	08007aef 	.word	0x08007aef
 8007ab8:	08007af7 	.word	0x08007af7
 8007abc:	08007aff 	.word	0x08007aff
 8007ac0:	08007b07 	.word	0x08007b07
 8007ac4:	08007b0f 	.word	0x08007b0f
 8007ac8:	08007b17 	.word	0x08007b17
 8007acc:	08007b1f 	.word	0x08007b1f
 8007ad0:	08007b27 	.word	0x08007b27
  {
    case LSM6DSR_XL_ODR_OFF:
      *Odr = 0.0f;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
      break;
 8007adc:	e02b      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	4a17      	ldr	r2, [pc, #92]	; (8007b40 <LSM6DSR_ACC_GetOutputDataRate+0xd0>)
 8007ae2:	601a      	str	r2, [r3, #0]
      break;
 8007ae4:	e027      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_26Hz:
      *Odr = 26.0f;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	4a16      	ldr	r2, [pc, #88]	; (8007b44 <LSM6DSR_ACC_GetOutputDataRate+0xd4>)
 8007aea:	601a      	str	r2, [r3, #0]
      break;
 8007aec:	e023      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_52Hz:
      *Odr = 52.0f;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <LSM6DSR_ACC_GetOutputDataRate+0xd8>)
 8007af2:	601a      	str	r2, [r3, #0]
      break;
 8007af4:	e01f      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_104Hz:
      *Odr = 104.0f;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	4a14      	ldr	r2, [pc, #80]	; (8007b4c <LSM6DSR_ACC_GetOutputDataRate+0xdc>)
 8007afa:	601a      	str	r2, [r3, #0]
      break;
 8007afc:	e01b      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_208Hz:
      *Odr = 208.0f;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	4a13      	ldr	r2, [pc, #76]	; (8007b50 <LSM6DSR_ACC_GetOutputDataRate+0xe0>)
 8007b02:	601a      	str	r2, [r3, #0]
      break;
 8007b04:	e017      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_417Hz:
      *Odr = 417.0f;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	4a12      	ldr	r2, [pc, #72]	; (8007b54 <LSM6DSR_ACC_GetOutputDataRate+0xe4>)
 8007b0a:	601a      	str	r2, [r3, #0]
      break;
 8007b0c:	e013      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_833Hz:
      *Odr = 833.0f;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	4a11      	ldr	r2, [pc, #68]	; (8007b58 <LSM6DSR_ACC_GetOutputDataRate+0xe8>)
 8007b12:	601a      	str	r2, [r3, #0]
      break;
 8007b14:	e00f      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	4a10      	ldr	r2, [pc, #64]	; (8007b5c <LSM6DSR_ACC_GetOutputDataRate+0xec>)
 8007b1a:	601a      	str	r2, [r3, #0]
      break;
 8007b1c:	e00b      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <LSM6DSR_ACC_GetOutputDataRate+0xf0>)
 8007b22:	601a      	str	r2, [r3, #0]
      break;
 8007b24:	e007      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	4a0e      	ldr	r2, [pc, #56]	; (8007b64 <LSM6DSR_ACC_GetOutputDataRate+0xf4>)
 8007b2a:	601a      	str	r2, [r3, #0]
      break;
 8007b2c:	e003      	b.n	8007b36 <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSR_ERROR;
 8007b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b32:	60fb      	str	r3, [r7, #12]
      break;
 8007b34:	bf00      	nop
  }

  return ret;
 8007b36:	68fb      	ldr	r3, [r7, #12]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	41480000 	.word	0x41480000
 8007b44:	41d00000 	.word	0x41d00000
 8007b48:	42500000 	.word	0x42500000
 8007b4c:	42d00000 	.word	0x42d00000
 8007b50:	43500000 	.word	0x43500000
 8007b54:	43d08000 	.word	0x43d08000
 8007b58:	44504000 	.word	0x44504000
 8007b5c:	44d06000 	.word	0x44d06000
 8007b60:	45505000 	.word	0x45505000
 8007b64:	45d05800 	.word	0x45d05800

08007b68 <LSM6DSR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_SetOutputDataRate(LSM6DSR_Object_t *pObj, float Odr)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d106      	bne.n	8007b8c <LSM6DSR_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007b7e:	ed97 0a00 	vldr	s0, [r7]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fb7a 	bl	800827c <LSM6DSR_ACC_SetOutputDataRate_When_Enabled>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	e005      	b.n	8007b98 <LSM6DSR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007b8c:	ed97 0a00 	vldr	s0, [r7]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fbff 	bl	8008394 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled>
 8007b96:	4603      	mov	r3, r0
  }
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <LSM6DSR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetFullScale(LSM6DSR_Object_t *pObj, int32_t *FullScale)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSR_OK)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	331c      	adds	r3, #28
 8007bb2:	f107 020b 	add.w	r2, r7, #11
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fe07 	bl	80087cc <lsm6dsr_xl_full_scale_get>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <LSM6DSR_ACC_GetFullScale+0x2a>
  {
    return LSM6DSR_ERROR;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	e023      	b.n	8007c12 <LSM6DSR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007bca:	7afb      	ldrb	r3, [r7, #11]
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d81b      	bhi.n	8007c08 <LSM6DSR_ACC_GetFullScale+0x68>
 8007bd0:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <LSM6DSR_ACC_GetFullScale+0x38>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007be9 	.word	0x08007be9
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007bf9 	.word	0x08007bf9
  {
    case LSM6DSR_2g:
      *FullScale =  2;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2202      	movs	r2, #2
 8007bec:	601a      	str	r2, [r3, #0]
      break;
 8007bee:	e00f      	b.n	8007c10 <LSM6DSR_ACC_GetFullScale+0x70>

    case LSM6DSR_4g:
      *FullScale =  4;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2204      	movs	r2, #4
 8007bf4:	601a      	str	r2, [r3, #0]
      break;
 8007bf6:	e00b      	b.n	8007c10 <LSM6DSR_ACC_GetFullScale+0x70>

    case LSM6DSR_8g:
      *FullScale =  8;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	601a      	str	r2, [r3, #0]
      break;
 8007bfe:	e007      	b.n	8007c10 <LSM6DSR_ACC_GetFullScale+0x70>

    case LSM6DSR_16g:
      *FullScale = 16;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2210      	movs	r2, #16
 8007c04:	601a      	str	r2, [r3, #0]
      break;
 8007c06:	e003      	b.n	8007c10 <LSM6DSR_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSR_ERROR;
 8007c08:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0c:	60fb      	str	r3, [r7, #12]
      break;
 8007c0e:	bf00      	nop
  }

  return ret;
 8007c10:	68fb      	ldr	r3, [r7, #12]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop

08007c1c <LSM6DSR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_SetFullScale(LSM6DSR_Object_t *pObj, int32_t FullScale)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  lsm6dsr_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSR_2g
           : (FullScale <= 4) ? LSM6DSR_4g
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	dd0b      	ble.n	8007c44 <LSM6DSR_ACC_SetFullScale+0x28>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	dd06      	ble.n	8007c40 <LSM6DSR_ACC_SetFullScale+0x24>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	dc01      	bgt.n	8007c3c <LSM6DSR_ACC_SetFullScale+0x20>
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e004      	b.n	8007c46 <LSM6DSR_ACC_SetFullScale+0x2a>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e002      	b.n	8007c46 <LSM6DSR_ACC_SetFullScale+0x2a>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e000      	b.n	8007c46 <LSM6DSR_ACC_SetFullScale+0x2a>
 8007c44:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSR_2g
 8007c46:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSR_8g
           :                    LSM6DSR_16g;

  if (lsm6dsr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSR_OK)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	331c      	adds	r3, #28
 8007c4c:	7bfa      	ldrb	r2, [r7, #15]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fd95 	bl	8008780 <lsm6dsr_xl_full_scale_set>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <LSM6DSR_ACC_SetFullScale+0x46>
  {
    return LSM6DSR_ERROR;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c60:	e000      	b.n	8007c64 <LSM6DSR_ACC_SetFullScale+0x48>
  }

  return LSM6DSR_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <LSM6DSR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetAxesRaw(LSM6DSR_Object_t *pObj, LSM6DSR_AxesRaw_t *Value)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	331c      	adds	r3, #28
 8007c7a:	f107 0208 	add.w	r2, r7, #8
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f001 f986 	bl	8008f92 <lsm6dsr_acceleration_raw_get>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <LSM6DSR_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSR_ERROR;
 8007c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c90:	e00c      	b.n	8007cac <LSM6DSR_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007c92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007c9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007ca2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	809a      	strh	r2, [r3, #4]

  return LSM6DSR_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <LSM6DSR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetAxes(LSM6DSR_Object_t *pObj, LSM6DSR_Axes_t *Acceleration)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8007cbe:	f04f 0300 	mov.w	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	331c      	adds	r3, #28
 8007cc8:	f107 0210 	add.w	r2, r7, #16
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 f95f 	bl	8008f92 <lsm6dsr_acceleration_raw_get>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <LSM6DSR_ACC_GetAxes+0x2c>
  {
    return LSM6DSR_ERROR;
 8007cda:	f04f 33ff 	mov.w	r3, #4294967295
 8007cde:	e03c      	b.n	8007d5a <LSM6DSR_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSR actual sensitivity. */
  if (LSM6DSR_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSR_OK)
 8007ce0:	f107 030c 	add.w	r3, r7, #12
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff fe7c 	bl	80079e4 <LSM6DSR_ACC_GetSensitivity>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <LSM6DSR_ACC_GetAxes+0x44>
  {
    return LSM6DSR_ERROR;
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	e030      	b.n	8007d5a <LSM6DSR_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007cf8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d10:	ee17 2a90 	vmov	r2, s15
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007d18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d30:	ee17 2a90 	vmov	r2, s15
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007d38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d50:	ee17 2a90 	vmov	r2, s15
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	609a      	str	r2, [r3, #8]

  return LSM6DSR_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <LSM6DSR_GYRO_Enable>:
 * @brief  Enable the LSM6DSR gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_Enable(LSM6DSR_Object_t *pObj)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <LSM6DSR_GYRO_Enable+0x16>
  {
    return LSM6DSR_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e014      	b.n	8007da2 <LSM6DSR_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSR_OK)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f103 021c 	add.w	r2, r3, #28
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f000 ff34 	bl	8008bf4 <lsm6dsr_gy_data_rate_set>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <LSM6DSR_GYRO_Enable+0x36>
  {
    return LSM6DSR_ERROR;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295
 8007d96:	e004      	b.n	8007da2 <LSM6DSR_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSR_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <LSM6DSR_GYRO_Disable>:
 * @brief  Disable the LSM6DSR gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_Disable(LSM6DSR_Object_t *pObj)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <LSM6DSR_GYRO_Disable+0x16>
  {
    return LSM6DSR_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e01f      	b.n	8007e00 <LSM6DSR_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsr_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSR_OK)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f103 021c 	add.w	r2, r3, #28
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	332c      	adds	r3, #44	; 0x2c
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4610      	mov	r0, r2
 8007dce:	f001 f80d 	bl	8008dec <lsm6dsr_gy_data_rate_get>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <LSM6DSR_GYRO_Disable+0x34>
  {
    return LSM6DSR_ERROR;
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ddc:	e010      	b.n	8007e00 <LSM6DSR_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), LSM6DSR_GY_ODR_OFF) != LSM6DSR_OK)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	331c      	adds	r3, #28
 8007de2:	2100      	movs	r1, #0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 ff05 	bl	8008bf4 <lsm6dsr_gy_data_rate_set>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <LSM6DSR_GYRO_Disable+0x4c>
  {
    return LSM6DSR_ERROR;
 8007df0:	f04f 33ff 	mov.w	r3, #4294967295
 8007df4:	e004      	b.n	8007e00 <LSM6DSR_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSR_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <LSM6DSR_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetSensitivity(LSM6DSR_Object_t *pObj, float *Sensitivity)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSR_OK)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	331c      	adds	r3, #28
 8007e1a:	f107 020b 	add.w	r2, r7, #11
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fe95 	bl	8008b50 <lsm6dsr_gy_full_scale_get>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <LSM6DSR_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSR_ERROR;
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e30:	e03d      	b.n	8007eae <LSM6DSR_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	2b0c      	cmp	r3, #12
 8007e36:	d835      	bhi.n	8007ea4 <LSM6DSR_GYRO_GetSensitivity+0x9c>
 8007e38:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <LSM6DSR_GYRO_GetSensitivity+0x38>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007e7d 	.word	0x08007e7d
 8007e44:	08007e9d 	.word	0x08007e9d
 8007e48:	08007e75 	.word	0x08007e75
 8007e4c:	08007ea5 	.word	0x08007ea5
 8007e50:	08007e85 	.word	0x08007e85
 8007e54:	08007ea5 	.word	0x08007ea5
 8007e58:	08007ea5 	.word	0x08007ea5
 8007e5c:	08007ea5 	.word	0x08007ea5
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	08007ea5 	.word	0x08007ea5
 8007e68:	08007ea5 	.word	0x08007ea5
 8007e6c:	08007ea5 	.word	0x08007ea5
 8007e70:	08007e95 	.word	0x08007e95
  {
    case LSM6DSR_125dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_125DPS;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	4a10      	ldr	r2, [pc, #64]	; (8007eb8 <LSM6DSR_GYRO_GetSensitivity+0xb0>)
 8007e78:	601a      	str	r2, [r3, #0]
      break;
 8007e7a:	e017      	b.n	8007eac <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_250dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_250DPS;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	4a0f      	ldr	r2, [pc, #60]	; (8007ebc <LSM6DSR_GYRO_GetSensitivity+0xb4>)
 8007e80:	601a      	str	r2, [r3, #0]
      break;
 8007e82:	e013      	b.n	8007eac <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_500dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_500DPS;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	4a0e      	ldr	r2, [pc, #56]	; (8007ec0 <LSM6DSR_GYRO_GetSensitivity+0xb8>)
 8007e88:	601a      	str	r2, [r3, #0]
      break;
 8007e8a:	e00f      	b.n	8007eac <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_1000dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_1000DPS;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	4a0d      	ldr	r2, [pc, #52]	; (8007ec4 <LSM6DSR_GYRO_GetSensitivity+0xbc>)
 8007e90:	601a      	str	r2, [r3, #0]
      break;
 8007e92:	e00b      	b.n	8007eac <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_2000dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_2000DPS;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	4a0c      	ldr	r2, [pc, #48]	; (8007ec8 <LSM6DSR_GYRO_GetSensitivity+0xc0>)
 8007e98:	601a      	str	r2, [r3, #0]
      break;
 8007e9a:	e007      	b.n	8007eac <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_4000dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_4000DPS;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	4a0b      	ldr	r2, [pc, #44]	; (8007ecc <LSM6DSR_GYRO_GetSensitivity+0xc4>)
 8007ea0:	601a      	str	r2, [r3, #0]
      break;
 8007ea2:	e003      	b.n	8007eac <LSM6DSR_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSR_ERROR;
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea8:	60fb      	str	r3, [r7, #12]
      break;
 8007eaa:	bf00      	nop
  }

  return ret;
 8007eac:	68fb      	ldr	r3, [r7, #12]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	408c0000 	.word	0x408c0000
 8007ebc:	410c0000 	.word	0x410c0000
 8007ec0:	418c0000 	.word	0x418c0000
 8007ec4:	420c0000 	.word	0x420c0000
 8007ec8:	428c0000 	.word	0x428c0000
 8007ecc:	430c0000 	.word	0x430c0000

08007ed0 <LSM6DSR_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetOutputDataRate(LSM6DSR_Object_t *pObj, float *Odr)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
  lsm6dsr_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsr_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSR_OK)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	331c      	adds	r3, #28
 8007ee2:	f107 020b 	add.w	r2, r7, #11
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 ff7f 	bl	8008dec <lsm6dsr_gy_data_rate_get>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <LSM6DSR_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSR_ERROR;
 8007ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef8:	e04e      	b.n	8007f98 <LSM6DSR_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	2b0a      	cmp	r3, #10
 8007efe:	d846      	bhi.n	8007f8e <LSM6DSR_GYRO_GetOutputDataRate+0xbe>
 8007f00:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <LSM6DSR_GYRO_GetOutputDataRate+0x38>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007f35 	.word	0x08007f35
 8007f0c:	08007f3f 	.word	0x08007f3f
 8007f10:	08007f47 	.word	0x08007f47
 8007f14:	08007f4f 	.word	0x08007f4f
 8007f18:	08007f57 	.word	0x08007f57
 8007f1c:	08007f5f 	.word	0x08007f5f
 8007f20:	08007f67 	.word	0x08007f67
 8007f24:	08007f6f 	.word	0x08007f6f
 8007f28:	08007f77 	.word	0x08007f77
 8007f2c:	08007f7f 	.word	0x08007f7f
 8007f30:	08007f87 	.word	0x08007f87
  {
    case LSM6DSR_GY_ODR_OFF:
      *Odr = 0.0f;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]
      break;
 8007f3c:	e02b      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	4a17      	ldr	r2, [pc, #92]	; (8007fa0 <LSM6DSR_GYRO_GetOutputDataRate+0xd0>)
 8007f42:	601a      	str	r2, [r3, #0]
      break;
 8007f44:	e027      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_26Hz:
      *Odr = 26.0f;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	4a16      	ldr	r2, [pc, #88]	; (8007fa4 <LSM6DSR_GYRO_GetOutputDataRate+0xd4>)
 8007f4a:	601a      	str	r2, [r3, #0]
      break;
 8007f4c:	e023      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_52Hz:
      *Odr = 52.0f;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	4a15      	ldr	r2, [pc, #84]	; (8007fa8 <LSM6DSR_GYRO_GetOutputDataRate+0xd8>)
 8007f52:	601a      	str	r2, [r3, #0]
      break;
 8007f54:	e01f      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_104Hz:
      *Odr = 104.0f;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	4a14      	ldr	r2, [pc, #80]	; (8007fac <LSM6DSR_GYRO_GetOutputDataRate+0xdc>)
 8007f5a:	601a      	str	r2, [r3, #0]
      break;
 8007f5c:	e01b      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_208Hz:
      *Odr = 208.0f;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	4a13      	ldr	r2, [pc, #76]	; (8007fb0 <LSM6DSR_GYRO_GetOutputDataRate+0xe0>)
 8007f62:	601a      	str	r2, [r3, #0]
      break;
 8007f64:	e017      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_417Hz:
      *Odr = 417.0f;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	4a12      	ldr	r2, [pc, #72]	; (8007fb4 <LSM6DSR_GYRO_GetOutputDataRate+0xe4>)
 8007f6a:	601a      	str	r2, [r3, #0]
      break;
 8007f6c:	e013      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_833Hz:
      *Odr = 833.0f;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	4a11      	ldr	r2, [pc, #68]	; (8007fb8 <LSM6DSR_GYRO_GetOutputDataRate+0xe8>)
 8007f72:	601a      	str	r2, [r3, #0]
      break;
 8007f74:	e00f      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	4a10      	ldr	r2, [pc, #64]	; (8007fbc <LSM6DSR_GYRO_GetOutputDataRate+0xec>)
 8007f7a:	601a      	str	r2, [r3, #0]
      break;
 8007f7c:	e00b      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	4a0f      	ldr	r2, [pc, #60]	; (8007fc0 <LSM6DSR_GYRO_GetOutputDataRate+0xf0>)
 8007f82:	601a      	str	r2, [r3, #0]
      break;
 8007f84:	e007      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	4a0e      	ldr	r2, [pc, #56]	; (8007fc4 <LSM6DSR_GYRO_GetOutputDataRate+0xf4>)
 8007f8a:	601a      	str	r2, [r3, #0]
      break;
 8007f8c:	e003      	b.n	8007f96 <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSR_ERROR;
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f92:	60fb      	str	r3, [r7, #12]
      break;
 8007f94:	bf00      	nop
  }

  return ret;
 8007f96:	68fb      	ldr	r3, [r7, #12]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	41480000 	.word	0x41480000
 8007fa4:	41d00000 	.word	0x41d00000
 8007fa8:	42500000 	.word	0x42500000
 8007fac:	42d00000 	.word	0x42d00000
 8007fb0:	43500000 	.word	0x43500000
 8007fb4:	43d08000 	.word	0x43d08000
 8007fb8:	44504000 	.word	0x44504000
 8007fbc:	44d06000 	.word	0x44d06000
 8007fc0:	45505000 	.word	0x45505000
 8007fc4:	45d05800 	.word	0x45d05800

08007fc8 <LSM6DSR_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_SetOutputDataRate(LSM6DSR_Object_t *pObj, float Odr)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d106      	bne.n	8007fec <LSM6DSR_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSR_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007fde:	ed97 0a00 	vldr	s0, [r7]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa58 	bl	8008498 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	e005      	b.n	8007ff8 <LSM6DSR_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSR_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007fec:	ed97 0a00 	vldr	s0, [r7]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fadd 	bl	80085b0 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled>
 8007ff6:	4603      	mov	r3, r0
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <LSM6DSR_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetFullScale(LSM6DSR_Object_t *pObj, int32_t  *FullScale)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSR_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	331c      	adds	r3, #28
 8008012:	f107 020b 	add.w	r2, r7, #11
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fd99 	bl	8008b50 <lsm6dsr_gy_full_scale_get>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <LSM6DSR_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSR_ERROR;
 8008024:	f04f 33ff 	mov.w	r3, #4294967295
 8008028:	e041      	b.n	80080ae <LSM6DSR_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 800802a:	7afb      	ldrb	r3, [r7, #11]
 800802c:	2b0c      	cmp	r3, #12
 800802e:	d839      	bhi.n	80080a4 <LSM6DSR_GYRO_GetFullScale+0xa4>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <LSM6DSR_GYRO_GetFullScale+0x38>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	08008075 	.word	0x08008075
 800803c:	0800809b 	.word	0x0800809b
 8008040:	0800806d 	.word	0x0800806d
 8008044:	080080a5 	.word	0x080080a5
 8008048:	0800807d 	.word	0x0800807d
 800804c:	080080a5 	.word	0x080080a5
 8008050:	080080a5 	.word	0x080080a5
 8008054:	080080a5 	.word	0x080080a5
 8008058:	08008087 	.word	0x08008087
 800805c:	080080a5 	.word	0x080080a5
 8008060:	080080a5 	.word	0x080080a5
 8008064:	080080a5 	.word	0x080080a5
 8008068:	08008091 	.word	0x08008091
  {
    case LSM6DSR_125dps:
      *FullScale =  125;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	227d      	movs	r2, #125	; 0x7d
 8008070:	601a      	str	r2, [r3, #0]
      break;
 8008072:	e01b      	b.n	80080ac <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_250dps:
      *FullScale =  250;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	22fa      	movs	r2, #250	; 0xfa
 8008078:	601a      	str	r2, [r3, #0]
      break;
 800807a:	e017      	b.n	80080ac <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_500dps:
      *FullScale =  500;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008082:	601a      	str	r2, [r3, #0]
      break;
 8008084:	e012      	b.n	80080ac <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_1000dps:
      *FullScale = 1000;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800808c:	601a      	str	r2, [r3, #0]
      break;
 800808e:	e00d      	b.n	80080ac <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_2000dps:
      *FullScale = 2000;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008096:	601a      	str	r2, [r3, #0]
      break;
 8008098:	e008      	b.n	80080ac <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_4000dps:
      *FullScale = 4000;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80080a0:	601a      	str	r2, [r3, #0]
      break;
 80080a2:	e003      	b.n	80080ac <LSM6DSR_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSR_ERROR;
 80080a4:	f04f 33ff 	mov.w	r3, #4294967295
 80080a8:	60fb      	str	r3, [r7, #12]
      break;
 80080aa:	bf00      	nop
  }

  return ret;
 80080ac:	68fb      	ldr	r3, [r7, #12]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop

080080b8 <LSM6DSR_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_SetFullScale(LSM6DSR_Object_t *pObj, int32_t FullScale)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  lsm6dsr_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSR_125dps
           : (FullScale <= 250)  ? LSM6DSR_250dps
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b7d      	cmp	r3, #125	; 0x7d
 80080c6:	dd18      	ble.n	80080fa <LSM6DSR_GYRO_SetFullScale+0x42>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2bfa      	cmp	r3, #250	; 0xfa
 80080cc:	dd13      	ble.n	80080f6 <LSM6DSR_GYRO_SetFullScale+0x3e>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80080d4:	dd0d      	ble.n	80080f2 <LSM6DSR_GYRO_SetFullScale+0x3a>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080dc:	dd07      	ble.n	80080ee <LSM6DSR_GYRO_SetFullScale+0x36>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80080e4:	dc01      	bgt.n	80080ea <LSM6DSR_GYRO_SetFullScale+0x32>
 80080e6:	230c      	movs	r3, #12
 80080e8:	e008      	b.n	80080fc <LSM6DSR_GYRO_SetFullScale+0x44>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e006      	b.n	80080fc <LSM6DSR_GYRO_SetFullScale+0x44>
 80080ee:	2308      	movs	r3, #8
 80080f0:	e004      	b.n	80080fc <LSM6DSR_GYRO_SetFullScale+0x44>
 80080f2:	2304      	movs	r3, #4
 80080f4:	e002      	b.n	80080fc <LSM6DSR_GYRO_SetFullScale+0x44>
 80080f6:	2300      	movs	r3, #0
 80080f8:	e000      	b.n	80080fc <LSM6DSR_GYRO_SetFullScale+0x44>
 80080fa:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? LSM6DSR_125dps
 80080fc:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSR_500dps
           : (FullScale <= 1000) ? LSM6DSR_1000dps
           : (FullScale <= 2000) ? LSM6DSR_2000dps
           :                       LSM6DSR_4000dps;

  if (lsm6dsr_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSR_OK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	331c      	adds	r3, #28
 8008102:	7bfa      	ldrb	r2, [r7, #15]
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fcfc 	bl	8008b04 <lsm6dsr_gy_full_scale_set>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <LSM6DSR_GYRO_SetFullScale+0x60>
  {
    return LSM6DSR_ERROR;
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
 8008116:	e000      	b.n	800811a <LSM6DSR_GYRO_SetFullScale+0x62>
  }

  return LSM6DSR_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <LSM6DSR_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetAxesRaw(LSM6DSR_Object_t *pObj, LSM6DSR_AxesRaw_t *Value)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsr_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	331c      	adds	r3, #28
 8008130:	f107 0208 	add.w	r2, r7, #8
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fee0 	bl	8008efc <lsm6dsr_angular_rate_raw_get>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <LSM6DSR_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSR_ERROR;
 8008142:	f04f 33ff 	mov.w	r3, #4294967295
 8008146:	e00c      	b.n	8008162 <LSM6DSR_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008148:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008150:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008158:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	809a      	strh	r2, [r3, #4]

  return LSM6DSR_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <LSM6DSR_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetAxes(LSM6DSR_Object_t *pObj, LSM6DSR_Axes_t *AngularRate)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b086      	sub	sp, #24
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsr_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	331c      	adds	r3, #28
 8008178:	f107 0210 	add.w	r2, r7, #16
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f000 febc 	bl	8008efc <lsm6dsr_angular_rate_raw_get>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <LSM6DSR_GYRO_GetAxes+0x26>
  {
    return LSM6DSR_ERROR;
 800818a:	f04f 33ff 	mov.w	r3, #4294967295
 800818e:	e03c      	b.n	800820a <LSM6DSR_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSR actual sensitivity. */
  if (LSM6DSR_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSR_OK)
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fe36 	bl	8007e08 <LSM6DSR_GYRO_GetSensitivity>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <LSM6DSR_GYRO_GetAxes+0x3e>
  {
    return LSM6DSR_ERROR;
 80081a2:	f04f 33ff 	mov.w	r3, #4294967295
 80081a6:	e030      	b.n	800820a <LSM6DSR_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80081a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80081ac:	ee07 3a90 	vmov	s15, r3
 80081b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80081b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081c0:	ee17 2a90 	vmov	r2, s15
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80081c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081cc:	ee07 3a90 	vmov	s15, r3
 80081d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80081d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081e0:	ee17 2a90 	vmov	r2, s15
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80081e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80081f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008200:	ee17 2a90 	vmov	r2, s15
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	609a      	str	r2, [r3, #8]

  return LSM6DSR_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <LSM6DSR_Read_Reg>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_Read_Reg(LSM6DSR_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	460b      	mov	r3, r1
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	72fb      	strb	r3, [r7, #11]
  if (lsm6dsr_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSR_OK)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f103 001c 	add.w	r0, r3, #28
 8008226:	7af9      	ldrb	r1, [r7, #11]
 8008228:	2301      	movs	r3, #1
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	f000 fa78 	bl	8008720 <lsm6dsr_read_reg>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <LSM6DSR_Read_Reg+0x2a>
  {
    return LSM6DSR_ERROR;
 8008236:	f04f 33ff 	mov.w	r3, #4294967295
 800823a:	e000      	b.n	800823e <LSM6DSR_Read_Reg+0x2c>
  }

  return LSM6DSR_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <LSM6DSR_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_Write_Reg(LSM6DSR_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
 8008252:	4613      	mov	r3, r2
 8008254:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSR_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f103 001c 	add.w	r0, r3, #28
 800825c:	1cba      	adds	r2, r7, #2
 800825e:	78f9      	ldrb	r1, [r7, #3]
 8008260:	2301      	movs	r3, #1
 8008262:	f000 fa75 	bl	8008750 <lsm6dsr_write_reg>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <LSM6DSR_Write_Reg+0x2c>
  {
    return LSM6DSR_ERROR;
 800826c:	f04f 33ff 	mov.w	r3, #4294967295
 8008270:	e000      	b.n	8008274 <LSM6DSR_Write_Reg+0x2e>
  }

  return LSM6DSR_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <LSM6DSR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSR_ACC_SetOutputDataRate_When_Enabled(LSM6DSR_Object_t *pObj, float Odr)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsr_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSR_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSR_XL_ODR_26Hz
 8008288:	edd7 7a00 	vldr	s15, [r7]
 800828c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8008290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008298:	d801      	bhi.n	800829e <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800829a:	2301      	movs	r3, #1
 800829c:	e058      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800829e:	edd7 7a00 	vldr	s15, [r7]
 80082a2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80082a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ae:	d801      	bhi.n	80082b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e04d      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80082b4:	edd7 7a00 	vldr	s15, [r7]
 80082b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008378 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80082bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c4:	d801      	bhi.n	80082ca <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80082c6:	2303      	movs	r3, #3
 80082c8:	e042      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80082ca:	edd7 7a00 	vldr	s15, [r7]
 80082ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800837c <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x100>
 80082d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082da:	d801      	bhi.n	80082e0 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80082dc:	2304      	movs	r3, #4
 80082de:	e037      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80082e0:	edd7 7a00 	vldr	s15, [r7]
 80082e4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008380 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x104>
 80082e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f0:	d801      	bhi.n	80082f6 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80082f2:	2305      	movs	r3, #5
 80082f4:	e02c      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80082f6:	edd7 7a00 	vldr	s15, [r7]
 80082fa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8008384 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x108>
 80082fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008306:	d801      	bhi.n	800830c <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8008308:	2306      	movs	r3, #6
 800830a:	e021      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800830c:	edd7 7a00 	vldr	s15, [r7]
 8008310:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008388 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8008314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831c:	d801      	bhi.n	8008322 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800831e:	2307      	movs	r3, #7
 8008320:	e016      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8008322:	edd7 7a00 	vldr	s15, [r7]
 8008326:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800838c <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x110>
 800832a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008332:	d801      	bhi.n	8008338 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008334:	2308      	movs	r3, #8
 8008336:	e00b      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8008338:	edd7 7a00 	vldr	s15, [r7]
 800833c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008390 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x114>
 8008340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008348:	d801      	bhi.n	800834e <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800834a:	2309      	movs	r3, #9
 800834c:	e000      	b.n	8008350 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800834e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSR_XL_ODR_12Hz5
 8008350:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSR_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSR_XL_ODR_3333Hz
          :                    LSM6DSR_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSR_OK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	331c      	adds	r3, #28
 8008356:	7bfa      	ldrb	r2, [r7, #15]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fa6e 	bl	800883c <lsm6dsr_xl_data_rate_set>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSR_ERROR;
 8008366:	f04f 33ff 	mov.w	r3, #4294967295
 800836a:	e000      	b.n	800836e <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSR_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	42500000 	.word	0x42500000
 800837c:	42d00000 	.word	0x42d00000
 8008380:	43500000 	.word	0x43500000
 8008384:	43d08000 	.word	0x43d08000
 8008388:	44504000 	.word	0x44504000
 800838c:	44d06000 	.word	0x44d06000
 8008390:	45505000 	.word	0x45505000

08008394 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSR_ACC_SetOutputDataRate_When_Disabled(LSM6DSR_Object_t *pObj, float Odr)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSR_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSR_XL_ODR_26Hz
 80083a0:	edd7 7a00 	vldr	s15, [r7]
 80083a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80083a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b0:	d801      	bhi.n	80083b6 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e058      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80083b6:	edd7 7a00 	vldr	s15, [r7]
 80083ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80083be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c6:	d801      	bhi.n	80083cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e04d      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80083cc:	edd7 7a00 	vldr	s15, [r7]
 80083d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800847c <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80083d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083dc:	d801      	bhi.n	80083e2 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80083de:	2303      	movs	r3, #3
 80083e0:	e042      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80083e2:	edd7 7a00 	vldr	s15, [r7]
 80083e6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008480 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xec>
 80083ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f2:	d801      	bhi.n	80083f8 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80083f4:	2304      	movs	r3, #4
 80083f6:	e037      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80083f8:	edd7 7a00 	vldr	s15, [r7]
 80083fc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008484 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8008400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008408:	d801      	bhi.n	800840e <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800840a:	2305      	movs	r3, #5
 800840c:	e02c      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800840e:	edd7 7a00 	vldr	s15, [r7]
 8008412:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008488 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8008416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800841a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841e:	d801      	bhi.n	8008424 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008420:	2306      	movs	r3, #6
 8008422:	e021      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8008424:	edd7 7a00 	vldr	s15, [r7]
 8008428:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800848c <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800842c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008434:	d801      	bhi.n	800843a <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008436:	2307      	movs	r3, #7
 8008438:	e016      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800843a:	edd7 7a00 	vldr	s15, [r7]
 800843e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008490 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8008442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844a:	d801      	bhi.n	8008450 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800844c:	2308      	movs	r3, #8
 800844e:	e00b      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8008450:	edd7 7a00 	vldr	s15, [r7]
 8008454:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008494 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800845c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008460:	d801      	bhi.n	8008466 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8008462:	2309      	movs	r3, #9
 8008464:	e000      	b.n	8008468 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8008466:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSR_XL_ODR_12Hz5
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSR_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSR_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSR_XL_ODR_3333Hz
                :                    LSM6DSR_XL_ODR_6667Hz;

  return LSM6DSR_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	42500000 	.word	0x42500000
 8008480:	42d00000 	.word	0x42d00000
 8008484:	43500000 	.word	0x43500000
 8008488:	43d08000 	.word	0x43d08000
 800848c:	44504000 	.word	0x44504000
 8008490:	44d06000 	.word	0x44d06000
 8008494:	45505000 	.word	0x45505000

08008498 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSR_GYRO_SetOutputDataRate_When_Enabled(LSM6DSR_Object_t *pObj, float Odr)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsr_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSR_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSR_GY_ODR_26Hz
 80084a4:	edd7 7a00 	vldr	s15, [r7]
 80084a8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80084ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b4:	d801      	bhi.n	80084ba <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80084b6:	2301      	movs	r3, #1
 80084b8:	e058      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80084ba:	edd7 7a00 	vldr	s15, [r7]
 80084be:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80084c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ca:	d801      	bhi.n	80084d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e04d      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80084d0:	edd7 7a00 	vldr	s15, [r7]
 80084d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008594 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80084d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e0:	d801      	bhi.n	80084e6 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80084e2:	2303      	movs	r3, #3
 80084e4:	e042      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80084e6:	edd7 7a00 	vldr	s15, [r7]
 80084ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8008598 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80084ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f6:	d801      	bhi.n	80084fc <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80084f8:	2304      	movs	r3, #4
 80084fa:	e037      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80084fc:	edd7 7a00 	vldr	s15, [r7]
 8008500:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800859c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8008504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850c:	d801      	bhi.n	8008512 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800850e:	2305      	movs	r3, #5
 8008510:	e02c      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008512:	edd7 7a00 	vldr	s15, [r7]
 8008516:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80085a0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800851a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008522:	d801      	bhi.n	8008528 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8008524:	2306      	movs	r3, #6
 8008526:	e021      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008528:	edd7 7a00 	vldr	s15, [r7]
 800852c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80085a4 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8008530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008538:	d801      	bhi.n	800853e <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800853a:	2307      	movs	r3, #7
 800853c:	e016      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800853e:	edd7 7a00 	vldr	s15, [r7]
 8008542:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80085a8 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8008546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800854a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854e:	d801      	bhi.n	8008554 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8008550:	2308      	movs	r3, #8
 8008552:	e00b      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008554:	edd7 7a00 	vldr	s15, [r7]
 8008558:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80085ac <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800855c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008564:	d801      	bhi.n	800856a <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8008566:	2309      	movs	r3, #9
 8008568:	e000      	b.n	800856c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800856a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSR_GY_ODR_12Hz5
 800856c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSR_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSR_GY_ODR_3333Hz
          :                    LSM6DSR_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSR_OK)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	331c      	adds	r3, #28
 8008572:	7bfa      	ldrb	r2, [r7, #15]
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fb3c 	bl	8008bf4 <lsm6dsr_gy_data_rate_set>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSR_ERROR;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	e000      	b.n	800858a <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSR_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	42500000 	.word	0x42500000
 8008598:	42d00000 	.word	0x42d00000
 800859c:	43500000 	.word	0x43500000
 80085a0:	43d08000 	.word	0x43d08000
 80085a4:	44504000 	.word	0x44504000
 80085a8:	44d06000 	.word	0x44d06000
 80085ac:	45505000 	.word	0x45505000

080085b0 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSR_GYRO_SetOutputDataRate_When_Disabled(LSM6DSR_Object_t *pObj, float Odr)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSR_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSR_GY_ODR_26Hz
 80085bc:	edd7 7a00 	vldr	s15, [r7]
 80085c0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80085c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085cc:	d801      	bhi.n	80085d2 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e058      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80085d2:	edd7 7a00 	vldr	s15, [r7]
 80085d6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80085da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e2:	d801      	bhi.n	80085e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e04d      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80085e8:	edd7 7a00 	vldr	s15, [r7]
 80085ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008698 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80085f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f8:	d801      	bhi.n	80085fe <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80085fa:	2303      	movs	r3, #3
 80085fc:	e042      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80085fe:	edd7 7a00 	vldr	s15, [r7]
 8008602:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800869c <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8008606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800860a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860e:	d801      	bhi.n	8008614 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8008610:	2304      	movs	r3, #4
 8008612:	e037      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008614:	edd7 7a00 	vldr	s15, [r7]
 8008618:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80086a0 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800861c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008624:	d801      	bhi.n	800862a <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8008626:	2305      	movs	r3, #5
 8008628:	e02c      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800862a:	edd7 7a00 	vldr	s15, [r7]
 800862e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80086a4 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8008632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863a:	d801      	bhi.n	8008640 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800863c:	2306      	movs	r3, #6
 800863e:	e021      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008640:	edd7 7a00 	vldr	s15, [r7]
 8008644:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80086a8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8008648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800864c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008650:	d801      	bhi.n	8008656 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8008652:	2307      	movs	r3, #7
 8008654:	e016      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008656:	edd7 7a00 	vldr	s15, [r7]
 800865a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80086ac <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800865e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008666:	d801      	bhi.n	800866c <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8008668:	2308      	movs	r3, #8
 800866a:	e00b      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800866c:	edd7 7a00 	vldr	s15, [r7]
 8008670:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80086b0 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8008674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867c:	d801      	bhi.n	8008682 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800867e:	2309      	movs	r3, #9
 8008680:	e000      	b.n	8008684 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008682:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSR_GY_ODR_12Hz5
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSR_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSR_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSR_GY_ODR_3333Hz
                 :                    LSM6DSR_GY_ODR_6667Hz;

  return LSM6DSR_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	42500000 	.word	0x42500000
 800869c:	42d00000 	.word	0x42d00000
 80086a0:	43500000 	.word	0x43500000
 80086a4:	43d08000 	.word	0x43d08000
 80086a8:	44504000 	.word	0x44504000
 80086ac:	44d06000 	.word	0x44d06000
 80086b0:	45505000 	.word	0x45505000

080086b4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	607a      	str	r2, [r7, #4]
 80086be:	461a      	mov	r2, r3
 80086c0:	460b      	mov	r3, r1
 80086c2:	72fb      	strb	r3, [r7, #11]
 80086c4:	4613      	mov	r3, r2
 80086c6:	813b      	strh	r3, [r7, #8]
  LSM6DSR_Object_t *pObj = (LSM6DSR_Object_t *)Handle;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	695c      	ldr	r4, [r3, #20]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	7b1b      	ldrb	r3, [r3, #12]
 80086d4:	b298      	uxth	r0, r3
 80086d6:	7afb      	ldrb	r3, [r7, #11]
 80086d8:	b299      	uxth	r1, r3
 80086da:	893b      	ldrh	r3, [r7, #8]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	47a0      	blx	r4
 80086e0:	4603      	mov	r3, r0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd90      	pop	{r4, r7, pc}

080086ea <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80086ea:	b590      	push	{r4, r7, lr}
 80086ec:	b087      	sub	sp, #28
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	461a      	mov	r2, r3
 80086f6:	460b      	mov	r3, r1
 80086f8:	72fb      	strb	r3, [r7, #11]
 80086fa:	4613      	mov	r3, r2
 80086fc:	813b      	strh	r3, [r7, #8]
  LSM6DSR_Object_t *pObj = (LSM6DSR_Object_t *)Handle;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	691c      	ldr	r4, [r3, #16]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	7b1b      	ldrb	r3, [r3, #12]
 800870a:	b298      	uxth	r0, r3
 800870c:	7afb      	ldrb	r3, [r7, #11]
 800870e:	b299      	uxth	r1, r3
 8008710:	893b      	ldrh	r3, [r7, #8]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	47a0      	blx	r4
 8008716:	4603      	mov	r3, r0
}
 8008718:	4618      	mov	r0, r3
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd90      	pop	{r4, r7, pc}

08008720 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008720:	b590      	push	{r4, r7, lr}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	607a      	str	r2, [r7, #4]
 800872a:	461a      	mov	r2, r3
 800872c:	460b      	mov	r3, r1
 800872e:	72fb      	strb	r3, [r7, #11]
 8008730:	4613      	mov	r3, r2
 8008732:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	685c      	ldr	r4, [r3, #4]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6898      	ldr	r0, [r3, #8]
 800873c:	893b      	ldrh	r3, [r7, #8]
 800873e:	7af9      	ldrb	r1, [r7, #11]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	47a0      	blx	r4
 8008744:	6178      	str	r0, [r7, #20]
  return ret;
 8008746:	697b      	ldr	r3, [r7, #20]
}
 8008748:	4618      	mov	r0, r3
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	bd90      	pop	{r4, r7, pc}

08008750 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8008750:	b590      	push	{r4, r7, lr}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	461a      	mov	r2, r3
 800875c:	460b      	mov	r3, r1
 800875e:	72fb      	strb	r3, [r7, #11]
 8008760:	4613      	mov	r3, r2
 8008762:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681c      	ldr	r4, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6898      	ldr	r0, [r3, #8]
 800876c:	893b      	ldrh	r3, [r7, #8]
 800876e:	7af9      	ldrb	r1, [r7, #11]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	47a0      	blx	r4
 8008774:	6178      	str	r0, [r7, #20]
  return ret;
 8008776:	697b      	ldr	r3, [r7, #20]
}
 8008778:	4618      	mov	r0, r3
 800877a:	371c      	adds	r7, #28
 800877c:	46bd      	mov	sp, r7
 800877e:	bd90      	pop	{r4, r7, pc}

08008780 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800878c:	f107 0208 	add.w	r2, r7, #8
 8008790:	2301      	movs	r3, #1
 8008792:	2110      	movs	r1, #16
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff ffc3 	bl	8008720 <lsm6dsr_read_reg>
 800879a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10f      	bne.n	80087c2 <lsm6dsr_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80087a2:	78fb      	ldrb	r3, [r7, #3]
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	7a3b      	ldrb	r3, [r7, #8]
 80087ac:	f362 0383 	bfi	r3, r2, #2, #2
 80087b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80087b2:	f107 0208 	add.w	r2, r7, #8
 80087b6:	2301      	movs	r3, #1
 80087b8:	2110      	movs	r1, #16
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff ffc8 	bl	8008750 <lsm6dsr_write_reg>
 80087c0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80087c2:	68fb      	ldr	r3, [r7, #12]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <lsm6dsr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t *val)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80087d6:	f107 0208 	add.w	r2, r7, #8
 80087da:	2301      	movs	r3, #1
 80087dc:	2110      	movs	r1, #16
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff ff9e 	bl	8008720 <lsm6dsr_read_reg>
 80087e4:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 80087e6:	7a3b      	ldrb	r3, [r7, #8]
 80087e8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d81a      	bhi.n	8008828 <lsm6dsr_xl_full_scale_get+0x5c>
 80087f2:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <lsm6dsr_xl_full_scale_get+0x2c>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	08008809 	.word	0x08008809
 80087fc:	08008811 	.word	0x08008811
 8008800:	08008819 	.word	0x08008819
 8008804:	08008821 	.word	0x08008821
    case LSM6DSR_2g:
      *val = LSM6DSR_2g;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
      break;
 800880e:	e00f      	b.n	8008830 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_16g:
      *val = LSM6DSR_16g;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2201      	movs	r2, #1
 8008814:	701a      	strb	r2, [r3, #0]
      break;
 8008816:	e00b      	b.n	8008830 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_4g:
      *val = LSM6DSR_4g;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2202      	movs	r2, #2
 800881c:	701a      	strb	r2, [r3, #0]
      break;
 800881e:	e007      	b.n	8008830 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_8g:
      *val = LSM6DSR_8g;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2203      	movs	r2, #3
 8008824:	701a      	strb	r2, [r3, #0]
      break;
 8008826:	e003      	b.n	8008830 <lsm6dsr_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSR_2g;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	701a      	strb	r2, [r3, #0]
      break;
 800882e:	bf00      	nop
  }

  return ret;
 8008830:	68fb      	ldr	r3, [r7, #12]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop

0800883c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800884c:	f107 030c 	add.w	r3, r7, #12
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fcb1 	bl	80091ba <lsm6dsr_fsm_enable_get>
 8008858:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 80c4 	bne.w	80089ea <lsm6dsr_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008862:	7b3b      	ldrb	r3, [r7, #12]
 8008864:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008868:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800886a:	7b3b      	ldrb	r3, [r7, #12]
 800886c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008870:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008872:	4313      	orrs	r3, r2
 8008874:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8008876:	7b3b      	ldrb	r3, [r7, #12]
 8008878:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800887c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800887e:	4313      	orrs	r3, r2
 8008880:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8008882:	7b3b      	ldrb	r3, [r7, #12]
 8008884:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008888:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800888a:	4313      	orrs	r3, r2
 800888c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800888e:	7b3b      	ldrb	r3, [r7, #12]
 8008890:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008894:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8008896:	4313      	orrs	r3, r2
 8008898:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800889a:	7b3b      	ldrb	r3, [r7, #12]
 800889c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80088a0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80088a2:	4313      	orrs	r3, r2
 80088a4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80088a6:	7b3b      	ldrb	r3, [r7, #12]
 80088a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80088ac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80088ae:	4313      	orrs	r3, r2
 80088b0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80088b2:	7b3b      	ldrb	r3, [r7, #12]
 80088b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80088b8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80088ba:	4313      	orrs	r3, r2
 80088bc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80088be:	7b7b      	ldrb	r3, [r7, #13]
 80088c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80088c4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80088c6:	4313      	orrs	r3, r2
 80088c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80088ca:	7b7b      	ldrb	r3, [r7, #13]
 80088cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088d0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80088d2:	4313      	orrs	r3, r2
 80088d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80088d6:	7b7b      	ldrb	r3, [r7, #13]
 80088d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80088dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80088de:	4313      	orrs	r3, r2
 80088e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80088e2:	7b7b      	ldrb	r3, [r7, #13]
 80088e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80088ea:	4313      	orrs	r3, r2
 80088ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80088ee:	7b7b      	ldrb	r3, [r7, #13]
 80088f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80088f6:	4313      	orrs	r3, r2
 80088f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80088fa:	7b7b      	ldrb	r3, [r7, #13]
 80088fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008900:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8008902:	4313      	orrs	r3, r2
 8008904:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8008906:	7b7b      	ldrb	r3, [r7, #13]
 8008908:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800890c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800890e:	4313      	orrs	r3, r2
 8008910:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8008912:	7b7b      	ldrb	r3, [r7, #13]
 8008914:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008918:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800891a:	4313      	orrs	r3, r2
 800891c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800891e:	2b01      	cmp	r3, #1
 8008920:	d163      	bne.n	80089ea <lsm6dsr_xl_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8008922:	f107 030b 	add.w	r3, r7, #11
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fc73 	bl	8009214 <lsm6dsr_fsm_data_rate_get>
 800892e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d159      	bne.n	80089ea <lsm6dsr_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8008936:	7afb      	ldrb	r3, [r7, #11]
 8008938:	2b03      	cmp	r3, #3
 800893a:	d853      	bhi.n	80089e4 <lsm6dsr_xl_data_rate_set+0x1a8>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <lsm6dsr_xl_data_rate_set+0x108>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008955 	.word	0x08008955
 8008948:	08008967 	.word	0x08008967
 800894c:	08008985 	.word	0x08008985
 8008950:	080089af 	.word	0x080089af
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <lsm6dsr_xl_data_rate_set+0x124>
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800895a:	2301      	movs	r3, #1
 800895c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800895e:	e045      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	75fb      	strb	r3, [r7, #23]
            break;
 8008964:	e042      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <lsm6dsr_xl_data_rate_set+0x136>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800896c:	2302      	movs	r3, #2
 800896e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8008970:	e03c      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d102      	bne.n	800897e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8008978:	2302      	movs	r3, #2
 800897a:	75fb      	strb	r3, [r7, #23]
            break;
 800897c:	e036      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	75fb      	strb	r3, [r7, #23]
            break;
 8008982:	e033      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <lsm6dsr_xl_data_rate_set+0x154>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800898a:	2303      	movs	r3, #3
 800898c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800898e:	e02d      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d102      	bne.n	800899c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8008996:	2303      	movs	r3, #3
 8008998:	75fb      	strb	r3, [r7, #23]
            break;
 800899a:	e027      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d102      	bne.n	80089a8 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80089a2:	2303      	movs	r3, #3
 80089a4:	75fb      	strb	r3, [r7, #23]
            break;
 80089a6:	e021      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	75fb      	strb	r3, [r7, #23]
            break;
 80089ac:	e01e      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <lsm6dsr_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80089b4:	2304      	movs	r3, #4
 80089b6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80089b8:	e018      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d102      	bne.n	80089c6 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80089c0:	2304      	movs	r3, #4
 80089c2:	75fb      	strb	r3, [r7, #23]
            break;
 80089c4:	e012      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d102      	bne.n	80089d2 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80089cc:	2304      	movs	r3, #4
 80089ce:	75fb      	strb	r3, [r7, #23]
            break;
 80089d0:	e00c      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz) {
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d102      	bne.n	80089de <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80089d8:	2304      	movs	r3, #4
 80089da:	75fb      	strb	r3, [r7, #23]
            break;
 80089dc:	e006      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	75fb      	strb	r3, [r7, #23]
            break;
 80089e2:	e003      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80089e4:	78fb      	ldrb	r3, [r7, #3]
 80089e6:	75fb      	strb	r3, [r7, #23]
            break;
 80089e8:	e000      	b.n	80089ec <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80089ea:	bf00      	nop
    }
  }

  if (ret == 0) {
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d107      	bne.n	8008a02 <lsm6dsr_xl_data_rate_set+0x1c6>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80089f2:	f107 0208 	add.w	r2, r7, #8
 80089f6:	2301      	movs	r3, #1
 80089f8:	2110      	movs	r1, #16
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fe90 	bl	8008720 <lsm6dsr_read_reg>
 8008a00:	6138      	str	r0, [r7, #16]
                           1);
  }

  if (ret == 0) {
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10f      	bne.n	8008a28 <lsm6dsr_xl_data_rate_set+0x1ec>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	f003 030f 	and.w	r3, r3, #15
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	7a3b      	ldrb	r3, [r7, #8]
 8008a12:	f362 1307 	bfi	r3, r2, #4, #4
 8008a16:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8008a18:	f107 0208 	add.w	r2, r7, #8
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	2110      	movs	r1, #16
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff fe95 	bl	8008750 <lsm6dsr_write_reg>
 8008a26:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8008a28:	693b      	ldr	r3, [r7, #16]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop

08008a34 <lsm6dsr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t *val)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8008a3e:	f107 0208 	add.w	r2, r7, #8
 8008a42:	2301      	movs	r3, #1
 8008a44:	2110      	movs	r1, #16
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff fe6a 	bl	8008720 <lsm6dsr_read_reg>
 8008a4c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8008a4e:	7a3b      	ldrb	r3, [r7, #8]
 8008a50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b0b      	cmp	r3, #11
 8008a58:	d84a      	bhi.n	8008af0 <lsm6dsr_xl_data_rate_get+0xbc>
 8008a5a:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <lsm6dsr_xl_data_rate_get+0x2c>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008a91 	.word	0x08008a91
 8008a64:	08008a99 	.word	0x08008a99
 8008a68:	08008aa1 	.word	0x08008aa1
 8008a6c:	08008aa9 	.word	0x08008aa9
 8008a70:	08008ab1 	.word	0x08008ab1
 8008a74:	08008ab9 	.word	0x08008ab9
 8008a78:	08008ac1 	.word	0x08008ac1
 8008a7c:	08008ac9 	.word	0x08008ac9
 8008a80:	08008ad1 	.word	0x08008ad1
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008ae1 	.word	0x08008ae1
 8008a8c:	08008ae9 	.word	0x08008ae9
    case LSM6DSR_XL_ODR_OFF:
      *val = LSM6DSR_XL_ODR_OFF;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
      break;
 8008a96:	e02f      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_12Hz5:
      *val = LSM6DSR_XL_ODR_12Hz5;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	701a      	strb	r2, [r3, #0]
      break;
 8008a9e:	e02b      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_26Hz:
      *val = LSM6DSR_XL_ODR_26Hz;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	701a      	strb	r2, [r3, #0]
      break;
 8008aa6:	e027      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_52Hz:
      *val = LSM6DSR_XL_ODR_52Hz;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2203      	movs	r2, #3
 8008aac:	701a      	strb	r2, [r3, #0]
      break;
 8008aae:	e023      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_104Hz:
      *val = LSM6DSR_XL_ODR_104Hz;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	701a      	strb	r2, [r3, #0]
      break;
 8008ab6:	e01f      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_208Hz:
      *val = LSM6DSR_XL_ODR_208Hz;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2205      	movs	r2, #5
 8008abc:	701a      	strb	r2, [r3, #0]
      break;
 8008abe:	e01b      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_417Hz:
      *val = LSM6DSR_XL_ODR_417Hz;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2206      	movs	r2, #6
 8008ac4:	701a      	strb	r2, [r3, #0]
      break;
 8008ac6:	e017      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_833Hz:
      *val = LSM6DSR_XL_ODR_833Hz;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2207      	movs	r2, #7
 8008acc:	701a      	strb	r2, [r3, #0]
      break;
 8008ace:	e013      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_1667Hz:
      *val = LSM6DSR_XL_ODR_1667Hz;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2208      	movs	r2, #8
 8008ad4:	701a      	strb	r2, [r3, #0]
      break;
 8008ad6:	e00f      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_3333Hz:
      *val = LSM6DSR_XL_ODR_3333Hz;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2209      	movs	r2, #9
 8008adc:	701a      	strb	r2, [r3, #0]
      break;
 8008ade:	e00b      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_6667Hz:
      *val = LSM6DSR_XL_ODR_6667Hz;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	701a      	strb	r2, [r3, #0]
      break;
 8008ae6:	e007      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_6Hz5:
      *val = LSM6DSR_XL_ODR_6Hz5;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	220b      	movs	r2, #11
 8008aec:	701a      	strb	r2, [r3, #0]
      break;
 8008aee:	e003      	b.n	8008af8 <lsm6dsr_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSR_XL_ODR_OFF;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
      break;
 8008af6:	bf00      	nop
  }

  return ret;
 8008af8:	68fb      	ldr	r3, [r7, #12]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop

08008b04 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008b10:	f107 0208 	add.w	r2, r7, #8
 8008b14:	2301      	movs	r3, #1
 8008b16:	2111      	movs	r1, #17
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff fe01 	bl	8008720 <lsm6dsr_read_reg>
 8008b1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10f      	bne.n	8008b46 <lsm6dsr_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	f003 030f 	and.w	r3, r3, #15
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	7a3b      	ldrb	r3, [r7, #8]
 8008b30:	f362 0303 	bfi	r3, r2, #0, #4
 8008b34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008b36:	f107 0208 	add.w	r2, r7, #8
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	2111      	movs	r1, #17
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7ff fe06 	bl	8008750 <lsm6dsr_write_reg>
 8008b44:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008b46:	68fb      	ldr	r3, [r7, #12]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <lsm6dsr_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t *val)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008b5a:	f107 0208 	add.w	r2, r7, #8
 8008b5e:	2301      	movs	r3, #1
 8008b60:	2111      	movs	r1, #17
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff fddc 	bl	8008720 <lsm6dsr_read_reg>
 8008b68:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8008b6a:	7a3b      	ldrb	r3, [r7, #8]
 8008b6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b0c      	cmp	r3, #12
 8008b74:	d834      	bhi.n	8008be0 <lsm6dsr_gy_full_scale_get+0x90>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <lsm6dsr_gy_full_scale_get+0x2c>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008bb9 	.word	0x08008bb9
 8008b80:	08008bd9 	.word	0x08008bd9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	08008be1 	.word	0x08008be1
 8008b8c:	08008bc1 	.word	0x08008bc1
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008be1 	.word	0x08008be1
 8008b98:	08008be1 	.word	0x08008be1
 8008b9c:	08008bc9 	.word	0x08008bc9
 8008ba0:	08008be1 	.word	0x08008be1
 8008ba4:	08008be1 	.word	0x08008be1
 8008ba8:	08008be1 	.word	0x08008be1
 8008bac:	08008bd1 	.word	0x08008bd1
    case LSM6DSR_125dps:
      *val = LSM6DSR_125dps;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	701a      	strb	r2, [r3, #0]
      break;
 8008bb6:	e017      	b.n	8008be8 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_250dps:
      *val = LSM6DSR_250dps;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
      break;
 8008bbe:	e013      	b.n	8008be8 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_500dps:
      *val = LSM6DSR_500dps;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2204      	movs	r2, #4
 8008bc4:	701a      	strb	r2, [r3, #0]
      break;
 8008bc6:	e00f      	b.n	8008be8 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_1000dps:
      *val = LSM6DSR_1000dps;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2208      	movs	r2, #8
 8008bcc:	701a      	strb	r2, [r3, #0]
      break;
 8008bce:	e00b      	b.n	8008be8 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_2000dps:
      *val = LSM6DSR_2000dps;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	220c      	movs	r2, #12
 8008bd4:	701a      	strb	r2, [r3, #0]
      break;
 8008bd6:	e007      	b.n	8008be8 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_4000dps:
      *val = LSM6DSR_4000dps;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
      break;
 8008bde:	e003      	b.n	8008be8 <lsm6dsr_gy_full_scale_get+0x98>

    default:
      *val = LSM6DSR_125dps;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2202      	movs	r2, #2
 8008be4:	701a      	strb	r2, [r3, #0]
      break;
 8008be6:	bf00      	nop
  }

  return ret;
 8008be8:	68fb      	ldr	r3, [r7, #12]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop

08008bf4 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8008c04:	f107 030c 	add.w	r3, r7, #12
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fad5 	bl	80091ba <lsm6dsr_fsm_enable_get>
 8008c10:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f040 80c4 	bne.w	8008da2 <lsm6dsr_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008c1a:	7b3b      	ldrb	r3, [r7, #12]
 8008c1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c20:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8008c22:	7b3b      	ldrb	r3, [r7, #12]
 8008c24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c28:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8008c2e:	7b3b      	ldrb	r3, [r7, #12]
 8008c30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c34:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8008c36:	4313      	orrs	r3, r2
 8008c38:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8008c3a:	7b3b      	ldrb	r3, [r7, #12]
 8008c3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c40:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8008c42:	4313      	orrs	r3, r2
 8008c44:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8008c46:	7b3b      	ldrb	r3, [r7, #12]
 8008c48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008c4c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8008c52:	7b3b      	ldrb	r3, [r7, #12]
 8008c54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008c58:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8008c5e:	7b3b      	ldrb	r3, [r7, #12]
 8008c60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008c64:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8008c66:	4313      	orrs	r3, r2
 8008c68:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8008c6a:	7b3b      	ldrb	r3, [r7, #12]
 8008c6c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008c70:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8008c72:	4313      	orrs	r3, r2
 8008c74:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8008c76:	7b7b      	ldrb	r3, [r7, #13]
 8008c78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c7c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8008c82:	7b7b      	ldrb	r3, [r7, #13]
 8008c84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c88:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8008c8e:	7b7b      	ldrb	r3, [r7, #13]
 8008c90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c94:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8008c96:	4313      	orrs	r3, r2
 8008c98:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8008c9a:	7b7b      	ldrb	r3, [r7, #13]
 8008c9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ca0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8008ca6:	7b7b      	ldrb	r3, [r7, #13]
 8008ca8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008cac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8008cb2:	7b7b      	ldrb	r3, [r7, #13]
 8008cb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008cb8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8008cbe:	7b7b      	ldrb	r3, [r7, #13]
 8008cc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008cc4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8008cca:	7b7b      	ldrb	r3, [r7, #13]
 8008ccc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008cd0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d163      	bne.n	8008da2 <lsm6dsr_gy_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8008cda:	f107 030b 	add.w	r3, r7, #11
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fa97 	bl	8009214 <lsm6dsr_fsm_data_rate_get>
 8008ce6:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d159      	bne.n	8008da2 <lsm6dsr_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d853      	bhi.n	8008d9c <lsm6dsr_gy_data_rate_set+0x1a8>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <lsm6dsr_gy_data_rate_set+0x108>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d1f 	.word	0x08008d1f
 8008d04:	08008d3d 	.word	0x08008d3d
 8008d08:	08008d67 	.word	0x08008d67
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <lsm6dsr_gy_data_rate_set+0x124>
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8008d12:	2301      	movs	r3, #1
 8008d14:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8008d16:	e045      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	75fb      	strb	r3, [r7, #23]
            break;
 8008d1c:	e042      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <lsm6dsr_gy_data_rate_set+0x136>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8008d24:	2302      	movs	r3, #2
 8008d26:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8008d28:	e03c      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d102      	bne.n	8008d36 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8008d30:	2302      	movs	r3, #2
 8008d32:	75fb      	strb	r3, [r7, #23]
            break;
 8008d34:	e036      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	75fb      	strb	r3, [r7, #23]
            break;
 8008d3a:	e033      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d102      	bne.n	8008d48 <lsm6dsr_gy_data_rate_set+0x154>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8008d42:	2303      	movs	r3, #3
 8008d44:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8008d46:	e02d      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d102      	bne.n	8008d54 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	75fb      	strb	r3, [r7, #23]
            break;
 8008d52:	e027      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d102      	bne.n	8008d60 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	75fb      	strb	r3, [r7, #23]
            break;
 8008d5e:	e021      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	75fb      	strb	r3, [r7, #23]
            break;
 8008d64:	e01e      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <lsm6dsr_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8008d6c:	2304      	movs	r3, #4
 8008d6e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8008d70:	e018      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d102      	bne.n	8008d7e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8008d78:	2304      	movs	r3, #4
 8008d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8008d7c:	e012      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d102      	bne.n	8008d8a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8008d84:	2304      	movs	r3, #4
 8008d86:	75fb      	strb	r3, [r7, #23]
            break;
 8008d88:	e00c      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz) {
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d102      	bne.n	8008d96 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8008d90:	2304      	movs	r3, #4
 8008d92:	75fb      	strb	r3, [r7, #23]
            break;
 8008d94:	e006      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	75fb      	strb	r3, [r7, #23]
            break;
 8008d9a:	e003      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	75fb      	strb	r3, [r7, #23]
            break;
 8008da0:	e000      	b.n	8008da4 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8008da2:	bf00      	nop
    }
  }

  if (ret == 0) {
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d107      	bne.n	8008dba <lsm6dsr_gy_data_rate_set+0x1c6>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008daa:	f107 0208 	add.w	r2, r7, #8
 8008dae:	2301      	movs	r3, #1
 8008db0:	2111      	movs	r1, #17
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff fcb4 	bl	8008720 <lsm6dsr_read_reg>
 8008db8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10f      	bne.n	8008de0 <lsm6dsr_gy_data_rate_set+0x1ec>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	7a3b      	ldrb	r3, [r7, #8]
 8008dca:	f362 1307 	bfi	r3, r2, #4, #4
 8008dce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	2111      	movs	r1, #17
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fcb9 	bl	8008750 <lsm6dsr_write_reg>
 8008dde:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8008de0:	693b      	ldr	r3, [r7, #16]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop

08008dec <lsm6dsr_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t *val)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008df6:	f107 0208 	add.w	r2, r7, #8
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	2111      	movs	r1, #17
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff fc8e 	bl	8008720 <lsm6dsr_read_reg>
 8008e04:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8008e06:	7a3b      	ldrb	r3, [r7, #8]
 8008e08:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b0a      	cmp	r3, #10
 8008e10:	d844      	bhi.n	8008e9c <lsm6dsr_gy_data_rate_get+0xb0>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <lsm6dsr_gy_data_rate_get+0x2c>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e45 	.word	0x08008e45
 8008e1c:	08008e4d 	.word	0x08008e4d
 8008e20:	08008e55 	.word	0x08008e55
 8008e24:	08008e5d 	.word	0x08008e5d
 8008e28:	08008e65 	.word	0x08008e65
 8008e2c:	08008e6d 	.word	0x08008e6d
 8008e30:	08008e75 	.word	0x08008e75
 8008e34:	08008e7d 	.word	0x08008e7d
 8008e38:	08008e85 	.word	0x08008e85
 8008e3c:	08008e8d 	.word	0x08008e8d
 8008e40:	08008e95 	.word	0x08008e95
    case LSM6DSR_GY_ODR_OFF:
      *val = LSM6DSR_GY_ODR_OFF;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
      break;
 8008e4a:	e02b      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_12Hz5:
      *val = LSM6DSR_GY_ODR_12Hz5;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	701a      	strb	r2, [r3, #0]
      break;
 8008e52:	e027      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_26Hz:
      *val = LSM6DSR_GY_ODR_26Hz;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2202      	movs	r2, #2
 8008e58:	701a      	strb	r2, [r3, #0]
      break;
 8008e5a:	e023      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_52Hz:
      *val = LSM6DSR_GY_ODR_52Hz;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	701a      	strb	r2, [r3, #0]
      break;
 8008e62:	e01f      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_104Hz:
      *val = LSM6DSR_GY_ODR_104Hz;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2204      	movs	r2, #4
 8008e68:	701a      	strb	r2, [r3, #0]
      break;
 8008e6a:	e01b      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_208Hz:
      *val = LSM6DSR_GY_ODR_208Hz;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2205      	movs	r2, #5
 8008e70:	701a      	strb	r2, [r3, #0]
      break;
 8008e72:	e017      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_417Hz:
      *val = LSM6DSR_GY_ODR_417Hz;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2206      	movs	r2, #6
 8008e78:	701a      	strb	r2, [r3, #0]
      break;
 8008e7a:	e013      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_833Hz:
      *val = LSM6DSR_GY_ODR_833Hz;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2207      	movs	r2, #7
 8008e80:	701a      	strb	r2, [r3, #0]
      break;
 8008e82:	e00f      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_1667Hz:
      *val = LSM6DSR_GY_ODR_1667Hz;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2208      	movs	r2, #8
 8008e88:	701a      	strb	r2, [r3, #0]
      break;
 8008e8a:	e00b      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_3333Hz:
      *val = LSM6DSR_GY_ODR_3333Hz;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2209      	movs	r2, #9
 8008e90:	701a      	strb	r2, [r3, #0]
      break;
 8008e92:	e007      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_6667Hz:
      *val = LSM6DSR_GY_ODR_6667Hz;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	220a      	movs	r2, #10
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e003      	b.n	8008ea4 <lsm6dsr_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSR_GY_ODR_OFF;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
      break;
 8008ea2:	bf00      	nop
  }

  return ret;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop

08008eb0 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8008ebc:	f107 0208 	add.w	r2, r7, #8
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	2112      	movs	r1, #18
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff fc2b 	bl	8008720 <lsm6dsr_read_reg>
 8008eca:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10f      	bne.n	8008ef2 <lsm6dsr_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	7a3b      	ldrb	r3, [r7, #8]
 8008edc:	f362 1386 	bfi	r3, r2, #6, #1
 8008ee0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8008ee2:	f107 0208 	add.w	r2, r7, #8
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	2112      	movs	r1, #18
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff fc30 	bl	8008750 <lsm6dsr_write_reg>
 8008ef0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8008f06:	f107 020c 	add.w	r2, r7, #12
 8008f0a:	2306      	movs	r3, #6
 8008f0c:	2122      	movs	r1, #34	; 0x22
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff fc06 	bl	8008720 <lsm6dsr_read_reg>
 8008f14:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008f16:	7b7b      	ldrb	r3, [r7, #13]
 8008f18:	b21a      	sxth	r2, r3
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	7b3b      	ldrb	r3, [r7, #12]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	4413      	add	r3, r2
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	b21a      	sxth	r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008f38:	7bfa      	ldrb	r2, [r7, #15]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	b212      	sxth	r2, r2
 8008f40:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	3302      	adds	r3, #2
 8008f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	7bbb      	ldrb	r3, [r7, #14]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	4413      	add	r3, r2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	3302      	adds	r3, #2
 8008f5c:	b212      	sxth	r2, r2
 8008f5e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008f60:	7c7a      	ldrb	r2, [r7, #17]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	3304      	adds	r3, #4
 8008f66:	b212      	sxth	r2, r2
 8008f68:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	7c3b      	ldrb	r3, [r7, #16]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	3304      	adds	r3, #4
 8008f84:	b212      	sxth	r2, r2
 8008f86:	801a      	strh	r2, [r3, #0]
  return ret;
 8008f88:	697b      	ldr	r3, [r7, #20]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8008f9c:	f107 020c 	add.w	r2, r7, #12
 8008fa0:	2306      	movs	r3, #6
 8008fa2:	2128      	movs	r1, #40	; 0x28
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fbbb 	bl	8008720 <lsm6dsr_read_reg>
 8008faa:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008fac:	7b7b      	ldrb	r3, [r7, #13]
 8008fae:	b21a      	sxth	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	7b3b      	ldrb	r3, [r7, #12]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	b21a      	sxth	r2, r3
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008fce:	7bfa      	ldrb	r2, [r7, #15]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	b212      	sxth	r2, r2
 8008fd6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	3302      	adds	r3, #2
 8008fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	4413      	add	r3, r2
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	3302      	adds	r3, #2
 8008ff2:	b212      	sxth	r2, r2
 8008ff4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008ff6:	7c7a      	ldrb	r2, [r7, #17]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	b212      	sxth	r2, r2
 8008ffe:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	3304      	adds	r3, #4
 8009004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009008:	b29b      	uxth	r3, r3
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	b29a      	uxth	r2, r3
 800900e:	7c3b      	ldrb	r3, [r7, #16]
 8009010:	b29b      	uxth	r3, r3
 8009012:	4413      	add	r3, r2
 8009014:	b29a      	uxth	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	3304      	adds	r3, #4
 800901a:	b212      	sxth	r2, r2
 800901c:	801a      	strh	r2, [r3, #0]
  return ret;
 800901e:	697b      	ldr	r3, [r7, #20]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8009034:	f107 0208 	add.w	r2, r7, #8
 8009038:	2301      	movs	r3, #1
 800903a:	2101      	movs	r1, #1
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fb6f 	bl	8008720 <lsm6dsr_read_reg>
 8009042:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10f      	bne.n	800906a <lsm6dsr_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 0303 	and.w	r3, r3, #3
 8009050:	b2da      	uxtb	r2, r3
 8009052:	7a3b      	ldrb	r3, [r7, #8]
 8009054:	f362 1387 	bfi	r3, r2, #6, #2
 8009058:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800905a:	f107 0208 	add.w	r2, r7, #8
 800905e:	2301      	movs	r3, #1
 8009060:	2101      	movs	r1, #1
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fb74 	bl	8008750 <lsm6dsr_write_reg>
 8009068:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800906a:	68fb      	ldr	r3, [r7, #12]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800907e:	2301      	movs	r3, #1
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	210f      	movs	r1, #15
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fb4b 	bl	8008720 <lsm6dsr_read_reg>
 800908a:	60f8      	str	r0, [r7, #12]
  return ret;
 800908c:	68fb      	ldr	r3, [r7, #12]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <lsm6dsr_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80090a2:	f107 0208 	add.w	r2, r7, #8
 80090a6:	2301      	movs	r3, #1
 80090a8:	2112      	movs	r1, #18
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fb38 	bl	8008720 <lsm6dsr_read_reg>
 80090b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10f      	bne.n	80090d8 <lsm6dsr_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	7a3b      	ldrb	r3, [r7, #8]
 80090c2:	f362 0382 	bfi	r3, r2, #2, #1
 80090c6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80090c8:	f107 0208 	add.w	r2, r7, #8
 80090cc:	2301      	movs	r3, #1
 80090ce:	2112      	movs	r1, #18
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fb3d 	bl	8008750 <lsm6dsr_write_reg>
 80090d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80090d8:	68fb      	ldr	r3, [r7, #12]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b086      	sub	sp, #24
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 80090ee:	f107 0210 	add.w	r2, r7, #16
 80090f2:	2301      	movs	r3, #1
 80090f4:	2118      	movs	r1, #24
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fb12 	bl	8008720 <lsm6dsr_read_reg>
 80090fc:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d111      	bne.n	8009128 <lsm6dsr_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	09db      	lsrs	r3, r3, #7
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	7c3b      	ldrb	r3, [r7, #16]
 8009112:	f362 0341 	bfi	r3, r2, #1, #1
 8009116:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8009118:	f107 0210 	add.w	r2, r7, #16
 800911c:	2301      	movs	r3, #1
 800911e:	2118      	movs	r1, #24
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff fb15 	bl	8008750 <lsm6dsr_write_reg>
 8009126:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0) {
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d107      	bne.n	800913e <lsm6dsr_i3c_disable_set+0x5c>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800912e:	f107 020c 	add.w	r2, r7, #12
 8009132:	2301      	movs	r3, #1
 8009134:	2162      	movs	r1, #98	; 0x62
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff faf2 	bl	8008720 <lsm6dsr_read_reg>
 800913c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10f      	bne.n	8009164 <lsm6dsr_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	b2da      	uxtb	r2, r3
 800914c:	7b3b      	ldrb	r3, [r7, #12]
 800914e:	f362 03c4 	bfi	r3, r2, #3, #2
 8009152:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8009154:	f107 020c 	add.w	r2, r7, #12
 8009158:	2301      	movs	r3, #1
 800915a:	2162      	movs	r1, #98	; 0x62
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff faf7 	bl	8008750 <lsm6dsr_write_reg>
 8009162:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8009164:	697b      	ldr	r3, [r7, #20]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <lsm6dsr_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsr_fifo_mode_t val)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FIFO_CTRL4,
 800917a:	f107 0208 	add.w	r2, r7, #8
 800917e:	2301      	movs	r3, #1
 8009180:	210a      	movs	r1, #10
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff facc 	bl	8008720 <lsm6dsr_read_reg>
 8009188:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10f      	bne.n	80091b0 <lsm6dsr_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	b2da      	uxtb	r2, r3
 8009198:	7a3b      	ldrb	r3, [r7, #8]
 800919a:	f362 0302 	bfi	r3, r2, #0, #3
 800919e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FIFO_CTRL4,
 80091a0:	f107 0208 	add.w	r2, r7, #8
 80091a4:	2301      	movs	r3, #1
 80091a6:	210a      	movs	r1, #10
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff fad1 	bl	8008750 <lsm6dsr_write_reg>
 80091ae:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80091b0:	68fb      	ldr	r3, [r7, #12]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80091c4:	2102      	movs	r1, #2
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff ff2e 	bl	8009028 <lsm6dsr_mem_bank_set>
 80091cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d106      	bne.n	80091e2 <lsm6dsr_fsm_enable_get+0x28>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80091d4:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80091d6:	2301      	movs	r3, #1
 80091d8:	2146      	movs	r1, #70	; 0x46
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff faa0 	bl	8008720 <lsm6dsr_read_reg>
 80091e0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d107      	bne.n	80091f8 <lsm6dsr_fsm_enable_get+0x3e>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80091ec:	2301      	movs	r3, #1
 80091ee:	2147      	movs	r1, #71	; 0x47
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff fa95 	bl	8008720 <lsm6dsr_read_reg>
 80091f6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <lsm6dsr_fsm_enable_get+0x4e>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80091fe:	2100      	movs	r1, #0
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff ff11 	bl	8009028 <lsm6dsr_mem_bank_set>
 8009206:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009208:	68fb      	ldr	r3, [r7, #12]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800921e:	2102      	movs	r1, #2
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff ff01 	bl	8009028 <lsm6dsr_mem_bank_set>
 8009226:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d107      	bne.n	800923e <lsm6dsr_fsm_data_rate_get+0x2a>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800922e:	f107 0208 	add.w	r2, r7, #8
 8009232:	2301      	movs	r3, #1
 8009234:	215f      	movs	r1, #95	; 0x5f
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7ff fa72 	bl	8008720 <lsm6dsr_read_reg>
 800923c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d104      	bne.n	800924e <lsm6dsr_fsm_data_rate_get+0x3a>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8009244:	2100      	movs	r1, #0
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff feee 	bl	8009028 <lsm6dsr_mem_bank_set>
 800924c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800924e:	7a3b      	ldrb	r3, [r7, #8]
 8009250:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b03      	cmp	r3, #3
 8009258:	d81a      	bhi.n	8009290 <lsm6dsr_fsm_data_rate_get+0x7c>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	08009271 	.word	0x08009271
 8009264:	08009279 	.word	0x08009279
 8009268:	08009281 	.word	0x08009281
 800926c:	08009289 	.word	0x08009289
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
      break;
 8009276:	e00f      	b.n	8009298 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2201      	movs	r2, #1
 800927c:	701a      	strb	r2, [r3, #0]
      break;
 800927e:	e00b      	b.n	8009298 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2202      	movs	r2, #2
 8009284:	701a      	strb	r2, [r3, #0]
      break;
 8009286:	e007      	b.n	8009298 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2203      	movs	r2, #3
 800928c:	701a      	strb	r2, [r3, #0]
      break;
 800928e:	e003      	b.n	8009298 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	701a      	strb	r2, [r3, #0]
      break;
 8009296:	bf00      	nop
  }

  return ret;
 8009298:	68fb      	ldr	r3, [r7, #12]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop

080092a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80092a8:	4b0e      	ldr	r3, [pc, #56]	; (80092e4 <HAL_Init+0x40>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a0d      	ldr	r2, [pc, #52]	; (80092e4 <HAL_Init+0x40>)
 80092ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80092b4:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <HAL_Init+0x40>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a0a      	ldr	r2, [pc, #40]	; (80092e4 <HAL_Init+0x40>)
 80092ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092c0:	4b08      	ldr	r3, [pc, #32]	; (80092e4 <HAL_Init+0x40>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a07      	ldr	r2, [pc, #28]	; (80092e4 <HAL_Init+0x40>)
 80092c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092cc:	2003      	movs	r0, #3
 80092ce:	f000 fd5f 	bl	8009d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092d2:	2000      	movs	r0, #0
 80092d4:	f000 f808 	bl	80092e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092d8:	f7fc fda2 	bl	8005e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40023c00 	.word	0x40023c00

080092e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80092f0:	4b12      	ldr	r3, [pc, #72]	; (800933c <HAL_InitTick+0x54>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4b12      	ldr	r3, [pc, #72]	; (8009340 <HAL_InitTick+0x58>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	4619      	mov	r1, r3
 80092fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009302:	fbb2 f3f3 	udiv	r3, r2, r3
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fd85 	bl	8009e16 <HAL_SYSTICK_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e00e      	b.n	8009334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b0f      	cmp	r3, #15
 800931a:	d80a      	bhi.n	8009332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800931c:	2200      	movs	r2, #0
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	f04f 30ff 	mov.w	r0, #4294967295
 8009324:	f000 fd3f 	bl	8009da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009328:	4a06      	ldr	r2, [pc, #24]	; (8009344 <HAL_InitTick+0x5c>)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	e000      	b.n	8009334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000028 	.word	0x20000028
 8009340:	200000c0 	.word	0x200000c0
 8009344:	200000bc 	.word	0x200000bc

08009348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <HAL_IncTick+0x20>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	4b06      	ldr	r3, [pc, #24]	; (800936c <HAL_IncTick+0x24>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4413      	add	r3, r2
 8009358:	4a04      	ldr	r2, [pc, #16]	; (800936c <HAL_IncTick+0x24>)
 800935a:	6013      	str	r3, [r2, #0]
}
 800935c:	bf00      	nop
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	200000c0 	.word	0x200000c0
 800936c:	20000ee0 	.word	0x20000ee0

08009370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
  return uwTick;
 8009374:	4b03      	ldr	r3, [pc, #12]	; (8009384 <HAL_GetTick+0x14>)
 8009376:	681b      	ldr	r3, [r3, #0]
}
 8009378:	4618      	mov	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000ee0 	.word	0x20000ee0

08009388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009390:	f7ff ffee 	bl	8009370 <HAL_GetTick>
 8009394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a0:	d005      	beq.n	80093ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <HAL_Delay+0x44>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80093ae:	bf00      	nop
 80093b0:	f7ff ffde 	bl	8009370 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d8f7      	bhi.n	80093b0 <HAL_Delay+0x28>
  {
  }
}
 80093c0:	bf00      	nop
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200000c0 	.word	0x200000c0

080093d0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 80093d4:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <HAL_GetHalVersion+0x10>)
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	01070c00 	.word	0x01070c00

080093e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e033      	b.n	8009462 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d109      	bne.n	8009416 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7fc fd34 	bl	8005e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	2b00      	cmp	r3, #0
 8009420:	d118      	bne.n	8009454 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800942a:	f023 0302 	bic.w	r3, r3, #2
 800942e:	f043 0202 	orr.w	r2, r3, #2
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 faba 	bl	80099b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009446:	f023 0303 	bic.w	r3, r3, #3
 800944a:	f043 0201 	orr.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	641a      	str	r2, [r3, #64]	; 0x40
 8009452:	e001      	b.n	8009458 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <HAL_ADC_Start+0x1a>
 8009482:	2302      	movs	r3, #2
 8009484:	e097      	b.n	80095b6 <HAL_ADC_Start+0x14a>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b01      	cmp	r3, #1
 800949a:	d018      	beq.n	80094ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f042 0201 	orr.w	r2, r2, #1
 80094aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80094ac:	4b45      	ldr	r3, [pc, #276]	; (80095c4 <HAL_ADC_Start+0x158>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a45      	ldr	r2, [pc, #276]	; (80095c8 <HAL_ADC_Start+0x15c>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	0c9a      	lsrs	r2, r3, #18
 80094b8:	4613      	mov	r3, r2
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	4413      	add	r3, r2
 80094be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80094c0:	e002      	b.n	80094c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1f9      	bne.n	80094c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d15f      	bne.n	800959c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80094e4:	f023 0301 	bic.w	r3, r3, #1
 80094e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009506:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951a:	d106      	bne.n	800952a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009520:	f023 0206 	bic.w	r2, r3, #6
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	645a      	str	r2, [r3, #68]	; 0x44
 8009528:	e002      	b.n	8009530 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009538:	4b24      	ldr	r3, [pc, #144]	; (80095cc <HAL_ADC_Start+0x160>)
 800953a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009544:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	f003 031f 	and.w	r3, r3, #31
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10f      	bne.n	8009572 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d129      	bne.n	80095b4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800956e:	609a      	str	r2, [r3, #8]
 8009570:	e020      	b.n	80095b4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a16      	ldr	r2, [pc, #88]	; (80095d0 <HAL_ADC_Start+0x164>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d11b      	bne.n	80095b4 <HAL_ADC_Start+0x148>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d114      	bne.n	80095b4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009598:	609a      	str	r2, [r3, #8]
 800959a:	e00b      	b.n	80095b4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a0:	f043 0210 	orr.w	r2, r3, #16
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ac:	f043 0201 	orr.w	r2, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	20000028 	.word	0x20000028
 80095c8:	431bde83 	.word	0x431bde83
 80095cc:	40012300 	.word	0x40012300
 80095d0:	40012000 	.word	0x40012000

080095d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_ADC_Stop+0x16>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e021      	b.n	800962e <HAL_ADC_Stop+0x5a>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0201 	bic.w	r2, r2, #1
 8009600:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d109      	bne.n	8009624 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009618:	f023 0301 	bic.w	r3, r3, #1
 800961c:	f043 0201 	orr.w	r2, r3, #1
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009656:	d113      	bne.n	8009680 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009666:	d10b      	bne.n	8009680 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e063      	b.n	8009748 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009680:	f7ff fe76 	bl	8009370 <HAL_GetTick>
 8009684:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8009686:	e021      	b.n	80096cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d01d      	beq.n	80096cc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d007      	beq.n	80096a6 <HAL_ADC_PollForConversion+0x6c>
 8009696:	f7ff fe6b 	bl	8009370 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d212      	bcs.n	80096cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d00b      	beq.n	80096cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	f043 0204 	orr.w	r2, r3, #4
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e03d      	b.n	8009748 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0302 	and.w	r3, r3, #2
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d1d6      	bne.n	8009688 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f06f 0212 	mvn.w	r2, #18
 80096e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d123      	bne.n	8009746 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009702:	2b00      	cmp	r3, #0
 8009704:	d11f      	bne.n	8009746 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009710:	2b00      	cmp	r3, #0
 8009712:	d006      	beq.n	8009722 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800971e:	2b00      	cmp	r3, #0
 8009720:	d111      	bne.n	8009746 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d105      	bne.n	8009746 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	f043 0201 	orr.w	r2, r3, #1
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
	...

0800976c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <HAL_ADC_ConfigChannel+0x1c>
 8009784:	2302      	movs	r3, #2
 8009786:	e105      	b.n	8009994 <HAL_ADC_ConfigChannel+0x228>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b09      	cmp	r3, #9
 8009796:	d925      	bls.n	80097e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68d9      	ldr	r1, [r3, #12]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	461a      	mov	r2, r3
 80097a6:	4613      	mov	r3, r2
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	4413      	add	r3, r2
 80097ac:	3b1e      	subs	r3, #30
 80097ae:	2207      	movs	r2, #7
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	43da      	mvns	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	400a      	ands	r2, r1
 80097bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68d9      	ldr	r1, [r3, #12]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	4618      	mov	r0, r3
 80097d0:	4603      	mov	r3, r0
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	4403      	add	r3, r0
 80097d6:	3b1e      	subs	r3, #30
 80097d8:	409a      	lsls	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	60da      	str	r2, [r3, #12]
 80097e2:	e022      	b.n	800982a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6919      	ldr	r1, [r3, #16]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	4613      	mov	r3, r2
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	4413      	add	r3, r2
 80097f8:	2207      	movs	r2, #7
 80097fa:	fa02 f303 	lsl.w	r3, r2, r3
 80097fe:	43da      	mvns	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	400a      	ands	r2, r1
 8009806:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6919      	ldr	r1, [r3, #16]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	689a      	ldr	r2, [r3, #8]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	4618      	mov	r0, r3
 800981a:	4603      	mov	r3, r0
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	4403      	add	r3, r0
 8009820:	409a      	lsls	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2b06      	cmp	r3, #6
 8009830:	d824      	bhi.n	800987c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	3b05      	subs	r3, #5
 8009844:	221f      	movs	r2, #31
 8009846:	fa02 f303 	lsl.w	r3, r2, r3
 800984a:	43da      	mvns	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	400a      	ands	r2, r1
 8009852:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	b29b      	uxth	r3, r3
 8009860:	4618      	mov	r0, r3
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	4613      	mov	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	3b05      	subs	r3, #5
 800986e:	fa00 f203 	lsl.w	r2, r0, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	635a      	str	r2, [r3, #52]	; 0x34
 800987a:	e04c      	b.n	8009916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b0c      	cmp	r3, #12
 8009882:	d824      	bhi.n	80098ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	4613      	mov	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	3b23      	subs	r3, #35	; 0x23
 8009896:	221f      	movs	r2, #31
 8009898:	fa02 f303 	lsl.w	r3, r2, r3
 800989c:	43da      	mvns	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	400a      	ands	r2, r1
 80098a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	4618      	mov	r0, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	3b23      	subs	r3, #35	; 0x23
 80098c0:	fa00 f203 	lsl.w	r2, r0, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
 80098cc:	e023      	b.n	8009916 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	3b41      	subs	r3, #65	; 0x41
 80098e0:	221f      	movs	r2, #31
 80098e2:	fa02 f303 	lsl.w	r3, r2, r3
 80098e6:	43da      	mvns	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	400a      	ands	r2, r1
 80098ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	4618      	mov	r0, r3
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	3b41      	subs	r3, #65	; 0x41
 800990a:	fa00 f203 	lsl.w	r2, r0, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009916:	4b22      	ldr	r3, [pc, #136]	; (80099a0 <HAL_ADC_ConfigChannel+0x234>)
 8009918:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a21      	ldr	r2, [pc, #132]	; (80099a4 <HAL_ADC_ConfigChannel+0x238>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d109      	bne.n	8009938 <HAL_ADC_ConfigChannel+0x1cc>
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b12      	cmp	r3, #18
 800992a:	d105      	bne.n	8009938 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a19      	ldr	r2, [pc, #100]	; (80099a4 <HAL_ADC_ConfigChannel+0x238>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d123      	bne.n	800998a <HAL_ADC_ConfigChannel+0x21e>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b10      	cmp	r3, #16
 8009948:	d003      	beq.n	8009952 <HAL_ADC_ConfigChannel+0x1e6>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b11      	cmp	r3, #17
 8009950:	d11b      	bne.n	800998a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b10      	cmp	r3, #16
 8009964:	d111      	bne.n	800998a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009966:	4b10      	ldr	r3, [pc, #64]	; (80099a8 <HAL_ADC_ConfigChannel+0x23c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a10      	ldr	r2, [pc, #64]	; (80099ac <HAL_ADC_ConfigChannel+0x240>)
 800996c:	fba2 2303 	umull	r2, r3, r2, r3
 8009970:	0c9a      	lsrs	r2, r3, #18
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800997c:	e002      	b.n	8009984 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	3b01      	subs	r3, #1
 8009982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1f9      	bne.n	800997e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	40012300 	.word	0x40012300
 80099a4:	40012000 	.word	0x40012000
 80099a8:	20000028 	.word	0x20000028
 80099ac:	431bde83 	.word	0x431bde83

080099b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80099b8:	4b79      	ldr	r3, [pc, #484]	; (8009ba0 <ADC_Init+0x1f0>)
 80099ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	431a      	orrs	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6859      	ldr	r1, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	021a      	lsls	r2, r3, #8
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	430a      	orrs	r2, r1
 80099f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6859      	ldr	r1, [r3, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689a      	ldr	r2, [r3, #8]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6899      	ldr	r1, [r3, #8]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	4a58      	ldr	r2, [pc, #352]	; (8009ba4 <ADC_Init+0x1f4>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d022      	beq.n	8009a8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	689a      	ldr	r2, [r3, #8]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6899      	ldr	r1, [r3, #8]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6899      	ldr	r1, [r3, #8]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	609a      	str	r2, [r3, #8]
 8009a8c:	e00f      	b.n	8009aae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009aac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689a      	ldr	r2, [r3, #8]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0202 	bic.w	r2, r2, #2
 8009abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6899      	ldr	r1, [r3, #8]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7e1b      	ldrb	r3, [r3, #24]
 8009ac8:	005a      	lsls	r2, r3, #1
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01b      	beq.n	8009b14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009afa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6859      	ldr	r1, [r3, #4]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	3b01      	subs	r3, #1
 8009b08:	035a      	lsls	r2, r3, #13
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	605a      	str	r2, [r3, #4]
 8009b12:	e007      	b.n	8009b24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	051a      	lsls	r2, r3, #20
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6899      	ldr	r1, [r3, #8]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b66:	025a      	lsls	r2, r3, #9
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6899      	ldr	r1, [r3, #8]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	029a      	lsls	r2, r3, #10
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	609a      	str	r2, [r3, #8]
}
 8009b94:	bf00      	nop
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	40012300 	.word	0x40012300
 8009ba4:	0f000001 	.word	0x0f000001

08009ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <__NVIC_SetPriorityGrouping+0x44>)
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009bda:	4a04      	ldr	r2, [pc, #16]	; (8009bec <__NVIC_SetPriorityGrouping+0x44>)
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	60d3      	str	r3, [r2, #12]
}
 8009be0:	bf00      	nop
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	e000ed00 	.word	0xe000ed00

08009bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009bf4:	4b04      	ldr	r3, [pc, #16]	; (8009c08 <__NVIC_GetPriorityGrouping+0x18>)
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	0a1b      	lsrs	r3, r3, #8
 8009bfa:	f003 0307 	and.w	r3, r3, #7
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	e000ed00 	.word	0xe000ed00

08009c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	db0b      	blt.n	8009c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	f003 021f 	and.w	r2, r3, #31
 8009c24:	4907      	ldr	r1, [pc, #28]	; (8009c44 <__NVIC_EnableIRQ+0x38>)
 8009c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c2a:	095b      	lsrs	r3, r3, #5
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8009c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	e000e100 	.word	0xe000e100

08009c48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	db12      	blt.n	8009c80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	f003 021f 	and.w	r2, r3, #31
 8009c60:	490a      	ldr	r1, [pc, #40]	; (8009c8c <__NVIC_DisableIRQ+0x44>)
 8009c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c66:	095b      	lsrs	r3, r3, #5
 8009c68:	2001      	movs	r0, #1
 8009c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8009c6e:	3320      	adds	r3, #32
 8009c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009c74:	f3bf 8f4f 	dsb	sy
}
 8009c78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009c7a:	f3bf 8f6f 	isb	sy
}
 8009c7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	e000e100 	.word	0xe000e100

08009c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	db0a      	blt.n	8009cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	490c      	ldr	r1, [pc, #48]	; (8009cdc <__NVIC_SetPriority+0x4c>)
 8009caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cae:	0112      	lsls	r2, r2, #4
 8009cb0:	b2d2      	uxtb	r2, r2
 8009cb2:	440b      	add	r3, r1
 8009cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009cb8:	e00a      	b.n	8009cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	4908      	ldr	r1, [pc, #32]	; (8009ce0 <__NVIC_SetPriority+0x50>)
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	3b04      	subs	r3, #4
 8009cc8:	0112      	lsls	r2, r2, #4
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	440b      	add	r3, r1
 8009cce:	761a      	strb	r2, [r3, #24]
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	e000e100 	.word	0xe000e100
 8009ce0:	e000ed00 	.word	0xe000ed00

08009ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b089      	sub	sp, #36	; 0x24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f1c3 0307 	rsb	r3, r3, #7
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	bf28      	it	cs
 8009d02:	2304      	movcs	r3, #4
 8009d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	2b06      	cmp	r3, #6
 8009d0c:	d902      	bls.n	8009d14 <NVIC_EncodePriority+0x30>
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	3b03      	subs	r3, #3
 8009d12:	e000      	b.n	8009d16 <NVIC_EncodePriority+0x32>
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d18:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d22:	43da      	mvns	r2, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	401a      	ands	r2, r3
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	fa01 f303 	lsl.w	r3, r1, r3
 8009d36:	43d9      	mvns	r1, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d3c:	4313      	orrs	r3, r2
         );
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3724      	adds	r7, #36	; 0x24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
	...

08009d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d5c:	d301      	bcc.n	8009d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e00f      	b.n	8009d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009d62:	4a0a      	ldr	r2, [pc, #40]	; (8009d8c <SysTick_Config+0x40>)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009d6a:	210f      	movs	r1, #15
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d70:	f7ff ff8e 	bl	8009c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009d74:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <SysTick_Config+0x40>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009d7a:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <SysTick_Config+0x40>)
 8009d7c:	2207      	movs	r2, #7
 8009d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	e000e010 	.word	0xe000e010

08009d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff ff05 	bl	8009ba8 <__NVIC_SetPriorityGrouping>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	4603      	mov	r3, r0
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009db8:	f7ff ff1a 	bl	8009bf0 <__NVIC_GetPriorityGrouping>
 8009dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	68b9      	ldr	r1, [r7, #8]
 8009dc2:	6978      	ldr	r0, [r7, #20]
 8009dc4:	f7ff ff8e 	bl	8009ce4 <NVIC_EncodePriority>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff ff5d 	bl	8009c90 <__NVIC_SetPriority>
}
 8009dd6:	bf00      	nop
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	4603      	mov	r3, r0
 8009de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff ff0d 	bl	8009c0c <__NVIC_EnableIRQ>
}
 8009df2:	bf00      	nop
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	4603      	mov	r3, r0
 8009e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff ff1d 	bl	8009c48 <__NVIC_DisableIRQ>
}
 8009e0e:	bf00      	nop
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff ff94 	bl	8009d4c <SysTick_Config>
 8009e24:	4603      	mov	r3, r0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009e3c:	f7ff fa98 	bl	8009370 <HAL_GetTick>
 8009e40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d008      	beq.n	8009e60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2280      	movs	r2, #128	; 0x80
 8009e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e052      	b.n	8009f06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 0216 	bic.w	r2, r2, #22
 8009e6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	695a      	ldr	r2, [r3, #20]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <HAL_DMA_Abort+0x62>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d007      	beq.n	8009ea0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0208 	bic.w	r2, r2, #8
 8009e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f022 0201 	bic.w	r2, r2, #1
 8009eae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009eb0:	e013      	b.n	8009eda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009eb2:	f7ff fa5d 	bl	8009370 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	2b05      	cmp	r3, #5
 8009ebe:	d90c      	bls.n	8009eda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e015      	b.n	8009f06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e4      	bne.n	8009eb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eec:	223f      	movs	r2, #63	; 0x3f
 8009eee:	409a      	lsls	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d004      	beq.n	8009f2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2280      	movs	r2, #128	; 0x80
 8009f26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e00c      	b.n	8009f46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2205      	movs	r2, #5
 8009f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f022 0201 	bic.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
	...

08009f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b089      	sub	sp, #36	; 0x24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	61fb      	str	r3, [r7, #28]
 8009f6e:	e159      	b.n	800a224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009f70:	2201      	movs	r2, #1
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4013      	ands	r3, r2
 8009f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	f040 8148 	bne.w	800a21e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d005      	beq.n	8009fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d130      	bne.n	800a008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	005b      	lsls	r3, r3, #1
 8009fb0:	2203      	movs	r2, #3
 8009fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb6:	43db      	mvns	r3, r3
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009fdc:	2201      	movs	r2, #1
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe4:	43db      	mvns	r3, r3
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	4013      	ands	r3, r2
 8009fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	091b      	lsrs	r3, r3, #4
 8009ff2:	f003 0201 	and.w	r2, r3, #1
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	2b03      	cmp	r3, #3
 800a012:	d017      	beq.n	800a044 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	2203      	movs	r2, #3
 800a020:	fa02 f303 	lsl.w	r3, r2, r3
 800a024:	43db      	mvns	r3, r3
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	4013      	ands	r3, r2
 800a02a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	f003 0303 	and.w	r3, r3, #3
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d123      	bne.n	800a098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	08da      	lsrs	r2, r3, #3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3208      	adds	r2, #8
 800a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f003 0307 	and.w	r3, r3, #7
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	220f      	movs	r2, #15
 800a068:	fa02 f303 	lsl.w	r3, r2, r3
 800a06c:	43db      	mvns	r3, r3
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	4013      	ands	r3, r2
 800a072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	691a      	ldr	r2, [r3, #16]
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	f003 0307 	and.w	r3, r3, #7
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	fa02 f303 	lsl.w	r3, r2, r3
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	4313      	orrs	r3, r2
 800a088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	08da      	lsrs	r2, r3, #3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3208      	adds	r2, #8
 800a092:	69b9      	ldr	r1, [r7, #24]
 800a094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	2203      	movs	r2, #3
 800a0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a8:	43db      	mvns	r3, r3
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f003 0203 	and.w	r2, r3, #3
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 80a2 	beq.w	800a21e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	4b57      	ldr	r3, [pc, #348]	; (800a23c <HAL_GPIO_Init+0x2e8>)
 800a0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e2:	4a56      	ldr	r2, [pc, #344]	; (800a23c <HAL_GPIO_Init+0x2e8>)
 800a0e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a0ea:	4b54      	ldr	r3, [pc, #336]	; (800a23c <HAL_GPIO_Init+0x2e8>)
 800a0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0f6:	4a52      	ldr	r2, [pc, #328]	; (800a240 <HAL_GPIO_Init+0x2ec>)
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	089b      	lsrs	r3, r3, #2
 800a0fc:	3302      	adds	r3, #2
 800a0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	220f      	movs	r2, #15
 800a10e:	fa02 f303 	lsl.w	r3, r2, r3
 800a112:	43db      	mvns	r3, r3
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	4013      	ands	r3, r2
 800a118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a49      	ldr	r2, [pc, #292]	; (800a244 <HAL_GPIO_Init+0x2f0>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d019      	beq.n	800a156 <HAL_GPIO_Init+0x202>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a48      	ldr	r2, [pc, #288]	; (800a248 <HAL_GPIO_Init+0x2f4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d013      	beq.n	800a152 <HAL_GPIO_Init+0x1fe>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a47      	ldr	r2, [pc, #284]	; (800a24c <HAL_GPIO_Init+0x2f8>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d00d      	beq.n	800a14e <HAL_GPIO_Init+0x1fa>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a46      	ldr	r2, [pc, #280]	; (800a250 <HAL_GPIO_Init+0x2fc>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d007      	beq.n	800a14a <HAL_GPIO_Init+0x1f6>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a45      	ldr	r2, [pc, #276]	; (800a254 <HAL_GPIO_Init+0x300>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d101      	bne.n	800a146 <HAL_GPIO_Init+0x1f2>
 800a142:	2304      	movs	r3, #4
 800a144:	e008      	b.n	800a158 <HAL_GPIO_Init+0x204>
 800a146:	2307      	movs	r3, #7
 800a148:	e006      	b.n	800a158 <HAL_GPIO_Init+0x204>
 800a14a:	2303      	movs	r3, #3
 800a14c:	e004      	b.n	800a158 <HAL_GPIO_Init+0x204>
 800a14e:	2302      	movs	r3, #2
 800a150:	e002      	b.n	800a158 <HAL_GPIO_Init+0x204>
 800a152:	2301      	movs	r3, #1
 800a154:	e000      	b.n	800a158 <HAL_GPIO_Init+0x204>
 800a156:	2300      	movs	r3, #0
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	f002 0203 	and.w	r2, r2, #3
 800a15e:	0092      	lsls	r2, r2, #2
 800a160:	4093      	lsls	r3, r2
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	4313      	orrs	r3, r2
 800a166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a168:	4935      	ldr	r1, [pc, #212]	; (800a240 <HAL_GPIO_Init+0x2ec>)
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	089b      	lsrs	r3, r3, #2
 800a16e:	3302      	adds	r3, #2
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a176:	4b38      	ldr	r3, [pc, #224]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	43db      	mvns	r3, r3
 800a180:	69ba      	ldr	r2, [r7, #24]
 800a182:	4013      	ands	r3, r2
 800a184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	4313      	orrs	r3, r2
 800a198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a19a:	4a2f      	ldr	r2, [pc, #188]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a1a0:	4b2d      	ldr	r3, [pc, #180]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	43db      	mvns	r3, r3
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a1bc:	69ba      	ldr	r2, [r7, #24]
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a1c4:	4a24      	ldr	r2, [pc, #144]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a1ca:	4b23      	ldr	r3, [pc, #140]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	43db      	mvns	r3, r3
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a1e6:	69ba      	ldr	r2, [r7, #24]
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a1ee:	4a1a      	ldr	r2, [pc, #104]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a1f4:	4b18      	ldr	r3, [pc, #96]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	43db      	mvns	r3, r3
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	4013      	ands	r3, r2
 800a202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	4313      	orrs	r3, r2
 800a216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a218:	4a0f      	ldr	r2, [pc, #60]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	3301      	adds	r3, #1
 800a222:	61fb      	str	r3, [r7, #28]
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	2b0f      	cmp	r3, #15
 800a228:	f67f aea2 	bls.w	8009f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	3724      	adds	r7, #36	; 0x24
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	40023800 	.word	0x40023800
 800a240:	40013800 	.word	0x40013800
 800a244:	40020000 	.word	0x40020000
 800a248:	40020400 	.word	0x40020400
 800a24c:	40020800 	.word	0x40020800
 800a250:	40020c00 	.word	0x40020c00
 800a254:	40021000 	.word	0x40021000
 800a258:	40013c00 	.word	0x40013c00

0800a25c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a266:	2300      	movs	r3, #0
 800a268:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a26e:	2300      	movs	r3, #0
 800a270:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a272:	2300      	movs	r3, #0
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	e0bb      	b.n	800a3f0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a278:	2201      	movs	r2, #1
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	fa02 f303 	lsl.w	r3, r2, r3
 800a280:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	4013      	ands	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	429a      	cmp	r2, r3
 800a290:	f040 80ab 	bne.w	800a3ea <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a294:	4a5c      	ldr	r2, [pc, #368]	; (800a408 <HAL_GPIO_DeInit+0x1ac>)
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	089b      	lsrs	r3, r3, #2
 800a29a:	3302      	adds	r3, #2
 800a29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2a0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f003 0303 	and.w	r3, r3, #3
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	220f      	movs	r2, #15
 800a2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a54      	ldr	r2, [pc, #336]	; (800a40c <HAL_GPIO_DeInit+0x1b0>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d019      	beq.n	800a2f2 <HAL_GPIO_DeInit+0x96>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a53      	ldr	r2, [pc, #332]	; (800a410 <HAL_GPIO_DeInit+0x1b4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d013      	beq.n	800a2ee <HAL_GPIO_DeInit+0x92>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a52      	ldr	r2, [pc, #328]	; (800a414 <HAL_GPIO_DeInit+0x1b8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d00d      	beq.n	800a2ea <HAL_GPIO_DeInit+0x8e>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a51      	ldr	r2, [pc, #324]	; (800a418 <HAL_GPIO_DeInit+0x1bc>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d007      	beq.n	800a2e6 <HAL_GPIO_DeInit+0x8a>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a50      	ldr	r2, [pc, #320]	; (800a41c <HAL_GPIO_DeInit+0x1c0>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d101      	bne.n	800a2e2 <HAL_GPIO_DeInit+0x86>
 800a2de:	2304      	movs	r3, #4
 800a2e0:	e008      	b.n	800a2f4 <HAL_GPIO_DeInit+0x98>
 800a2e2:	2307      	movs	r3, #7
 800a2e4:	e006      	b.n	800a2f4 <HAL_GPIO_DeInit+0x98>
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e004      	b.n	800a2f4 <HAL_GPIO_DeInit+0x98>
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	e002      	b.n	800a2f4 <HAL_GPIO_DeInit+0x98>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <HAL_GPIO_DeInit+0x98>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	f002 0203 	and.w	r2, r2, #3
 800a2fa:	0092      	lsls	r2, r2, #2
 800a2fc:	4093      	lsls	r3, r2
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	429a      	cmp	r2, r3
 800a302:	d132      	bne.n	800a36a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a304:	4b46      	ldr	r3, [pc, #280]	; (800a420 <HAL_GPIO_DeInit+0x1c4>)
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	43db      	mvns	r3, r3
 800a30c:	4944      	ldr	r1, [pc, #272]	; (800a420 <HAL_GPIO_DeInit+0x1c4>)
 800a30e:	4013      	ands	r3, r2
 800a310:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a312:	4b43      	ldr	r3, [pc, #268]	; (800a420 <HAL_GPIO_DeInit+0x1c4>)
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	43db      	mvns	r3, r3
 800a31a:	4941      	ldr	r1, [pc, #260]	; (800a420 <HAL_GPIO_DeInit+0x1c4>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a320:	4b3f      	ldr	r3, [pc, #252]	; (800a420 <HAL_GPIO_DeInit+0x1c4>)
 800a322:	689a      	ldr	r2, [r3, #8]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	43db      	mvns	r3, r3
 800a328:	493d      	ldr	r1, [pc, #244]	; (800a420 <HAL_GPIO_DeInit+0x1c4>)
 800a32a:	4013      	ands	r3, r2
 800a32c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a32e:	4b3c      	ldr	r3, [pc, #240]	; (800a420 <HAL_GPIO_DeInit+0x1c4>)
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	43db      	mvns	r3, r3
 800a336:	493a      	ldr	r1, [pc, #232]	; (800a420 <HAL_GPIO_DeInit+0x1c4>)
 800a338:	4013      	ands	r3, r2
 800a33a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f003 0303 	and.w	r3, r3, #3
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	220f      	movs	r2, #15
 800a346:	fa02 f303 	lsl.w	r3, r2, r3
 800a34a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a34c:	4a2e      	ldr	r2, [pc, #184]	; (800a408 <HAL_GPIO_DeInit+0x1ac>)
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	089b      	lsrs	r3, r3, #2
 800a352:	3302      	adds	r3, #2
 800a354:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	43da      	mvns	r2, r3
 800a35c:	482a      	ldr	r0, [pc, #168]	; (800a408 <HAL_GPIO_DeInit+0x1ac>)
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	089b      	lsrs	r3, r3, #2
 800a362:	400a      	ands	r2, r1
 800a364:	3302      	adds	r3, #2
 800a366:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	2103      	movs	r1, #3
 800a374:	fa01 f303 	lsl.w	r3, r1, r3
 800a378:	43db      	mvns	r3, r3
 800a37a:	401a      	ands	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	08da      	lsrs	r2, r3, #3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3208      	adds	r2, #8
 800a388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f003 0307 	and.w	r3, r3, #7
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	220f      	movs	r2, #15
 800a396:	fa02 f303 	lsl.w	r3, r2, r3
 800a39a:	43db      	mvns	r3, r3
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	08d2      	lsrs	r2, r2, #3
 800a3a0:	4019      	ands	r1, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3208      	adds	r2, #8
 800a3a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	2103      	movs	r1, #3
 800a3b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	401a      	ands	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3cc:	43db      	mvns	r3, r3
 800a3ce:	401a      	ands	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	2103      	movs	r1, #3
 800a3de:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e2:	43db      	mvns	r3, r3
 800a3e4:	401a      	ands	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	2b0f      	cmp	r3, #15
 800a3f4:	f67f af40 	bls.w	800a278 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	40013800 	.word	0x40013800
 800a40c:	40020000 	.word	0x40020000
 800a410:	40020400 	.word	0x40020400
 800a414:	40020800 	.word	0x40020800
 800a418:	40020c00 	.word	0x40020c00
 800a41c:	40021000 	.word	0x40021000
 800a420:	40013c00 	.word	0x40013c00

0800a424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	691a      	ldr	r2, [r3, #16]
 800a434:	887b      	ldrh	r3, [r7, #2]
 800a436:	4013      	ands	r3, r2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a43c:	2301      	movs	r3, #1
 800a43e:	73fb      	strb	r3, [r7, #15]
 800a440:	e001      	b.n	800a446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	807b      	strh	r3, [r7, #2]
 800a460:	4613      	mov	r3, r2
 800a462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a464:	787b      	ldrb	r3, [r7, #1]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a46a:	887a      	ldrh	r2, [r7, #2]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a470:	e003      	b.n	800a47a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a472:	887b      	ldrh	r3, [r7, #2]
 800a474:	041a      	lsls	r2, r3, #16
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	619a      	str	r2, [r3, #24]
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	460b      	mov	r3, r1
 800a490:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a498:	887a      	ldrh	r2, [r7, #2]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4013      	ands	r3, r2
 800a49e:	041a      	lsls	r2, r3, #16
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	43d9      	mvns	r1, r3
 800a4a4:	887b      	ldrh	r3, [r7, #2]
 800a4a6:	400b      	ands	r3, r1
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	619a      	str	r2, [r3, #24]
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
	...

0800a4bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a4c6:	4b08      	ldr	r3, [pc, #32]	; (800a4e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4c8:	695a      	ldr	r2, [r3, #20]
 800a4ca:	88fb      	ldrh	r3, [r7, #6]
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d006      	beq.n	800a4e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a4d2:	4a05      	ldr	r2, [pc, #20]	; (800a4e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4d4:	88fb      	ldrh	r3, [r7, #6]
 800a4d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fc f870 	bl	80065c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	40013c00 	.word	0x40013c00

0800a4ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e12b      	b.n	800a756 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d106      	bne.n	800a518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7fb fcf0 	bl	8005ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2224      	movs	r2, #36	; 0x24
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0201 	bic.w	r2, r2, #1
 800a52e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a53e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a54e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a550:	f000 fd5a 	bl	800b008 <HAL_RCC_GetPCLK1Freq>
 800a554:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4a81      	ldr	r2, [pc, #516]	; (800a760 <HAL_I2C_Init+0x274>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d807      	bhi.n	800a570 <HAL_I2C_Init+0x84>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4a80      	ldr	r2, [pc, #512]	; (800a764 <HAL_I2C_Init+0x278>)
 800a564:	4293      	cmp	r3, r2
 800a566:	bf94      	ite	ls
 800a568:	2301      	movls	r3, #1
 800a56a:	2300      	movhi	r3, #0
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	e006      	b.n	800a57e <HAL_I2C_Init+0x92>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4a7d      	ldr	r2, [pc, #500]	; (800a768 <HAL_I2C_Init+0x27c>)
 800a574:	4293      	cmp	r3, r2
 800a576:	bf94      	ite	ls
 800a578:	2301      	movls	r3, #1
 800a57a:	2300      	movhi	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e0e7      	b.n	800a756 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	4a78      	ldr	r2, [pc, #480]	; (800a76c <HAL_I2C_Init+0x280>)
 800a58a:	fba2 2303 	umull	r2, r3, r2, r3
 800a58e:	0c9b      	lsrs	r3, r3, #18
 800a590:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	4a6a      	ldr	r2, [pc, #424]	; (800a760 <HAL_I2C_Init+0x274>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d802      	bhi.n	800a5c0 <HAL_I2C_Init+0xd4>
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	e009      	b.n	800a5d4 <HAL_I2C_Init+0xe8>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a5c6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ca:	4a69      	ldr	r2, [pc, #420]	; (800a770 <HAL_I2C_Init+0x284>)
 800a5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d0:	099b      	lsrs	r3, r3, #6
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	6812      	ldr	r2, [r2, #0]
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a5e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	495c      	ldr	r1, [pc, #368]	; (800a760 <HAL_I2C_Init+0x274>)
 800a5f0:	428b      	cmp	r3, r1
 800a5f2:	d819      	bhi.n	800a628 <HAL_I2C_Init+0x13c>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	1e59      	subs	r1, r3, #1
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800a602:	1c59      	adds	r1, r3, #1
 800a604:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a608:	400b      	ands	r3, r1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <HAL_I2C_Init+0x138>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	1e59      	subs	r1, r3, #1
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	fbb1 f3f3 	udiv	r3, r1, r3
 800a61c:	3301      	adds	r3, #1
 800a61e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a622:	e051      	b.n	800a6c8 <HAL_I2C_Init+0x1dc>
 800a624:	2304      	movs	r3, #4
 800a626:	e04f      	b.n	800a6c8 <HAL_I2C_Init+0x1dc>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d111      	bne.n	800a654 <HAL_I2C_Init+0x168>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	1e58      	subs	r0, r3, #1
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6859      	ldr	r1, [r3, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	440b      	add	r3, r1
 800a63e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a642:	3301      	adds	r3, #1
 800a644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bf0c      	ite	eq
 800a64c:	2301      	moveq	r3, #1
 800a64e:	2300      	movne	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	e012      	b.n	800a67a <HAL_I2C_Init+0x18e>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	1e58      	subs	r0, r3, #1
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6859      	ldr	r1, [r3, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	440b      	add	r3, r1
 800a662:	0099      	lsls	r1, r3, #2
 800a664:	440b      	add	r3, r1
 800a666:	fbb0 f3f3 	udiv	r3, r0, r3
 800a66a:	3301      	adds	r3, #1
 800a66c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a670:	2b00      	cmp	r3, #0
 800a672:	bf0c      	ite	eq
 800a674:	2301      	moveq	r3, #1
 800a676:	2300      	movne	r3, #0
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <HAL_I2C_Init+0x196>
 800a67e:	2301      	movs	r3, #1
 800a680:	e022      	b.n	800a6c8 <HAL_I2C_Init+0x1dc>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10e      	bne.n	800a6a8 <HAL_I2C_Init+0x1bc>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	1e58      	subs	r0, r3, #1
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6859      	ldr	r1, [r3, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	440b      	add	r3, r1
 800a698:	fbb0 f3f3 	udiv	r3, r0, r3
 800a69c:	3301      	adds	r3, #1
 800a69e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6a6:	e00f      	b.n	800a6c8 <HAL_I2C_Init+0x1dc>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	1e58      	subs	r0, r3, #1
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6859      	ldr	r1, [r3, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	440b      	add	r3, r1
 800a6b6:	0099      	lsls	r1, r3, #2
 800a6b8:	440b      	add	r3, r1
 800a6ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800a6be:	3301      	adds	r3, #1
 800a6c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	6809      	ldr	r1, [r1, #0]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	69da      	ldr	r2, [r3, #28]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a6f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6911      	ldr	r1, [r2, #16]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	68d2      	ldr	r2, [r2, #12]
 800a702:	4311      	orrs	r1, r2
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	6812      	ldr	r2, [r2, #0]
 800a708:	430b      	orrs	r3, r1
 800a70a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	695a      	ldr	r2, [r3, #20]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	431a      	orrs	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	430a      	orrs	r2, r1
 800a726:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0201 	orr.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2220      	movs	r2, #32
 800a742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	000186a0 	.word	0x000186a0
 800a764:	001e847f 	.word	0x001e847f
 800a768:	003d08ff 	.word	0x003d08ff
 800a76c:	431bde83 	.word	0x431bde83
 800a770:	10624dd3 	.word	0x10624dd3

0800a774 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e264      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d075      	beq.n	800a87e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a792:	4ba3      	ldr	r3, [pc, #652]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f003 030c 	and.w	r3, r3, #12
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	d00c      	beq.n	800a7b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a79e:	4ba0      	ldr	r3, [pc, #640]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a7a6:	2b08      	cmp	r3, #8
 800a7a8:	d112      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7aa:	4b9d      	ldr	r3, [pc, #628]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7b6:	d10b      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7b8:	4b99      	ldr	r3, [pc, #612]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d05b      	beq.n	800a87c <HAL_RCC_OscConfig+0x108>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d157      	bne.n	800a87c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e23f      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7d8:	d106      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x74>
 800a7da:	4b91      	ldr	r3, [pc, #580]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a90      	ldr	r2, [pc, #576]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a7e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	e01d      	b.n	800a824 <HAL_RCC_OscConfig+0xb0>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7f0:	d10c      	bne.n	800a80c <HAL_RCC_OscConfig+0x98>
 800a7f2:	4b8b      	ldr	r3, [pc, #556]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a8a      	ldr	r2, [pc, #552]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a7f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	4b88      	ldr	r3, [pc, #544]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a87      	ldr	r2, [pc, #540]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	e00b      	b.n	800a824 <HAL_RCC_OscConfig+0xb0>
 800a80c:	4b84      	ldr	r3, [pc, #528]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a83      	ldr	r2, [pc, #524]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	4b81      	ldr	r3, [pc, #516]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a80      	ldr	r2, [pc, #512]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a81e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d013      	beq.n	800a854 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a82c:	f7fe fda0 	bl	8009370 <HAL_GetTick>
 800a830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a832:	e008      	b.n	800a846 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a834:	f7fe fd9c 	bl	8009370 <HAL_GetTick>
 800a838:	4602      	mov	r2, r0
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	2b64      	cmp	r3, #100	; 0x64
 800a840:	d901      	bls.n	800a846 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e204      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a846:	4b76      	ldr	r3, [pc, #472]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0f0      	beq.n	800a834 <HAL_RCC_OscConfig+0xc0>
 800a852:	e014      	b.n	800a87e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a854:	f7fe fd8c 	bl	8009370 <HAL_GetTick>
 800a858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a85a:	e008      	b.n	800a86e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a85c:	f7fe fd88 	bl	8009370 <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b64      	cmp	r3, #100	; 0x64
 800a868:	d901      	bls.n	800a86e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e1f0      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a86e:	4b6c      	ldr	r3, [pc, #432]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1f0      	bne.n	800a85c <HAL_RCC_OscConfig+0xe8>
 800a87a:	e000      	b.n	800a87e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a87c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d063      	beq.n	800a952 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a88a:	4b65      	ldr	r3, [pc, #404]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 030c 	and.w	r3, r3, #12
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a896:	4b62      	ldr	r3, [pc, #392]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a89e:	2b08      	cmp	r3, #8
 800a8a0:	d11c      	bne.n	800a8dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8a2:	4b5f      	ldr	r3, [pc, #380]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d116      	bne.n	800a8dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8ae:	4b5c      	ldr	r3, [pc, #368]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x152>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d001      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e1c4      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8c6:	4b56      	ldr	r3, [pc, #344]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	4952      	ldr	r1, [pc, #328]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8da:	e03a      	b.n	800a952 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d020      	beq.n	800a926 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8e4:	4b4f      	ldr	r3, [pc, #316]	; (800aa24 <HAL_RCC_OscConfig+0x2b0>)
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ea:	f7fe fd41 	bl	8009370 <HAL_GetTick>
 800a8ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8f0:	e008      	b.n	800a904 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8f2:	f7fe fd3d 	bl	8009370 <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d901      	bls.n	800a904 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e1a5      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a904:	4b46      	ldr	r3, [pc, #280]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0302 	and.w	r3, r3, #2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d0f0      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a910:	4b43      	ldr	r3, [pc, #268]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	00db      	lsls	r3, r3, #3
 800a91e:	4940      	ldr	r1, [pc, #256]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a920:	4313      	orrs	r3, r2
 800a922:	600b      	str	r3, [r1, #0]
 800a924:	e015      	b.n	800a952 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a926:	4b3f      	ldr	r3, [pc, #252]	; (800aa24 <HAL_RCC_OscConfig+0x2b0>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92c:	f7fe fd20 	bl	8009370 <HAL_GetTick>
 800a930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a932:	e008      	b.n	800a946 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a934:	f7fe fd1c 	bl	8009370 <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d901      	bls.n	800a946 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e184      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a946:	4b36      	ldr	r3, [pc, #216]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f0      	bne.n	800a934 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0308 	and.w	r3, r3, #8
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d030      	beq.n	800a9c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d016      	beq.n	800a994 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a966:	4b30      	ldr	r3, [pc, #192]	; (800aa28 <HAL_RCC_OscConfig+0x2b4>)
 800a968:	2201      	movs	r2, #1
 800a96a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a96c:	f7fe fd00 	bl	8009370 <HAL_GetTick>
 800a970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a972:	e008      	b.n	800a986 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a974:	f7fe fcfc 	bl	8009370 <HAL_GetTick>
 800a978:	4602      	mov	r2, r0
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d901      	bls.n	800a986 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e164      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a986:	4b26      	ldr	r3, [pc, #152]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a98a:	f003 0302 	and.w	r3, r3, #2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0f0      	beq.n	800a974 <HAL_RCC_OscConfig+0x200>
 800a992:	e015      	b.n	800a9c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <HAL_RCC_OscConfig+0x2b4>)
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a99a:	f7fe fce9 	bl	8009370 <HAL_GetTick>
 800a99e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9a0:	e008      	b.n	800a9b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9a2:	f7fe fce5 	bl	8009370 <HAL_GetTick>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d901      	bls.n	800a9b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e14d      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9b4:	4b1a      	ldr	r3, [pc, #104]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a9b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9b8:	f003 0302 	and.w	r3, r3, #2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1f0      	bne.n	800a9a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 80a0 	beq.w	800ab0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9d2:	4b13      	ldr	r3, [pc, #76]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10f      	bne.n	800a9fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60bb      	str	r3, [r7, #8]
 800a9e2:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e6:	4a0e      	ldr	r2, [pc, #56]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a9ee:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <HAL_RCC_OscConfig+0x2ac>)
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9f6:	60bb      	str	r3, [r7, #8]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9fe:	4b0b      	ldr	r3, [pc, #44]	; (800aa2c <HAL_RCC_OscConfig+0x2b8>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d121      	bne.n	800aa4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa0a:	4b08      	ldr	r3, [pc, #32]	; (800aa2c <HAL_RCC_OscConfig+0x2b8>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a07      	ldr	r2, [pc, #28]	; (800aa2c <HAL_RCC_OscConfig+0x2b8>)
 800aa10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa16:	f7fe fcab 	bl	8009370 <HAL_GetTick>
 800aa1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa1c:	e011      	b.n	800aa42 <HAL_RCC_OscConfig+0x2ce>
 800aa1e:	bf00      	nop
 800aa20:	40023800 	.word	0x40023800
 800aa24:	42470000 	.word	0x42470000
 800aa28:	42470e80 	.word	0x42470e80
 800aa2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa30:	f7fe fc9e 	bl	8009370 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d901      	bls.n	800aa42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e106      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa42:	4b85      	ldr	r3, [pc, #532]	; (800ac58 <HAL_RCC_OscConfig+0x4e4>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0f0      	beq.n	800aa30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d106      	bne.n	800aa64 <HAL_RCC_OscConfig+0x2f0>
 800aa56:	4b81      	ldr	r3, [pc, #516]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5a:	4a80      	ldr	r2, [pc, #512]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa5c:	f043 0301 	orr.w	r3, r3, #1
 800aa60:	6713      	str	r3, [r2, #112]	; 0x70
 800aa62:	e01c      	b.n	800aa9e <HAL_RCC_OscConfig+0x32a>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	2b05      	cmp	r3, #5
 800aa6a:	d10c      	bne.n	800aa86 <HAL_RCC_OscConfig+0x312>
 800aa6c:	4b7b      	ldr	r3, [pc, #492]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa70:	4a7a      	ldr	r2, [pc, #488]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa72:	f043 0304 	orr.w	r3, r3, #4
 800aa76:	6713      	str	r3, [r2, #112]	; 0x70
 800aa78:	4b78      	ldr	r3, [pc, #480]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7c:	4a77      	ldr	r2, [pc, #476]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	6713      	str	r3, [r2, #112]	; 0x70
 800aa84:	e00b      	b.n	800aa9e <HAL_RCC_OscConfig+0x32a>
 800aa86:	4b75      	ldr	r3, [pc, #468]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa8a:	4a74      	ldr	r2, [pc, #464]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa8c:	f023 0301 	bic.w	r3, r3, #1
 800aa90:	6713      	str	r3, [r2, #112]	; 0x70
 800aa92:	4b72      	ldr	r3, [pc, #456]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa96:	4a71      	ldr	r2, [pc, #452]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aa98:	f023 0304 	bic.w	r3, r3, #4
 800aa9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d015      	beq.n	800aad2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaa6:	f7fe fc63 	bl	8009370 <HAL_GetTick>
 800aaaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaac:	e00a      	b.n	800aac4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aaae:	f7fe fc5f 	bl	8009370 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d901      	bls.n	800aac4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800aac0:	2303      	movs	r3, #3
 800aac2:	e0c5      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aac4:	4b65      	ldr	r3, [pc, #404]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0ee      	beq.n	800aaae <HAL_RCC_OscConfig+0x33a>
 800aad0:	e014      	b.n	800aafc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aad2:	f7fe fc4d 	bl	8009370 <HAL_GetTick>
 800aad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aad8:	e00a      	b.n	800aaf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aada:	f7fe fc49 	bl	8009370 <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d901      	bls.n	800aaf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e0af      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaf0:	4b5a      	ldr	r3, [pc, #360]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aaf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf4:	f003 0302 	and.w	r3, r3, #2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1ee      	bne.n	800aada <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d105      	bne.n	800ab0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab02:	4b56      	ldr	r3, [pc, #344]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800ab04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab06:	4a55      	ldr	r2, [pc, #340]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800ab08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 809b 	beq.w	800ac4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ab18:	4b50      	ldr	r3, [pc, #320]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	f003 030c 	and.w	r3, r3, #12
 800ab20:	2b08      	cmp	r3, #8
 800ab22:	d05c      	beq.n	800abde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d141      	bne.n	800abb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab2c:	4b4c      	ldr	r3, [pc, #304]	; (800ac60 <HAL_RCC_OscConfig+0x4ec>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab32:	f7fe fc1d 	bl	8009370 <HAL_GetTick>
 800ab36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab38:	e008      	b.n	800ab4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab3a:	f7fe fc19 	bl	8009370 <HAL_GetTick>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d901      	bls.n	800ab4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e081      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab4c:	4b43      	ldr	r3, [pc, #268]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1f0      	bne.n	800ab3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	69da      	ldr	r2, [r3, #28]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	431a      	orrs	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab66:	019b      	lsls	r3, r3, #6
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6e:	085b      	lsrs	r3, r3, #1
 800ab70:	3b01      	subs	r3, #1
 800ab72:	041b      	lsls	r3, r3, #16
 800ab74:	431a      	orrs	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	061b      	lsls	r3, r3, #24
 800ab7c:	4937      	ldr	r1, [pc, #220]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab82:	4b37      	ldr	r3, [pc, #220]	; (800ac60 <HAL_RCC_OscConfig+0x4ec>)
 800ab84:	2201      	movs	r2, #1
 800ab86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab88:	f7fe fbf2 	bl	8009370 <HAL_GetTick>
 800ab8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab8e:	e008      	b.n	800aba2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab90:	f7fe fbee 	bl	8009370 <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d901      	bls.n	800aba2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e056      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aba2:	4b2e      	ldr	r3, [pc, #184]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0f0      	beq.n	800ab90 <HAL_RCC_OscConfig+0x41c>
 800abae:	e04e      	b.n	800ac4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abb0:	4b2b      	ldr	r3, [pc, #172]	; (800ac60 <HAL_RCC_OscConfig+0x4ec>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abb6:	f7fe fbdb 	bl	8009370 <HAL_GetTick>
 800abba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abbc:	e008      	b.n	800abd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abbe:	f7fe fbd7 	bl	8009370 <HAL_GetTick>
 800abc2:	4602      	mov	r2, r0
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d901      	bls.n	800abd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e03f      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abd0:	4b22      	ldr	r3, [pc, #136]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f0      	bne.n	800abbe <HAL_RCC_OscConfig+0x44a>
 800abdc:	e037      	b.n	800ac4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d101      	bne.n	800abea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e032      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800abea:	4b1c      	ldr	r3, [pc, #112]	; (800ac5c <HAL_RCC_OscConfig+0x4e8>)
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d028      	beq.n	800ac4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d121      	bne.n	800ac4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d11a      	bne.n	800ac4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d111      	bne.n	800ac4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac30:	085b      	lsrs	r3, r3, #1
 800ac32:	3b01      	subs	r3, #1
 800ac34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d107      	bne.n	800ac4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d001      	beq.n	800ac4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	40007000 	.word	0x40007000
 800ac5c:	40023800 	.word	0x40023800
 800ac60:	42470060 	.word	0x42470060

0800ac64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e0cc      	b.n	800ae12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac78:	4b68      	ldr	r3, [pc, #416]	; (800ae1c <HAL_RCC_ClockConfig+0x1b8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0307 	and.w	r3, r3, #7
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d90c      	bls.n	800aca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac86:	4b65      	ldr	r3, [pc, #404]	; (800ae1c <HAL_RCC_ClockConfig+0x1b8>)
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac8e:	4b63      	ldr	r3, [pc, #396]	; (800ae1c <HAL_RCC_ClockConfig+0x1b8>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0307 	and.w	r3, r3, #7
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d001      	beq.n	800aca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e0b8      	b.n	800ae12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0302 	and.w	r3, r3, #2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d020      	beq.n	800acee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0304 	and.w	r3, r3, #4
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d005      	beq.n	800acc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800acb8:	4b59      	ldr	r3, [pc, #356]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	4a58      	ldr	r2, [pc, #352]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800acbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800acc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0308 	and.w	r3, r3, #8
 800accc:	2b00      	cmp	r3, #0
 800acce:	d005      	beq.n	800acdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800acd0:	4b53      	ldr	r3, [pc, #332]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	4a52      	ldr	r2, [pc, #328]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800acd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800acda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acdc:	4b50      	ldr	r3, [pc, #320]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	494d      	ldr	r1, [pc, #308]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800acea:	4313      	orrs	r3, r2
 800acec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d044      	beq.n	800ad84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d107      	bne.n	800ad12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad02:	4b47      	ldr	r3, [pc, #284]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d119      	bne.n	800ad42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e07f      	b.n	800ae12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d003      	beq.n	800ad22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d107      	bne.n	800ad32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad22:	4b3f      	ldr	r3, [pc, #252]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d109      	bne.n	800ad42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e06f      	b.n	800ae12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad32:	4b3b      	ldr	r3, [pc, #236]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e067      	b.n	800ae12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad42:	4b37      	ldr	r3, [pc, #220]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	f023 0203 	bic.w	r2, r3, #3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	4934      	ldr	r1, [pc, #208]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad54:	f7fe fb0c 	bl	8009370 <HAL_GetTick>
 800ad58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad5a:	e00a      	b.n	800ad72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad5c:	f7fe fb08 	bl	8009370 <HAL_GetTick>
 800ad60:	4602      	mov	r2, r0
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d901      	bls.n	800ad72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e04f      	b.n	800ae12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad72:	4b2b      	ldr	r3, [pc, #172]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f003 020c 	and.w	r2, r3, #12
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d1eb      	bne.n	800ad5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad84:	4b25      	ldr	r3, [pc, #148]	; (800ae1c <HAL_RCC_ClockConfig+0x1b8>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0307 	and.w	r3, r3, #7
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d20c      	bcs.n	800adac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad92:	4b22      	ldr	r3, [pc, #136]	; (800ae1c <HAL_RCC_ClockConfig+0x1b8>)
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad9a:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <HAL_RCC_ClockConfig+0x1b8>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0307 	and.w	r3, r3, #7
 800ada2:	683a      	ldr	r2, [r7, #0]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d001      	beq.n	800adac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e032      	b.n	800ae12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0304 	and.w	r3, r3, #4
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d008      	beq.n	800adca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800adb8:	4b19      	ldr	r3, [pc, #100]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	4916      	ldr	r1, [pc, #88]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0308 	and.w	r3, r3, #8
 800add2:	2b00      	cmp	r3, #0
 800add4:	d009      	beq.n	800adea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800add6:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	490e      	ldr	r1, [pc, #56]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800adea:	f000 f821 	bl	800ae30 <HAL_RCC_GetSysClockFreq>
 800adee:	4602      	mov	r2, r0
 800adf0:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <HAL_RCC_ClockConfig+0x1bc>)
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	091b      	lsrs	r3, r3, #4
 800adf6:	f003 030f 	and.w	r3, r3, #15
 800adfa:	490a      	ldr	r1, [pc, #40]	; (800ae24 <HAL_RCC_ClockConfig+0x1c0>)
 800adfc:	5ccb      	ldrb	r3, [r1, r3]
 800adfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ae02:	4a09      	ldr	r2, [pc, #36]	; (800ae28 <HAL_RCC_ClockConfig+0x1c4>)
 800ae04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae06:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <HAL_RCC_ClockConfig+0x1c8>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fa6c 	bl	80092e8 <HAL_InitTick>

  return HAL_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	40023c00 	.word	0x40023c00
 800ae20:	40023800 	.word	0x40023800
 800ae24:	080119ec 	.word	0x080119ec
 800ae28:	20000028 	.word	0x20000028
 800ae2c:	200000bc 	.word	0x200000bc

0800ae30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	607b      	str	r3, [r7, #4]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	2300      	movs	r3, #0
 800ae42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae48:	4b67      	ldr	r3, [pc, #412]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f003 030c 	and.w	r3, r3, #12
 800ae50:	2b08      	cmp	r3, #8
 800ae52:	d00d      	beq.n	800ae70 <HAL_RCC_GetSysClockFreq+0x40>
 800ae54:	2b08      	cmp	r3, #8
 800ae56:	f200 80bd 	bhi.w	800afd4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <HAL_RCC_GetSysClockFreq+0x34>
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d003      	beq.n	800ae6a <HAL_RCC_GetSysClockFreq+0x3a>
 800ae62:	e0b7      	b.n	800afd4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ae64:	4b61      	ldr	r3, [pc, #388]	; (800afec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ae66:	60bb      	str	r3, [r7, #8]
       break;
 800ae68:	e0b7      	b.n	800afda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ae6a:	4b60      	ldr	r3, [pc, #384]	; (800afec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ae6c:	60bb      	str	r3, [r7, #8]
      break;
 800ae6e:	e0b4      	b.n	800afda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ae70:	4b5d      	ldr	r3, [pc, #372]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ae7a:	4b5b      	ldr	r3, [pc, #364]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d04d      	beq.n	800af22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae86:	4b58      	ldr	r3, [pc, #352]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	099b      	lsrs	r3, r3, #6
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f04f 0300 	mov.w	r3, #0
 800ae92:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ae96:	f04f 0100 	mov.w	r1, #0
 800ae9a:	ea02 0800 	and.w	r8, r2, r0
 800ae9e:	ea03 0901 	and.w	r9, r3, r1
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f04f 0200 	mov.w	r2, #0
 800aeaa:	f04f 0300 	mov.w	r3, #0
 800aeae:	014b      	lsls	r3, r1, #5
 800aeb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800aeb4:	0142      	lsls	r2, r0, #5
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	4619      	mov	r1, r3
 800aeba:	ebb0 0008 	subs.w	r0, r0, r8
 800aebe:	eb61 0109 	sbc.w	r1, r1, r9
 800aec2:	f04f 0200 	mov.w	r2, #0
 800aec6:	f04f 0300 	mov.w	r3, #0
 800aeca:	018b      	lsls	r3, r1, #6
 800aecc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800aed0:	0182      	lsls	r2, r0, #6
 800aed2:	1a12      	subs	r2, r2, r0
 800aed4:	eb63 0301 	sbc.w	r3, r3, r1
 800aed8:	f04f 0000 	mov.w	r0, #0
 800aedc:	f04f 0100 	mov.w	r1, #0
 800aee0:	00d9      	lsls	r1, r3, #3
 800aee2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aee6:	00d0      	lsls	r0, r2, #3
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	eb12 0208 	adds.w	r2, r2, r8
 800aef0:	eb43 0309 	adc.w	r3, r3, r9
 800aef4:	f04f 0000 	mov.w	r0, #0
 800aef8:	f04f 0100 	mov.w	r1, #0
 800aefc:	0299      	lsls	r1, r3, #10
 800aefe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800af02:	0290      	lsls	r0, r2, #10
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4610      	mov	r0, r2
 800af0a:	4619      	mov	r1, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	461a      	mov	r2, r3
 800af10:	f04f 0300 	mov.w	r3, #0
 800af14:	f7f5 fe70 	bl	8000bf8 <__aeabi_uldivmod>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4613      	mov	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	e04a      	b.n	800afb8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af22:	4b31      	ldr	r3, [pc, #196]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	099b      	lsrs	r3, r3, #6
 800af28:	461a      	mov	r2, r3
 800af2a:	f04f 0300 	mov.w	r3, #0
 800af2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800af32:	f04f 0100 	mov.w	r1, #0
 800af36:	ea02 0400 	and.w	r4, r2, r0
 800af3a:	ea03 0501 	and.w	r5, r3, r1
 800af3e:	4620      	mov	r0, r4
 800af40:	4629      	mov	r1, r5
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	f04f 0300 	mov.w	r3, #0
 800af4a:	014b      	lsls	r3, r1, #5
 800af4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800af50:	0142      	lsls	r2, r0, #5
 800af52:	4610      	mov	r0, r2
 800af54:	4619      	mov	r1, r3
 800af56:	1b00      	subs	r0, r0, r4
 800af58:	eb61 0105 	sbc.w	r1, r1, r5
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	f04f 0300 	mov.w	r3, #0
 800af64:	018b      	lsls	r3, r1, #6
 800af66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800af6a:	0182      	lsls	r2, r0, #6
 800af6c:	1a12      	subs	r2, r2, r0
 800af6e:	eb63 0301 	sbc.w	r3, r3, r1
 800af72:	f04f 0000 	mov.w	r0, #0
 800af76:	f04f 0100 	mov.w	r1, #0
 800af7a:	00d9      	lsls	r1, r3, #3
 800af7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af80:	00d0      	lsls	r0, r2, #3
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	1912      	adds	r2, r2, r4
 800af88:	eb45 0303 	adc.w	r3, r5, r3
 800af8c:	f04f 0000 	mov.w	r0, #0
 800af90:	f04f 0100 	mov.w	r1, #0
 800af94:	0299      	lsls	r1, r3, #10
 800af96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800af9a:	0290      	lsls	r0, r2, #10
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4610      	mov	r0, r2
 800afa2:	4619      	mov	r1, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f04f 0300 	mov.w	r3, #0
 800afac:	f7f5 fe24 	bl	8000bf8 <__aeabi_uldivmod>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	4613      	mov	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800afb8:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	0c1b      	lsrs	r3, r3, #16
 800afbe:	f003 0303 	and.w	r3, r3, #3
 800afc2:	3301      	adds	r3, #1
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd0:	60bb      	str	r3, [r7, #8]
      break;
 800afd2:	e002      	b.n	800afda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800afd6:	60bb      	str	r3, [r7, #8]
      break;
 800afd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800afda:	68bb      	ldr	r3, [r7, #8]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800afe6:	bf00      	nop
 800afe8:	40023800 	.word	0x40023800
 800afec:	00f42400 	.word	0x00f42400

0800aff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aff4:	4b03      	ldr	r3, [pc, #12]	; (800b004 <HAL_RCC_GetHCLKFreq+0x14>)
 800aff6:	681b      	ldr	r3, [r3, #0]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000028 	.word	0x20000028

0800b008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b00c:	f7ff fff0 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b010:	4602      	mov	r2, r0
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	0a9b      	lsrs	r3, r3, #10
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	4903      	ldr	r1, [pc, #12]	; (800b02c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b01e:	5ccb      	ldrb	r3, [r1, r3]
 800b020:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b024:	4618      	mov	r0, r3
 800b026:	bd80      	pop	{r7, pc}
 800b028:	40023800 	.word	0x40023800
 800b02c:	080119fc 	.word	0x080119fc

0800b030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b034:	f7ff ffdc 	bl	800aff0 <HAL_RCC_GetHCLKFreq>
 800b038:	4602      	mov	r2, r0
 800b03a:	4b05      	ldr	r3, [pc, #20]	; (800b050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	0b5b      	lsrs	r3, r3, #13
 800b040:	f003 0307 	and.w	r3, r3, #7
 800b044:	4903      	ldr	r1, [pc, #12]	; (800b054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b046:	5ccb      	ldrb	r3, [r1, r3]
 800b048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40023800 	.word	0x40023800
 800b054:	080119fc 	.word	0x080119fc

0800b058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e07b      	b.n	800b162 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d108      	bne.n	800b084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b07a:	d009      	beq.n	800b090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	61da      	str	r2, [r3, #28]
 800b082:	e005      	b.n	800b090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7fa ff7c 	bl	8005fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0e2:	431a      	orrs	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	f003 0302 	and.w	r3, r3, #2
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	431a      	orrs	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b100:	431a      	orrs	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b10a:	431a      	orrs	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b114:	ea42 0103 	orr.w	r1, r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	430a      	orrs	r2, r1
 800b126:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	0c1b      	lsrs	r3, r3, #16
 800b12e:	f003 0104 	and.w	r1, r3, #4
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b136:	f003 0210 	and.w	r2, r3, #16
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	430a      	orrs	r2, r1
 800b140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	69da      	ldr	r2, [r3, #28]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e01a      	b.n	800b1b2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b192:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7fa ffa5 	bl	80060e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b088      	sub	sp, #32
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	603b      	str	r3, [r7, #0]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d101      	bne.n	800b1dc <HAL_SPI_Transmit+0x22>
 800b1d8:	2302      	movs	r3, #2
 800b1da:	e126      	b.n	800b42a <HAL_SPI_Transmit+0x270>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1e4:	f7fe f8c4 	bl	8009370 <HAL_GetTick>
 800b1e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b1ea:	88fb      	ldrh	r3, [r7, #6]
 800b1ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d002      	beq.n	800b200 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b1fe:	e10b      	b.n	800b418 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <HAL_SPI_Transmit+0x52>
 800b206:	88fb      	ldrh	r3, [r7, #6]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b210:	e102      	b.n	800b418 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2203      	movs	r2, #3
 800b216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	88fa      	ldrh	r2, [r7, #6]
 800b22a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	88fa      	ldrh	r2, [r7, #6]
 800b230:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b258:	d10f      	bne.n	800b27a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b268:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b278:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b284:	2b40      	cmp	r3, #64	; 0x40
 800b286:	d007      	beq.n	800b298 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2a0:	d14b      	bne.n	800b33a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <HAL_SPI_Transmit+0xf6>
 800b2aa:	8afb      	ldrh	r3, [r7, #22]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d13e      	bne.n	800b32e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b4:	881a      	ldrh	r2, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c0:	1c9a      	adds	r2, r3, #2
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b2d4:	e02b      	b.n	800b32e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d112      	bne.n	800b30a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	881a      	ldrh	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f4:	1c9a      	adds	r2, r3, #2
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	3b01      	subs	r3, #1
 800b302:	b29a      	uxth	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	86da      	strh	r2, [r3, #54]	; 0x36
 800b308:	e011      	b.n	800b32e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b30a:	f7fe f831 	bl	8009370 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	d803      	bhi.n	800b322 <HAL_SPI_Transmit+0x168>
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b320:	d102      	bne.n	800b328 <HAL_SPI_Transmit+0x16e>
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b328:	2303      	movs	r3, #3
 800b32a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b32c:	e074      	b.n	800b418 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b332:	b29b      	uxth	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1ce      	bne.n	800b2d6 <HAL_SPI_Transmit+0x11c>
 800b338:	e04c      	b.n	800b3d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <HAL_SPI_Transmit+0x18e>
 800b342:	8afb      	ldrh	r3, [r7, #22]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d140      	bne.n	800b3ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	330c      	adds	r3, #12
 800b352:	7812      	ldrb	r2, [r2, #0]
 800b354:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b364:	b29b      	uxth	r3, r3
 800b366:	3b01      	subs	r3, #1
 800b368:	b29a      	uxth	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b36e:	e02c      	b.n	800b3ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f003 0302 	and.w	r3, r3, #2
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d113      	bne.n	800b3a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	330c      	adds	r3, #12
 800b388:	7812      	ldrb	r2, [r2, #0]
 800b38a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b390:	1c5a      	adds	r2, r3, #1
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	3b01      	subs	r3, #1
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	86da      	strh	r2, [r3, #54]	; 0x36
 800b3a4:	e011      	b.n	800b3ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3a6:	f7fd ffe3 	bl	8009370 <HAL_GetTick>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d803      	bhi.n	800b3be <HAL_SPI_Transmit+0x204>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3bc:	d102      	bne.n	800b3c4 <HAL_SPI_Transmit+0x20a>
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d102      	bne.n	800b3ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b3c8:	e026      	b.n	800b418 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1cd      	bne.n	800b370 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f000 fcf7 	bl	800bdcc <SPI_EndRxTxTransaction>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2220      	movs	r2, #32
 800b3e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10a      	bne.n	800b408 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	613b      	str	r3, [r7, #16]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	613b      	str	r3, [r7, #16]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	613b      	str	r3, [r7, #16]
 800b406:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	77fb      	strb	r3, [r7, #31]
 800b414:	e000      	b.n	800b418 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b416:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b428:	7ffb      	ldrb	r3, [r7, #31]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b088      	sub	sp, #32
 800b436:	af02      	add	r7, sp, #8
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	603b      	str	r3, [r7, #0]
 800b43e:	4613      	mov	r3, r2
 800b440:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b44e:	d112      	bne.n	800b476 <HAL_SPI_Receive+0x44>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10e      	bne.n	800b476 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2204      	movs	r2, #4
 800b45c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b460:	88fa      	ldrh	r2, [r7, #6]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	4613      	mov	r3, r2
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	68b9      	ldr	r1, [r7, #8]
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f000 f8f1 	bl	800b654 <HAL_SPI_TransmitReceive>
 800b472:	4603      	mov	r3, r0
 800b474:	e0ea      	b.n	800b64c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_SPI_Receive+0x52>
 800b480:	2302      	movs	r3, #2
 800b482:	e0e3      	b.n	800b64c <HAL_SPI_Receive+0x21a>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b48c:	f7fd ff70 	bl	8009370 <HAL_GetTick>
 800b490:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d002      	beq.n	800b4a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b49e:	2302      	movs	r3, #2
 800b4a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b4a2:	e0ca      	b.n	800b63a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <HAL_SPI_Receive+0x7e>
 800b4aa:	88fb      	ldrh	r3, [r7, #6]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b4b4:	e0c1      	b.n	800b63a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2204      	movs	r2, #4
 800b4ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	88fa      	ldrh	r2, [r7, #6]
 800b4ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	88fa      	ldrh	r2, [r7, #6]
 800b4d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4fc:	d10f      	bne.n	800b51e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b50c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b51c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b528:	2b40      	cmp	r3, #64	; 0x40
 800b52a:	d007      	beq.n	800b53c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b53a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d162      	bne.n	800b60a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b544:	e02e      	b.n	800b5a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b01      	cmp	r3, #1
 800b552:	d115      	bne.n	800b580 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f103 020c 	add.w	r2, r3, #12
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b560:	7812      	ldrb	r2, [r2, #0]
 800b562:	b2d2      	uxtb	r2, r2
 800b564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b574:	b29b      	uxth	r3, r3
 800b576:	3b01      	subs	r3, #1
 800b578:	b29a      	uxth	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b57e:	e011      	b.n	800b5a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b580:	f7fd fef6 	bl	8009370 <HAL_GetTick>
 800b584:	4602      	mov	r2, r0
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d803      	bhi.n	800b598 <HAL_SPI_Receive+0x166>
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b596:	d102      	bne.n	800b59e <HAL_SPI_Receive+0x16c>
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d102      	bne.n	800b5a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b5a2:	e04a      	b.n	800b63a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1cb      	bne.n	800b546 <HAL_SPI_Receive+0x114>
 800b5ae:	e031      	b.n	800b614 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d113      	bne.n	800b5e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68da      	ldr	r2, [r3, #12]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	b292      	uxth	r2, r2
 800b5ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d0:	1c9a      	adds	r2, r3, #2
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5e4:	e011      	b.n	800b60a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5e6:	f7fd fec3 	bl	8009370 <HAL_GetTick>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d803      	bhi.n	800b5fe <HAL_SPI_Receive+0x1cc>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fc:	d102      	bne.n	800b604 <HAL_SPI_Receive+0x1d2>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b604:	2303      	movs	r3, #3
 800b606:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b608:	e017      	b.n	800b63a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b60e:	b29b      	uxth	r3, r3
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1cd      	bne.n	800b5b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 fb71 	bl	800bd00 <SPI_EndRxTransaction>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2220      	movs	r2, #32
 800b628:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d002      	beq.n	800b638 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	75fb      	strb	r3, [r7, #23]
 800b636:	e000      	b.n	800b63a <HAL_SPI_Receive+0x208>
  }

error :
 800b638:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b08c      	sub	sp, #48	; 0x30
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
 800b660:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b662:	2301      	movs	r3, #1
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b672:	2b01      	cmp	r3, #1
 800b674:	d101      	bne.n	800b67a <HAL_SPI_TransmitReceive+0x26>
 800b676:	2302      	movs	r3, #2
 800b678:	e18a      	b.n	800b990 <HAL_SPI_TransmitReceive+0x33c>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b682:	f7fd fe75 	bl	8009370 <HAL_GetTick>
 800b686:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b698:	887b      	ldrh	r3, [r7, #2]
 800b69a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b69c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d00f      	beq.n	800b6c4 <HAL_SPI_TransmitReceive+0x70>
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6aa:	d107      	bne.n	800b6bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d103      	bne.n	800b6bc <HAL_SPI_TransmitReceive+0x68>
 800b6b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6b8:	2b04      	cmp	r3, #4
 800b6ba:	d003      	beq.n	800b6c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6c2:	e15b      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d005      	beq.n	800b6d6 <HAL_SPI_TransmitReceive+0x82>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <HAL_SPI_TransmitReceive+0x82>
 800b6d0:	887b      	ldrh	r3, [r7, #2]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d103      	bne.n	800b6de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6dc:	e14e      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	d003      	beq.n	800b6f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2205      	movs	r2, #5
 800b6ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	887a      	ldrh	r2, [r7, #2]
 800b702:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	887a      	ldrh	r2, [r7, #2]
 800b708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	887a      	ldrh	r2, [r7, #2]
 800b714:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	887a      	ldrh	r2, [r7, #2]
 800b71a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b732:	2b40      	cmp	r3, #64	; 0x40
 800b734:	d007      	beq.n	800b746 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b744:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b74e:	d178      	bne.n	800b842 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <HAL_SPI_TransmitReceive+0x10a>
 800b758:	8b7b      	ldrh	r3, [r7, #26]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d166      	bne.n	800b82c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b762:	881a      	ldrh	r2, [r3, #0]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76e:	1c9a      	adds	r2, r3, #2
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b778:	b29b      	uxth	r3, r3
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b782:	e053      	b.n	800b82c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f003 0302 	and.w	r3, r3, #2
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d11b      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x176>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b796:	b29b      	uxth	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d016      	beq.n	800b7ca <HAL_SPI_TransmitReceive+0x176>
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d113      	bne.n	800b7ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a6:	881a      	ldrh	r2, [r3, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	1c9a      	adds	r2, r3, #2
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d119      	bne.n	800b80c <HAL_SPI_TransmitReceive+0x1b8>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d014      	beq.n	800b80c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ec:	b292      	uxth	r2, r2
 800b7ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f4:	1c9a      	adds	r2, r3, #2
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	3b01      	subs	r3, #1
 800b802:	b29a      	uxth	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b808:	2301      	movs	r3, #1
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b80c:	f7fd fdb0 	bl	8009370 <HAL_GetTick>
 800b810:	4602      	mov	r2, r0
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b818:	429a      	cmp	r2, r3
 800b81a:	d807      	bhi.n	800b82c <HAL_SPI_TransmitReceive+0x1d8>
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b822:	d003      	beq.n	800b82c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b82a:	e0a7      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b830:	b29b      	uxth	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1a6      	bne.n	800b784 <HAL_SPI_TransmitReceive+0x130>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1a1      	bne.n	800b784 <HAL_SPI_TransmitReceive+0x130>
 800b840:	e07c      	b.n	800b93c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d002      	beq.n	800b850 <HAL_SPI_TransmitReceive+0x1fc>
 800b84a:	8b7b      	ldrh	r3, [r7, #26]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d16b      	bne.n	800b928 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	330c      	adds	r3, #12
 800b85a:	7812      	ldrb	r2, [r2, #0]
 800b85c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	3b01      	subs	r3, #1
 800b870:	b29a      	uxth	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b876:	e057      	b.n	800b928 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b02      	cmp	r3, #2
 800b884:	d11c      	bne.n	800b8c0 <HAL_SPI_TransmitReceive+0x26c>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d017      	beq.n	800b8c0 <HAL_SPI_TransmitReceive+0x26c>
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	2b01      	cmp	r3, #1
 800b894:	d114      	bne.n	800b8c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	330c      	adds	r3, #12
 800b8a0:	7812      	ldrb	r2, [r2, #0]
 800b8a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d119      	bne.n	800b902 <HAL_SPI_TransmitReceive+0x2ae>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d014      	beq.n	800b902 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8fe:	2301      	movs	r3, #1
 800b900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b902:	f7fd fd35 	bl	8009370 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b90e:	429a      	cmp	r2, r3
 800b910:	d803      	bhi.n	800b91a <HAL_SPI_TransmitReceive+0x2c6>
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b918:	d102      	bne.n	800b920 <HAL_SPI_TransmitReceive+0x2cc>
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d103      	bne.n	800b928 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b926:	e029      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1a2      	bne.n	800b878 <HAL_SPI_TransmitReceive+0x224>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b936:	b29b      	uxth	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d19d      	bne.n	800b878 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b93e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 fa43 	bl	800bdcc <SPI_EndRxTxTransaction>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d006      	beq.n	800b95a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2220      	movs	r2, #32
 800b956:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b958:	e010      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10b      	bne.n	800b97a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b962:	2300      	movs	r3, #0
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	e000      	b.n	800b97c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b97a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b98c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b990:	4618      	mov	r0, r3
 800b992:	3730      	adds	r7, #48	; 0x30
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	099b      	lsrs	r3, r3, #6
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10f      	bne.n	800b9dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00a      	beq.n	800b9dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	099b      	lsrs	r3, r3, #6
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d004      	beq.n	800b9dc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	4798      	blx	r3
    return;
 800b9da:	e0d7      	b.n	800bb8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	085b      	lsrs	r3, r3, #1
 800b9e0:	f003 0301 	and.w	r3, r3, #1
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00a      	beq.n	800b9fe <HAL_SPI_IRQHandler+0x66>
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	09db      	lsrs	r3, r3, #7
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d004      	beq.n	800b9fe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	4798      	blx	r3
    return;
 800b9fc:	e0c6      	b.n	800bb8c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	095b      	lsrs	r3, r3, #5
 800ba02:	f003 0301 	and.w	r3, r3, #1
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10c      	bne.n	800ba24 <HAL_SPI_IRQHandler+0x8c>
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	099b      	lsrs	r3, r3, #6
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	0a1b      	lsrs	r3, r3, #8
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 80b4 	beq.w	800bb8c <HAL_SPI_IRQHandler+0x1f4>
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	095b      	lsrs	r3, r3, #5
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 80ad 	beq.w	800bb8c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	099b      	lsrs	r3, r3, #6
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d023      	beq.n	800ba86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d011      	beq.n	800ba6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba4e:	f043 0204 	orr.w	r2, r3, #4
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba56:	2300      	movs	r3, #0
 800ba58:	617b      	str	r3, [r7, #20]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	e00b      	b.n	800ba86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba6e:	2300      	movs	r3, #0
 800ba70:	613b      	str	r3, [r7, #16]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	613b      	str	r3, [r7, #16]
 800ba82:	693b      	ldr	r3, [r7, #16]
        return;
 800ba84:	e082      	b.n	800bb8c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	095b      	lsrs	r3, r3, #5
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d014      	beq.n	800babc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba96:	f043 0201 	orr.w	r2, r3, #1
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60fb      	str	r3, [r7, #12]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	0a1b      	lsrs	r3, r3, #8
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00c      	beq.n	800bae2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bacc:	f043 0208 	orr.w	r2, r3, #8
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bad4:	2300      	movs	r3, #0
 800bad6:	60bb      	str	r3, [r7, #8]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	60bb      	str	r3, [r7, #8]
 800bae0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d04f      	beq.n	800bb8a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	685a      	ldr	r2, [r3, #4]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800baf8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	f003 0302 	and.w	r3, r3, #2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d104      	bne.n	800bb16 <HAL_SPI_IRQHandler+0x17e>
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d034      	beq.n	800bb80 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f022 0203 	bic.w	r2, r2, #3
 800bb24:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d011      	beq.n	800bb52 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb32:	4a18      	ldr	r2, [pc, #96]	; (800bb94 <HAL_SPI_IRQHandler+0x1fc>)
 800bb34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fe f9e7 	bl	8009f0e <HAL_DMA_Abort_IT>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d005      	beq.n	800bb52 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d016      	beq.n	800bb88 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb5e:	4a0d      	ldr	r2, [pc, #52]	; (800bb94 <HAL_SPI_IRQHandler+0x1fc>)
 800bb60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe f9d1 	bl	8009f0e <HAL_DMA_Abort_IT>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bb7e:	e003      	b.n	800bb88 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f809 	bl	800bb98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bb86:	e000      	b.n	800bb8a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bb88:	bf00      	nop
    return;
 800bb8a:	bf00      	nop
  }
}
 800bb8c:	3720      	adds	r7, #32
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	0800bbc9 	.word	0x0800bbc9

0800bb98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbba:	b2db      	uxtb	r3, r3
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f7ff ffd8 	bl	800bb98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bbe8:	bf00      	nop
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc00:	f7fd fbb6 	bl	8009370 <HAL_GetTick>
 800bc04:	4602      	mov	r2, r0
 800bc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bc10:	f7fd fbae 	bl	8009370 <HAL_GetTick>
 800bc14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bc16:	4b39      	ldr	r3, [pc, #228]	; (800bcfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	015b      	lsls	r3, r3, #5
 800bc1c:	0d1b      	lsrs	r3, r3, #20
 800bc1e:	69fa      	ldr	r2, [r7, #28]
 800bc20:	fb02 f303 	mul.w	r3, r2, r3
 800bc24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc26:	e054      	b.n	800bcd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2e:	d050      	beq.n	800bcd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc30:	f7fd fb9e 	bl	8009370 <HAL_GetTick>
 800bc34:	4602      	mov	r2, r0
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	69fa      	ldr	r2, [r7, #28]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d902      	bls.n	800bc46 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d13d      	bne.n	800bcc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc5e:	d111      	bne.n	800bc84 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc68:	d004      	beq.n	800bc74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc72:	d107      	bne.n	800bc84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc8c:	d10f      	bne.n	800bcae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bcac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e017      	b.n	800bcf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	689a      	ldr	r2, [r3, #8]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	4013      	ands	r3, r2
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	bf0c      	ite	eq
 800bce2:	2301      	moveq	r3, #1
 800bce4:	2300      	movne	r3, #0
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d19b      	bne.n	800bc28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000028 	.word	0x20000028

0800bd00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af02      	add	r7, sp, #8
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd14:	d111      	bne.n	800bd3a <SPI_EndRxTransaction+0x3a>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd1e:	d004      	beq.n	800bd2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd28:	d107      	bne.n	800bd3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd42:	d12a      	bne.n	800bd9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd4c:	d012      	beq.n	800bd74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2200      	movs	r2, #0
 800bd56:	2180      	movs	r1, #128	; 0x80
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f7ff ff49 	bl	800bbf0 <SPI_WaitFlagStateUntilTimeout>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d02d      	beq.n	800bdc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd68:	f043 0220 	orr.w	r2, r3, #32
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e026      	b.n	800bdc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7ff ff36 	bl	800bbf0 <SPI_WaitFlagStateUntilTimeout>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d01a      	beq.n	800bdc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd8e:	f043 0220 	orr.w	r2, r3, #32
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e013      	b.n	800bdc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	2200      	movs	r2, #0
 800bda2:	2101      	movs	r1, #1
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f7ff ff23 	bl	800bbf0 <SPI_WaitFlagStateUntilTimeout>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d007      	beq.n	800bdc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb4:	f043 0220 	orr.w	r2, r3, #32
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e000      	b.n	800bdc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
	...

0800bdcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af02      	add	r7, sp, #8
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bdd8:	4b1b      	ldr	r3, [pc, #108]	; (800be48 <SPI_EndRxTxTransaction+0x7c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a1b      	ldr	r2, [pc, #108]	; (800be4c <SPI_EndRxTxTransaction+0x80>)
 800bdde:	fba2 2303 	umull	r2, r3, r2, r3
 800bde2:	0d5b      	lsrs	r3, r3, #21
 800bde4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bde8:	fb02 f303 	mul.w	r3, r2, r3
 800bdec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdf6:	d112      	bne.n	800be1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2200      	movs	r2, #0
 800be00:	2180      	movs	r1, #128	; 0x80
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f7ff fef4 	bl	800bbf0 <SPI_WaitFlagStateUntilTimeout>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d016      	beq.n	800be3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be12:	f043 0220 	orr.w	r2, r3, #32
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e00f      	b.n	800be3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00a      	beq.n	800be3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	3b01      	subs	r3, #1
 800be28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be34:	2b80      	cmp	r3, #128	; 0x80
 800be36:	d0f2      	beq.n	800be1e <SPI_EndRxTxTransaction+0x52>
 800be38:	e000      	b.n	800be3c <SPI_EndRxTxTransaction+0x70>
        break;
 800be3a:	bf00      	nop
  }

  return HAL_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	20000028 	.word	0x20000028
 800be4c:	165e9f81 	.word	0x165e9f81

0800be50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e041      	b.n	800bee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d106      	bne.n	800be7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7fa f96c 	bl	8006154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2202      	movs	r2, #2
 800be80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	3304      	adds	r3, #4
 800be8c:	4619      	mov	r1, r3
 800be8e:	4610      	mov	r0, r2
 800be90:	f000 fe44 	bl	800cb1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2201      	movs	r2, #1
 800be98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d001      	beq.n	800bf08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e044      	b.n	800bf92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68da      	ldr	r2, [r3, #12]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f042 0201 	orr.w	r2, r2, #1
 800bf1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a1e      	ldr	r2, [pc, #120]	; (800bfa0 <HAL_TIM_Base_Start_IT+0xb0>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d018      	beq.n	800bf5c <HAL_TIM_Base_Start_IT+0x6c>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf32:	d013      	beq.n	800bf5c <HAL_TIM_Base_Start_IT+0x6c>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a1a      	ldr	r2, [pc, #104]	; (800bfa4 <HAL_TIM_Base_Start_IT+0xb4>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d00e      	beq.n	800bf5c <HAL_TIM_Base_Start_IT+0x6c>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a19      	ldr	r2, [pc, #100]	; (800bfa8 <HAL_TIM_Base_Start_IT+0xb8>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d009      	beq.n	800bf5c <HAL_TIM_Base_Start_IT+0x6c>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a17      	ldr	r2, [pc, #92]	; (800bfac <HAL_TIM_Base_Start_IT+0xbc>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d004      	beq.n	800bf5c <HAL_TIM_Base_Start_IT+0x6c>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a16      	ldr	r2, [pc, #88]	; (800bfb0 <HAL_TIM_Base_Start_IT+0xc0>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d111      	bne.n	800bf80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	f003 0307 	and.w	r3, r3, #7
 800bf66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2b06      	cmp	r3, #6
 800bf6c:	d010      	beq.n	800bf90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f042 0201 	orr.w	r2, r2, #1
 800bf7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf7e:	e007      	b.n	800bf90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f042 0201 	orr.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	40010000 	.word	0x40010000
 800bfa4:	40000400 	.word	0x40000400
 800bfa8:	40000800 	.word	0x40000800
 800bfac:	40000c00 	.word	0x40000c00
 800bfb0:	40014000 	.word	0x40014000

0800bfb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e041      	b.n	800c04a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f839 	bl	800c052 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3304      	adds	r3, #4
 800bff0:	4619      	mov	r1, r3
 800bff2:	4610      	mov	r0, r2
 800bff4:	f000 fd92 	bl	800cb1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
	...

0800c068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d109      	bne.n	800c08c <HAL_TIM_PWM_Start+0x24>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b01      	cmp	r3, #1
 800c082:	bf14      	ite	ne
 800c084:	2301      	movne	r3, #1
 800c086:	2300      	moveq	r3, #0
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	e022      	b.n	800c0d2 <HAL_TIM_PWM_Start+0x6a>
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2b04      	cmp	r3, #4
 800c090:	d109      	bne.n	800c0a6 <HAL_TIM_PWM_Start+0x3e>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	bf14      	ite	ne
 800c09e:	2301      	movne	r3, #1
 800c0a0:	2300      	moveq	r3, #0
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	e015      	b.n	800c0d2 <HAL_TIM_PWM_Start+0x6a>
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b08      	cmp	r3, #8
 800c0aa:	d109      	bne.n	800c0c0 <HAL_TIM_PWM_Start+0x58>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	bf14      	ite	ne
 800c0b8:	2301      	movne	r3, #1
 800c0ba:	2300      	moveq	r3, #0
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	e008      	b.n	800c0d2 <HAL_TIM_PWM_Start+0x6a>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	bf14      	ite	ne
 800c0cc:	2301      	movne	r3, #1
 800c0ce:	2300      	moveq	r3, #0
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e068      	b.n	800c1ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d104      	bne.n	800c0ea <HAL_TIM_PWM_Start+0x82>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0e8:	e013      	b.n	800c112 <HAL_TIM_PWM_Start+0xaa>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b04      	cmp	r3, #4
 800c0ee:	d104      	bne.n	800c0fa <HAL_TIM_PWM_Start+0x92>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0f8:	e00b      	b.n	800c112 <HAL_TIM_PWM_Start+0xaa>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b08      	cmp	r3, #8
 800c0fe:	d104      	bne.n	800c10a <HAL_TIM_PWM_Start+0xa2>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2202      	movs	r2, #2
 800c104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c108:	e003      	b.n	800c112 <HAL_TIM_PWM_Start+0xaa>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2202      	movs	r2, #2
 800c10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2201      	movs	r2, #1
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f001 f8c2 	bl	800d2a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a23      	ldr	r2, [pc, #140]	; (800c1b4 <HAL_TIM_PWM_Start+0x14c>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d107      	bne.n	800c13a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c138:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a1d      	ldr	r2, [pc, #116]	; (800c1b4 <HAL_TIM_PWM_Start+0x14c>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d018      	beq.n	800c176 <HAL_TIM_PWM_Start+0x10e>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c14c:	d013      	beq.n	800c176 <HAL_TIM_PWM_Start+0x10e>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a19      	ldr	r2, [pc, #100]	; (800c1b8 <HAL_TIM_PWM_Start+0x150>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00e      	beq.n	800c176 <HAL_TIM_PWM_Start+0x10e>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a17      	ldr	r2, [pc, #92]	; (800c1bc <HAL_TIM_PWM_Start+0x154>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d009      	beq.n	800c176 <HAL_TIM_PWM_Start+0x10e>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a16      	ldr	r2, [pc, #88]	; (800c1c0 <HAL_TIM_PWM_Start+0x158>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d004      	beq.n	800c176 <HAL_TIM_PWM_Start+0x10e>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a14      	ldr	r2, [pc, #80]	; (800c1c4 <HAL_TIM_PWM_Start+0x15c>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d111      	bne.n	800c19a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f003 0307 	and.w	r3, r3, #7
 800c180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b06      	cmp	r3, #6
 800c186:	d010      	beq.n	800c1aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0201 	orr.w	r2, r2, #1
 800c196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c198:	e007      	b.n	800c1aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f042 0201 	orr.w	r2, r2, #1
 800c1a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	40010000 	.word	0x40010000
 800c1b8:	40000400 	.word	0x40000400
 800c1bc:	40000800 	.word	0x40000800
 800c1c0:	40000c00 	.word	0x40000c00
 800c1c4:	40014000 	.word	0x40014000

0800c1c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d101      	bne.n	800c1da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e041      	b.n	800c25e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d106      	bne.n	800c1f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f839 	bl	800c266 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	3304      	adds	r3, #4
 800c204:	4619      	mov	r1, r3
 800c206:	4610      	mov	r0, r2
 800c208:	f000 fc88 	bl	800cb1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c266:	b480      	push	{r7}
 800c268:	b083      	sub	sp, #12
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c26e:	bf00      	nop
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
	...

0800c27c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d104      	bne.n	800c296 <HAL_TIM_IC_Start_IT+0x1a>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c292:	b2db      	uxtb	r3, r3
 800c294:	e013      	b.n	800c2be <HAL_TIM_IC_Start_IT+0x42>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b04      	cmp	r3, #4
 800c29a:	d104      	bne.n	800c2a6 <HAL_TIM_IC_Start_IT+0x2a>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	e00b      	b.n	800c2be <HAL_TIM_IC_Start_IT+0x42>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	d104      	bne.n	800c2b6 <HAL_TIM_IC_Start_IT+0x3a>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	e003      	b.n	800c2be <HAL_TIM_IC_Start_IT+0x42>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d104      	bne.n	800c2d0 <HAL_TIM_IC_Start_IT+0x54>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	e013      	b.n	800c2f8 <HAL_TIM_IC_Start_IT+0x7c>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	d104      	bne.n	800c2e0 <HAL_TIM_IC_Start_IT+0x64>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	e00b      	b.n	800c2f8 <HAL_TIM_IC_Start_IT+0x7c>
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	2b08      	cmp	r3, #8
 800c2e4:	d104      	bne.n	800c2f0 <HAL_TIM_IC_Start_IT+0x74>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	e003      	b.n	800c2f8 <HAL_TIM_IC_Start_IT+0x7c>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d102      	bne.n	800c306 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c300:	7bbb      	ldrb	r3, [r7, #14]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d001      	beq.n	800c30a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e0bd      	b.n	800c486 <HAL_TIM_IC_Start_IT+0x20a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d104      	bne.n	800c31a <HAL_TIM_IC_Start_IT+0x9e>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2202      	movs	r2, #2
 800c314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c318:	e013      	b.n	800c342 <HAL_TIM_IC_Start_IT+0xc6>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2b04      	cmp	r3, #4
 800c31e:	d104      	bne.n	800c32a <HAL_TIM_IC_Start_IT+0xae>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2202      	movs	r2, #2
 800c324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c328:	e00b      	b.n	800c342 <HAL_TIM_IC_Start_IT+0xc6>
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	2b08      	cmp	r3, #8
 800c32e:	d104      	bne.n	800c33a <HAL_TIM_IC_Start_IT+0xbe>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2202      	movs	r2, #2
 800c334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c338:	e003      	b.n	800c342 <HAL_TIM_IC_Start_IT+0xc6>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2202      	movs	r2, #2
 800c33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d104      	bne.n	800c352 <HAL_TIM_IC_Start_IT+0xd6>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2202      	movs	r2, #2
 800c34c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c350:	e013      	b.n	800c37a <HAL_TIM_IC_Start_IT+0xfe>
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b04      	cmp	r3, #4
 800c356:	d104      	bne.n	800c362 <HAL_TIM_IC_Start_IT+0xe6>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2202      	movs	r2, #2
 800c35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c360:	e00b      	b.n	800c37a <HAL_TIM_IC_Start_IT+0xfe>
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	2b08      	cmp	r3, #8
 800c366:	d104      	bne.n	800c372 <HAL_TIM_IC_Start_IT+0xf6>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c370:	e003      	b.n	800c37a <HAL_TIM_IC_Start_IT+0xfe>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2202      	movs	r2, #2
 800c376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b0c      	cmp	r3, #12
 800c37e:	d841      	bhi.n	800c404 <HAL_TIM_IC_Start_IT+0x188>
 800c380:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <HAL_TIM_IC_Start_IT+0x10c>)
 800c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c386:	bf00      	nop
 800c388:	0800c3bd 	.word	0x0800c3bd
 800c38c:	0800c405 	.word	0x0800c405
 800c390:	0800c405 	.word	0x0800c405
 800c394:	0800c405 	.word	0x0800c405
 800c398:	0800c3cf 	.word	0x0800c3cf
 800c39c:	0800c405 	.word	0x0800c405
 800c3a0:	0800c405 	.word	0x0800c405
 800c3a4:	0800c405 	.word	0x0800c405
 800c3a8:	0800c3e1 	.word	0x0800c3e1
 800c3ac:	0800c405 	.word	0x0800c405
 800c3b0:	0800c405 	.word	0x0800c405
 800c3b4:	0800c405 	.word	0x0800c405
 800c3b8:	0800c3f3 	.word	0x0800c3f3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68da      	ldr	r2, [r3, #12]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0202 	orr.w	r2, r2, #2
 800c3ca:	60da      	str	r2, [r3, #12]
      break;
 800c3cc:	e01b      	b.n	800c406 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f042 0204 	orr.w	r2, r2, #4
 800c3dc:	60da      	str	r2, [r3, #12]
      break;
 800c3de:	e012      	b.n	800c406 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68da      	ldr	r2, [r3, #12]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f042 0208 	orr.w	r2, r2, #8
 800c3ee:	60da      	str	r2, [r3, #12]
      break;
 800c3f0:	e009      	b.n	800c406 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68da      	ldr	r2, [r3, #12]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0210 	orr.w	r2, r2, #16
 800c400:	60da      	str	r2, [r3, #12]
      break;
 800c402:	e000      	b.n	800c406 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800c404:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2201      	movs	r2, #1
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 ff48 	bl	800d2a4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a1d      	ldr	r2, [pc, #116]	; (800c490 <HAL_TIM_IC_Start_IT+0x214>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d018      	beq.n	800c450 <HAL_TIM_IC_Start_IT+0x1d4>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c426:	d013      	beq.n	800c450 <HAL_TIM_IC_Start_IT+0x1d4>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a19      	ldr	r2, [pc, #100]	; (800c494 <HAL_TIM_IC_Start_IT+0x218>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d00e      	beq.n	800c450 <HAL_TIM_IC_Start_IT+0x1d4>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a18      	ldr	r2, [pc, #96]	; (800c498 <HAL_TIM_IC_Start_IT+0x21c>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d009      	beq.n	800c450 <HAL_TIM_IC_Start_IT+0x1d4>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a16      	ldr	r2, [pc, #88]	; (800c49c <HAL_TIM_IC_Start_IT+0x220>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d004      	beq.n	800c450 <HAL_TIM_IC_Start_IT+0x1d4>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a15      	ldr	r2, [pc, #84]	; (800c4a0 <HAL_TIM_IC_Start_IT+0x224>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d111      	bne.n	800c474 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	f003 0307 	and.w	r3, r3, #7
 800c45a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b06      	cmp	r3, #6
 800c460:	d010      	beq.n	800c484 <HAL_TIM_IC_Start_IT+0x208>
    {
      __HAL_TIM_ENABLE(htim);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f042 0201 	orr.w	r2, r2, #1
 800c470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c472:	e007      	b.n	800c484 <HAL_TIM_IC_Start_IT+0x208>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f042 0201 	orr.w	r2, r2, #1
 800c482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	40010000 	.word	0x40010000
 800c494:	40000400 	.word	0x40000400
 800c498:	40000800 	.word	0x40000800
 800c49c:	40000c00 	.word	0x40000c00
 800c4a0:	40014000 	.word	0x40014000

0800c4a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	f003 0302 	and.w	r3, r3, #2
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d122      	bne.n	800c500 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f003 0302 	and.w	r3, r3, #2
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d11b      	bne.n	800c500 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f06f 0202 	mvn.w	r2, #2
 800c4d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	f003 0303 	and.w	r3, r3, #3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7f8 f84a 	bl	8004580 <HAL_TIM_IC_CaptureCallback>
 800c4ec:	e005      	b.n	800c4fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 faf6 	bl	800cae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fafd 	bl	800caf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	f003 0304 	and.w	r3, r3, #4
 800c50a:	2b04      	cmp	r3, #4
 800c50c:	d122      	bne.n	800c554 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	f003 0304 	and.w	r3, r3, #4
 800c518:	2b04      	cmp	r3, #4
 800c51a:	d11b      	bne.n	800c554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f06f 0204 	mvn.w	r2, #4
 800c524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2202      	movs	r2, #2
 800c52a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c536:	2b00      	cmp	r3, #0
 800c538:	d003      	beq.n	800c542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7f8 f820 	bl	8004580 <HAL_TIM_IC_CaptureCallback>
 800c540:	e005      	b.n	800c54e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 facc 	bl	800cae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fad3 	bl	800caf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	f003 0308 	and.w	r3, r3, #8
 800c55e:	2b08      	cmp	r3, #8
 800c560:	d122      	bne.n	800c5a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	f003 0308 	and.w	r3, r3, #8
 800c56c:	2b08      	cmp	r3, #8
 800c56e:	d11b      	bne.n	800c5a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f06f 0208 	mvn.w	r2, #8
 800c578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2204      	movs	r2, #4
 800c57e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	f003 0303 	and.w	r3, r3, #3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d003      	beq.n	800c596 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7f7 fff6 	bl	8004580 <HAL_TIM_IC_CaptureCallback>
 800c594:	e005      	b.n	800c5a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 faa2 	bl	800cae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 faa9 	bl	800caf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	f003 0310 	and.w	r3, r3, #16
 800c5b2:	2b10      	cmp	r3, #16
 800c5b4:	d122      	bne.n	800c5fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	f003 0310 	and.w	r3, r3, #16
 800c5c0:	2b10      	cmp	r3, #16
 800c5c2:	d11b      	bne.n	800c5fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f06f 0210 	mvn.w	r2, #16
 800c5cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2208      	movs	r2, #8
 800c5d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	69db      	ldr	r3, [r3, #28]
 800c5da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d003      	beq.n	800c5ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7f7 ffcc 	bl	8004580 <HAL_TIM_IC_CaptureCallback>
 800c5e8:	e005      	b.n	800c5f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fa78 	bl	800cae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 fa7f 	bl	800caf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b01      	cmp	r3, #1
 800c608:	d10e      	bne.n	800c628 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b01      	cmp	r3, #1
 800c616:	d107      	bne.n	800c628 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f06f 0201 	mvn.w	r2, #1
 800c620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7f6 fdda 	bl	80031dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c632:	2b80      	cmp	r3, #128	; 0x80
 800c634:	d10e      	bne.n	800c654 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c640:	2b80      	cmp	r3, #128	; 0x80
 800c642:	d107      	bne.n	800c654 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c64c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fec6 	bl	800d3e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c65e:	2b40      	cmp	r3, #64	; 0x40
 800c660:	d10e      	bne.n	800c680 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c66c:	2b40      	cmp	r3, #64	; 0x40
 800c66e:	d107      	bne.n	800c680 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 fa44 	bl	800cb08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	f003 0320 	and.w	r3, r3, #32
 800c68a:	2b20      	cmp	r3, #32
 800c68c:	d10e      	bne.n	800c6ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	f003 0320 	and.w	r3, r3, #32
 800c698:	2b20      	cmp	r3, #32
 800c69a:	d107      	bne.n	800c6ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f06f 0220 	mvn.w	r2, #32
 800c6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fe90 	bl	800d3cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d101      	bne.n	800c6ce <HAL_TIM_IC_ConfigChannel+0x1a>
 800c6ca:	2302      	movs	r3, #2
 800c6cc:	e082      	b.n	800c7d4 <HAL_TIM_IC_ConfigChannel+0x120>
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d11b      	bne.n	800c714 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6818      	ldr	r0, [r3, #0]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	f000 fc22 	bl	800cf34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	699a      	ldr	r2, [r3, #24]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f022 020c 	bic.w	r2, r2, #12
 800c6fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6999      	ldr	r1, [r3, #24]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	689a      	ldr	r2, [r3, #8]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	430a      	orrs	r2, r1
 800c710:	619a      	str	r2, [r3, #24]
 800c712:	e05a      	b.n	800c7ca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b04      	cmp	r3, #4
 800c718:	d11c      	bne.n	800c754 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6818      	ldr	r0, [r3, #0]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	6819      	ldr	r1, [r3, #0]
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	685a      	ldr	r2, [r3, #4]
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	f000 fc9a 	bl	800d062 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c73c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6999      	ldr	r1, [r3, #24]
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	021a      	lsls	r2, r3, #8
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	619a      	str	r2, [r3, #24]
 800c752:	e03a      	b.n	800c7ca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b08      	cmp	r3, #8
 800c758:	d11b      	bne.n	800c792 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	6819      	ldr	r1, [r3, #0]
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	f000 fce7 	bl	800d13c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	69da      	ldr	r2, [r3, #28]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f022 020c 	bic.w	r2, r2, #12
 800c77c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	69d9      	ldr	r1, [r3, #28]
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	689a      	ldr	r2, [r3, #8]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	430a      	orrs	r2, r1
 800c78e:	61da      	str	r2, [r3, #28]
 800c790:	e01b      	b.n	800c7ca <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	6819      	ldr	r1, [r3, #0]
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	f000 fd07 	bl	800d1b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	69da      	ldr	r2, [r3, #28]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c7b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	69d9      	ldr	r1, [r3, #28]
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	021a      	lsls	r2, r3, #8
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	430a      	orrs	r2, r1
 800c7c8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d101      	bne.n	800c7f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	e0ac      	b.n	800c950 <HAL_TIM_PWM_ConfigChannel+0x174>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b0c      	cmp	r3, #12
 800c802:	f200 809f 	bhi.w	800c944 <HAL_TIM_PWM_ConfigChannel+0x168>
 800c806:	a201      	add	r2, pc, #4	; (adr r2, 800c80c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80c:	0800c841 	.word	0x0800c841
 800c810:	0800c945 	.word	0x0800c945
 800c814:	0800c945 	.word	0x0800c945
 800c818:	0800c945 	.word	0x0800c945
 800c81c:	0800c881 	.word	0x0800c881
 800c820:	0800c945 	.word	0x0800c945
 800c824:	0800c945 	.word	0x0800c945
 800c828:	0800c945 	.word	0x0800c945
 800c82c:	0800c8c3 	.word	0x0800c8c3
 800c830:	0800c945 	.word	0x0800c945
 800c834:	0800c945 	.word	0x0800c945
 800c838:	0800c945 	.word	0x0800c945
 800c83c:	0800c903 	.word	0x0800c903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68b9      	ldr	r1, [r7, #8]
 800c846:	4618      	mov	r0, r3
 800c848:	f000 f9e8 	bl	800cc1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	699a      	ldr	r2, [r3, #24]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f042 0208 	orr.w	r2, r2, #8
 800c85a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	699a      	ldr	r2, [r3, #24]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f022 0204 	bic.w	r2, r2, #4
 800c86a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	6999      	ldr	r1, [r3, #24]
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	691a      	ldr	r2, [r3, #16]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	430a      	orrs	r2, r1
 800c87c:	619a      	str	r2, [r3, #24]
      break;
 800c87e:	e062      	b.n	800c946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68b9      	ldr	r1, [r7, #8]
 800c886:	4618      	mov	r0, r3
 800c888:	f000 fa2e 	bl	800cce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	699a      	ldr	r2, [r3, #24]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c89a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	699a      	ldr	r2, [r3, #24]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6999      	ldr	r1, [r3, #24]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	021a      	lsls	r2, r3, #8
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	430a      	orrs	r2, r1
 800c8be:	619a      	str	r2, [r3, #24]
      break;
 800c8c0:	e041      	b.n	800c946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68b9      	ldr	r1, [r7, #8]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 fa79 	bl	800cdc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	69da      	ldr	r2, [r3, #28]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f042 0208 	orr.w	r2, r2, #8
 800c8dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	69da      	ldr	r2, [r3, #28]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f022 0204 	bic.w	r2, r2, #4
 800c8ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	69d9      	ldr	r1, [r3, #28]
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	691a      	ldr	r2, [r3, #16]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	61da      	str	r2, [r3, #28]
      break;
 800c900:	e021      	b.n	800c946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68b9      	ldr	r1, [r7, #8]
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fac3 	bl	800ce94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	69da      	ldr	r2, [r3, #28]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c91c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	69da      	ldr	r2, [r3, #28]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c92c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	69d9      	ldr	r1, [r3, #28]
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	021a      	lsls	r2, r3, #8
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	430a      	orrs	r2, r1
 800c940:	61da      	str	r2, [r3, #28]
      break;
 800c942:	e000      	b.n	800c946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800c944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d101      	bne.n	800c970 <HAL_TIM_ConfigClockSource+0x18>
 800c96c:	2302      	movs	r3, #2
 800c96e:	e0b3      	b.n	800cad8 <HAL_TIM_ConfigClockSource+0x180>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2202      	movs	r2, #2
 800c97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c98e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c996:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9a8:	d03e      	beq.n	800ca28 <HAL_TIM_ConfigClockSource+0xd0>
 800c9aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9ae:	f200 8087 	bhi.w	800cac0 <HAL_TIM_ConfigClockSource+0x168>
 800c9b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9b6:	f000 8085 	beq.w	800cac4 <HAL_TIM_ConfigClockSource+0x16c>
 800c9ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9be:	d87f      	bhi.n	800cac0 <HAL_TIM_ConfigClockSource+0x168>
 800c9c0:	2b70      	cmp	r3, #112	; 0x70
 800c9c2:	d01a      	beq.n	800c9fa <HAL_TIM_ConfigClockSource+0xa2>
 800c9c4:	2b70      	cmp	r3, #112	; 0x70
 800c9c6:	d87b      	bhi.n	800cac0 <HAL_TIM_ConfigClockSource+0x168>
 800c9c8:	2b60      	cmp	r3, #96	; 0x60
 800c9ca:	d050      	beq.n	800ca6e <HAL_TIM_ConfigClockSource+0x116>
 800c9cc:	2b60      	cmp	r3, #96	; 0x60
 800c9ce:	d877      	bhi.n	800cac0 <HAL_TIM_ConfigClockSource+0x168>
 800c9d0:	2b50      	cmp	r3, #80	; 0x50
 800c9d2:	d03c      	beq.n	800ca4e <HAL_TIM_ConfigClockSource+0xf6>
 800c9d4:	2b50      	cmp	r3, #80	; 0x50
 800c9d6:	d873      	bhi.n	800cac0 <HAL_TIM_ConfigClockSource+0x168>
 800c9d8:	2b40      	cmp	r3, #64	; 0x40
 800c9da:	d058      	beq.n	800ca8e <HAL_TIM_ConfigClockSource+0x136>
 800c9dc:	2b40      	cmp	r3, #64	; 0x40
 800c9de:	d86f      	bhi.n	800cac0 <HAL_TIM_ConfigClockSource+0x168>
 800c9e0:	2b30      	cmp	r3, #48	; 0x30
 800c9e2:	d064      	beq.n	800caae <HAL_TIM_ConfigClockSource+0x156>
 800c9e4:	2b30      	cmp	r3, #48	; 0x30
 800c9e6:	d86b      	bhi.n	800cac0 <HAL_TIM_ConfigClockSource+0x168>
 800c9e8:	2b20      	cmp	r3, #32
 800c9ea:	d060      	beq.n	800caae <HAL_TIM_ConfigClockSource+0x156>
 800c9ec:	2b20      	cmp	r3, #32
 800c9ee:	d867      	bhi.n	800cac0 <HAL_TIM_ConfigClockSource+0x168>
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d05c      	beq.n	800caae <HAL_TIM_ConfigClockSource+0x156>
 800c9f4:	2b10      	cmp	r3, #16
 800c9f6:	d05a      	beq.n	800caae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c9f8:	e062      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6818      	ldr	r0, [r3, #0]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	6899      	ldr	r1, [r3, #8]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	f000 fc2b 	bl	800d264 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	609a      	str	r2, [r3, #8]
      break;
 800ca26:	e04e      	b.n	800cac6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6818      	ldr	r0, [r3, #0]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	6899      	ldr	r1, [r3, #8]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f000 fc14 	bl	800d264 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	689a      	ldr	r2, [r3, #8]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca4a:	609a      	str	r2, [r3, #8]
      break;
 800ca4c:	e03b      	b.n	800cac6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	6859      	ldr	r1, [r3, #4]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f000 fad2 	bl	800d004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2150      	movs	r1, #80	; 0x50
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 fbe1 	bl	800d22e <TIM_ITRx_SetConfig>
      break;
 800ca6c:	e02b      	b.n	800cac6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6818      	ldr	r0, [r3, #0]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	6859      	ldr	r1, [r3, #4]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	f000 fb2e 	bl	800d0dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2160      	movs	r1, #96	; 0x60
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 fbd1 	bl	800d22e <TIM_ITRx_SetConfig>
      break;
 800ca8c:	e01b      	b.n	800cac6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	6859      	ldr	r1, [r3, #4]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	f000 fab2 	bl	800d004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2140      	movs	r1, #64	; 0x40
 800caa6:	4618      	mov	r0, r3
 800caa8:	f000 fbc1 	bl	800d22e <TIM_ITRx_SetConfig>
      break;
 800caac:	e00b      	b.n	800cac6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f000 fbb8 	bl	800d22e <TIM_ITRx_SetConfig>
        break;
 800cabe:	e002      	b.n	800cac6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cac0:	bf00      	nop
 800cac2:	e000      	b.n	800cac6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cac4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b085      	sub	sp, #20
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a34      	ldr	r2, [pc, #208]	; (800cc00 <TIM_Base_SetConfig+0xe4>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d00f      	beq.n	800cb54 <TIM_Base_SetConfig+0x38>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb3a:	d00b      	beq.n	800cb54 <TIM_Base_SetConfig+0x38>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a31      	ldr	r2, [pc, #196]	; (800cc04 <TIM_Base_SetConfig+0xe8>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d007      	beq.n	800cb54 <TIM_Base_SetConfig+0x38>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a30      	ldr	r2, [pc, #192]	; (800cc08 <TIM_Base_SetConfig+0xec>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d003      	beq.n	800cb54 <TIM_Base_SetConfig+0x38>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a2f      	ldr	r2, [pc, #188]	; (800cc0c <TIM_Base_SetConfig+0xf0>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d108      	bne.n	800cb66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a25      	ldr	r2, [pc, #148]	; (800cc00 <TIM_Base_SetConfig+0xe4>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d01b      	beq.n	800cba6 <TIM_Base_SetConfig+0x8a>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb74:	d017      	beq.n	800cba6 <TIM_Base_SetConfig+0x8a>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a22      	ldr	r2, [pc, #136]	; (800cc04 <TIM_Base_SetConfig+0xe8>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d013      	beq.n	800cba6 <TIM_Base_SetConfig+0x8a>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a21      	ldr	r2, [pc, #132]	; (800cc08 <TIM_Base_SetConfig+0xec>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d00f      	beq.n	800cba6 <TIM_Base_SetConfig+0x8a>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a20      	ldr	r2, [pc, #128]	; (800cc0c <TIM_Base_SetConfig+0xf0>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00b      	beq.n	800cba6 <TIM_Base_SetConfig+0x8a>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a1f      	ldr	r2, [pc, #124]	; (800cc10 <TIM_Base_SetConfig+0xf4>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d007      	beq.n	800cba6 <TIM_Base_SetConfig+0x8a>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a1e      	ldr	r2, [pc, #120]	; (800cc14 <TIM_Base_SetConfig+0xf8>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d003      	beq.n	800cba6 <TIM_Base_SetConfig+0x8a>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a1d      	ldr	r2, [pc, #116]	; (800cc18 <TIM_Base_SetConfig+0xfc>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d108      	bne.n	800cbb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	689a      	ldr	r2, [r3, #8]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a08      	ldr	r2, [pc, #32]	; (800cc00 <TIM_Base_SetConfig+0xe4>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d103      	bne.n	800cbec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	691a      	ldr	r2, [r3, #16]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	615a      	str	r2, [r3, #20]
}
 800cbf2:	bf00      	nop
 800cbf4:	3714      	adds	r7, #20
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	40010000 	.word	0x40010000
 800cc04:	40000400 	.word	0x40000400
 800cc08:	40000800 	.word	0x40000800
 800cc0c:	40000c00 	.word	0x40000c00
 800cc10:	40014000 	.word	0x40014000
 800cc14:	40014400 	.word	0x40014400
 800cc18:	40014800 	.word	0x40014800

0800cc1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b087      	sub	sp, #28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	f023 0201 	bic.w	r2, r3, #1
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f023 0303 	bic.w	r3, r3, #3
 800cc52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f023 0302 	bic.w	r3, r3, #2
 800cc64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	689b      	ldr	r3, [r3, #8]
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a1c      	ldr	r2, [pc, #112]	; (800cce4 <TIM_OC1_SetConfig+0xc8>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d10c      	bne.n	800cc92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	f023 0308 	bic.w	r3, r3, #8
 800cc7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	697a      	ldr	r2, [r7, #20]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f023 0304 	bic.w	r3, r3, #4
 800cc90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a13      	ldr	r2, [pc, #76]	; (800cce4 <TIM_OC1_SetConfig+0xc8>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d111      	bne.n	800ccbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	685a      	ldr	r2, [r3, #4]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	621a      	str	r2, [r3, #32]
}
 800ccd8:	bf00      	nop
 800ccda:	371c      	adds	r7, #28
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	40010000 	.word	0x40010000

0800cce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b087      	sub	sp, #28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	f023 0210 	bic.w	r2, r3, #16
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a1b      	ldr	r3, [r3, #32]
 800cd02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	699b      	ldr	r3, [r3, #24]
 800cd0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	f023 0320 	bic.w	r3, r3, #32
 800cd32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	011b      	lsls	r3, r3, #4
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a1e      	ldr	r2, [pc, #120]	; (800cdbc <TIM_OC2_SetConfig+0xd4>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d10d      	bne.n	800cd64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	011b      	lsls	r3, r3, #4
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a15      	ldr	r2, [pc, #84]	; (800cdbc <TIM_OC2_SetConfig+0xd4>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d113      	bne.n	800cd94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	693a      	ldr	r2, [r7, #16]
 800cd90:	4313      	orrs	r3, r2
 800cd92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	693a      	ldr	r2, [r7, #16]
 800cd98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	621a      	str	r2, [r3, #32]
}
 800cdae:	bf00      	nop
 800cdb0:	371c      	adds	r7, #28
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	40010000 	.word	0x40010000

0800cdc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f023 0303 	bic.w	r3, r3, #3
 800cdf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	697a      	ldr	r2, [r7, #20]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a1d      	ldr	r2, [pc, #116]	; (800ce90 <TIM_OC3_SetConfig+0xd0>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d10d      	bne.n	800ce3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	021b      	lsls	r3, r3, #8
 800ce2c:	697a      	ldr	r2, [r7, #20]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4a14      	ldr	r2, [pc, #80]	; (800ce90 <TIM_OC3_SetConfig+0xd0>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d113      	bne.n	800ce6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	011b      	lsls	r3, r3, #4
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	699b      	ldr	r3, [r3, #24]
 800ce62:	011b      	lsls	r3, r3, #4
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	693a      	ldr	r2, [r7, #16]
 800ce6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	621a      	str	r2, [r3, #32]
}
 800ce84:	bf00      	nop
 800ce86:	371c      	adds	r7, #28
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr
 800ce90:	40010000 	.word	0x40010000

0800ce94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	69db      	ldr	r3, [r3, #28]
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	021b      	lsls	r3, r3, #8
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	031b      	lsls	r3, r3, #12
 800cee6:	693a      	ldr	r2, [r7, #16]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a10      	ldr	r2, [pc, #64]	; (800cf30 <TIM_OC4_SetConfig+0x9c>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d109      	bne.n	800cf08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cefa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	019b      	lsls	r3, r3, #6
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	621a      	str	r2, [r3, #32]
}
 800cf22:	bf00      	nop
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	40010000 	.word	0x40010000

0800cf34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b087      	sub	sp, #28
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6a1b      	ldr	r3, [r3, #32]
 800cf46:	f023 0201 	bic.w	r2, r3, #1
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	699b      	ldr	r3, [r3, #24]
 800cf52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6a1b      	ldr	r3, [r3, #32]
 800cf58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	4a24      	ldr	r2, [pc, #144]	; (800cff0 <TIM_TI1_SetConfig+0xbc>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d013      	beq.n	800cf8a <TIM_TI1_SetConfig+0x56>
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf68:	d00f      	beq.n	800cf8a <TIM_TI1_SetConfig+0x56>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	4a21      	ldr	r2, [pc, #132]	; (800cff4 <TIM_TI1_SetConfig+0xc0>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d00b      	beq.n	800cf8a <TIM_TI1_SetConfig+0x56>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	4a20      	ldr	r2, [pc, #128]	; (800cff8 <TIM_TI1_SetConfig+0xc4>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d007      	beq.n	800cf8a <TIM_TI1_SetConfig+0x56>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4a1f      	ldr	r2, [pc, #124]	; (800cffc <TIM_TI1_SetConfig+0xc8>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d003      	beq.n	800cf8a <TIM_TI1_SetConfig+0x56>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	4a1e      	ldr	r2, [pc, #120]	; (800d000 <TIM_TI1_SetConfig+0xcc>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d101      	bne.n	800cf8e <TIM_TI1_SetConfig+0x5a>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e000      	b.n	800cf90 <TIM_TI1_SetConfig+0x5c>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d008      	beq.n	800cfa6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	f023 0303 	bic.w	r3, r3, #3
 800cf9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cf9c:	697a      	ldr	r2, [r7, #20]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	617b      	str	r3, [r7, #20]
 800cfa4:	e003      	b.n	800cfae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f043 0301 	orr.w	r3, r3, #1
 800cfac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	011b      	lsls	r3, r3, #4
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	697a      	ldr	r2, [r7, #20]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	f023 030a 	bic.w	r3, r3, #10
 800cfc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	f003 030a 	and.w	r3, r3, #10
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	693a      	ldr	r2, [r7, #16]
 800cfe0:	621a      	str	r2, [r3, #32]
}
 800cfe2:	bf00      	nop
 800cfe4:	371c      	adds	r7, #28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	40010000 	.word	0x40010000
 800cff4:	40000400 	.word	0x40000400
 800cff8:	40000800 	.word	0x40000800
 800cffc:	40000c00 	.word	0x40000c00
 800d000:	40014000 	.word	0x40014000

0800d004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d004:	b480      	push	{r7}
 800d006:	b087      	sub	sp, #28
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6a1b      	ldr	r3, [r3, #32]
 800d014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	f023 0201 	bic.w	r2, r3, #1
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d02e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	011b      	lsls	r3, r3, #4
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	4313      	orrs	r3, r2
 800d038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f023 030a 	bic.w	r3, r3, #10
 800d040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	4313      	orrs	r3, r2
 800d048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	693a      	ldr	r2, [r7, #16]
 800d04e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	621a      	str	r2, [r3, #32]
}
 800d056:	bf00      	nop
 800d058:	371c      	adds	r7, #28
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d062:	b480      	push	{r7}
 800d064:	b087      	sub	sp, #28
 800d066:	af00      	add	r7, sp, #0
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	60b9      	str	r1, [r7, #8]
 800d06c:	607a      	str	r2, [r7, #4]
 800d06e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6a1b      	ldr	r3, [r3, #32]
 800d074:	f023 0210 	bic.w	r2, r3, #16
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	699b      	ldr	r3, [r3, #24]
 800d080:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d08e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	021b      	lsls	r3, r3, #8
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	4313      	orrs	r3, r2
 800d098:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d0a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	031b      	lsls	r3, r3, #12
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d0b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	693a      	ldr	r2, [r7, #16]
 800d0ce:	621a      	str	r2, [r3, #32]
}
 800d0d0:	bf00      	nop
 800d0d2:	371c      	adds	r7, #28
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b087      	sub	sp, #28
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6a1b      	ldr	r3, [r3, #32]
 800d0ec:	f023 0210 	bic.w	r2, r3, #16
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	699b      	ldr	r3, [r3, #24]
 800d0f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6a1b      	ldr	r3, [r3, #32]
 800d0fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d106:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	031b      	lsls	r3, r3, #12
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	4313      	orrs	r3, r2
 800d110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d118:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	011b      	lsls	r3, r3, #4
 800d11e:	693a      	ldr	r2, [r7, #16]
 800d120:	4313      	orrs	r3, r2
 800d122:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	697a      	ldr	r2, [r7, #20]
 800d128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	621a      	str	r2, [r3, #32]
}
 800d130:	bf00      	nop
 800d132:	371c      	adds	r7, #28
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b087      	sub	sp, #28
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6a1b      	ldr	r3, [r3, #32]
 800d14e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	69db      	ldr	r3, [r3, #28]
 800d15a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a1b      	ldr	r3, [r3, #32]
 800d160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f023 0303 	bic.w	r3, r3, #3
 800d168:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d16a:	697a      	ldr	r2, [r7, #20]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4313      	orrs	r3, r2
 800d170:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d178:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	011b      	lsls	r3, r3, #4
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	4313      	orrs	r3, r2
 800d184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d18c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	021b      	lsls	r3, r3, #8
 800d192:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	4313      	orrs	r3, r2
 800d19a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	621a      	str	r2, [r3, #32]
}
 800d1a8:	bf00      	nop
 800d1aa:	371c      	adds	r7, #28
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	69db      	ldr	r3, [r3, #28]
 800d1d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6a1b      	ldr	r3, [r3, #32]
 800d1d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	697a      	ldr	r2, [r7, #20]
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d1f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	031b      	lsls	r3, r3, #12
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d206:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	031b      	lsls	r3, r3, #12
 800d20c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d210:	693a      	ldr	r2, [r7, #16]
 800d212:	4313      	orrs	r3, r2
 800d214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	621a      	str	r2, [r3, #32]
}
 800d222:	bf00      	nop
 800d224:	371c      	adds	r7, #28
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d22e:	b480      	push	{r7}
 800d230:	b085      	sub	sp, #20
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	4313      	orrs	r3, r2
 800d24c:	f043 0307 	orr.w	r3, r3, #7
 800d250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	609a      	str	r2, [r3, #8]
}
 800d258:	bf00      	nop
 800d25a:	3714      	adds	r7, #20
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d264:	b480      	push	{r7}
 800d266:	b087      	sub	sp, #28
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d27e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	021a      	lsls	r2, r3, #8
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	431a      	orrs	r2, r3
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	4313      	orrs	r3, r2
 800d290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	697a      	ldr	r2, [r7, #20]
 800d296:	609a      	str	r2, [r3, #8]
}
 800d298:	bf00      	nop
 800d29a:	371c      	adds	r7, #28
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b087      	sub	sp, #28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	f003 031f 	and.w	r3, r3, #31
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a1a      	ldr	r2, [r3, #32]
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	43db      	mvns	r3, r3
 800d2c6:	401a      	ands	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6a1a      	ldr	r2, [r3, #32]
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	f003 031f 	and.w	r3, r3, #31
 800d2d6:	6879      	ldr	r1, [r7, #4]
 800d2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d2dc:	431a      	orrs	r2, r3
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	621a      	str	r2, [r3, #32]
}
 800d2e2:	bf00      	nop
 800d2e4:	371c      	adds	r7, #28
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
	...

0800d2f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d300:	2b01      	cmp	r3, #1
 800d302:	d101      	bne.n	800d308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d304:	2302      	movs	r3, #2
 800d306:	e050      	b.n	800d3aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2202      	movs	r2, #2
 800d314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d32e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	4313      	orrs	r3, r2
 800d338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a1c      	ldr	r2, [pc, #112]	; (800d3b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d018      	beq.n	800d37e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d354:	d013      	beq.n	800d37e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a18      	ldr	r2, [pc, #96]	; (800d3bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d00e      	beq.n	800d37e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a16      	ldr	r2, [pc, #88]	; (800d3c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d009      	beq.n	800d37e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a15      	ldr	r2, [pc, #84]	; (800d3c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d004      	beq.n	800d37e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a13      	ldr	r2, [pc, #76]	; (800d3c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d10c      	bne.n	800d398 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	40010000 	.word	0x40010000
 800d3bc:	40000400 	.word	0x40000400
 800d3c0:	40000800 	.word	0x40000800
 800d3c4:	40000c00 	.word	0x40000c00
 800d3c8:	40014000 	.word	0x40014000

0800d3cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d3e8:	bf00      	nop
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d101      	bne.n	800d406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e03f      	b.n	800d486 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d106      	bne.n	800d420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f7f8 ff5e 	bl	80062dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2224      	movs	r2, #36	; 0x24
 800d424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	68da      	ldr	r2, [r3, #12]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 fc1b 	bl	800dc74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	691a      	ldr	r2, [r3, #16]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d44c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	695a      	ldr	r2, [r3, #20]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d45c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68da      	ldr	r2, [r3, #12]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d46c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2220      	movs	r2, #32
 800d478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2220      	movs	r2, #32
 800d480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b08a      	sub	sp, #40	; 0x28
 800d492:	af02      	add	r7, sp, #8
 800d494:	60f8      	str	r0, [r7, #12]
 800d496:	60b9      	str	r1, [r7, #8]
 800d498:	603b      	str	r3, [r7, #0]
 800d49a:	4613      	mov	r3, r2
 800d49c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b20      	cmp	r3, #32
 800d4ac:	d17c      	bne.n	800d5a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <HAL_UART_Transmit+0x2c>
 800d4b4:	88fb      	ldrh	r3, [r7, #6]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e075      	b.n	800d5aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d101      	bne.n	800d4cc <HAL_UART_Transmit+0x3e>
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	e06e      	b.n	800d5aa <HAL_UART_Transmit+0x11c>
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2221      	movs	r2, #33	; 0x21
 800d4de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d4e2:	f7fb ff45 	bl	8009370 <HAL_GetTick>
 800d4e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	88fa      	ldrh	r2, [r7, #6]
 800d4ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	88fa      	ldrh	r2, [r7, #6]
 800d4f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	689b      	ldr	r3, [r3, #8]
 800d4f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4fc:	d108      	bne.n	800d510 <HAL_UART_Transmit+0x82>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d104      	bne.n	800d510 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d506:	2300      	movs	r3, #0
 800d508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	61bb      	str	r3, [r7, #24]
 800d50e:	e003      	b.n	800d518 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d514:	2300      	movs	r3, #0
 800d516:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d520:	e02a      	b.n	800d578 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	2200      	movs	r2, #0
 800d52a:	2180      	movs	r1, #128	; 0x80
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 fa17 	bl	800d960 <UART_WaitOnFlagUntilTimeout>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d538:	2303      	movs	r3, #3
 800d53a:	e036      	b.n	800d5aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10b      	bne.n	800d55a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	881b      	ldrh	r3, [r3, #0]
 800d546:	461a      	mov	r2, r3
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	3302      	adds	r3, #2
 800d556:	61bb      	str	r3, [r7, #24]
 800d558:	e007      	b.n	800d56a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	781a      	ldrb	r2, [r3, #0]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	3301      	adds	r3, #1
 800d568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d56e:	b29b      	uxth	r3, r3
 800d570:	3b01      	subs	r3, #1
 800d572:	b29a      	uxth	r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1cf      	bne.n	800d522 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2200      	movs	r2, #0
 800d58a:	2140      	movs	r1, #64	; 0x40
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 f9e7 	bl	800d960 <UART_WaitOnFlagUntilTimeout>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e006      	b.n	800d5aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2220      	movs	r2, #32
 800d5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e000      	b.n	800d5aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d5a8:	2302      	movs	r3, #2
  }
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3720      	adds	r7, #32
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
	...

0800d5b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b08a      	sub	sp, #40	; 0x28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	695b      	ldr	r3, [r3, #20]
 800d5d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	f003 030f 	and.w	r3, r3, #15
 800d5e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10d      	bne.n	800d606 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	f003 0320 	and.w	r3, r3, #32
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d008      	beq.n	800d606 <HAL_UART_IRQHandler+0x52>
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	f003 0320 	and.w	r3, r3, #32
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d003      	beq.n	800d606 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 faa1 	bl	800db46 <UART_Receive_IT>
      return;
 800d604:	e17c      	b.n	800d900 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f000 80b1 	beq.w	800d770 <HAL_UART_IRQHandler+0x1bc>
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	f003 0301 	and.w	r3, r3, #1
 800d614:	2b00      	cmp	r3, #0
 800d616:	d105      	bne.n	800d624 <HAL_UART_IRQHandler+0x70>
 800d618:	6a3b      	ldr	r3, [r7, #32]
 800d61a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f000 80a6 	beq.w	800d770 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	f003 0301 	and.w	r3, r3, #1
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00a      	beq.n	800d644 <HAL_UART_IRQHandler+0x90>
 800d62e:	6a3b      	ldr	r3, [r7, #32]
 800d630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d634:	2b00      	cmp	r3, #0
 800d636:	d005      	beq.n	800d644 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63c:	f043 0201 	orr.w	r2, r3, #1
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d646:	f003 0304 	and.w	r3, r3, #4
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00a      	beq.n	800d664 <HAL_UART_IRQHandler+0xb0>
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	f003 0301 	and.w	r3, r3, #1
 800d654:	2b00      	cmp	r3, #0
 800d656:	d005      	beq.n	800d664 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65c:	f043 0202 	orr.w	r2, r3, #2
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	f003 0302 	and.w	r3, r3, #2
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00a      	beq.n	800d684 <HAL_UART_IRQHandler+0xd0>
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	f003 0301 	and.w	r3, r3, #1
 800d674:	2b00      	cmp	r3, #0
 800d676:	d005      	beq.n	800d684 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67c:	f043 0204 	orr.w	r2, r3, #4
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	f003 0308 	and.w	r3, r3, #8
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00f      	beq.n	800d6ae <HAL_UART_IRQHandler+0xfa>
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	f003 0320 	and.w	r3, r3, #32
 800d694:	2b00      	cmp	r3, #0
 800d696:	d104      	bne.n	800d6a2 <HAL_UART_IRQHandler+0xee>
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d005      	beq.n	800d6ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	f043 0208 	orr.w	r2, r3, #8
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f000 811f 	beq.w	800d8f6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ba:	f003 0320 	and.w	r3, r3, #32
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d007      	beq.n	800d6d2 <HAL_UART_IRQHandler+0x11e>
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	f003 0320 	and.w	r3, r3, #32
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 fa3a 	bl	800db46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6dc:	2b40      	cmp	r3, #64	; 0x40
 800d6de:	bf0c      	ite	eq
 800d6e0:	2301      	moveq	r3, #1
 800d6e2:	2300      	movne	r3, #0
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ec:	f003 0308 	and.w	r3, r3, #8
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d102      	bne.n	800d6fa <HAL_UART_IRQHandler+0x146>
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d031      	beq.n	800d75e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f97a 	bl	800d9f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	695b      	ldr	r3, [r3, #20]
 800d706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d70a:	2b40      	cmp	r3, #64	; 0x40
 800d70c:	d123      	bne.n	800d756 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	695a      	ldr	r2, [r3, #20]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d71c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d722:	2b00      	cmp	r3, #0
 800d724:	d013      	beq.n	800d74e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72a:	4a77      	ldr	r2, [pc, #476]	; (800d908 <HAL_UART_IRQHandler+0x354>)
 800d72c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d732:	4618      	mov	r0, r3
 800d734:	f7fc fbeb 	bl	8009f0e <HAL_DMA_Abort_IT>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d016      	beq.n	800d76c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d748:	4610      	mov	r0, r2
 800d74a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d74c:	e00e      	b.n	800d76c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 f8f0 	bl	800d934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d754:	e00a      	b.n	800d76c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f8ec 	bl	800d934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d75c:	e006      	b.n	800d76c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f8e8 	bl	800d934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d76a:	e0c4      	b.n	800d8f6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d76c:	bf00      	nop
    return;
 800d76e:	e0c2      	b.n	800d8f6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d774:	2b01      	cmp	r3, #1
 800d776:	f040 80a2 	bne.w	800d8be <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	f003 0310 	and.w	r3, r3, #16
 800d780:	2b00      	cmp	r3, #0
 800d782:	f000 809c 	beq.w	800d8be <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	f003 0310 	and.w	r3, r3, #16
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f000 8096 	beq.w	800d8be <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	60fb      	str	r3, [r7, #12]
 800d7a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b2:	2b40      	cmp	r3, #64	; 0x40
 800d7b4:	d14f      	bne.n	800d856 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800d7c0:	8a3b      	ldrh	r3, [r7, #16]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f000 8099 	beq.w	800d8fa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d7cc:	8a3a      	ldrh	r2, [r7, #16]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	f080 8093 	bcs.w	800d8fa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	8a3a      	ldrh	r2, [r7, #16]
 800d7d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7de:	69db      	ldr	r3, [r3, #28]
 800d7e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7e4:	d02b      	beq.n	800d83e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	68da      	ldr	r2, [r3, #12]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7f4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	695a      	ldr	r2, [r3, #20]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f022 0201 	bic.w	r2, r2, #1
 800d804:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	695a      	ldr	r2, [r3, #20]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d814:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2220      	movs	r2, #32
 800d81a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68da      	ldr	r2, [r3, #12]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f022 0210 	bic.w	r2, r2, #16
 800d832:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fc faf8 	bl	8009e2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d846:	b29b      	uxth	r3, r3
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f87a 	bl	800d948 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800d854:	e051      	b.n	800d8fa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d85e:	b29b      	uxth	r3, r3
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d868:	b29b      	uxth	r3, r3
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d047      	beq.n	800d8fe <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800d86e:	8a7b      	ldrh	r3, [r7, #18]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d044      	beq.n	800d8fe <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68da      	ldr	r2, [r3, #12]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d882:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	695a      	ldr	r2, [r3, #20]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f022 0201 	bic.w	r2, r2, #1
 800d892:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2220      	movs	r2, #32
 800d898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68da      	ldr	r2, [r3, #12]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f022 0210 	bic.w	r2, r2, #16
 800d8b0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d8b2:	8a7b      	ldrh	r3, [r7, #18]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f846 	bl	800d948 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800d8bc:	e01f      	b.n	800d8fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d008      	beq.n	800d8da <HAL_UART_IRQHandler+0x326>
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
 800d8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 f8cf 	bl	800da76 <UART_Transmit_IT>
    return;
 800d8d8:	e012      	b.n	800d900 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00d      	beq.n	800d900 <HAL_UART_IRQHandler+0x34c>
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d008      	beq.n	800d900 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f911 	bl	800db16 <UART_EndTransmit_IT>
    return;
 800d8f4:	e004      	b.n	800d900 <HAL_UART_IRQHandler+0x34c>
    return;
 800d8f6:	bf00      	nop
 800d8f8:	e002      	b.n	800d900 <HAL_UART_IRQHandler+0x34c>
      return;
 800d8fa:	bf00      	nop
 800d8fc:	e000      	b.n	800d900 <HAL_UART_IRQHandler+0x34c>
      return;
 800d8fe:	bf00      	nop
  }
}
 800d900:	3728      	adds	r7, #40	; 0x28
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	0800da4f 	.word	0x0800da4f

0800d90c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d914:	bf00      	nop
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d928:	bf00      	nop
 800d92a:	370c      	adds	r7, #12
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d93c:	bf00      	nop
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	603b      	str	r3, [r7, #0]
 800d96c:	4613      	mov	r3, r2
 800d96e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d970:	e02c      	b.n	800d9cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d978:	d028      	beq.n	800d9cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d007      	beq.n	800d990 <UART_WaitOnFlagUntilTimeout+0x30>
 800d980:	f7fb fcf6 	bl	8009370 <HAL_GetTick>
 800d984:	4602      	mov	r2, r0
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d21d      	bcs.n	800d9cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68da      	ldr	r2, [r3, #12]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d99e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	695a      	ldr	r2, [r3, #20]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f022 0201 	bic.w	r2, r2, #1
 800d9ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2220      	movs	r2, #32
 800d9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2220      	movs	r2, #32
 800d9bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	e00f      	b.n	800d9ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	68ba      	ldr	r2, [r7, #8]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	bf0c      	ite	eq
 800d9dc:	2301      	moveq	r3, #1
 800d9de:	2300      	movne	r3, #0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	79fb      	ldrb	r3, [r7, #7]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d0c3      	beq.n	800d972 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	68da      	ldr	r2, [r3, #12]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800da0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	695a      	ldr	r2, [r3, #20]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f022 0201 	bic.w	r2, r2, #1
 800da1a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da20:	2b01      	cmp	r3, #1
 800da22:	d107      	bne.n	800da34 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	68da      	ldr	r2, [r3, #12]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f022 0210 	bic.w	r2, r2, #16
 800da32:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2220      	movs	r2, #32
 800da38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	631a      	str	r2, [r3, #48]	; 0x30
}
 800da42:	bf00      	nop
 800da44:	370c      	adds	r7, #12
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b084      	sub	sp, #16
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2200      	movs	r2, #0
 800da60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2200      	movs	r2, #0
 800da66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f7ff ff63 	bl	800d934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da6e:	bf00      	nop
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800da76:	b480      	push	{r7}
 800da78:	b085      	sub	sp, #20
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da84:	b2db      	uxtb	r3, r3
 800da86:	2b21      	cmp	r3, #33	; 0x21
 800da88:	d13e      	bne.n	800db08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da92:	d114      	bne.n	800dabe <UART_Transmit_IT+0x48>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d110      	bne.n	800dabe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6a1b      	ldr	r3, [r3, #32]
 800daa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	881b      	ldrh	r3, [r3, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dab0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	1c9a      	adds	r2, r3, #2
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	621a      	str	r2, [r3, #32]
 800dabc:	e008      	b.n	800dad0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a1b      	ldr	r3, [r3, #32]
 800dac2:	1c59      	adds	r1, r3, #1
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	6211      	str	r1, [r2, #32]
 800dac8:	781a      	ldrb	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	3b01      	subs	r3, #1
 800dad8:	b29b      	uxth	r3, r3
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	4619      	mov	r1, r3
 800dade:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10f      	bne.n	800db04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800daf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68da      	ldr	r2, [r3, #12]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800db02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800db04:	2300      	movs	r3, #0
 800db06:	e000      	b.n	800db0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800db08:	2302      	movs	r3, #2
  }
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3714      	adds	r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b082      	sub	sp, #8
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2220      	movs	r2, #32
 800db32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7ff fee8 	bl	800d90c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b084      	sub	sp, #16
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db54:	b2db      	uxtb	r3, r3
 800db56:	2b22      	cmp	r3, #34	; 0x22
 800db58:	f040 8087 	bne.w	800dc6a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db64:	d117      	bne.n	800db96 <UART_Receive_IT+0x50>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d113      	bne.n	800db96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db76:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	b29b      	uxth	r3, r3
 800db80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db84:	b29a      	uxth	r2, r3
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8e:	1c9a      	adds	r2, r3, #2
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	629a      	str	r2, [r3, #40]	; 0x28
 800db94:	e026      	b.n	800dbe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db9a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800db9c:	2300      	movs	r3, #0
 800db9e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dba8:	d007      	beq.n	800dbba <UART_Receive_IT+0x74>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10a      	bne.n	800dbc8 <UART_Receive_IT+0x82>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d106      	bne.n	800dbc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	b2da      	uxtb	r2, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	701a      	strb	r2, [r3, #0]
 800dbc6:	e008      	b.n	800dbda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbde:	1c5a      	adds	r2, r3, #1
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d136      	bne.n	800dc66 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	68da      	ldr	r2, [r3, #12]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f022 0220 	bic.w	r2, r2, #32
 800dc06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	68da      	ldr	r2, [r3, #12]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	695a      	ldr	r2, [r3, #20]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f022 0201 	bic.w	r2, r2, #1
 800dc26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2220      	movs	r2, #32
 800dc2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d10e      	bne.n	800dc56 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	68da      	ldr	r2, [r3, #12]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f022 0210 	bic.w	r2, r2, #16
 800dc46:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7ff fe7a 	bl	800d948 <HAL_UARTEx_RxEventCallback>
 800dc54:	e002      	b.n	800dc5c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff fe62 	bl	800d920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	e002      	b.n	800dc6c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800dc66:	2300      	movs	r3, #0
 800dc68:	e000      	b.n	800dc6c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800dc6a:	2302      	movs	r3, #2
  }
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc78:	b09f      	sub	sp, #124	; 0x7c
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dc88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc8a:	68d9      	ldr	r1, [r3, #12]
 800dc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	ea40 0301 	orr.w	r3, r0, r1
 800dc94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dc96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc98:	689a      	ldr	r2, [r3, #8]
 800dc9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc9c:	691b      	ldr	r3, [r3, #16]
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dca2:	695b      	ldr	r3, [r3, #20]
 800dca4:	431a      	orrs	r2, r3
 800dca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800dcae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dcb8:	f021 010c 	bic.w	r1, r1, #12
 800dcbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcc2:	430b      	orrs	r3, r1
 800dcc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dcc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dcd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcd2:	6999      	ldr	r1, [r3, #24]
 800dcd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	ea40 0301 	orr.w	r3, r0, r1
 800dcdc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dcde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	4bc5      	ldr	r3, [pc, #788]	; (800dff8 <UART_SetConfig+0x384>)
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d004      	beq.n	800dcf2 <UART_SetConfig+0x7e>
 800dce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	4bc3      	ldr	r3, [pc, #780]	; (800dffc <UART_SetConfig+0x388>)
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d103      	bne.n	800dcfa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dcf2:	f7fd f99d 	bl	800b030 <HAL_RCC_GetPCLK2Freq>
 800dcf6:	6778      	str	r0, [r7, #116]	; 0x74
 800dcf8:	e002      	b.n	800dd00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dcfa:	f7fd f985 	bl	800b008 <HAL_RCC_GetPCLK1Freq>
 800dcfe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd08:	f040 80b6 	bne.w	800de78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dd0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd0e:	461c      	mov	r4, r3
 800dd10:	f04f 0500 	mov.w	r5, #0
 800dd14:	4622      	mov	r2, r4
 800dd16:	462b      	mov	r3, r5
 800dd18:	1891      	adds	r1, r2, r2
 800dd1a:	6439      	str	r1, [r7, #64]	; 0x40
 800dd1c:	415b      	adcs	r3, r3
 800dd1e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd24:	1912      	adds	r2, r2, r4
 800dd26:	eb45 0303 	adc.w	r3, r5, r3
 800dd2a:	f04f 0000 	mov.w	r0, #0
 800dd2e:	f04f 0100 	mov.w	r1, #0
 800dd32:	00d9      	lsls	r1, r3, #3
 800dd34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dd38:	00d0      	lsls	r0, r2, #3
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	1911      	adds	r1, r2, r4
 800dd40:	6639      	str	r1, [r7, #96]	; 0x60
 800dd42:	416b      	adcs	r3, r5
 800dd44:	667b      	str	r3, [r7, #100]	; 0x64
 800dd46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	f04f 0300 	mov.w	r3, #0
 800dd50:	1891      	adds	r1, r2, r2
 800dd52:	63b9      	str	r1, [r7, #56]	; 0x38
 800dd54:	415b      	adcs	r3, r3
 800dd56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800dd5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800dd60:	f7f2 ff4a 	bl	8000bf8 <__aeabi_uldivmod>
 800dd64:	4602      	mov	r2, r0
 800dd66:	460b      	mov	r3, r1
 800dd68:	4ba5      	ldr	r3, [pc, #660]	; (800e000 <UART_SetConfig+0x38c>)
 800dd6a:	fba3 2302 	umull	r2, r3, r3, r2
 800dd6e:	095b      	lsrs	r3, r3, #5
 800dd70:	011e      	lsls	r6, r3, #4
 800dd72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd74:	461c      	mov	r4, r3
 800dd76:	f04f 0500 	mov.w	r5, #0
 800dd7a:	4622      	mov	r2, r4
 800dd7c:	462b      	mov	r3, r5
 800dd7e:	1891      	adds	r1, r2, r2
 800dd80:	6339      	str	r1, [r7, #48]	; 0x30
 800dd82:	415b      	adcs	r3, r3
 800dd84:	637b      	str	r3, [r7, #52]	; 0x34
 800dd86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dd8a:	1912      	adds	r2, r2, r4
 800dd8c:	eb45 0303 	adc.w	r3, r5, r3
 800dd90:	f04f 0000 	mov.w	r0, #0
 800dd94:	f04f 0100 	mov.w	r1, #0
 800dd98:	00d9      	lsls	r1, r3, #3
 800dd9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dd9e:	00d0      	lsls	r0, r2, #3
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	1911      	adds	r1, r2, r4
 800dda6:	65b9      	str	r1, [r7, #88]	; 0x58
 800dda8:	416b      	adcs	r3, r5
 800ddaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	f04f 0300 	mov.w	r3, #0
 800ddb6:	1891      	adds	r1, r2, r2
 800ddb8:	62b9      	str	r1, [r7, #40]	; 0x28
 800ddba:	415b      	adcs	r3, r3
 800ddbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ddc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ddc6:	f7f2 ff17 	bl	8000bf8 <__aeabi_uldivmod>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	460b      	mov	r3, r1
 800ddce:	4b8c      	ldr	r3, [pc, #560]	; (800e000 <UART_SetConfig+0x38c>)
 800ddd0:	fba3 1302 	umull	r1, r3, r3, r2
 800ddd4:	095b      	lsrs	r3, r3, #5
 800ddd6:	2164      	movs	r1, #100	; 0x64
 800ddd8:	fb01 f303 	mul.w	r3, r1, r3
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	3332      	adds	r3, #50	; 0x32
 800dde2:	4a87      	ldr	r2, [pc, #540]	; (800e000 <UART_SetConfig+0x38c>)
 800dde4:	fba2 2303 	umull	r2, r3, r2, r3
 800dde8:	095b      	lsrs	r3, r3, #5
 800ddea:	005b      	lsls	r3, r3, #1
 800ddec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ddf0:	441e      	add	r6, r3
 800ddf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f04f 0100 	mov.w	r1, #0
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	1894      	adds	r4, r2, r2
 800de00:	623c      	str	r4, [r7, #32]
 800de02:	415b      	adcs	r3, r3
 800de04:	627b      	str	r3, [r7, #36]	; 0x24
 800de06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800de0a:	1812      	adds	r2, r2, r0
 800de0c:	eb41 0303 	adc.w	r3, r1, r3
 800de10:	f04f 0400 	mov.w	r4, #0
 800de14:	f04f 0500 	mov.w	r5, #0
 800de18:	00dd      	lsls	r5, r3, #3
 800de1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800de1e:	00d4      	lsls	r4, r2, #3
 800de20:	4622      	mov	r2, r4
 800de22:	462b      	mov	r3, r5
 800de24:	1814      	adds	r4, r2, r0
 800de26:	653c      	str	r4, [r7, #80]	; 0x50
 800de28:	414b      	adcs	r3, r1
 800de2a:	657b      	str	r3, [r7, #84]	; 0x54
 800de2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	461a      	mov	r2, r3
 800de32:	f04f 0300 	mov.w	r3, #0
 800de36:	1891      	adds	r1, r2, r2
 800de38:	61b9      	str	r1, [r7, #24]
 800de3a:	415b      	adcs	r3, r3
 800de3c:	61fb      	str	r3, [r7, #28]
 800de3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800de46:	f7f2 fed7 	bl	8000bf8 <__aeabi_uldivmod>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	4b6c      	ldr	r3, [pc, #432]	; (800e000 <UART_SetConfig+0x38c>)
 800de50:	fba3 1302 	umull	r1, r3, r3, r2
 800de54:	095b      	lsrs	r3, r3, #5
 800de56:	2164      	movs	r1, #100	; 0x64
 800de58:	fb01 f303 	mul.w	r3, r1, r3
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	3332      	adds	r3, #50	; 0x32
 800de62:	4a67      	ldr	r2, [pc, #412]	; (800e000 <UART_SetConfig+0x38c>)
 800de64:	fba2 2303 	umull	r2, r3, r2, r3
 800de68:	095b      	lsrs	r3, r3, #5
 800de6a:	f003 0207 	and.w	r2, r3, #7
 800de6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4432      	add	r2, r6
 800de74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800de76:	e0b9      	b.n	800dfec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800de78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de7a:	461c      	mov	r4, r3
 800de7c:	f04f 0500 	mov.w	r5, #0
 800de80:	4622      	mov	r2, r4
 800de82:	462b      	mov	r3, r5
 800de84:	1891      	adds	r1, r2, r2
 800de86:	6139      	str	r1, [r7, #16]
 800de88:	415b      	adcs	r3, r3
 800de8a:	617b      	str	r3, [r7, #20]
 800de8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800de90:	1912      	adds	r2, r2, r4
 800de92:	eb45 0303 	adc.w	r3, r5, r3
 800de96:	f04f 0000 	mov.w	r0, #0
 800de9a:	f04f 0100 	mov.w	r1, #0
 800de9e:	00d9      	lsls	r1, r3, #3
 800dea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800dea4:	00d0      	lsls	r0, r2, #3
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	eb12 0804 	adds.w	r8, r2, r4
 800deae:	eb43 0905 	adc.w	r9, r3, r5
 800deb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f04f 0100 	mov.w	r1, #0
 800debc:	f04f 0200 	mov.w	r2, #0
 800dec0:	f04f 0300 	mov.w	r3, #0
 800dec4:	008b      	lsls	r3, r1, #2
 800dec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800deca:	0082      	lsls	r2, r0, #2
 800decc:	4640      	mov	r0, r8
 800dece:	4649      	mov	r1, r9
 800ded0:	f7f2 fe92 	bl	8000bf8 <__aeabi_uldivmod>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4b49      	ldr	r3, [pc, #292]	; (800e000 <UART_SetConfig+0x38c>)
 800deda:	fba3 2302 	umull	r2, r3, r3, r2
 800dede:	095b      	lsrs	r3, r3, #5
 800dee0:	011e      	lsls	r6, r3, #4
 800dee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dee4:	4618      	mov	r0, r3
 800dee6:	f04f 0100 	mov.w	r1, #0
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	1894      	adds	r4, r2, r2
 800def0:	60bc      	str	r4, [r7, #8]
 800def2:	415b      	adcs	r3, r3
 800def4:	60fb      	str	r3, [r7, #12]
 800def6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800defa:	1812      	adds	r2, r2, r0
 800defc:	eb41 0303 	adc.w	r3, r1, r3
 800df00:	f04f 0400 	mov.w	r4, #0
 800df04:	f04f 0500 	mov.w	r5, #0
 800df08:	00dd      	lsls	r5, r3, #3
 800df0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800df0e:	00d4      	lsls	r4, r2, #3
 800df10:	4622      	mov	r2, r4
 800df12:	462b      	mov	r3, r5
 800df14:	1814      	adds	r4, r2, r0
 800df16:	64bc      	str	r4, [r7, #72]	; 0x48
 800df18:	414b      	adcs	r3, r1
 800df1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	4618      	mov	r0, r3
 800df22:	f04f 0100 	mov.w	r1, #0
 800df26:	f04f 0200 	mov.w	r2, #0
 800df2a:	f04f 0300 	mov.w	r3, #0
 800df2e:	008b      	lsls	r3, r1, #2
 800df30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800df34:	0082      	lsls	r2, r0, #2
 800df36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800df3a:	f7f2 fe5d 	bl	8000bf8 <__aeabi_uldivmod>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4b2f      	ldr	r3, [pc, #188]	; (800e000 <UART_SetConfig+0x38c>)
 800df44:	fba3 1302 	umull	r1, r3, r3, r2
 800df48:	095b      	lsrs	r3, r3, #5
 800df4a:	2164      	movs	r1, #100	; 0x64
 800df4c:	fb01 f303 	mul.w	r3, r1, r3
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	011b      	lsls	r3, r3, #4
 800df54:	3332      	adds	r3, #50	; 0x32
 800df56:	4a2a      	ldr	r2, [pc, #168]	; (800e000 <UART_SetConfig+0x38c>)
 800df58:	fba2 2303 	umull	r2, r3, r2, r3
 800df5c:	095b      	lsrs	r3, r3, #5
 800df5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df62:	441e      	add	r6, r3
 800df64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df66:	4618      	mov	r0, r3
 800df68:	f04f 0100 	mov.w	r1, #0
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	1894      	adds	r4, r2, r2
 800df72:	603c      	str	r4, [r7, #0]
 800df74:	415b      	adcs	r3, r3
 800df76:	607b      	str	r3, [r7, #4]
 800df78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df7c:	1812      	adds	r2, r2, r0
 800df7e:	eb41 0303 	adc.w	r3, r1, r3
 800df82:	f04f 0400 	mov.w	r4, #0
 800df86:	f04f 0500 	mov.w	r5, #0
 800df8a:	00dd      	lsls	r5, r3, #3
 800df8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800df90:	00d4      	lsls	r4, r2, #3
 800df92:	4622      	mov	r2, r4
 800df94:	462b      	mov	r3, r5
 800df96:	eb12 0a00 	adds.w	sl, r2, r0
 800df9a:	eb43 0b01 	adc.w	fp, r3, r1
 800df9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f04f 0100 	mov.w	r1, #0
 800dfa8:	f04f 0200 	mov.w	r2, #0
 800dfac:	f04f 0300 	mov.w	r3, #0
 800dfb0:	008b      	lsls	r3, r1, #2
 800dfb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800dfb6:	0082      	lsls	r2, r0, #2
 800dfb8:	4650      	mov	r0, sl
 800dfba:	4659      	mov	r1, fp
 800dfbc:	f7f2 fe1c 	bl	8000bf8 <__aeabi_uldivmod>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	4b0e      	ldr	r3, [pc, #56]	; (800e000 <UART_SetConfig+0x38c>)
 800dfc6:	fba3 1302 	umull	r1, r3, r3, r2
 800dfca:	095b      	lsrs	r3, r3, #5
 800dfcc:	2164      	movs	r1, #100	; 0x64
 800dfce:	fb01 f303 	mul.w	r3, r1, r3
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	011b      	lsls	r3, r3, #4
 800dfd6:	3332      	adds	r3, #50	; 0x32
 800dfd8:	4a09      	ldr	r2, [pc, #36]	; (800e000 <UART_SetConfig+0x38c>)
 800dfda:	fba2 2303 	umull	r2, r3, r2, r3
 800dfde:	095b      	lsrs	r3, r3, #5
 800dfe0:	f003 020f 	and.w	r2, r3, #15
 800dfe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4432      	add	r2, r6
 800dfea:	609a      	str	r2, [r3, #8]
}
 800dfec:	bf00      	nop
 800dfee:	377c      	adds	r7, #124	; 0x7c
 800dff0:	46bd      	mov	sp, r7
 800dff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff6:	bf00      	nop
 800dff8:	40011000 	.word	0x40011000
 800dffc:	40011400 	.word	0x40011400
 800e000:	51eb851f 	.word	0x51eb851f

0800e004 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08c      	sub	sp, #48	; 0x30
 800e008:	af00      	add	r7, sp, #0
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	4603      	mov	r3, r0
 800e00e:	71fb      	strb	r3, [r7, #7]
 800e010:	460b      	mov	r3, r1
 800e012:	71bb      	strb	r3, [r7, #6]
 800e014:	4613      	mov	r3, r2
 800e016:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800e018:	79fb      	ldrb	r3, [r7, #7]
 800e01a:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800e01c:	79bb      	ldrb	r3, [r7, #6]
 800e01e:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800e020:	797b      	ldrb	r3, [r7, #5]
 800e022:	75bb      	strb	r3, [r7, #22]
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800e024:	f107 030c 	add.w	r3, r7, #12
 800e028:	2207      	movs	r2, #7
 800e02a:	2100      	movs	r1, #0
 800e02c:	4618      	mov	r0, r3
 800e02e:	f001 f9b9 	bl	800f3a4 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800e032:	f107 0318 	add.w	r3, r7, #24
 800e036:	2218      	movs	r2, #24
 800e038:	2100      	movs	r1, #0
 800e03a:	4618      	mov	r0, r3
 800e03c:	f001 f9b2 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e040:	233f      	movs	r3, #63	; 0x3f
 800e042:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800e044:	238a      	movs	r3, #138	; 0x8a
 800e046:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800e048:	f107 0314 	add.w	r3, r7, #20
 800e04c:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800e04e:	2303      	movs	r3, #3
 800e050:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 800e052:	f107 030c 	add.w	r3, r7, #12
 800e056:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800e058:	2307      	movs	r3, #7
 800e05a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e05c:	f107 0318 	add.w	r3, r7, #24
 800e060:	2100      	movs	r1, #0
 800e062:	4618      	mov	r0, r3
 800e064:	f000 fe1e 	bl	800eca4 <hci_send_req>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	da01      	bge.n	800e072 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800e06e:	23ff      	movs	r3, #255	; 0xff
 800e070:	e014      	b.n	800e09c <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800e072:	7b3b      	ldrb	r3, [r7, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800e078:	7b3b      	ldrb	r3, [r7, #12]
 800e07a:	e00f      	b.n	800e09c <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800e07c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800e080:	b29a      	uxth	r2, r3
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800e086:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800e090:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800e094:	b29a      	uxth	r2, r3
 800e096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e098:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3730      	adds	r7, #48	; 0x30
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800e0a4:	b590      	push	{r4, r7, lr}
 800e0a6:	b095      	sub	sp, #84	; 0x54
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	4608      	mov	r0, r1
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	4623      	mov	r3, r4
 800e0b4:	71fb      	strb	r3, [r7, #7]
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	80bb      	strh	r3, [r7, #4]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	807b      	strh	r3, [r7, #2]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800e0c8:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e0cc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e0d0:	4413      	add	r3, r2
 800e0d2:	330e      	adds	r3, #14
 800e0d4:	2b28      	cmp	r3, #40	; 0x28
 800e0d6:	d901      	bls.n	800e0dc <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800e0d8:	2342      	movs	r3, #66	; 0x42
 800e0da:	e0da      	b.n	800e292 <aci_gap_set_discoverable+0x1ee>

  buffer[indx] = AdvType;
 800e0dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e0e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e0e4:	4413      	add	r3, r2
 800e0e6:	79fa      	ldrb	r2, [r7, #7]
 800e0e8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e0ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800e0f6:	88bb      	ldrh	r3, [r7, #4]
 800e0f8:	80bb      	strh	r3, [r7, #4]
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 800e0fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e0fe:	f107 0208 	add.w	r2, r7, #8
 800e102:	4413      	add	r3, r2
 800e104:	1d39      	adds	r1, r7, #4
 800e106:	2202      	movs	r2, #2
 800e108:	4618      	mov	r0, r3
 800e10a:	f001 f93b 	bl	800f384 <Osal_MemCpy>
  indx +=  2;
 800e10e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e112:	3302      	adds	r3, #2
 800e114:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800e118:	887b      	ldrh	r3, [r7, #2]
 800e11a:	807b      	strh	r3, [r7, #2]
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 800e11c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e120:	f107 0208 	add.w	r2, r7, #8
 800e124:	4413      	add	r3, r2
 800e126:	1cb9      	adds	r1, r7, #2
 800e128:	2202      	movs	r2, #2
 800e12a:	4618      	mov	r0, r3
 800e12c:	f001 f92a 	bl	800f384 <Osal_MemCpy>
  indx +=  2;
 800e130:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e134:	3302      	adds	r3, #2
 800e136:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800e13a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e13e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e142:	4413      	add	r3, r2
 800e144:	79ba      	ldrb	r2, [r7, #6]
 800e146:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e14a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e14e:	3301      	adds	r3, #1
 800e150:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800e154:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e158:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e15c:	4413      	add	r3, r2
 800e15e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e162:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e166:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e16a:	3301      	adds	r3, #1
 800e16c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800e170:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e174:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e178:	4413      	add	r3, r2
 800e17a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e17e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e182:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e186:	3301      	adds	r3, #1
 800e188:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 800e18c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e190:	f107 0208 	add.w	r2, r7, #8
 800e194:	4413      	add	r3, r2
 800e196:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800e19a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e19c:	4618      	mov	r0, r3
 800e19e:	f001 f8f1 	bl	800f384 <Osal_MemCpy>
  indx +=  LocalNameLen;
 800e1a2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e1a6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800e1aa:	4413      	add	r3, r2
 800e1ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800e1b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e1b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e1b8:	4413      	add	r3, r2
 800e1ba:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e1be:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e1c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800e1cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e1d0:	f107 0208 	add.w	r2, r7, #8
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800e1da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f001 f8d1 	bl	800f384 <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 800e1e2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e1e6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800e1ea:	4413      	add	r3, r2
 800e1ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800e1f0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800e1f4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 800e1f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e1fc:	f107 0208 	add.w	r2, r7, #8
 800e200:	4413      	add	r3, r2
 800e202:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800e206:	2202      	movs	r2, #2
 800e208:	4618      	mov	r0, r3
 800e20a:	f001 f8bb 	bl	800f384 <Osal_MemCpy>
  indx +=  2;
 800e20e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e212:	3302      	adds	r3, #2
 800e214:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800e218:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800e21c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 800e220:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e224:	f107 0208 	add.w	r2, r7, #8
 800e228:	4413      	add	r3, r2
 800e22a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800e22e:	2202      	movs	r2, #2
 800e230:	4618      	mov	r0, r3
 800e232:	f001 f8a7 	bl	800f384 <Osal_MemCpy>
  indx +=  2;    
 800e236:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e23a:	3302      	adds	r3, #2
 800e23c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e244:	2218      	movs	r2, #24
 800e246:	2100      	movs	r1, #0
 800e248:	4618      	mov	r0, r3
 800e24a:	f001 f8ab 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e24e:	233f      	movs	r3, #63	; 0x3f
 800e250:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800e252:	2383      	movs	r3, #131	; 0x83
 800e254:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800e256:	f107 0308 	add.w	r3, r7, #8
 800e25a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800e25c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e260:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800e262:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800e266:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 800e268:	2301      	movs	r3, #1
 800e26a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800e26c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e270:	2100      	movs	r1, #0
 800e272:	4618      	mov	r0, r3
 800e274:	f000 fd16 	bl	800eca4 <hci_send_req>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	da01      	bge.n	800e282 <aci_gap_set_discoverable+0x1de>
    return BLE_STATUS_TIMEOUT;
 800e27e:	23ff      	movs	r3, #255	; 0xff
 800e280:	e007      	b.n	800e292 <aci_gap_set_discoverable+0x1ee>

  if (status) {
 800e282:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e286:	2b00      	cmp	r3, #0
 800e288:	d002      	beq.n	800e290 <aci_gap_set_discoverable+0x1ec>
    return status;
 800e28a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e28e:	e000      	b.n	800e292 <aci_gap_set_discoverable+0x1ee>
  }

  return 0;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3754      	adds	r7, #84	; 0x54
 800e296:	46bd      	mov	sp, r7
 800e298:	bd90      	pop	{r4, r7, pc}

0800e29a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b090      	sub	sp, #64	; 0x40
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	603a      	str	r2, [r7, #0]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	71fb      	strb	r3, [r7, #7]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	71bb      	strb	r3, [r7, #6]
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800e2b0:	79fb      	ldrb	r3, [r7, #7]
 800e2b2:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800e2b4:	79bb      	ldrb	r3, [r7, #6]
 800e2b6:	737b      	strb	r3, [r7, #13]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 800e2b8:	f107 030c 	add.w	r3, r7, #12
 800e2bc:	3302      	adds	r3, #2
 800e2be:	2210      	movs	r2, #16
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f001 f85e 	bl	800f384 <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
 800e2c8:	797b      	ldrb	r3, [r7, #5]
 800e2ca:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800e2cc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e2d0:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800e2d2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e2d6:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800e2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2dc:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800e2e0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e2e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e2e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2ec:	2218      	movs	r2, #24
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f001 f857 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e2f6:	233f      	movs	r3, #63	; 0x3f
 800e2f8:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800e2fa:	2386      	movs	r3, #134	; 0x86
 800e2fc:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800e2fe:	f107 030c 	add.w	r3, r7, #12
 800e302:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 800e304:	231a      	movs	r3, #26
 800e306:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800e308:	f107 030b 	add.w	r3, r7, #11
 800e30c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800e30e:	2301      	movs	r3, #1
 800e310:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800e312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e316:	2100      	movs	r1, #0
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 fcc3 	bl	800eca4 <hci_send_req>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	da01      	bge.n	800e328 <aci_gap_set_auth_requirement+0x8e>
    return BLE_STATUS_TIMEOUT;
 800e324:	23ff      	movs	r3, #255	; 0xff
 800e326:	e005      	b.n	800e334 <aci_gap_set_auth_requirement+0x9a>

  if (status) {
 800e328:	7afb      	ldrb	r3, [r7, #11]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d001      	beq.n	800e332 <aci_gap_set_auth_requirement+0x98>
    return status;
 800e32e:	7afb      	ldrb	r3, [r7, #11]
 800e330:	e000      	b.n	800e334 <aci_gap_set_auth_requirement+0x9a>
  }
    
  return 0;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3740      	adds	r7, #64	; 0x40
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b092      	sub	sp, #72	; 0x48
 800e340:	af00      	add	r7, sp, #0
 800e342:	4603      	mov	r3, r0
 800e344:	6039      	str	r1, [r7, #0]
 800e346:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800e348:	2300      	movs	r3, #0
 800e34a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800e34e:	79fb      	ldrb	r3, [r7, #7]
 800e350:	2b1f      	cmp	r3, #31
 800e352:	d901      	bls.n	800e358 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800e354:	2342      	movs	r3, #66	; 0x42
 800e356:	e03f      	b.n	800e3d8 <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 800e358:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e35c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e360:	4413      	add	r3, r2
 800e362:	79fa      	ldrb	r2, [r7, #7]
 800e364:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800e368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e36c:	3301      	adds	r3, #1
 800e36e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  Osal_MemCpy(buffer + indx, AdvData, AdvLen);
 800e372:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e376:	f107 0208 	add.w	r2, r7, #8
 800e37a:	4413      	add	r3, r2
 800e37c:	79fa      	ldrb	r2, [r7, #7]
 800e37e:	6839      	ldr	r1, [r7, #0]
 800e380:	4618      	mov	r0, r3
 800e382:	f000 ffff 	bl	800f384 <Osal_MemCpy>
  indx +=  AdvLen;
 800e386:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e38a:	79fb      	ldrb	r3, [r7, #7]
 800e38c:	4413      	add	r3, r2
 800e38e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  Osal_MemSet(&rq, 0, sizeof(rq));
 800e392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e396:	2218      	movs	r2, #24
 800e398:	2100      	movs	r1, #0
 800e39a:	4618      	mov	r0, r3
 800e39c:	f001 f802 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e3a0:	233f      	movs	r3, #63	; 0x3f
 800e3a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800e3a4:	238e      	movs	r3, #142	; 0x8e
 800e3a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e3a8:	f107 0308 	add.w	r3, r7, #8
 800e3ac:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e3ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e3b2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 800e3b4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800e3be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f000 fc6d 	bl	800eca4 <hci_send_req>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	da01      	bge.n	800e3d4 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 800e3d0:	23ff      	movs	r3, #255	; 0xff
 800e3d2:	e001      	b.n	800e3d8 <aci_gap_update_adv_data+0x9c>
    
  return status;
 800e3d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3748      	adds	r7, #72	; 0x48
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b088      	sub	sp, #32
 800e3e4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e3e6:	f107 0308 	add.w	r3, r7, #8
 800e3ea:	2218      	movs	r2, #24
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f000 ffd8 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e3f4:	233f      	movs	r3, #63	; 0x3f
 800e3f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800e3f8:	f240 1301 	movw	r3, #257	; 0x101
 800e3fc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e3fe:	1dfb      	adds	r3, r7, #7
 800e400:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e402:	2301      	movs	r3, #1
 800e404:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800e406:	f107 0308 	add.w	r3, r7, #8
 800e40a:	2100      	movs	r1, #0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f000 fc49 	bl	800eca4 <hci_send_req>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	da01      	bge.n	800e41c <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800e418:	23ff      	movs	r3, #255	; 0xff
 800e41a:	e000      	b.n	800e41e <aci_gatt_init+0x3e>

  return status;
 800e41c:	79fb      	ldrb	r3, [r7, #7]
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3720      	adds	r7, #32
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800e426:	b580      	push	{r7, lr}
 800e428:	b090      	sub	sp, #64	; 0x40
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6039      	str	r1, [r7, #0]
 800e42e:	4611      	mov	r1, r2
 800e430:	461a      	mov	r2, r3
 800e432:	4603      	mov	r3, r0
 800e434:	71fb      	strb	r3, [r7, #7]
 800e436:	460b      	mov	r3, r1
 800e438:	71bb      	strb	r3, [r7, #6]
 800e43a:	4613      	mov	r3, r2
 800e43c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800e444:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e448:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e44c:	4413      	add	r3, r2
 800e44e:	79fa      	ldrb	r2, [r7, #7]
 800e450:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e454:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e458:	3301      	adds	r3, #1
 800e45a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d103      	bne.n	800e46c <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800e464:	2302      	movs	r3, #2
 800e466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e46a:	e002      	b.n	800e472 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800e46c:	2310      	movs	r3, #16
 800e46e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 800e472:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e476:	f107 020c 	add.w	r2, r7, #12
 800e47a:	4413      	add	r3, r2
 800e47c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	4618      	mov	r0, r3
 800e484:	f000 ff7e 	bl	800f384 <Osal_MemCpy>
  indx +=  uuid_len;
 800e488:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e48c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e490:	4413      	add	r3, r2
 800e492:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800e496:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e49a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e49e:	4413      	add	r3, r2
 800e4a0:	79ba      	ldrb	r2, [r7, #6]
 800e4a2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e4a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 800e4b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e4b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e4b8:	4413      	add	r3, r2
 800e4ba:	797a      	ldrb	r2, [r7, #5]
 800e4bc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e4c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800e4ca:	f107 0320 	add.w	r3, r7, #32
 800e4ce:	2203      	movs	r2, #3
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 ff66 	bl	800f3a4 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e4d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4dc:	2218      	movs	r2, #24
 800e4de:	2100      	movs	r1, #0
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f000 ff5f 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e4e6:	233f      	movs	r3, #63	; 0x3f
 800e4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800e4ea:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e4ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800e4f0:	f107 030c 	add.w	r3, r7, #12
 800e4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800e4f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e4fa:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800e4fc:	f107 0320 	add.w	r3, r7, #32
 800e500:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800e502:	2303      	movs	r3, #3
 800e504:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800e506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e50a:	2100      	movs	r1, #0
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fbc9 	bl	800eca4 <hci_send_req>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	da01      	bge.n	800e51c <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e518:	23ff      	movs	r3, #255	; 0xff
 800e51a:	e00c      	b.n	800e536 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800e51c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <aci_gatt_add_serv+0x104>
    return resp.status;
 800e524:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e528:	e005      	b.n	800e536 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 800e52a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800e52e:	b29a      	uxth	r2, r3
 800e530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e532:	801a      	strh	r2, [r3, #0]

  return 0;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3740      	adds	r7, #64	; 0x40
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b092      	sub	sp, #72	; 0x48
 800e542:	af00      	add	r7, sp, #0
 800e544:	603a      	str	r2, [r7, #0]
 800e546:	461a      	mov	r2, r3
 800e548:	4603      	mov	r3, r0
 800e54a:	80fb      	strh	r3, [r7, #6]
 800e54c:	460b      	mov	r3, r1
 800e54e:	717b      	strb	r3, [r7, #5]
 800e550:	4613      	mov	r3, r2
 800e552:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e554:	2300      	movs	r3, #0
 800e556:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800e55a:	88fb      	ldrh	r3, [r7, #6]
 800e55c:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800e55e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e562:	f107 020c 	add.w	r2, r7, #12
 800e566:	4413      	add	r3, r2
 800e568:	1db9      	adds	r1, r7, #6
 800e56a:	2202      	movs	r2, #2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f000 ff09 	bl	800f384 <Osal_MemCpy>
  indx += 2;
 800e572:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e576:	3302      	adds	r3, #2
 800e578:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800e57c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e580:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e584:	4413      	add	r3, r2
 800e586:	797a      	ldrb	r2, [r7, #5]
 800e588:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e58c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e590:	3301      	adds	r3, #1
 800e592:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800e596:	797b      	ldrb	r3, [r7, #5]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d103      	bne.n	800e5a4 <aci_gatt_add_char+0x66>
    uuid_len = 2;
 800e59c:	2302      	movs	r3, #2
 800e59e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e5a2:	e002      	b.n	800e5aa <aci_gatt_add_char+0x6c>
  }
  else {
    uuid_len = 16;
 800e5a4:	2310      	movs	r3, #16
 800e5a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 800e5aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e5ae:	f107 020c 	add.w	r2, r7, #12
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e5b8:	6839      	ldr	r1, [r7, #0]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 fee2 	bl	800f384 <Osal_MemCpy>
  indx +=  uuid_len;
 800e5c0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800e5c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e5c8:	4413      	add	r3, r2
 800e5ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800e5ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e5d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e5d6:	4413      	add	r3, r2
 800e5d8:	793a      	ldrb	r2, [r7, #4]
 800e5da:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e5de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800e5e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e5ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e5f0:	4413      	add	r3, r2
 800e5f2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e5f6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e5fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e5fe:	3301      	adds	r3, #1
 800e600:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 800e604:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e608:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e60c:	4413      	add	r3, r2
 800e60e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e612:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e616:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e61a:	3301      	adds	r3, #1
 800e61c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800e620:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e624:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e628:	4413      	add	r3, r2
 800e62a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e62e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e632:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e636:	3301      	adds	r3, #1
 800e638:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800e63c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e640:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e644:	4413      	add	r3, r2
 800e646:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e64a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e64e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e652:	3301      	adds	r3, #1
 800e654:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800e658:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e65c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e660:	4413      	add	r3, r2
 800e662:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800e666:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e66a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e66e:	3301      	adds	r3, #1
 800e670:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800e674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e678:	2203      	movs	r2, #3
 800e67a:	2100      	movs	r1, #0
 800e67c:	4618      	mov	r0, r3
 800e67e:	f000 fe91 	bl	800f3a4 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e686:	2218      	movs	r2, #24
 800e688:	2100      	movs	r1, #0
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 fe8a 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e690:	233f      	movs	r3, #63	; 0x3f
 800e692:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800e694:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e698:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800e69a:	f107 030c 	add.w	r3, r7, #12
 800e69e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800e6a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800e6a4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 800e6a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800e6ac:	2303      	movs	r3, #3
 800e6ae:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800e6b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f000 faf4 	bl	800eca4 <hci_send_req>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	da01      	bge.n	800e6c6 <aci_gatt_add_char+0x188>
    return BLE_STATUS_TIMEOUT;
 800e6c2:	23ff      	movs	r3, #255	; 0xff
 800e6c4:	e00c      	b.n	800e6e0 <aci_gatt_add_char+0x1a2>

  if (resp.status) {
 800e6c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d002      	beq.n	800e6d4 <aci_gatt_add_char+0x196>
    return resp.status;
 800e6ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e6d2:	e005      	b.n	800e6e0 <aci_gatt_add_char+0x1a2>
  }
    
  *charHandle = btohs(resp.handle);
 800e6d4:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6dc:	801a      	strh	r2, [r3, #0]

  return 0;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3748      	adds	r7, #72	; 0x48
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800e6e8:	b590      	push	{r4, r7, lr}
 800e6ea:	b0ab      	sub	sp, #172	; 0xac
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	4608      	mov	r0, r1
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	4623      	mov	r3, r4
 800e6f8:	80fb      	strh	r3, [r7, #6]
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	80bb      	strh	r3, [r7, #4]
 800e6fe:	460b      	mov	r3, r1
 800e700:	70fb      	strb	r3, [r7, #3]
 800e702:	4613      	mov	r3, r2
 800e704:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800e70c:	78bb      	ldrb	r3, [r7, #2]
 800e70e:	2b7a      	cmp	r3, #122	; 0x7a
 800e710:	d901      	bls.n	800e716 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800e712:	2342      	movs	r3, #66	; 0x42
 800e714:	e07c      	b.n	800e810 <aci_gatt_update_char_value+0x128>

  servHandle = htobs(servHandle);
 800e716:	88fb      	ldrh	r3, [r7, #6]
 800e718:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 800e71a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e71e:	f107 0208 	add.w	r2, r7, #8
 800e722:	4413      	add	r3, r2
 800e724:	1db9      	adds	r1, r7, #6
 800e726:	2202      	movs	r2, #2
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 fe2b 	bl	800f384 <Osal_MemCpy>
  indx += 2;
 800e72e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e732:	3302      	adds	r3, #2
 800e734:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800e738:	88bb      	ldrh	r3, [r7, #4]
 800e73a:	80bb      	strh	r3, [r7, #4]
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 800e73c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e740:	f107 0208 	add.w	r2, r7, #8
 800e744:	4413      	add	r3, r2
 800e746:	1d39      	adds	r1, r7, #4
 800e748:	2202      	movs	r2, #2
 800e74a:	4618      	mov	r0, r3
 800e74c:	f000 fe1a 	bl	800f384 <Osal_MemCpy>
  indx += 2;
 800e750:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e754:	3302      	adds	r3, #2
 800e756:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800e75a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e75e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800e762:	4413      	add	r3, r2
 800e764:	78fa      	ldrb	r2, [r7, #3]
 800e766:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e76a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e76e:	3301      	adds	r3, #1
 800e770:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800e774:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e778:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800e77c:	4413      	add	r3, r2
 800e77e:	78ba      	ldrb	r2, [r7, #2]
 800e780:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e784:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e788:	3301      	adds	r3, #1
 800e78a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 800e78e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e792:	f107 0208 	add.w	r2, r7, #8
 800e796:	4413      	add	r3, r2
 800e798:	78ba      	ldrb	r2, [r7, #2]
 800e79a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 fdf0 	bl	800f384 <Osal_MemCpy>
  indx +=  charValueLen;
 800e7a4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800e7a8:	78bb      	ldrb	r3, [r7, #2]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e7b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e7b4:	2218      	movs	r2, #24
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f000 fdf3 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e7be:	233f      	movs	r3, #63	; 0x3f
 800e7c0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800e7c4:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e7c8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800e7cc:	f107 0308 	add.w	r3, r7, #8
 800e7d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800e7d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800e7d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800e7dc:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800e7e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800e7ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f000 fa57 	bl	800eca4 <hci_send_req>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	da01      	bge.n	800e800 <aci_gatt_update_char_value+0x118>
    return BLE_STATUS_TIMEOUT;
 800e7fc:	23ff      	movs	r3, #255	; 0xff
 800e7fe:	e007      	b.n	800e810 <aci_gatt_update_char_value+0x128>

  if (status) {
 800e800:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e804:	2b00      	cmp	r3, #0
 800e806:	d002      	beq.n	800e80e <aci_gatt_update_char_value+0x126>
    return status;
 800e808:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e80c:	e000      	b.n	800e810 <aci_gatt_update_char_value+0x128>
  }

  return 0;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	37ac      	adds	r7, #172	; 0xac
 800e814:	46bd      	mov	sp, r7
 800e816:	bd90      	pop	{r4, r7, pc}

0800e818 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b08a      	sub	sp, #40	; 0x28
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	4603      	mov	r3, r0
 800e820:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800e822:	88fb      	ldrh	r3, [r7, #6]
 800e824:	81bb      	strh	r3, [r7, #12]

    Osal_MemSet(&rq, 0, sizeof(rq));
 800e826:	f107 0310 	add.w	r3, r7, #16
 800e82a:	2218      	movs	r2, #24
 800e82c:	2100      	movs	r1, #0
 800e82e:	4618      	mov	r0, r3
 800e830:	f000 fdb8 	bl	800f3a4 <Osal_MemSet>
    rq.ogf = OGF_VENDOR_CMD;
 800e834:	233f      	movs	r3, #63	; 0x3f
 800e836:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800e838:	f240 1327 	movw	r3, #295	; 0x127
 800e83c:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800e83e:	f107 030c 	add.w	r3, r7, #12
 800e842:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800e844:	2302      	movs	r3, #2
 800e846:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800e848:	f107 030b 	add.w	r3, r7, #11
 800e84c:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800e84e:	2301      	movs	r3, #1
 800e850:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800e852:	f107 0310 	add.w	r3, r7, #16
 800e856:	2100      	movs	r1, #0
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 fa23 	bl	800eca4 <hci_send_req>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	da01      	bge.n	800e868 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800e864:	23ff      	movs	r3, #255	; 0xff
 800e866:	e000      	b.n	800e86a <aci_gatt_allow_read+0x52>

    return status;
 800e868:	7afb      	ldrb	r3, [r7, #11]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3728      	adds	r7, #40	; 0x28
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b08a      	sub	sp, #40	; 0x28
 800e876:	af00      	add	r7, sp, #0
 800e878:	4603      	mov	r3, r0
 800e87a:	460a      	mov	r2, r1
 800e87c:	71fb      	strb	r3, [r7, #7]
 800e87e:	4613      	mov	r3, r2
 800e880:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800e886:	79bb      	ldrb	r3, [r7, #6]
 800e888:	737b      	strb	r3, [r7, #13]

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e88a:	f107 0310 	add.w	r3, r7, #16
 800e88e:	2218      	movs	r2, #24
 800e890:	2100      	movs	r1, #0
 800e892:	4618      	mov	r0, r3
 800e894:	f000 fd86 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e898:	233f      	movs	r3, #63	; 0x3f
 800e89a:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800e89c:	230f      	movs	r3, #15
 800e89e:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800e8a0:	f107 030c 	add.w	r3, r7, #12
 800e8a4:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800e8a6:	2302      	movs	r3, #2
 800e8a8:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800e8aa:	f107 030b 	add.w	r3, r7, #11
 800e8ae:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800e8b4:	f107 0310 	add.w	r3, r7, #16
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 f9f2 	bl	800eca4 <hci_send_req>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	da01      	bge.n	800e8ca <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800e8c6:	23ff      	movs	r3, #255	; 0xff
 800e8c8:	e000      	b.n	800e8cc <aci_hal_set_tx_power_level+0x5a>

  return status;
 800e8ca:	7afb      	ldrb	r3, [r7, #11]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3728      	adds	r7, #40	; 0x28
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <aci_l2cap_connection_parameter_update_request>:
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_l2cap_connection_parameter_update_request(uint16_t conn_handle, uint16_t interval_min,
							 uint16_t interval_max, uint16_t slave_latency,
							 uint16_t timeout_multiplier)
{
 800e8d4:	b590      	push	{r4, r7, lr}
 800e8d6:	b08d      	sub	sp, #52	; 0x34
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	4604      	mov	r4, r0
 800e8dc:	4608      	mov	r0, r1
 800e8de:	4611      	mov	r1, r2
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	4623      	mov	r3, r4
 800e8e4:	80fb      	strh	r3, [r7, #6]
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	80bb      	strh	r3, [r7, #4]
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	807b      	strh	r3, [r7, #2]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	803b      	strh	r3, [r7, #0]
  struct hci_request rq;
  uint8_t status;
  l2cap_conn_param_update_req_cp cp;

  cp.conn_handle = htobs(conn_handle);
 800e8f2:	88fb      	ldrh	r3, [r7, #6]
 800e8f4:	81bb      	strh	r3, [r7, #12]
  cp.interval_min = htobs(interval_min);
 800e8f6:	88bb      	ldrh	r3, [r7, #4]
 800e8f8:	81fb      	strh	r3, [r7, #14]
  cp.interval_max = htobs(interval_max);
 800e8fa:	887b      	ldrh	r3, [r7, #2]
 800e8fc:	823b      	strh	r3, [r7, #16]
  cp.slave_latency = htobs(slave_latency);
 800e8fe:	883b      	ldrh	r3, [r7, #0]
 800e900:	827b      	strh	r3, [r7, #18]
  cp.timeout_multiplier = htobs(timeout_multiplier);
 800e902:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e906:	82bb      	strh	r3, [r7, #20]

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e908:	f107 0318 	add.w	r3, r7, #24
 800e90c:	2218      	movs	r2, #24
 800e90e:	2100      	movs	r1, #0
 800e910:	4618      	mov	r0, r3
 800e912:	f000 fd47 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e916:	233f      	movs	r3, #63	; 0x3f
 800e918:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_L2CAP_CONN_PARAM_UPDATE_REQ;
 800e91a:	f240 1381 	movw	r3, #385	; 0x181
 800e91e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800e920:	f107 030c 	add.w	r3, r7, #12
 800e924:	623b      	str	r3, [r7, #32]
  rq.clen = L2CAP_CONN_PARAM_UPDATE_REQ_CP_SIZE;
 800e926:	230a      	movs	r3, #10
 800e928:	627b      	str	r3, [r7, #36]	; 0x24
  rq.event = EVT_CMD_STATUS;
 800e92a:	230f      	movs	r3, #15
 800e92c:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800e92e:	f107 0317 	add.w	r3, r7, #23
 800e932:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = 1;
 800e934:	2301      	movs	r3, #1
 800e936:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 800e938:	f107 0318 	add.w	r3, r7, #24
 800e93c:	2100      	movs	r1, #0
 800e93e:	4618      	mov	r0, r3
 800e940:	f000 f9b0 	bl	800eca4 <hci_send_req>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	da01      	bge.n	800e94e <aci_l2cap_connection_parameter_update_request+0x7a>
    return BLE_STATUS_TIMEOUT;
 800e94a:	23ff      	movs	r3, #255	; 0xff
 800e94c:	e000      	b.n	800e950 <aci_l2cap_connection_parameter_update_request+0x7c>
  
  return status;  
 800e94e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3734      	adds	r7, #52	; 0x34
 800e954:	46bd      	mov	sp, r7
 800e956:	bd90      	pop	{r4, r7, pc}

0800e958 <getBlueNRGVersion>:
  
  return ret;
}

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800e958:	b590      	push	{r4, r7, lr}
 800e95a:	b089      	sub	sp, #36	; 0x24
 800e95c:	af02      	add	r7, sp, #8
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version = 0 ;
 800e962:	2300      	movs	r3, #0
 800e964:	75bb      	strb	r3, [r7, #22]
  uint8_t lmp_pal_version = 0;
 800e966:	2300      	movs	r3, #0
 800e968:	757b      	strb	r3, [r7, #21]
  uint16_t hci_revision=0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	827b      	strh	r3, [r7, #18]
  uint16_t manufacturer_name=0;
 800e96e:	2300      	movs	r3, #0
 800e970:	823b      	strh	r3, [r7, #16]
  uint16_t lmp_pal_subversion=0;
 800e972:	2300      	movs	r3, #0
 800e974:	81fb      	strh	r3, [r7, #14]

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800e976:	f107 0410 	add.w	r4, r7, #16
 800e97a:	f107 0215 	add.w	r2, r7, #21
 800e97e:	f107 0112 	add.w	r1, r7, #18
 800e982:	f107 0016 	add.w	r0, r7, #22
 800e986:	f107 030e 	add.w	r3, r7, #14
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	4623      	mov	r3, r4
 800e98e:	f000 fab7 	bl	800ef00 <hci_le_read_local_version>
 800e992:	4603      	mov	r3, r0
 800e994:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

    
  if (status == BLE_STATUS_SUCCESS) {
 800e996:	7dfb      	ldrb	r3, [r7, #23]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d126      	bne.n	800e9ea <getBlueNRGVersion+0x92>
    *hwVersion = hci_revision >> 8;
 800e99c:	8a7b      	ldrh	r3, [r7, #18]
 800e99e:	0a1b      	lsrs	r3, r3, #8
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800e9a8:	8a7b      	ldrh	r3, [r7, #18]
 800e9aa:	021b      	lsls	r3, r3, #8
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	b21a      	sxth	r2, r3
 800e9b8:	89fb      	ldrh	r3, [r7, #14]
 800e9ba:	091b      	lsrs	r3, r3, #4
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	011b      	lsls	r3, r3, #4
 800e9c0:	b21b      	sxth	r3, r3
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	b21b      	sxth	r3, r3
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	b21b      	sxth	r3, r3
 800e9ca:	b29a      	uxth	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	b21a      	sxth	r2, r3
 800e9d6:	89fb      	ldrh	r3, [r7, #14]
 800e9d8:	b21b      	sxth	r3, r3
 800e9da:	f003 030f 	and.w	r3, r3, #15
 800e9de:	b21b      	sxth	r3, r3
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	b21b      	sxth	r3, r3
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	801a      	strh	r2, [r3, #0]
  }

  return status;
 800e9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	371c      	adds	r7, #28
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd90      	pop	{r4, r7, pc}

0800e9f4 <HCI_Init>:
  hci_timeout = 1;
  return;
}

void HCI_Init(void)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
  uint8_t index;
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head (&hciReadPktPool);
 800e9fa:	480f      	ldr	r0, [pc, #60]	; (800ea38 <HCI_Init+0x44>)
 800e9fc:	f000 fb84 	bl	800f108 <list_init_head>
  list_init_head (&hciReadPktRxQueue);
 800ea00:	480e      	ldr	r0, [pc, #56]	; (800ea3c <HCI_Init+0x48>)
 800ea02:	f000 fb81 	bl	800f108 <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ea06:	2300      	movs	r3, #0
 800ea08:	71fb      	strb	r3, [r7, #7]
 800ea0a:	e00c      	b.n	800ea26 <HCI_Init+0x32>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800ea0c:	79fb      	ldrb	r3, [r7, #7]
 800ea0e:	228c      	movs	r2, #140	; 0x8c
 800ea10:	fb02 f303 	mul.w	r3, r2, r3
 800ea14:	4a0a      	ldr	r2, [pc, #40]	; (800ea40 <HCI_Init+0x4c>)
 800ea16:	4413      	add	r3, r2
 800ea18:	4619      	mov	r1, r3
 800ea1a:	4807      	ldr	r0, [pc, #28]	; (800ea38 <HCI_Init+0x44>)
 800ea1c:	f000 fbcc 	bl	800f1b8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ea20:	79fb      	ldrb	r3, [r7, #7]
 800ea22:	3301      	adds	r3, #1
 800ea24:	71fb      	strb	r3, [r7, #7]
 800ea26:	79fb      	ldrb	r3, [r7, #7]
 800ea28:	2b04      	cmp	r3, #4
 800ea2a:	d9ef      	bls.n	800ea0c <HCI_Init+0x18>
  }
}
 800ea2c:	bf00      	nop
 800ea2e:	bf00      	nop
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	20000ee4 	.word	0x20000ee4
 800ea3c:	20000eec 	.word	0x20000eec
 800ea40:	20000250 	.word	0x20000250

0800ea44 <HCI_verify>:
 *
 * @param[in] hciReadPacket    The packet that is received from HCI interface.
 * @return 0 if HCI packet is as expected
 */
int HCI_verify(const tHciDataPacket * hciReadPacket)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3308      	adds	r3, #8
 800ea50:	60fb      	str	r3, [r7, #12]
  
  if(hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	2b04      	cmp	r3, #4
 800ea58:	d001      	beq.n	800ea5e <HCI_verify+0x1a>
    return 1;  /* Incorrect type. */
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e00c      	b.n	800ea78 <HCI_verify+0x34>
  
  if(hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3302      	adds	r3, #2
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	461a      	mov	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ea6c:	3b03      	subs	r3, #3
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d001      	beq.n	800ea76 <HCI_verify+0x32>
    return 2; /* Wrong length (packet truncated or too long). */
 800ea72:	2302      	movs	r3, #2
 800ea74:	e000      	b.n	800ea78 <HCI_verify+0x34>
  
  return 0;      
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <HCI_Process>:
////  }
////}


void HCI_Process(void)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	603b      	str	r3, [r7, #0]
  
  Disable_SPI_IRQ();
 800ea8e:	f7f7 ffa5 	bl	80069dc <Disable_SPI_IRQ>
  uint8_t list_empty = list_is_empty(&hciReadPktRxQueue);        
 800ea92:	4814      	ldr	r0, [pc, #80]	; (800eae4 <HCI_Process+0x60>)
 800ea94:	f000 fb48 	bl	800f128 <list_is_empty>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	71fb      	strb	r3, [r7, #7]
  /* process any pending events read */
  while(list_empty == FALSE)
 800ea9c:	e017      	b.n	800eace <HCI_Process+0x4a>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800ea9e:	463b      	mov	r3, r7
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	4810      	ldr	r0, [pc, #64]	; (800eae4 <HCI_Process+0x60>)
 800eaa4:	f000 fbcf 	bl	800f246 <list_remove_head>
    Enable_SPI_IRQ();
 800eaa8:	f7f7 ff91 	bl	80069ce <Enable_SPI_IRQ>
    HCI_Event_CB(hciReadPacket->dataBuff);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	3308      	adds	r3, #8
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7f7 f937 	bl	8005d24 <HCI_Event_CB>
    Disable_SPI_IRQ();
 800eab6:	f7f7 ff91 	bl	80069dc <Disable_SPI_IRQ>
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	4619      	mov	r1, r3
 800eabe:	480a      	ldr	r0, [pc, #40]	; (800eae8 <HCI_Process+0x64>)
 800eac0:	f000 fb7a 	bl	800f1b8 <list_insert_tail>
    list_empty = list_is_empty(&hciReadPktRxQueue);
 800eac4:	4807      	ldr	r0, [pc, #28]	; (800eae4 <HCI_Process+0x60>)
 800eac6:	f000 fb2f 	bl	800f128 <list_is_empty>
 800eaca:	4603      	mov	r3, r0
 800eacc:	71fb      	strb	r3, [r7, #7]
  while(list_empty == FALSE)
 800eace:	79fb      	ldrb	r3, [r7, #7]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d0e4      	beq.n	800ea9e <HCI_Process+0x1a>
  }
  /* Explicit call to HCI_Isr(), since it cannot be called by ISR if IRQ is kept high by
  BlueNRG. */
  HCI_Isr();
 800ead4:	f000 f814 	bl	800eb00 <HCI_Isr>
  Enable_SPI_IRQ();    
 800ead8:	f7f7 ff79 	bl	80069ce <Enable_SPI_IRQ>
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	20000eec 	.word	0x20000eec
 800eae8:	20000ee4 	.word	0x20000ee4

0800eaec <HCI_Queue_Empty>:

BOOL HCI_Queue_Empty(void)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	af00      	add	r7, sp, #0
  return list_is_empty(&hciReadPktRxQueue);
 800eaf0:	4802      	ldr	r0, [pc, #8]	; (800eafc <HCI_Queue_Empty+0x10>)
 800eaf2:	f000 fb19 	bl	800f128 <list_is_empty>
 800eaf6:	4603      	mov	r3, r0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	20000eec 	.word	0x20000eec

0800eb00 <HCI_Isr>:

void HCI_Isr(void)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800eb06:	2300      	movs	r3, #0
 800eb08:	603b      	str	r3, [r7, #0]
  uint8_t data_len;
  
  Clear_SPI_EXTI_Flag();
 800eb0a:	f7f7 ff6f 	bl	80069ec <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 800eb0e:	e038      	b.n	800eb82 <HCI_Isr+0x82>
    if (list_is_empty (&hciReadPktPool) == FALSE){
 800eb10:	4820      	ldr	r0, [pc, #128]	; (800eb94 <HCI_Isr+0x94>)
 800eb12:	f000 fb09 	bl	800f128 <list_is_empty>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d12d      	bne.n	800eb78 <HCI_Isr+0x78>
      
      /* enqueueing a packet for read */
      list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800eb1c:	463b      	mov	r3, r7
 800eb1e:	4619      	mov	r1, r3
 800eb20:	481c      	ldr	r0, [pc, #112]	; (800eb94 <HCI_Isr+0x94>)
 800eb22:	f000 fb90 	bl	800f246 <list_remove_head>
      
      data_len = BlueNRG_SPI_Read_All(&SpiHandle, hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	3308      	adds	r3, #8
 800eb2a:	2280      	movs	r2, #128	; 0x80
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	481a      	ldr	r0, [pc, #104]	; (800eb98 <HCI_Isr+0x98>)
 800eb30:	f7f7 fde0 	bl	80066f4 <BlueNRG_SPI_Read_All>
 800eb34:	4603      	mov	r3, r0
 800eb36:	71fb      	strb	r3, [r7, #7]
      if(data_len > 0){                    
 800eb38:	79fb      	ldrb	r3, [r7, #7]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d016      	beq.n	800eb6c <HCI_Isr+0x6c>
        hciReadPacket->data_len = data_len;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	79fa      	ldrb	r2, [r7, #7]
 800eb42:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if(HCI_verify(hciReadPacket) == 0)
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7ff ff7b 	bl	800ea44 <HCI_verify>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d105      	bne.n	800eb60 <HCI_Isr+0x60>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	4619      	mov	r1, r3
 800eb58:	4810      	ldr	r0, [pc, #64]	; (800eb9c <HCI_Isr+0x9c>)
 800eb5a:	f000 fb2d 	bl	800f1b8 <list_insert_tail>
 800eb5e:	e00e      	b.n	800eb7e <HCI_Isr+0x7e>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	4619      	mov	r1, r3
 800eb64:	480b      	ldr	r0, [pc, #44]	; (800eb94 <HCI_Isr+0x94>)
 800eb66:	f000 fb01 	bl	800f16c <list_insert_head>
 800eb6a:	e008      	b.n	800eb7e <HCI_Isr+0x7e>
      }
      else {
        // Insert the packet back into the pool.
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	4619      	mov	r1, r3
 800eb70:	4808      	ldr	r0, [pc, #32]	; (800eb94 <HCI_Isr+0x94>)
 800eb72:	f000 fafb 	bl	800f16c <list_insert_head>
 800eb76:	e002      	b.n	800eb7e <HCI_Isr+0x7e>
      }
      
    }
    else{
      // HCI Read Packet Pool is empty, wait for a free packet.
      Clear_SPI_EXTI_Flag();
 800eb78:	f7f7 ff38 	bl	80069ec <Clear_SPI_EXTI_Flag>
 800eb7c:	e006      	b.n	800eb8c <HCI_Isr+0x8c>
      return;
    }
    
    Clear_SPI_EXTI_Flag();
 800eb7e:	f7f7 ff35 	bl	80069ec <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 800eb82:	f7f7 fda7 	bl	80066d4 <BlueNRG_DataPresent>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1c1      	bne.n	800eb10 <HCI_Isr+0x10>
  }
}
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	20000ee4 	.word	0x20000ee4
 800eb98:	20000e88 	.word	0x20000e88
 800eb9c:	20000eec 	.word	0x20000eec

0800eba0 <hci_write>:

void hci_write(const void* data1, const void* data2, uint8_t n_bytes1, uint8_t n_bytes2){
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	4611      	mov	r1, r2
 800ebac:	461a      	mov	r2, r3
 800ebae:	460b      	mov	r3, r1
 800ebb0:	71fb      	strb	r3, [r7, #7]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	71bb      	strb	r3, [r7, #6]
  for(int i=0; i < n_bytes2; i++)
    PRINTF("%02X ", *((uint8_t*)data2 + i));
  PRINTF("\r\n");    
#endif
  
  Hal_Write_Serial(data1, data2, n_bytes1, n_bytes2);
 800ebb6:	79fa      	ldrb	r2, [r7, #7]
 800ebb8:	79bb      	ldrb	r3, [r7, #6]
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f7f7 fd13 	bl	80065e8 <Hal_Write_Serial>
}
 800ebc2:	bf00      	nop
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <hci_send_cmd>:

void hci_send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b086      	sub	sp, #24
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	607b      	str	r3, [r7, #4]
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	81fb      	strh	r3, [r7, #14]
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	81bb      	strh	r3, [r7, #12]
 800ebda:	4613      	mov	r3, r2
 800ebdc:	72fb      	strb	r3, [r7, #11]
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ebde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ebe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebe6:	b21a      	sxth	r2, r3
 800ebe8:	89fb      	ldrh	r3, [r7, #14]
 800ebea:	029b      	lsls	r3, r3, #10
 800ebec:	b21b      	sxth	r3, r3
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	b21b      	sxth	r3, r3
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	82bb      	strh	r3, [r7, #20]
  hc.plen= plen;
 800ebf6:	7afb      	ldrb	r3, [r7, #11]
 800ebf8:	75bb      	strb	r3, [r7, #22]
  
  uint8_t header[HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE];
  header[0] = HCI_COMMAND_PKT;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	743b      	strb	r3, [r7, #16]
  Osal_MemCpy(header+1, &hc, sizeof(hc));
 800ebfe:	f107 0310 	add.w	r3, r7, #16
 800ec02:	3301      	adds	r3, #1
 800ec04:	f107 0114 	add.w	r1, r7, #20
 800ec08:	2203      	movs	r2, #3
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 fbba 	bl	800f384 <Osal_MemCpy>
  
  hci_write(header, param, sizeof(header), plen);
 800ec10:	7afb      	ldrb	r3, [r7, #11]
 800ec12:	f107 0010 	add.w	r0, r7, #16
 800ec16:	2204      	movs	r2, #4
 800ec18:	6879      	ldr	r1, [r7, #4]
 800ec1a:	f7ff ffc1 	bl	800eba0 <hci_write>
}
 800ec1e:	bf00      	nop
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <move_list>:

static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b084      	sub	sp, #16
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while(!list_is_empty(src_list)){
 800ec30:	e00a      	b.n	800ec48 <move_list+0x22>
    list_remove_tail(src_list, &tmp_node);
 800ec32:	f107 030c 	add.w	r3, r7, #12
 800ec36:	4619      	mov	r1, r3
 800ec38:	6838      	ldr	r0, [r7, #0]
 800ec3a:	f000 fb2b 	bl	800f294 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	4619      	mov	r1, r3
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 fa92 	bl	800f16c <list_insert_head>
  while(!list_is_empty(src_list)){
 800ec48:	6838      	ldr	r0, [r7, #0]
 800ec4a:	f000 fa6d 	bl	800f128 <list_is_empty>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d0ee      	beq.n	800ec32 <move_list+0xc>
  }
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
	...

0800ec60 <free_event_list>:

 /* It ensures that we have at least half of the free buffers in the pool. */
static void free_event_list(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
    
  Disable_SPI_IRQ();
 800ec66:	f7f7 feb9 	bl	80069dc <Disable_SPI_IRQ>
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ec6a:	e00b      	b.n	800ec84 <free_event_list+0x24>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800ec6c:	1d3b      	adds	r3, r7, #4
 800ec6e:	4619      	mov	r1, r3
 800ec70:	480a      	ldr	r0, [pc, #40]	; (800ec9c <free_event_list+0x3c>)
 800ec72:	f000 fae8 	bl	800f246 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4619      	mov	r1, r3
 800ec7a:	4809      	ldr	r0, [pc, #36]	; (800eca0 <free_event_list+0x40>)
 800ec7c:	f000 fa9c 	bl	800f1b8 <list_insert_tail>
    /* Explicit call to HCI_Isr(), since it cannot be called by ISR if IRQ is kept high by
    BlueNRG */
    HCI_Isr();
 800ec80:	f7ff ff3e 	bl	800eb00 <HCI_Isr>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ec84:	4806      	ldr	r0, [pc, #24]	; (800eca0 <free_event_list+0x40>)
 800ec86:	f000 fb2c 	bl	800f2e2 <list_get_size>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	dded      	ble.n	800ec6c <free_event_list+0xc>
  }
  
  Enable_SPI_IRQ();
 800ec90:	f7f7 fe9d 	bl	80069ce <Enable_SPI_IRQ>
}
 800ec94:	bf00      	nop
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	20000eec 	.word	0x20000eec
 800eca0:	20000ee4 	.word	0x20000ee4

0800eca4 <hci_send_req>:

int hci_send_req(struct hci_request *r, BOOL async)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b090      	sub	sp, #64	; 0x40
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	460b      	mov	r3, r1
 800ecae:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	885b      	ldrh	r3, [r3, #2]
 800ecb4:	b21b      	sxth	r3, r3
 800ecb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecba:	b21a      	sxth	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	881b      	ldrh	r3, [r3, #0]
 800ecc0:	029b      	lsls	r3, r3, #10
 800ecc2:	b21b      	sxth	r3, r3
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	b21b      	sxth	r3, r3
 800ecc8:	877b      	strh	r3, [r7, #58]	; 0x3a
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;
  int to = DEFAULT_TIMEOUT;
 800ecca:	2364      	movs	r3, #100	; 0x64
 800eccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct timer t;
  tHciDataPacket * hciReadPacket = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800ecd2:	f107 0308 	add.w	r3, r7, #8
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 fa16 	bl	800f108 <list_init_head>

  free_event_list();
 800ecdc:	f7ff ffc0 	bl	800ec60 <free_event_list>
  
  hci_send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	8818      	ldrh	r0, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	8859      	ldrh	r1, [r3, #2]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	f7ff ff6a 	bl	800ebca <hci_send_cmd>
  
  if(async){
 800ecf6:	78fb      	ldrb	r3, [r7, #3]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d001      	beq.n	800ed00 <hci_send_req+0x5c>
    return 0;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	e0f7      	b.n	800eef0 <hci_send_req+0x24c>
  }
  
  /* Minimum timeout is 1. */
  if(to == 0)
 800ed00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d101      	bne.n	800ed0a <hci_send_req+0x66>
    to = 1;
 800ed06:	2301      	movs	r3, #1
 800ed08:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  Timer_Set(&t, to);
 800ed0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed0c:	f107 0314 	add.w	r3, r7, #20
 800ed10:	4611      	mov	r1, r2
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 fb0d 	bl	800f332 <Timer_Set>
      Enter_Sleep_Mode();
      ATOMIC_SECTION_END();
    }
#else
    while(1){
      if(Timer_Expired(&t)){
 800ed18:	f107 0314 	add.w	r3, r7, #20
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f000 fb19 	bl	800f354 <Timer_Expired>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f040 80bb 	bne.w	800eea0 <hci_send_req+0x1fc>
        goto failed;
      }
      if(!HCI_Queue_Empty()){
 800ed2a:	f7ff fedf 	bl	800eaec <HCI_Queue_Empty>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d000      	beq.n	800ed36 <hci_send_req+0x92>
      if(Timer_Expired(&t)){
 800ed34:	e7f0      	b.n	800ed18 <hci_send_req+0x74>
        break;
 800ed36:	bf00      	nop
      }
    }
#endif
    
    /* Extract packet from HCI event queue. */
    Disable_SPI_IRQ();
 800ed38:	f7f7 fe50 	bl	80069dc <Disable_SPI_IRQ>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800ed3c:	f107 0310 	add.w	r3, r7, #16
 800ed40:	4619      	mov	r1, r3
 800ed42:	486d      	ldr	r0, [pc, #436]	; (800eef8 <hci_send_req+0x254>)
 800ed44:	f000 fa7f 	bl	800f246 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	3308      	adds	r3, #8
 800ed4c:	637b      	str	r3, [r7, #52]	; 0x34

    if(hci_hdr->type == HCI_EVENT_PKT){
 800ed4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	2b04      	cmp	r3, #4
 800ed54:	d17b      	bne.n	800ee4e <hci_send_req+0x1aa>
    
    event_pckt = (void *) (hci_hdr->data);
 800ed56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed58:	3301      	adds	r3, #1
 800ed5a:	633b      	str	r3, [r7, #48]	; 0x30
    
    ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	3308      	adds	r3, #8
 800ed60:	3303      	adds	r3, #3
 800ed62:	62fb      	str	r3, [r7, #44]	; 0x2c
    len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ed6a:	3b03      	subs	r3, #3
 800ed6c:	62bb      	str	r3, [r7, #40]	; 0x28
    
    switch (event_pckt->evt) {
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	2b3e      	cmp	r3, #62	; 0x3e
 800ed74:	d04d      	beq.n	800ee12 <hci_send_req+0x16e>
 800ed76:	2b3e      	cmp	r3, #62	; 0x3e
 800ed78:	dc6b      	bgt.n	800ee52 <hci_send_req+0x1ae>
 800ed7a:	2b10      	cmp	r3, #16
 800ed7c:	f000 8092 	beq.w	800eea4 <hci_send_req+0x200>
 800ed80:	2b10      	cmp	r3, #16
 800ed82:	dc66      	bgt.n	800ee52 <hci_send_req+0x1ae>
 800ed84:	2b0e      	cmp	r3, #14
 800ed86:	d024      	beq.n	800edd2 <hci_send_req+0x12e>
 800ed88:	2b0f      	cmp	r3, #15
 800ed8a:	d162      	bne.n	800ee52 <hci_send_req+0x1ae>
      
    case EVT_CMD_STATUS:
      cs = (void *) ptr;
 800ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8e:	623b      	str	r3, [r7, #32]
      
      if (cs->opcode != opcode)
 800ed90:	6a3b      	ldr	r3, [r7, #32]
 800ed92:	885b      	ldrh	r3, [r3, #2]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	f040 8085 	bne.w	800eea8 <hci_send_req+0x204>
        goto failed;
      
      if (r->event != EVT_CMD_STATUS) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	2b0f      	cmp	r3, #15
 800eda4:	d004      	beq.n	800edb0 <hci_send_req+0x10c>
        if (cs->status) {
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d053      	beq.n	800ee56 <hci_send_req+0x1b2>
          goto failed;
 800edae:	e07e      	b.n	800eeae <hci_send_req+0x20a>
        }
        break;
      }
      
      r->rlen = MIN(len, r->rlen);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	695a      	ldr	r2, [r3, #20]
 800edb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb6:	429a      	cmp	r2, r3
 800edb8:	bfa8      	it	ge
 800edba:	461a      	movge	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6918      	ldr	r0, [r3, #16]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	461a      	mov	r2, r3
 800edca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edcc:	f000 fada 	bl	800f384 <Osal_MemCpy>
      goto done;
 800edd0:	e080      	b.n	800eed4 <hci_send_req+0x230>
      
    case EVT_CMD_COMPLETE:
      cc = (void *) ptr;
 800edd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd4:	61fb      	str	r3, [r7, #28]
      
      if (cc->opcode != opcode)
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d163      	bne.n	800eeac <hci_send_req+0x208>
        goto failed;
      
      ptr += EVT_CMD_COMPLETE_SIZE;
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	3303      	adds	r3, #3
 800ede8:	62fb      	str	r3, [r7, #44]	; 0x2c
      len -= EVT_CMD_COMPLETE_SIZE;
 800edea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edec:	3b03      	subs	r3, #3
 800edee:	62bb      	str	r3, [r7, #40]	; 0x28
      
      r->rlen = MIN(len, r->rlen);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	695a      	ldr	r2, [r3, #20]
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	429a      	cmp	r2, r3
 800edf8:	bfa8      	it	ge
 800edfa:	461a      	movge	r2, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6918      	ldr	r0, [r3, #16]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	695b      	ldr	r3, [r3, #20]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee0c:	f000 faba 	bl	800f384 <Osal_MemCpy>
      goto done;
 800ee10:	e060      	b.n	800eed4 <hci_send_req+0x230>
      
    case EVT_LE_META_EVENT:
      me = (void *) ptr;
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	627b      	str	r3, [r7, #36]	; 0x24
      
      if (me->subevent != r->event)
 800ee16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d11a      	bne.n	800ee5a <hci_send_req+0x1b6>
        break;
      
      len -= 1;
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	3b01      	subs	r3, #1
 800ee28:	62bb      	str	r3, [r7, #40]	; 0x28
      r->rlen = MIN(len, r->rlen);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	695a      	ldr	r2, [r3, #20]
 800ee2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee30:	429a      	cmp	r2, r3
 800ee32:	bfa8      	it	ge
 800ee34:	461a      	movge	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, me->data, r->rlen);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6918      	ldr	r0, [r3, #16]
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	1c59      	adds	r1, r3, #1
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	695b      	ldr	r3, [r3, #20]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f000 fa9c 	bl	800f384 <Osal_MemCpy>
      goto done;
 800ee4c:	e042      	b.n	800eed4 <hci_send_req+0x230>
      goto failed;
      
    default:      
      break;
      }
    }
 800ee4e:	bf00      	nop
 800ee50:	e004      	b.n	800ee5c <hci_send_req+0x1b8>
      break;
 800ee52:	bf00      	nop
 800ee54:	e002      	b.n	800ee5c <hci_send_req+0x1b8>
        break;
 800ee56:	bf00      	nop
 800ee58:	e000      	b.n	800ee5c <hci_send_req+0x1b8>
        break;
 800ee5a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if(list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)){
 800ee5c:	4827      	ldr	r0, [pc, #156]	; (800eefc <hci_send_req+0x258>)
 800ee5e:	f000 f963 	bl	800f128 <list_is_empty>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00d      	beq.n	800ee84 <hci_send_req+0x1e0>
 800ee68:	4823      	ldr	r0, [pc, #140]	; (800eef8 <hci_send_req+0x254>)
 800ee6a:	f000 f95d 	bl	800f128 <list_is_empty>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d007      	beq.n	800ee84 <hci_send_req+0x1e0>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	4619      	mov	r1, r3
 800ee78:	4820      	ldr	r0, [pc, #128]	; (800eefc <hci_send_req+0x258>)
 800ee7a:	f000 f99d 	bl	800f1b8 <list_insert_tail>
      hciReadPacket=NULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	613b      	str	r3, [r7, #16]
 800ee82:	e008      	b.n	800ee96 <hci_send_req+0x1f2>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	f107 0308 	add.w	r3, r7, #8
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f000 f993 	bl	800f1b8 <list_insert_tail>
      hciReadPacket=NULL;
 800ee92:	2300      	movs	r3, #0
 800ee94:	613b      	str	r3, [r7, #16]
    }

    HCI_Isr();
 800ee96:	f7ff fe33 	bl	800eb00 <HCI_Isr>
    
    Enable_SPI_IRQ();
 800ee9a:	f7f7 fd98 	bl	80069ce <Enable_SPI_IRQ>
  while(1) {
 800ee9e:	e73b      	b.n	800ed18 <hci_send_req+0x74>
        goto failed;
 800eea0:	bf00      	nop
 800eea2:	e004      	b.n	800eeae <hci_send_req+0x20a>
      goto failed;
 800eea4:	bf00      	nop
 800eea6:	e002      	b.n	800eeae <hci_send_req+0x20a>
        goto failed;
 800eea8:	bf00      	nop
 800eeaa:	e000      	b.n	800eeae <hci_send_req+0x20a>
        goto failed;
 800eeac:	bf00      	nop
    
  }
  
failed: 
  if(hciReadPacket!=NULL){
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d004      	beq.n	800eebe <hci_send_req+0x21a>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4810      	ldr	r0, [pc, #64]	; (800eefc <hci_send_req+0x258>)
 800eeba:	f000 f957 	bl	800f16c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 800eebe:	f107 0308 	add.w	r3, r7, #8
 800eec2:	4619      	mov	r1, r3
 800eec4:	480c      	ldr	r0, [pc, #48]	; (800eef8 <hci_send_req+0x254>)
 800eec6:	f7ff feae 	bl	800ec26 <move_list>
  Enable_SPI_IRQ();
 800eeca:	f7f7 fd80 	bl	80069ce <Enable_SPI_IRQ>
  return -1;
 800eece:	f04f 33ff 	mov.w	r3, #4294967295
 800eed2:	e00d      	b.n	800eef0 <hci_send_req+0x24c>
  
done:
  // Insert the packet back into the pool.
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	4619      	mov	r1, r3
 800eed8:	4808      	ldr	r0, [pc, #32]	; (800eefc <hci_send_req+0x258>)
 800eeda:	f000 f947 	bl	800f16c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800eede:	f107 0308 	add.w	r3, r7, #8
 800eee2:	4619      	mov	r1, r3
 800eee4:	4804      	ldr	r0, [pc, #16]	; (800eef8 <hci_send_req+0x254>)
 800eee6:	f7ff fe9e 	bl	800ec26 <move_list>
  
  Enable_SPI_IRQ();
 800eeea:	f7f7 fd70 	bl	80069ce <Enable_SPI_IRQ>
  return 0;
 800eeee:	2300      	movs	r3, #0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3740      	adds	r7, #64	; 0x40
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	20000eec 	.word	0x20000eec
 800eefc:	20000ee4 	.word	0x20000ee4

0800ef00 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b08e      	sub	sp, #56	; 0x38
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
 800ef0c:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  Osal_MemSet(&resp, 0, sizeof(resp));
 800ef0e:	f107 0314 	add.w	r3, r7, #20
 800ef12:	2209      	movs	r2, #9
 800ef14:	2100      	movs	r1, #0
 800ef16:	4618      	mov	r0, r3
 800ef18:	f000 fa44 	bl	800f3a4 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ef1c:	f107 0320 	add.w	r3, r7, #32
 800ef20:	2218      	movs	r2, #24
 800ef22:	2100      	movs	r1, #0
 800ef24:	4618      	mov	r0, r3
 800ef26:	f000 fa3d 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_INFO_PARAM;
 800ef2a:	2304      	movs	r3, #4
 800ef2c:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800ef32:	2300      	movs	r3, #0
 800ef34:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800ef3a:	f107 0314 	add.w	r3, r7, #20
 800ef3e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800ef40:	2309      	movs	r3, #9
 800ef42:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ef44:	f107 0320 	add.w	r3, r7, #32
 800ef48:	2100      	movs	r1, #0
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7ff feaa 	bl	800eca4 <hci_send_req>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	da01      	bge.n	800ef5a <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800ef56:	23ff      	movs	r3, #255	; 0xff
 800ef58:	e018      	b.n	800ef8c <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800ef5a:	7d3b      	ldrb	r3, [r7, #20]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d001      	beq.n	800ef64 <hci_le_read_local_version+0x64>
    return resp.status;
 800ef60:	7d3b      	ldrb	r3, [r7, #20]
 800ef62:	e013      	b.n	800ef8c <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800ef64:	7d7a      	ldrb	r2, [r7, #21]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800ef6a:	8afa      	ldrh	r2, [r7, #22]
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800ef70:	7e3a      	ldrb	r2, [r7, #24]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800ef76:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800ef80:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef88:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3738      	adds	r7, #56	; 0x38
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b092      	sub	sp, #72	; 0x48
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	6039      	str	r1, [r7, #0]
 800ef9e:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  Osal_MemSet(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800efa0:	f107 0310 	add.w	r3, r7, #16
 800efa4:	2220      	movs	r2, #32
 800efa6:	2100      	movs	r1, #0
 800efa8:	4618      	mov	r0, r3
 800efaa:	f000 f9fb 	bl	800f3a4 <Osal_MemSet>
  scan_resp_cp.length = length;
 800efae:	79fb      	ldrb	r3, [r7, #7]
 800efb0:	743b      	strb	r3, [r7, #16]
  Osal_MemCpy(scan_resp_cp.data, data, MIN(31,length));
 800efb2:	79fb      	ldrb	r3, [r7, #7]
 800efb4:	2b1f      	cmp	r3, #31
 800efb6:	bf28      	it	cs
 800efb8:	231f      	movcs	r3, #31
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	461a      	mov	r2, r3
 800efbe:	f107 0310 	add.w	r3, r7, #16
 800efc2:	3301      	adds	r3, #1
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 f9dc 	bl	800f384 <Osal_MemCpy>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800efcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efd0:	2218      	movs	r2, #24
 800efd2:	2100      	movs	r1, #0
 800efd4:	4618      	mov	r0, r3
 800efd6:	f000 f9e5 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_LE_CTL;
 800efda:	2308      	movs	r3, #8
 800efdc:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800efde:	2309      	movs	r3, #9
 800efe0:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800efe2:	f107 0310 	add.w	r3, r7, #16
 800efe6:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800efe8:	2320      	movs	r3, #32
 800efea:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800efec:	f107 030f 	add.w	r3, r7, #15
 800eff0:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800eff2:	2301      	movs	r3, #1
 800eff4:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800eff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800effa:	2100      	movs	r1, #0
 800effc:	4618      	mov	r0, r3
 800effe:	f7ff fe51 	bl	800eca4 <hci_send_req>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	da01      	bge.n	800f00c <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800f008:	23ff      	movs	r3, #255	; 0xff
 800f00a:	e000      	b.n	800f00e <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3748      	adds	r7, #72	; 0x48
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <hci_le_set_random_address>:
  
  return 0;
}

int hci_le_set_random_address(tBDAddr bdaddr)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b08c      	sub	sp, #48	; 0x30
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  le_set_random_address_cp set_rand_addr_cp;
  uint8_t status;
  
  Osal_MemSet(&set_rand_addr_cp, 0, sizeof(set_rand_addr_cp));
 800f01e:	f107 0310 	add.w	r3, r7, #16
 800f022:	2206      	movs	r2, #6
 800f024:	2100      	movs	r1, #0
 800f026:	4618      	mov	r0, r3
 800f028:	f000 f9bc 	bl	800f3a4 <Osal_MemSet>
  Osal_MemCpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 800f02c:	f107 0310 	add.w	r3, r7, #16
 800f030:	2206      	movs	r2, #6
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	4618      	mov	r0, r3
 800f036:	f000 f9a5 	bl	800f384 <Osal_MemCpy>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800f03a:	f107 0318 	add.w	r3, r7, #24
 800f03e:	2218      	movs	r2, #24
 800f040:	2100      	movs	r1, #0
 800f042:	4618      	mov	r0, r3
 800f044:	f000 f9ae 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_LE_CTL;
 800f048:	2308      	movs	r3, #8
 800f04a:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_LE_SET_RANDOM_ADDRESS;
 800f04c:	2305      	movs	r3, #5
 800f04e:	837b      	strh	r3, [r7, #26]
  rq.cparam = &set_rand_addr_cp;
 800f050:	f107 0310 	add.w	r3, r7, #16
 800f054:	623b      	str	r3, [r7, #32]
  rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
 800f056:	2306      	movs	r3, #6
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &status;
 800f05a:	f107 030f 	add.w	r3, r7, #15
 800f05e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = 1;
 800f060:	2301      	movs	r3, #1
 800f062:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f064:	f107 0318 	add.w	r3, r7, #24
 800f068:	2100      	movs	r1, #0
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7ff fe1a 	bl	800eca4 <hci_send_req>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	da01      	bge.n	800f07a <hci_le_set_random_address+0x64>
    return BLE_STATUS_TIMEOUT;
 800f076:	23ff      	movs	r3, #255	; 0xff
 800f078:	e000      	b.n	800f07c <hci_le_set_random_address+0x66>
  
  return status;
 800f07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3730      	adds	r7, #48	; 0x30
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <hci_read_rssi>:
  
  return 0;
}

int hci_read_rssi(uint16_t *conn_handle, int8_t * rssi)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08a      	sub	sp, #40	; 0x28
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
  struct hci_request rq;
  read_rssi_cp params;
  read_rssi_rp resp;
  
  Osal_MemSet(&resp, 0, sizeof(resp));
 800f08e:	f107 0308 	add.w	r3, r7, #8
 800f092:	2204      	movs	r2, #4
 800f094:	2100      	movs	r1, #0
 800f096:	4618      	mov	r0, r3
 800f098:	f000 f984 	bl	800f3a4 <Osal_MemSet>
  
  params.handle = *conn_handle;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	81bb      	strh	r3, [r7, #12]
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800f0a2:	f107 0310 	add.w	r3, r7, #16
 800f0a6:	2218      	movs	r2, #24
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f000 f97a 	bl	800f3a4 <Osal_MemSet>
  rq.ogf = OGF_STATUS_PARAM;
 800f0b0:	2305      	movs	r3, #5
 800f0b2:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_READ_RSSI;
 800f0b4:	2305      	movs	r3, #5
 800f0b6:	827b      	strh	r3, [r7, #18]
  rq.cparam = &params;
 800f0b8:	f107 030c 	add.w	r3, r7, #12
 800f0bc:	61bb      	str	r3, [r7, #24]
  rq.clen = READ_RSSI_CP_SIZE;
 800f0be:	2302      	movs	r3, #2
 800f0c0:	61fb      	str	r3, [r7, #28]
  rq.rparam = &resp;
 800f0c2:	f107 0308 	add.w	r3, r7, #8
 800f0c6:	623b      	str	r3, [r7, #32]
  rq.rlen = READ_RSSI_RP_SIZE;
 800f0c8:	2304      	movs	r3, #4
 800f0ca:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0){
 800f0cc:	f107 0310 	add.w	r3, r7, #16
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7ff fde6 	bl	800eca4 <hci_send_req>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	da01      	bge.n	800f0e2 <hci_read_rssi+0x5e>
    return BLE_STATUS_TIMEOUT;
 800f0de:	23ff      	movs	r3, #255	; 0xff
 800f0e0:	e00e      	b.n	800f100 <hci_read_rssi+0x7c>
  }
  
  if (resp.status) {
 800f0e2:	7a3b      	ldrb	r3, [r7, #8]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d001      	beq.n	800f0ec <hci_read_rssi+0x68>
    return resp.status;
 800f0e8:	7a3b      	ldrb	r3, [r7, #8]
 800f0ea:	e009      	b.n	800f100 <hci_read_rssi+0x7c>
  }
  
  *conn_handle = resp.handle;
 800f0ec:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	801a      	strh	r2, [r3, #0]
  *rssi = resp.rssi;
 800f0f6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	701a      	strb	r2, [r3, #0]
  
  return 0;
 800f0fe:	2300      	movs	r3, #0
}
 800f100:	4618      	mov	r0, r3
 800f102:	3728      	adds	r7, #40	; 0x28
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	605a      	str	r2, [r3, #4]
}
 800f11c:	bf00      	nop
 800f11e:	370c      	adds	r7, #12
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr

0800f128 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800f128:	b480      	push	{r7}
 800f12a:	b087      	sub	sp, #28
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f130:	f3ef 8310 	mrs	r3, PRIMASK
 800f134:	60fb      	str	r3, [r7, #12]
  return(result);
 800f136:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uint8_t return_value;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f13a:	b672      	cpsid	i
}
 800f13c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	429a      	cmp	r2, r3
 800f146:	d102      	bne.n	800f14e <list_is_empty+0x26>
  {
    return_value = TRUE;
 800f148:	2301      	movs	r3, #1
 800f14a:	75fb      	strb	r3, [r7, #23]
 800f14c:	e001      	b.n	800f152 <list_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800f14e:	2300      	movs	r3, #0
 800f150:	75fb      	strb	r3, [r7, #23]
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f383 8810 	msr	PRIMASK, r3
}
 800f15c:	bf00      	nop
  }
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800f15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f160:	4618      	mov	r0, r3
 800f162:	371c      	adds	r7, #28
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b087      	sub	sp, #28
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f176:	f3ef 8310 	mrs	r3, PRIMASK
 800f17a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f17c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f17e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f180:	b672      	cpsid	i
}
 800f182:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	683a      	ldr	r2, [r7, #0]
 800f196:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	605a      	str	r2, [r3, #4]
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	f383 8810 	msr	PRIMASK, r3
}
 800f1aa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f1ac:	bf00      	nop
 800f1ae:	371c      	adds	r7, #28
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b087      	sub	sp, #28
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1c2:	f3ef 8310 	mrs	r3, PRIMASK
 800f1c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f1ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1cc:	b672      	cpsid	i
}
 800f1ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685a      	ldr	r2, [r3, #4]
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	683a      	ldr	r2, [r7, #0]
 800f1e2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	683a      	ldr	r2, [r7, #0]
 800f1ea:	601a      	str	r2, [r3, #0]
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	f383 8810 	msr	PRIMASK, r3
}
 800f1f6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f1f8:	bf00      	nop
 800f1fa:	371c      	adds	r7, #28
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800f204:	b480      	push	{r7}
 800f206:	b087      	sub	sp, #28
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f20c:	f3ef 8310 	mrs	r3, PRIMASK
 800f210:	60fb      	str	r3, [r7, #12]
  return(result);
 800f212:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f216:	b672      	cpsid	i
}
 800f218:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	6812      	ldr	r2, [r2, #0]
 800f222:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	6852      	ldr	r2, [r2, #4]
 800f22c:	605a      	str	r2, [r3, #4]
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	f383 8810 	msr	PRIMASK, r3
}
 800f238:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f23a:	bf00      	nop
 800f23c:	371c      	adds	r7, #28
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr

0800f246 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b086      	sub	sp, #24
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
 800f24e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f250:	f3ef 8310 	mrs	r3, PRIMASK
 800f254:	60fb      	str	r3, [r7, #12]
  return(result);
 800f256:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f25a:	b672      	cpsid	i
}
 800f25c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7ff ffca 	bl	800f204 <list_remove_node>
  (*node)->next = NULL;
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2200      	movs	r2, #0
 800f276:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2200      	movs	r2, #0
 800f27e:	605a      	str	r2, [r3, #4]
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	f383 8810 	msr	PRIMASK, r3
}
 800f28a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f28c:	bf00      	nop
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f29e:	f3ef 8310 	mrs	r3, PRIMASK
 800f2a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f2a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2a8:	b672      	cpsid	i
}
 800f2aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff ffa3 	bl	800f204 <list_remove_node>
  (*node)->next = NULL;
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	605a      	str	r2, [r3, #4]
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	f383 8810 	msr	PRIMASK, r3
}
 800f2d8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f2da:	bf00      	nop
 800f2dc:	3718      	adds	r7, #24
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800f2e2:	b480      	push	{r7}
 800f2e4:	b089      	sub	sp, #36	; 0x24
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
  int size = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2ee:	f3ef 8310 	mrs	r3, PRIMASK
 800f2f2:	613b      	str	r3, [r7, #16]
  return(result);
 800f2f4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f2f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2f8:	b672      	cpsid	i
}
 800f2fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f302:	e005      	b.n	800f310 <list_get_size+0x2e>
  {
    size++;
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	3301      	adds	r3, #1
 800f308:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f310:	69ba      	ldr	r2, [r7, #24]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	429a      	cmp	r2, r3
 800f316:	d1f5      	bne.n	800f304 <list_get_size+0x22>
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f383 8810 	msr	PRIMASK, r3
}
 800f322:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  return (size);
 800f324:	69fb      	ldr	r3, [r7, #28]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3724      	adds	r7, #36	; 0x24
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr

0800f332 <Timer_Set>:
 * @param[in] interval  The interval before the timer expires.
 *
 */
void
Timer_Set(struct timer *t, tClockTime interval)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b082      	sub	sp, #8
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
 800f33a:	6039      	str	r1, [r7, #0]
  t->interval = interval;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	605a      	str	r2, [r3, #4]
  t->start = Clock_Time();
 800f342:	f7fa f815 	bl	8009370 <HAL_GetTick>
 800f346:	4602      	mov	r2, r0
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	601a      	str	r2, [r3, #0]
}
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <Timer_Expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
Timer_Expired(struct timer *t)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  tClockTime diff = (Clock_Time() - t->start) + 1;
 800f35c:	f7fa f808 	bl	8009370 <HAL_GetTick>
 800f360:	4602      	mov	r2, r0
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	3301      	adds	r3, #1
 800f36a:	60fb      	str	r3, [r7, #12]
  return t->interval < diff;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	429a      	cmp	r2, r3
 800f374:	bf8c      	ite	hi
 800f376:	2301      	movhi	r3, #1
 800f378:	2300      	movls	r3, #0
 800f37a:	b2db      	uxtb	r3, r3

}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <Osal_MemCpy>:
 * @param  size: Number of bytes to copy from the source to the destination
 *               buffer
 * @retval Pointer to the destination buffer
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
    return(memcpy(dest,src,size)); 
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 fde9 	bl	800ff6c <memcpy>
 800f39a:	4603      	mov	r3, r0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <Osal_MemSet>:
 * @param  value: Value to assign to each byte of the memory block
 * @param  size : Number of bytes to be set to "value"
 * @retval Pointer to the filled block of memory
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
    return(memset(ptr,value,size));
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	68b9      	ldr	r1, [r7, #8]
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 fde7 	bl	800ff88 <memset>
 800f3ba:	4603      	mov	r3, r0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <CUSTOM_ENV_SENSOR_Init>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t CUSTOM_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b08a      	sub	sp, #40	; 0x28
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	61bb      	str	r3, [r7, #24]
  CUSTOM_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d131      	bne.n	800f444 <CUSTOM_ENV_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_ENV_SENSOR_LPS22HH_0 == 1)
    case CUSTOM_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800f3e0:	6838      	ldr	r0, [r7, #0]
 800f3e2:	f000 f8fd 	bl	800f5e0 <LPS22HH_0_Probe>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d002      	beq.n	800f3f2 <CUSTOM_ENV_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800f3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f0:	e064      	b.n	800f4bc <CUSTOM_ENV_SENSOR_Init+0xf8>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800f3f2:	4a34      	ldr	r2, [pc, #208]	; (800f4c4 <CUSTOM_ENV_SENSOR_Init+0x100>)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	4932      	ldr	r1, [pc, #200]	; (800f4c8 <CUSTOM_ENV_SENSOR_Init+0x104>)
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f404:	f107 0108 	add.w	r1, r7, #8
 800f408:	4610      	mov	r0, r2
 800f40a:	4798      	blx	r3
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d002      	beq.n	800f418 <CUSTOM_ENV_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800f412:	f06f 0306 	mvn.w	r3, #6
 800f416:	e051      	b.n	800f4bc <CUSTOM_ENV_SENSOR_Init+0xf8>
      }
      if (cap.Temperature == 1U)
 800f418:	7a3b      	ldrb	r3, [r7, #8]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d103      	bne.n	800f426 <CUSTOM_ENV_SENSOR_Init+0x62>
      {
        component_functions |= ENV_TEMPERATURE;
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	f043 0301 	orr.w	r3, r3, #1
 800f424:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800f426:	7abb      	ldrb	r3, [r7, #10]
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d103      	bne.n	800f434 <CUSTOM_ENV_SENSOR_Init+0x70>
      {
        component_functions |= ENV_HUMIDITY;
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	f043 0304 	orr.w	r3, r3, #4
 800f432:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800f434:	7a7b      	ldrb	r3, [r7, #9]
 800f436:	2b01      	cmp	r3, #1
 800f438:	d108      	bne.n	800f44c <CUSTOM_ENV_SENSOR_Init+0x88>
      {
        component_functions |= ENV_PRESSURE;
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	f043 0302 	orr.w	r3, r3, #2
 800f440:	61bb      	str	r3, [r7, #24]
      }
      break;
 800f442:	e003      	b.n	800f44c <CUSTOM_ENV_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800f444:	f06f 0301 	mvn.w	r3, #1
 800f448:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f44a:	e000      	b.n	800f44e <CUSTOM_ENV_SENSOR_Init+0x8a>
      break;
 800f44c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800f44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f450:	2b00      	cmp	r3, #0
 800f452:	d001      	beq.n	800f458 <CUSTOM_ENV_SENSOR_Init+0x94>
  {
    return ret;
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f456:	e031      	b.n	800f4bc <CUSTOM_ENV_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 800f458:	2300      	movs	r3, #0
 800f45a:	61fb      	str	r3, [r7, #28]
 800f45c:	e02a      	b.n	800f4b4 <CUSTOM_ENV_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800f45e:	683a      	ldr	r2, [r7, #0]
 800f460:	6a3b      	ldr	r3, [r7, #32]
 800f462:	4013      	ands	r3, r2
 800f464:	6a3a      	ldr	r2, [r7, #32]
 800f466:	429a      	cmp	r2, r3
 800f468:	d11e      	bne.n	800f4a8 <CUSTOM_ENV_SENSOR_Init+0xe4>
 800f46a:	69ba      	ldr	r2, [r7, #24]
 800f46c:	6a3b      	ldr	r3, [r7, #32]
 800f46e:	4013      	ands	r3, r2
 800f470:	6a3a      	ldr	r2, [r7, #32]
 800f472:	429a      	cmp	r2, r3
 800f474:	d118      	bne.n	800f4a8 <CUSTOM_ENV_SENSOR_Init+0xe4>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800f476:	4a15      	ldr	r2, [pc, #84]	; (800f4cc <CUSTOM_ENV_SENSOR_Init+0x108>)
 800f478:	6a3b      	ldr	r3, [r7, #32]
 800f47a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f47e:	4814      	ldr	r0, [pc, #80]	; (800f4d0 <CUSTOM_ENV_SENSOR_Init+0x10c>)
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	4613      	mov	r3, r2
 800f484:	005b      	lsls	r3, r3, #1
 800f486:	4413      	add	r3, r2
 800f488:	440b      	add	r3, r1
 800f48a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	490d      	ldr	r1, [pc, #52]	; (800f4c8 <CUSTOM_ENV_SENSOR_Init+0x104>)
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f498:	4610      	mov	r0, r2
 800f49a:	4798      	blx	r3
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d002      	beq.n	800f4a8 <CUSTOM_ENV_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800f4a2:	f06f 0304 	mvn.w	r3, #4
 800f4a6:	e009      	b.n	800f4bc <CUSTOM_ENV_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800f4a8:	6a3b      	ldr	r3, [r7, #32]
 800f4aa:	005b      	lsls	r3, r3, #1
 800f4ac:	623b      	str	r3, [r7, #32]
  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	61fb      	str	r3, [r7, #28]
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d9d1      	bls.n	800f45e <CUSTOM_ENV_SENSOR_Init+0x9a>
  }

  return ret;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3728      	adds	r7, #40	; 0x28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20000518 	.word	0x20000518
 800f4c8:	20000ef4 	.word	0x20000ef4
 800f4cc:	200000c4 	.word	0x200000c4
 800f4d0:	2000050c 	.word	0x2000050c

0800f4d4 <CUSTOM_ENV_SENSOR_Enable>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t CUSTOM_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <CUSTOM_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f4e4:	f06f 0301 	mvn.w	r3, #1
 800f4e8:	60fb      	str	r3, [r7, #12]
 800f4ea:	e028      	b.n	800f53e <CUSTOM_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800f4ec:	4a16      	ldr	r2, [pc, #88]	; (800f548 <CUSTOM_ENV_SENSOR_Enable+0x74>)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	4013      	ands	r3, r2
 800f4f8:	683a      	ldr	r2, [r7, #0]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d11c      	bne.n	800f538 <CUSTOM_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800f4fe:	4a13      	ldr	r2, [pc, #76]	; (800f54c <CUSTOM_ENV_SENSOR_Enable+0x78>)
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f506:	4812      	ldr	r0, [pc, #72]	; (800f550 <CUSTOM_ENV_SENSOR_Enable+0x7c>)
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	4613      	mov	r3, r2
 800f50c:	005b      	lsls	r3, r3, #1
 800f50e:	4413      	add	r3, r2
 800f510:	440b      	add	r3, r1
 800f512:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	490e      	ldr	r1, [pc, #56]	; (800f554 <CUSTOM_ENV_SENSOR_Enable+0x80>)
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f520:	4610      	mov	r0, r2
 800f522:	4798      	blx	r3
 800f524:	4603      	mov	r3, r0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d003      	beq.n	800f532 <CUSTOM_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f52a:	f06f 0304 	mvn.w	r3, #4
 800f52e:	60fb      	str	r3, [r7, #12]
 800f530:	e005      	b.n	800f53e <CUSTOM_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f532:	2300      	movs	r3, #0
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	e002      	b.n	800f53e <CUSTOM_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800f538:	f06f 0301 	mvn.w	r3, #1
 800f53c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f53e:	68fb      	ldr	r3, [r7, #12]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	2000051c 	.word	0x2000051c
 800f54c:	200000c4 	.word	0x200000c4
 800f550:	2000050c 	.word	0x2000050c
 800f554:	20000ef4 	.word	0x20000ef4

0800f558 <CUSTOM_ENV_SENSOR_GetValue>:
 *         - ENV_HUMIDITY
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t CUSTOM_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d003      	beq.n	800f572 <CUSTOM_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f56a:	f06f 0301 	mvn.w	r3, #1
 800f56e:	617b      	str	r3, [r7, #20]
 800f570:	e029      	b.n	800f5c6 <CUSTOM_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800f572:	4a17      	ldr	r2, [pc, #92]	; (800f5d0 <CUSTOM_ENV_SENSOR_GetValue+0x78>)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	4013      	ands	r3, r2
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	429a      	cmp	r2, r3
 800f582:	d11d      	bne.n	800f5c0 <CUSTOM_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800f584:	4a13      	ldr	r2, [pc, #76]	; (800f5d4 <CUSTOM_ENV_SENSOR_GetValue+0x7c>)
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f58c:	4812      	ldr	r0, [pc, #72]	; (800f5d8 <CUSTOM_ENV_SENSOR_GetValue+0x80>)
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	4613      	mov	r3, r2
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	4413      	add	r3, r2
 800f596:	440b      	add	r3, r1
 800f598:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f59c:	691b      	ldr	r3, [r3, #16]
 800f59e:	490f      	ldr	r1, [pc, #60]	; (800f5dc <CUSTOM_ENV_SENSOR_GetValue+0x84>)
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f5a6:	6879      	ldr	r1, [r7, #4]
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	4798      	blx	r3
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d003      	beq.n	800f5ba <CUSTOM_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f5b2:	f06f 0304 	mvn.w	r3, #4
 800f5b6:	617b      	str	r3, [r7, #20]
 800f5b8:	e005      	b.n	800f5c6 <CUSTOM_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	617b      	str	r3, [r7, #20]
 800f5be:	e002      	b.n	800f5c6 <CUSTOM_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800f5c0:	f06f 0301 	mvn.w	r3, #1
 800f5c4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800f5c6:	697b      	ldr	r3, [r7, #20]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3718      	adds	r7, #24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	2000051c 	.word	0x2000051c
 800f5d4:	200000c4 	.word	0x200000c4
 800f5d8:	2000050c 	.word	0x2000050c
 800f5dc:	20000ef4 	.word	0x20000ef4

0800f5e0 <LPS22HH_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b090      	sub	sp, #64	; 0x40
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = 0x0;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = CUSTOM_LPS22HH_0_Init;
 800f5f6:	4b49      	ldr	r3, [pc, #292]	; (800f71c <LPS22HH_0_Probe+0x13c>)
 800f5f8:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = CUSTOM_LPS22HH_0_DeInit;
 800f5fa:	4b49      	ldr	r3, [pc, #292]	; (800f720 <LPS22HH_0_Probe+0x140>)
 800f5fc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = CUSTOM_LPS22HH_0_ReadReg;
 800f5fe:	4b49      	ldr	r3, [pc, #292]	; (800f724 <LPS22HH_0_Probe+0x144>)
 800f600:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = CUSTOM_LPS22HH_0_WriteReg;
 800f602:	4b49      	ldr	r3, [pc, #292]	; (800f728 <LPS22HH_0_Probe+0x148>)
 800f604:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = BSP_GetTick;
 800f606:	4b49      	ldr	r3, [pc, #292]	; (800f72c <LPS22HH_0_Probe+0x14c>)
 800f608:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800f60a:	f107 0320 	add.w	r3, r7, #32
 800f60e:	4619      	mov	r1, r3
 800f610:	4847      	ldr	r0, [pc, #284]	; (800f730 <LPS22HH_0_Probe+0x150>)
 800f612:	f7f7 f9f7 	bl	8006a04 <LPS22HH_RegisterBusIO>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d003      	beq.n	800f624 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f61c:	f06f 0306 	mvn.w	r3, #6
 800f620:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f622:	e076      	b.n	800f712 <LPS22HH_0_Probe+0x132>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800f624:	f107 031f 	add.w	r3, r7, #31
 800f628:	4619      	mov	r1, r3
 800f62a:	4841      	ldr	r0, [pc, #260]	; (800f730 <LPS22HH_0_Probe+0x150>)
 800f62c:	f7f7 fa8f 	bl	8006b4e <LPS22HH_ReadID>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d003      	beq.n	800f63e <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f636:	f06f 0306 	mvn.w	r3, #6
 800f63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f63c:	e069      	b.n	800f712 <LPS22HH_0_Probe+0x132>
  }
  else if (id != LPS22HH_ID)
 800f63e:	7ffb      	ldrb	r3, [r7, #31]
 800f640:	2bb3      	cmp	r3, #179	; 0xb3
 800f642:	d003      	beq.n	800f64c <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f644:	f06f 0306 	mvn.w	r3, #6
 800f648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f64a:	e062      	b.n	800f712 <LPS22HH_0_Probe+0x132>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800f64c:	f107 030c 	add.w	r3, r7, #12
 800f650:	4619      	mov	r1, r3
 800f652:	4837      	ldr	r0, [pc, #220]	; (800f730 <LPS22HH_0_Probe+0x150>)
 800f654:	f7f7 fa92 	bl	8006b7c <LPS22HH_GetCapabilities>

    EnvCtx[CUSTOM_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800f658:	7b3b      	ldrb	r3, [r7, #12]
 800f65a:	461a      	mov	r2, r3
 800f65c:	7b7b      	ldrb	r3, [r7, #13]
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	431a      	orrs	r2, r3
                                    uint32_t)cap.Humidity << 2);
 800f662:	7bbb      	ldrb	r3, [r7, #14]
 800f664:	009b      	lsls	r3, r3, #2
    EnvCtx[CUSTOM_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800f666:	4313      	orrs	r3, r2
 800f668:	4a32      	ldr	r2, [pc, #200]	; (800f734 <LPS22HH_0_Probe+0x154>)
 800f66a:	6013      	str	r3, [r2, #0]

    EnvCompObj[CUSTOM_LPS22HH_0] = &lps22hh_obj_0;
 800f66c:	4b32      	ldr	r3, [pc, #200]	; (800f738 <LPS22HH_0_Probe+0x158>)
 800f66e:	4a30      	ldr	r2, [pc, #192]	; (800f730 <LPS22HH_0_Probe+0x150>)
 800f670:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[CUSTOM_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800f672:	4b32      	ldr	r3, [pc, #200]	; (800f73c <LPS22HH_0_Probe+0x15c>)
 800f674:	4a32      	ldr	r2, [pc, #200]	; (800f740 <LPS22HH_0_Probe+0x160>)
 800f676:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800f678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d11d      	bne.n	800f6ba <LPS22HH_0_Probe+0xda>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f003 0301 	and.w	r3, r3, #1
 800f684:	2b00      	cmp	r3, #0
 800f686:	d018      	beq.n	800f6ba <LPS22HH_0_Probe+0xda>
 800f688:	7b3b      	ldrb	r3, [r7, #12]
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d115      	bne.n	800f6ba <LPS22HH_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[CUSTOM_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800f68e:	4b2d      	ldr	r3, [pc, #180]	; (800f744 <LPS22HH_0_Probe+0x164>)
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	4a2d      	ldr	r2, [pc, #180]	; (800f748 <LPS22HH_0_Probe+0x168>)
 800f694:	492d      	ldr	r1, [pc, #180]	; (800f74c <LPS22HH_0_Probe+0x16c>)
 800f696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[CUSTOM_LPS22HH_0]->Init(EnvCompObj[CUSTOM_LPS22HH_0]) != LPS22HH_OK)
 800f69a:	4b28      	ldr	r3, [pc, #160]	; (800f73c <LPS22HH_0_Probe+0x15c>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a25      	ldr	r2, [pc, #148]	; (800f738 <LPS22HH_0_Probe+0x158>)
 800f6a2:	6812      	ldr	r2, [r2, #0]
 800f6a4:	4610      	mov	r0, r2
 800f6a6:	4798      	blx	r3
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d003      	beq.n	800f6b6 <LPS22HH_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f6ae:	f06f 0304 	mvn.w	r3, #4
 800f6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6b4:	e001      	b.n	800f6ba <LPS22HH_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800f6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d11d      	bne.n	800f6fc <LPS22HH_0_Probe+0x11c>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f003 0302 	and.w	r3, r3, #2
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d018      	beq.n	800f6fc <LPS22HH_0_Probe+0x11c>
 800f6ca:	7b7b      	ldrb	r3, [r7, #13]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d115      	bne.n	800f6fc <LPS22HH_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[CUSTOM_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800f6d0:	4b1c      	ldr	r3, [pc, #112]	; (800f744 <LPS22HH_0_Probe+0x164>)
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	4a1c      	ldr	r2, [pc, #112]	; (800f748 <LPS22HH_0_Probe+0x168>)
 800f6d6:	491e      	ldr	r1, [pc, #120]	; (800f750 <LPS22HH_0_Probe+0x170>)
 800f6d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[CUSTOM_LPS22HH_0]->Init(EnvCompObj[CUSTOM_LPS22HH_0]) != LPS22HH_OK)
 800f6dc:	4b17      	ldr	r3, [pc, #92]	; (800f73c <LPS22HH_0_Probe+0x15c>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4a15      	ldr	r2, [pc, #84]	; (800f738 <LPS22HH_0_Probe+0x158>)
 800f6e4:	6812      	ldr	r2, [r2, #0]
 800f6e6:	4610      	mov	r0, r2
 800f6e8:	4798      	blx	r3
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d003      	beq.n	800f6f8 <LPS22HH_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f6f0:	f06f 0304 	mvn.w	r3, #4
 800f6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6f6:	e001      	b.n	800f6fc <LPS22HH_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800f6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d107      	bne.n	800f712 <LPS22HH_0_Probe+0x132>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f003 0304 	and.w	r3, r3, #4
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d002      	beq.n	800f712 <LPS22HH_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f70c:	f06f 0304 	mvn.w	r3, #4
 800f710:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800f712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f714:	4618      	mov	r0, r3
 800f716:	3740      	adds	r7, #64	; 0x40
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	0800f755 	.word	0x0800f755
 800f720:	0800f779 	.word	0x0800f779
 800f724:	0800f811 	.word	0x0800f811
 800f728:	0800f79d 	.word	0x0800f79d
 800f72c:	08001595 	.word	0x08001595
 800f730:	20000520 	.word	0x20000520
 800f734:	2000051c 	.word	0x2000051c
 800f738:	20000ef4 	.word	0x20000ef4
 800f73c:	20000518 	.word	0x20000518
 800f740:	2000002c 	.word	0x2000002c
 800f744:	200000c4 	.word	0x200000c4
 800f748:	2000050c 	.word	0x2000050c
 800f74c:	20000050 	.word	0x20000050
 800f750:	2000003c 	.word	0x2000003c

0800f754 <CUSTOM_LPS22HH_0_Init>:
/**
 * @brief  Initialize SPI bus for LPS22HH
 * @retval BSP status
 */
static int32_t CUSTOM_LPS22HH_0_Init(void)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f75a:	f06f 0305 	mvn.w	r3, #5
 800f75e:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LPS22HH_0_SPI_Init() == BSP_ERROR_NONE)
 800f760:	f7f1 fe88 	bl	8001474 <BSP_SPI2_Init>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d101      	bne.n	800f76e <CUSTOM_LPS22HH_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800f76a:	2300      	movs	r3, #0
 800f76c:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800f76e:	687b      	ldr	r3, [r7, #4]
}
 800f770:	4618      	mov	r0, r3
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <CUSTOM_LPS22HH_0_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LPS22HH
 * @retval BSP status
 */
static int32_t CUSTOM_LPS22HH_0_DeInit(void)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f77e:	f06f 0305 	mvn.w	r3, #5
 800f782:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LPS22HH_0_SPI_DeInit() == BSP_ERROR_NONE)
 800f784:	f7f1 fea6 	bl	80014d4 <BSP_SPI2_DeInit>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <CUSTOM_LPS22HH_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800f78e:	2300      	movs	r3, #0
 800f790:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800f792:	687b      	ldr	r3, [r7, #4]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <CUSTOM_LPS22HH_0_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t CUSTOM_LPS22HH_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b086      	sub	sp, #24
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	60ba      	str	r2, [r7, #8]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	81fb      	strh	r3, [r7, #14]
 800f7aa:	460b      	mov	r3, r1
 800f7ac:	81bb      	strh	r3, [r7, #12]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800f7b6:	89bb      	ldrh	r3, [r7, #12]
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LPS22HH_0_CS_PORT, CUSTOM_LPS22HH_0_CS_PIN, GPIO_PIN_RESET);
 800f7bc:	2200      	movs	r2, #0
 800f7be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f7c2:	4812      	ldr	r0, [pc, #72]	; (800f80c <CUSTOM_LPS22HH_0_WriteReg+0x70>)
 800f7c4:	f7fa fe46 	bl	800a454 <HAL_GPIO_WritePin>

  if (CUSTOM_LPS22HH_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800f7c8:	f107 0313 	add.w	r3, r7, #19
 800f7cc:	2101      	movs	r1, #1
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7f1 fea8 	bl	8001524 <BSP_SPI2_Send>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d002      	beq.n	800f7e0 <CUSTOM_LPS22HH_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f7da:	f06f 0305 	mvn.w	r3, #5
 800f7de:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LPS22HH_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 800f7e0:	88fb      	ldrh	r3, [r7, #6]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	68b8      	ldr	r0, [r7, #8]
 800f7e6:	f7f1 fe9d 	bl	8001524 <BSP_SPI2_Send>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d002      	beq.n	800f7f6 <CUSTOM_LPS22HH_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f7f0:	f06f 0305 	mvn.w	r3, #5
 800f7f4:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LPS22HH_0_CS_PORT, CUSTOM_LPS22HH_0_CS_PIN, GPIO_PIN_SET);
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f7fc:	4803      	ldr	r0, [pc, #12]	; (800f80c <CUSTOM_LPS22HH_0_WriteReg+0x70>)
 800f7fe:	f7fa fe29 	bl	800a454 <HAL_GPIO_WritePin>

  return ret;
 800f802:	697b      	ldr	r3, [r7, #20]
}
 800f804:	4618      	mov	r0, r3
 800f806:	3718      	adds	r7, #24
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	40020800 	.word	0x40020800

0800f810 <CUSTOM_LPS22HH_0_ReadReg>:
 * @param  pdata the pointer to the data to be read
 * @param  len the length of the data to be read
 * @retval BSP status
 */
static int32_t CUSTOM_LPS22HH_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	60ba      	str	r2, [r7, #8]
 800f818:	461a      	mov	r2, r3
 800f81a:	4603      	mov	r3, r0
 800f81c:	81fb      	strh	r3, [r7, #14]
 800f81e:	460b      	mov	r3, r1
 800f820:	81bb      	strh	r3, [r7, #12]
 800f822:	4613      	mov	r3, r2
 800f824:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800f826:	2300      	movs	r3, #0
 800f828:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800f82a:	89bb      	ldrh	r3, [r7, #12]
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 800f830:	7cfb      	ldrb	r3, [r7, #19]
 800f832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f836:	b2db      	uxtb	r3, r3
 800f838:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LPS22HH_0_CS_PORT, CUSTOM_LPS22HH_0_CS_PIN, GPIO_PIN_RESET);
 800f83a:	2200      	movs	r2, #0
 800f83c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f840:	4812      	ldr	r0, [pc, #72]	; (800f88c <CUSTOM_LPS22HH_0_ReadReg+0x7c>)
 800f842:	f7fa fe07 	bl	800a454 <HAL_GPIO_WritePin>

  if (CUSTOM_LPS22HH_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800f846:	f107 0313 	add.w	r3, r7, #19
 800f84a:	2101      	movs	r1, #1
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7f1 fe69 	bl	8001524 <BSP_SPI2_Send>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d002      	beq.n	800f85e <CUSTOM_LPS22HH_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f858:	f06f 0305 	mvn.w	r3, #5
 800f85c:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LPS22HH_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 800f85e:	88fb      	ldrh	r3, [r7, #6]
 800f860:	4619      	mov	r1, r3
 800f862:	68b8      	ldr	r0, [r7, #8]
 800f864:	f7f1 fe7a 	bl	800155c <BSP_SPI2_Recv>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d002      	beq.n	800f874 <CUSTOM_LPS22HH_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f86e:	f06f 0305 	mvn.w	r3, #5
 800f872:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LPS22HH_0_CS_PORT, CUSTOM_LPS22HH_0_CS_PIN, GPIO_PIN_SET);
 800f874:	2201      	movs	r2, #1
 800f876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f87a:	4804      	ldr	r0, [pc, #16]	; (800f88c <CUSTOM_LPS22HH_0_ReadReg+0x7c>)
 800f87c:	f7fa fdea 	bl	800a454 <HAL_GPIO_WritePin>

  return ret;
 800f880:	697b      	ldr	r3, [r7, #20]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3718      	adds	r7, #24
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	40020800 	.word	0x40020800

0800f890 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b08e      	sub	sp, #56	; 0x38
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f89a:	2300      	movs	r3, #0
 800f89c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d131      	bne.n	800f910 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSR_0 == 1)
    case CUSTOM_LSM6DSR_0:
      if (LSM6DSR_0_Probe(Functions) != BSP_ERROR_NONE)
 800f8ac:	6838      	ldr	r0, [r7, #0]
 800f8ae:	f000 f987 	bl	800fbc0 <LSM6DSR_0_Probe>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d002      	beq.n	800f8be <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800f8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f8bc:	e064      	b.n	800f988 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800f8be:	4a34      	ldr	r2, [pc, #208]	; (800f990 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	4932      	ldr	r1, [pc, #200]	; (800f994 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f8d0:	f107 010c 	add.w	r1, r7, #12
 800f8d4:	4610      	mov	r0, r2
 800f8d6:	4798      	blx	r3
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d002      	beq.n	800f8e4 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800f8de:	f06f 0306 	mvn.w	r3, #6
 800f8e2:	e051      	b.n	800f988 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800f8e4:	7b3b      	ldrb	r3, [r7, #12]
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	d103      	bne.n	800f8f2 <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800f8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ec:	f043 0302 	orr.w	r3, r3, #2
 800f8f0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800f8f2:	7b7b      	ldrb	r3, [r7, #13]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d103      	bne.n	800f900 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fa:	f043 0301 	orr.w	r3, r3, #1
 800f8fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800f900:	7bbb      	ldrb	r3, [r7, #14]
 800f902:	2b01      	cmp	r3, #1
 800f904:	d108      	bne.n	800f918 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800f906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f908:	f043 0304 	orr.w	r3, r3, #4
 800f90c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800f90e:	e003      	b.n	800f918 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800f910:	f06f 0301 	mvn.w	r3, #1
 800f914:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800f916:	e000      	b.n	800f91a <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800f918:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800f91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d001      	beq.n	800f924 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800f920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f922:	e031      	b.n	800f988 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800f924:	2300      	movs	r3, #0
 800f926:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f928:	e02a      	b.n	800f980 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800f92a:	683a      	ldr	r2, [r7, #0]
 800f92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92e:	4013      	ands	r3, r2
 800f930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f932:	429a      	cmp	r2, r3
 800f934:	d11e      	bne.n	800f974 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800f936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93a:	4013      	ands	r3, r2
 800f93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f93e:	429a      	cmp	r2, r3
 800f940:	d118      	bne.n	800f974 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800f942:	4a15      	ldr	r2, [pc, #84]	; (800f998 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f94a:	4814      	ldr	r0, [pc, #80]	; (800f99c <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	4613      	mov	r3, r2
 800f950:	005b      	lsls	r3, r3, #1
 800f952:	4413      	add	r3, r2
 800f954:	440b      	add	r3, r1
 800f956:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	490d      	ldr	r1, [pc, #52]	; (800f994 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f964:	4610      	mov	r0, r2
 800f966:	4798      	blx	r3
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d002      	beq.n	800f974 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800f96e:	f06f 0304 	mvn.w	r3, #4
 800f972:	e009      	b.n	800f988 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800f974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f976:	005b      	lsls	r3, r3, #1
 800f978:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800f97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97c:	3301      	adds	r3, #1
 800f97e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f982:	2b02      	cmp	r3, #2
 800f984:	d9d1      	bls.n	800f92a <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800f986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3738      	adds	r7, #56	; 0x38
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	20000558 	.word	0x20000558
 800f994:	20000ef8 	.word	0x20000ef8
 800f998:	200000d8 	.word	0x200000d8
 800f99c:	2000054c 	.word	0x2000054c

0800f9a0 <CUSTOM_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d003      	beq.n	800f9b8 <CUSTOM_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f9b0:	f06f 0301 	mvn.w	r3, #1
 800f9b4:	60fb      	str	r3, [r7, #12]
 800f9b6:	e028      	b.n	800fa0a <CUSTOM_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800f9b8:	4a16      	ldr	r2, [pc, #88]	; (800fa14 <CUSTOM_MOTION_SENSOR_Enable+0x74>)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	4013      	ands	r3, r2
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d11c      	bne.n	800fa04 <CUSTOM_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800f9ca:	4a13      	ldr	r2, [pc, #76]	; (800fa18 <CUSTOM_MOTION_SENSOR_Enable+0x78>)
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f9d2:	4812      	ldr	r0, [pc, #72]	; (800fa1c <CUSTOM_MOTION_SENSOR_Enable+0x7c>)
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	005b      	lsls	r3, r3, #1
 800f9da:	4413      	add	r3, r2
 800f9dc:	440b      	add	r3, r1
 800f9de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	490e      	ldr	r1, [pc, #56]	; (800fa20 <CUSTOM_MOTION_SENSOR_Enable+0x80>)
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	4798      	blx	r3
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d003      	beq.n	800f9fe <CUSTOM_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f9f6:	f06f 0304 	mvn.w	r3, #4
 800f9fa:	60fb      	str	r3, [r7, #12]
 800f9fc:	e005      	b.n	800fa0a <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	60fb      	str	r3, [r7, #12]
 800fa02:	e002      	b.n	800fa0a <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fa04:	f06f 0301 	mvn.w	r3, #1
 800fa08:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	2000055c 	.word	0x2000055c
 800fa18:	200000d8 	.word	0x200000d8
 800fa1c:	2000054c 	.word	0x2000054c
 800fa20:	20000ef8 	.word	0x20000ef8

0800fa24 <CUSTOM_MOTION_SENSOR_GetAxesRaw>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes raw data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxesRaw(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_AxesRaw_t *Axes)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d003      	beq.n	800fa3e <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fa36:	f06f 0301 	mvn.w	r3, #1
 800fa3a:	617b      	str	r3, [r7, #20]
 800fa3c:	e029      	b.n	800fa92 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fa3e:	4a17      	ldr	r2, [pc, #92]	; (800fa9c <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x78>)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	4013      	ands	r3, r2
 800fa4a:	68ba      	ldr	r2, [r7, #8]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d11d      	bne.n	800fa8c <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxesRaw(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800fa50:	4a13      	ldr	r2, [pc, #76]	; (800faa0 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x7c>)
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fa58:	4812      	ldr	r0, [pc, #72]	; (800faa4 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x80>)
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	005b      	lsls	r3, r3, #1
 800fa60:	4413      	add	r3, r2
 800fa62:	440b      	add	r3, r1
 800fa64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	490f      	ldr	r1, [pc, #60]	; (800faa8 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x84>)
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fa72:	6879      	ldr	r1, [r7, #4]
 800fa74:	4610      	mov	r0, r2
 800fa76:	4798      	blx	r3
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d003      	beq.n	800fa86 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fa7e:	f06f 0304 	mvn.w	r3, #4
 800fa82:	617b      	str	r3, [r7, #20]
 800fa84:	e005      	b.n	800fa92 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fa86:	2300      	movs	r3, #0
 800fa88:	617b      	str	r3, [r7, #20]
 800fa8a:	e002      	b.n	800fa92 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fa8c:	f06f 0301 	mvn.w	r3, #1
 800fa90:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800fa92:	697b      	ldr	r3, [r7, #20]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3718      	adds	r7, #24
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	2000055c 	.word	0x2000055c
 800faa0:	200000d8 	.word	0x200000d8
 800faa4:	2000054c 	.word	0x2000054c
 800faa8:	20000ef8 	.word	0x20000ef8

0800faac <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b086      	sub	sp, #24
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d003      	beq.n	800fac8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fac0:	f06f 0301 	mvn.w	r3, #1
 800fac4:	617b      	str	r3, [r7, #20]
 800fac6:	e02a      	b.n	800fb1e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fac8:	4a17      	ldr	r2, [pc, #92]	; (800fb28 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	4013      	ands	r3, r2
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d11e      	bne.n	800fb18 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800fada:	4a14      	ldr	r2, [pc, #80]	; (800fb2c <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fae2:	4813      	ldr	r0, [pc, #76]	; (800fb30 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	4613      	mov	r3, r2
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	4413      	add	r3, r2
 800faec:	440b      	add	r3, r1
 800faee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	490f      	ldr	r1, [pc, #60]	; (800fb34 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fafc:	ed97 0a01 	vldr	s0, [r7, #4]
 800fb00:	4610      	mov	r0, r2
 800fb02:	4798      	blx	r3
 800fb04:	4603      	mov	r3, r0
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d003      	beq.n	800fb12 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fb0a:	f06f 0304 	mvn.w	r3, #4
 800fb0e:	617b      	str	r3, [r7, #20]
 800fb10:	e005      	b.n	800fb1e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fb12:	2300      	movs	r3, #0
 800fb14:	617b      	str	r3, [r7, #20]
 800fb16:	e002      	b.n	800fb1e <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fb18:	f06f 0301 	mvn.w	r3, #1
 800fb1c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800fb1e:	697b      	ldr	r3, [r7, #20]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	2000055c 	.word	0x2000055c
 800fb2c:	200000d8 	.word	0x200000d8
 800fb30:	2000054c 	.word	0x2000054c
 800fb34:	20000ef8 	.word	0x20000ef8

0800fb38 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b086      	sub	sp, #24
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d003      	beq.n	800fb52 <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fb4a:	f06f 0301 	mvn.w	r3, #1
 800fb4e:	617b      	str	r3, [r7, #20]
 800fb50:	e029      	b.n	800fba6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fb52:	4a17      	ldr	r2, [pc, #92]	; (800fbb0 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	68ba      	ldr	r2, [r7, #8]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d11d      	bne.n	800fba0 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800fb64:	4a13      	ldr	r2, [pc, #76]	; (800fbb4 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fb6c:	4812      	ldr	r0, [pc, #72]	; (800fbb8 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	4613      	mov	r3, r2
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	4413      	add	r3, r2
 800fb76:	440b      	add	r3, r1
 800fb78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fb7c:	699b      	ldr	r3, [r3, #24]
 800fb7e:	490f      	ldr	r1, [pc, #60]	; (800fbbc <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fb86:	6879      	ldr	r1, [r7, #4]
 800fb88:	4610      	mov	r0, r2
 800fb8a:	4798      	blx	r3
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d003      	beq.n	800fb9a <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fb92:	f06f 0304 	mvn.w	r3, #4
 800fb96:	617b      	str	r3, [r7, #20]
 800fb98:	e005      	b.n	800fba6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	617b      	str	r3, [r7, #20]
 800fb9e:	e002      	b.n	800fba6 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fba0:	f06f 0301 	mvn.w	r3, #1
 800fba4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800fba6:	697b      	ldr	r3, [r7, #20]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	2000055c 	.word	0x2000055c
 800fbb4:	200000d8 	.word	0x200000d8
 800fbb8:	2000054c 	.word	0x2000054c
 800fbbc:	20000ef8 	.word	0x20000ef8

0800fbc0 <LSM6DSR_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSR_0_Probe(uint32_t Functions)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b092      	sub	sp, #72	; 0x48
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
  LSM6DSR_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSR_Object_t lsm6dsr_obj_0;
  LSM6DSR_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSR_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800fbcc:	2301      	movs	r3, #1
 800fbce:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = 0x0;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = CUSTOM_LSM6DSR_0_Init;
 800fbd6:	4b4a      	ldr	r3, [pc, #296]	; (800fd00 <LSM6DSR_0_Probe+0x140>)
 800fbd8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = CUSTOM_LSM6DSR_0_DeInit;
 800fbda:	4b4a      	ldr	r3, [pc, #296]	; (800fd04 <LSM6DSR_0_Probe+0x144>)
 800fbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = CUSTOM_LSM6DSR_0_ReadReg;
 800fbde:	4b4a      	ldr	r3, [pc, #296]	; (800fd08 <LSM6DSR_0_Probe+0x148>)
 800fbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = CUSTOM_LSM6DSR_0_WriteReg;
 800fbe2:	4b4a      	ldr	r3, [pc, #296]	; (800fd0c <LSM6DSR_0_Probe+0x14c>)
 800fbe4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 800fbe6:	4b4a      	ldr	r3, [pc, #296]	; (800fd10 <LSM6DSR_0_Probe+0x150>)
 800fbe8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSR_RegisterBusIO(&lsm6dsr_obj_0, &io_ctx) != LSM6DSR_OK)
 800fbea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbee:	4619      	mov	r1, r3
 800fbf0:	4848      	ldr	r0, [pc, #288]	; (800fd14 <LSM6DSR_0_Probe+0x154>)
 800fbf2:	f7f7 fd5d 	bl	80076b0 <LSM6DSR_RegisterBusIO>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d003      	beq.n	800fc04 <LSM6DSR_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fbfc:	f06f 0306 	mvn.w	r3, #6
 800fc00:	647b      	str	r3, [r7, #68]	; 0x44
 800fc02:	e077      	b.n	800fcf4 <LSM6DSR_0_Probe+0x134>
  }
  else if (LSM6DSR_ReadID(&lsm6dsr_obj_0, &id) != LSM6DSR_OK)
 800fc04:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800fc08:	4619      	mov	r1, r3
 800fc0a:	4842      	ldr	r0, [pc, #264]	; (800fd14 <LSM6DSR_0_Probe+0x154>)
 800fc0c:	f7f7 fe52 	bl	80078b4 <LSM6DSR_ReadID>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d003      	beq.n	800fc1e <LSM6DSR_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fc16:	f06f 0306 	mvn.w	r3, #6
 800fc1a:	647b      	str	r3, [r7, #68]	; 0x44
 800fc1c:	e06a      	b.n	800fcf4 <LSM6DSR_0_Probe+0x134>
  }
  else if (id != LSM6DSR_ID)
 800fc1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc22:	2b6b      	cmp	r3, #107	; 0x6b
 800fc24:	d003      	beq.n	800fc2e <LSM6DSR_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fc26:	f06f 0306 	mvn.w	r3, #6
 800fc2a:	647b      	str	r3, [r7, #68]	; 0x44
 800fc2c:	e062      	b.n	800fcf4 <LSM6DSR_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSR_GetCapabilities(&lsm6dsr_obj_0, &cap);
 800fc2e:	f107 0308 	add.w	r3, r7, #8
 800fc32:	4619      	mov	r1, r3
 800fc34:	4837      	ldr	r0, [pc, #220]	; (800fd14 <LSM6DSR_0_Probe+0x154>)
 800fc36:	f7f7 fe53 	bl	80078e0 <LSM6DSR_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSR_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800fc3a:	7a7b      	ldrb	r3, [r7, #9]
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	7a3b      	ldrb	r3, [r7, #8]
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	431a      	orrs	r2, r3
 800fc44:	7abb      	ldrb	r3, [r7, #10]
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	4a33      	ldr	r2, [pc, #204]	; (800fd18 <LSM6DSR_0_Probe+0x158>)
 800fc4c:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSR_0] = &lsm6dsr_obj_0;
 800fc4e:	4b33      	ldr	r3, [pc, #204]	; (800fd1c <LSM6DSR_0_Probe+0x15c>)
 800fc50:	4a30      	ldr	r2, [pc, #192]	; (800fd14 <LSM6DSR_0_Probe+0x154>)
 800fc52:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSR_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSR_COMMON_Driver;
 800fc54:	4b32      	ldr	r3, [pc, #200]	; (800fd20 <LSM6DSR_0_Probe+0x160>)
 800fc56:	4a33      	ldr	r2, [pc, #204]	; (800fd24 <LSM6DSR_0_Probe+0x164>)
 800fc58:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800fc5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d11d      	bne.n	800fc9c <LSM6DSR_0_Probe+0xdc>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f003 0301 	and.w	r3, r3, #1
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d018      	beq.n	800fc9c <LSM6DSR_0_Probe+0xdc>
 800fc6a:	7a7b      	ldrb	r3, [r7, #9]
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d115      	bne.n	800fc9c <LSM6DSR_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSR_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSR_GYRO_Driver;
 800fc70:	4b2d      	ldr	r3, [pc, #180]	; (800fd28 <LSM6DSR_0_Probe+0x168>)
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	4a2d      	ldr	r2, [pc, #180]	; (800fd2c <LSM6DSR_0_Probe+0x16c>)
 800fc76:	492e      	ldr	r1, [pc, #184]	; (800fd30 <LSM6DSR_0_Probe+0x170>)
 800fc78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSR_0]->Init(MotionCompObj[CUSTOM_LSM6DSR_0]) != LSM6DSR_OK)
 800fc7c:	4b28      	ldr	r3, [pc, #160]	; (800fd20 <LSM6DSR_0_Probe+0x160>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a26      	ldr	r2, [pc, #152]	; (800fd1c <LSM6DSR_0_Probe+0x15c>)
 800fc84:	6812      	ldr	r2, [r2, #0]
 800fc86:	4610      	mov	r0, r2
 800fc88:	4798      	blx	r3
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d003      	beq.n	800fc98 <LSM6DSR_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fc90:	f06f 0304 	mvn.w	r3, #4
 800fc94:	647b      	str	r3, [r7, #68]	; 0x44
 800fc96:	e001      	b.n	800fc9c <LSM6DSR_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800fc9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d11d      	bne.n	800fcde <LSM6DSR_0_Probe+0x11e>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f003 0302 	and.w	r3, r3, #2
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d018      	beq.n	800fcde <LSM6DSR_0_Probe+0x11e>
 800fcac:	7a3b      	ldrb	r3, [r7, #8]
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d115      	bne.n	800fcde <LSM6DSR_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSR_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSR_ACC_Driver;
 800fcb2:	4b1d      	ldr	r3, [pc, #116]	; (800fd28 <LSM6DSR_0_Probe+0x168>)
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	4a1d      	ldr	r2, [pc, #116]	; (800fd2c <LSM6DSR_0_Probe+0x16c>)
 800fcb8:	491e      	ldr	r1, [pc, #120]	; (800fd34 <LSM6DSR_0_Probe+0x174>)
 800fcba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSR_0]->Init(MotionCompObj[CUSTOM_LSM6DSR_0]) != LSM6DSR_OK)
 800fcbe:	4b18      	ldr	r3, [pc, #96]	; (800fd20 <LSM6DSR_0_Probe+0x160>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a15      	ldr	r2, [pc, #84]	; (800fd1c <LSM6DSR_0_Probe+0x15c>)
 800fcc6:	6812      	ldr	r2, [r2, #0]
 800fcc8:	4610      	mov	r0, r2
 800fcca:	4798      	blx	r3
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d003      	beq.n	800fcda <LSM6DSR_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fcd2:	f06f 0304 	mvn.w	r3, #4
 800fcd6:	647b      	str	r3, [r7, #68]	; 0x44
 800fcd8:	e001      	b.n	800fcde <LSM6DSR_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800fcde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d107      	bne.n	800fcf4 <LSM6DSR_0_Probe+0x134>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f003 0304 	and.w	r3, r3, #4
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d002      	beq.n	800fcf4 <LSM6DSR_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800fcee:	f06f 0304 	mvn.w	r3, #4
 800fcf2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800fcf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3748      	adds	r7, #72	; 0x48
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	0800fd39 	.word	0x0800fd39
 800fd04:	0800fd5d 	.word	0x0800fd5d
 800fd08:	0800fdf5 	.word	0x0800fdf5
 800fd0c:	0800fd81 	.word	0x0800fd81
 800fd10:	08001595 	.word	0x08001595
 800fd14:	20000560 	.word	0x20000560
 800fd18:	2000055c 	.word	0x2000055c
 800fd1c:	20000ef8 	.word	0x20000ef8
 800fd20:	20000558 	.word	0x20000558
 800fd24:	20000064 	.word	0x20000064
 800fd28:	200000d8 	.word	0x200000d8
 800fd2c:	2000054c 	.word	0x2000054c
 800fd30:	20000098 	.word	0x20000098
 800fd34:	20000074 	.word	0x20000074

0800fd38 <CUSTOM_LSM6DSR_0_Init>:
/**
 * @brief  Initialize SPI bus for LSM6DSR
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSR_0_Init(void)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800fd3e:	f06f 0305 	mvn.w	r3, #5
 800fd42:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSR_0_SPI_Init() == BSP_ERROR_NONE)
 800fd44:	f7f1 fb96 	bl	8001474 <BSP_SPI2_Init>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d101      	bne.n	800fd52 <CUSTOM_LSM6DSR_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800fd52:	687b      	ldr	r3, [r7, #4]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <CUSTOM_LSM6DSR_0_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LSM6DSR
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSR_0_DeInit(void)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800fd62:	f06f 0305 	mvn.w	r3, #5
 800fd66:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSR_0_SPI_DeInit() == BSP_ERROR_NONE)
 800fd68:	f7f1 fbb4 	bl	80014d4 <BSP_SPI2_DeInit>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <CUSTOM_LSM6DSR_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800fd72:	2300      	movs	r3, #0
 800fd74:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800fd76:	687b      	ldr	r3, [r7, #4]
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <CUSTOM_LSM6DSR_0_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSR_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b086      	sub	sp, #24
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60ba      	str	r2, [r7, #8]
 800fd88:	461a      	mov	r2, r3
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	81fb      	strh	r3, [r7, #14]
 800fd8e:	460b      	mov	r3, r1
 800fd90:	81bb      	strh	r3, [r7, #12]
 800fd92:	4613      	mov	r3, r2
 800fd94:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800fd96:	2300      	movs	r3, #0
 800fd98:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800fd9a:	89bb      	ldrh	r3, [r7, #12]
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSR_0_CS_PORT, CUSTOM_LSM6DSR_0_CS_PIN, GPIO_PIN_RESET);
 800fda0:	2200      	movs	r2, #0
 800fda2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fda6:	4812      	ldr	r0, [pc, #72]	; (800fdf0 <CUSTOM_LSM6DSR_0_WriteReg+0x70>)
 800fda8:	f7fa fb54 	bl	800a454 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSR_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800fdac:	f107 0313 	add.w	r3, r7, #19
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7f1 fbb6 	bl	8001524 <BSP_SPI2_Send>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d002      	beq.n	800fdc4 <CUSTOM_LSM6DSR_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800fdbe:	f06f 0305 	mvn.w	r3, #5
 800fdc2:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSR_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 800fdc4:	88fb      	ldrh	r3, [r7, #6]
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	68b8      	ldr	r0, [r7, #8]
 800fdca:	f7f1 fbab 	bl	8001524 <BSP_SPI2_Send>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d002      	beq.n	800fdda <CUSTOM_LSM6DSR_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800fdd4:	f06f 0305 	mvn.w	r3, #5
 800fdd8:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSR_0_CS_PORT, CUSTOM_LSM6DSR_0_CS_PIN, GPIO_PIN_SET);
 800fdda:	2201      	movs	r2, #1
 800fddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fde0:	4803      	ldr	r0, [pc, #12]	; (800fdf0 <CUSTOM_LSM6DSR_0_WriteReg+0x70>)
 800fde2:	f7fa fb37 	bl	800a454 <HAL_GPIO_WritePin>

  return ret;
 800fde6:	697b      	ldr	r3, [r7, #20]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3718      	adds	r7, #24
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	40020000 	.word	0x40020000

0800fdf4 <CUSTOM_LSM6DSR_0_ReadReg>:
 * @param  pdata the pointer to the data to be read
 * @param  len the length of the data to be read
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSR_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b086      	sub	sp, #24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60ba      	str	r2, [r7, #8]
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	4603      	mov	r3, r0
 800fe00:	81fb      	strh	r3, [r7, #14]
 800fe02:	460b      	mov	r3, r1
 800fe04:	81bb      	strh	r3, [r7, #12]
 800fe06:	4613      	mov	r3, r2
 800fe08:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800fe0e:	89bb      	ldrh	r3, [r7, #12]
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 800fe14:	7cfb      	ldrb	r3, [r7, #19]
 800fe16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSR_0_CS_PORT, CUSTOM_LSM6DSR_0_CS_PIN, GPIO_PIN_RESET);
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe24:	4812      	ldr	r0, [pc, #72]	; (800fe70 <CUSTOM_LSM6DSR_0_ReadReg+0x7c>)
 800fe26:	f7fa fb15 	bl	800a454 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSR_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800fe2a:	f107 0313 	add.w	r3, r7, #19
 800fe2e:	2101      	movs	r1, #1
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7f1 fb77 	bl	8001524 <BSP_SPI2_Send>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d002      	beq.n	800fe42 <CUSTOM_LSM6DSR_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800fe3c:	f06f 0305 	mvn.w	r3, #5
 800fe40:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSR_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 800fe42:	88fb      	ldrh	r3, [r7, #6]
 800fe44:	4619      	mov	r1, r3
 800fe46:	68b8      	ldr	r0, [r7, #8]
 800fe48:	f7f1 fb88 	bl	800155c <BSP_SPI2_Recv>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <CUSTOM_LSM6DSR_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800fe52:	f06f 0305 	mvn.w	r3, #5
 800fe56:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSR_0_CS_PORT, CUSTOM_LSM6DSR_0_CS_PIN, GPIO_PIN_SET);
 800fe58:	2201      	movs	r2, #1
 800fe5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe5e:	4804      	ldr	r0, [pc, #16]	; (800fe70 <CUSTOM_LSM6DSR_0_ReadReg+0x7c>)
 800fe60:	f7fa faf8 	bl	800a454 <HAL_GPIO_WritePin>

  return ret;
 800fe64:	697b      	ldr	r3, [r7, #20]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3718      	adds	r7, #24
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	40020000 	.word	0x40020000

0800fe74 <CUSTOM_MOTION_SENSOR_Read_Register>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written to
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	607a      	str	r2, [r7, #4]
 800fe80:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d112      	bne.n	800feae <CUSTOM_MOTION_SENSOR_Read_Register+0x3a>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSR_0 == 1)
    case CUSTOM_LSM6DSR_0:
      if (LSM6DSR_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800fe88:	4a0d      	ldr	r2, [pc, #52]	; (800fec0 <CUSTOM_MOTION_SENSOR_Read_Register+0x4c>)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe90:	7af9      	ldrb	r1, [r7, #11]
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7f8 f9bc 	bl	8008212 <LSM6DSR_Read_Reg>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d003      	beq.n	800fea8 <CUSTOM_MOTION_SENSOR_Read_Register+0x34>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fea0:	f06f 0304 	mvn.w	r3, #4
 800fea4:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800fea6:	e006      	b.n	800feb6 <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
        ret = BSP_ERROR_NONE;
 800fea8:	2300      	movs	r3, #0
 800feaa:	617b      	str	r3, [r7, #20]
      break;
 800feac:	e003      	b.n	800feb6 <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800feae:	f06f 0301 	mvn.w	r3, #1
 800feb2:	617b      	str	r3, [r7, #20]
      break;
 800feb4:	bf00      	nop
  }

  return ret;
 800feb6:	697b      	ldr	r3, [r7, #20]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3718      	adds	r7, #24
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20000ef8 	.word	0x20000ef8

0800fec4 <CUSTOM_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	460b      	mov	r3, r1
 800fece:	70fb      	strb	r3, [r7, #3]
 800fed0:	4613      	mov	r3, r2
 800fed2:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d112      	bne.n	800ff00 <CUSTOM_MOTION_SENSOR_Write_Register+0x3c>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSR_0 == 1)
    case CUSTOM_LSM6DSR_0:
      if (LSM6DSR_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 800feda:	4a0e      	ldr	r2, [pc, #56]	; (800ff14 <CUSTOM_MOTION_SENSOR_Write_Register+0x50>)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fee2:	78ba      	ldrb	r2, [r7, #2]
 800fee4:	78f9      	ldrb	r1, [r7, #3]
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7f8 f9ad 	bl	8008246 <LSM6DSR_Write_Reg>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d003      	beq.n	800fefa <CUSTOM_MOTION_SENSOR_Write_Register+0x36>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fef2:	f06f 0304 	mvn.w	r3, #4
 800fef6:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800fef8:	e006      	b.n	800ff08 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
        ret = BSP_ERROR_NONE;
 800fefa:	2300      	movs	r3, #0
 800fefc:	60fb      	str	r3, [r7, #12]
      break;
 800fefe:	e003      	b.n	800ff08 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800ff00:	f06f 0301 	mvn.w	r3, #1
 800ff04:	60fb      	str	r3, [r7, #12]
      break;
 800ff06:	bf00      	nop
  }

  return ret;
 800ff08:	68fb      	ldr	r3, [r7, #12]
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3710      	adds	r7, #16
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	20000ef8 	.word	0x20000ef8

0800ff18 <__errno>:
 800ff18:	4b01      	ldr	r3, [pc, #4]	; (800ff20 <__errno+0x8>)
 800ff1a:	6818      	ldr	r0, [r3, #0]
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	200000ec 	.word	0x200000ec

0800ff24 <__libc_init_array>:
 800ff24:	b570      	push	{r4, r5, r6, lr}
 800ff26:	4d0d      	ldr	r5, [pc, #52]	; (800ff5c <__libc_init_array+0x38>)
 800ff28:	4c0d      	ldr	r4, [pc, #52]	; (800ff60 <__libc_init_array+0x3c>)
 800ff2a:	1b64      	subs	r4, r4, r5
 800ff2c:	10a4      	asrs	r4, r4, #2
 800ff2e:	2600      	movs	r6, #0
 800ff30:	42a6      	cmp	r6, r4
 800ff32:	d109      	bne.n	800ff48 <__libc_init_array+0x24>
 800ff34:	4d0b      	ldr	r5, [pc, #44]	; (800ff64 <__libc_init_array+0x40>)
 800ff36:	4c0c      	ldr	r4, [pc, #48]	; (800ff68 <__libc_init_array+0x44>)
 800ff38:	f001 fa1e 	bl	8011378 <_init>
 800ff3c:	1b64      	subs	r4, r4, r5
 800ff3e:	10a4      	asrs	r4, r4, #2
 800ff40:	2600      	movs	r6, #0
 800ff42:	42a6      	cmp	r6, r4
 800ff44:	d105      	bne.n	800ff52 <__libc_init_array+0x2e>
 800ff46:	bd70      	pop	{r4, r5, r6, pc}
 800ff48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff4c:	4798      	blx	r3
 800ff4e:	3601      	adds	r6, #1
 800ff50:	e7ee      	b.n	800ff30 <__libc_init_array+0xc>
 800ff52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff56:	4798      	blx	r3
 800ff58:	3601      	adds	r6, #1
 800ff5a:	e7f2      	b.n	800ff42 <__libc_init_array+0x1e>
 800ff5c:	08011ab0 	.word	0x08011ab0
 800ff60:	08011ab0 	.word	0x08011ab0
 800ff64:	08011ab0 	.word	0x08011ab0
 800ff68:	08011ab4 	.word	0x08011ab4

0800ff6c <memcpy>:
 800ff6c:	440a      	add	r2, r1
 800ff6e:	4291      	cmp	r1, r2
 800ff70:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff74:	d100      	bne.n	800ff78 <memcpy+0xc>
 800ff76:	4770      	bx	lr
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff82:	4291      	cmp	r1, r2
 800ff84:	d1f9      	bne.n	800ff7a <memcpy+0xe>
 800ff86:	bd10      	pop	{r4, pc}

0800ff88 <memset>:
 800ff88:	4402      	add	r2, r0
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d100      	bne.n	800ff92 <memset+0xa>
 800ff90:	4770      	bx	lr
 800ff92:	f803 1b01 	strb.w	r1, [r3], #1
 800ff96:	e7f9      	b.n	800ff8c <memset+0x4>

0800ff98 <siprintf>:
 800ff98:	b40e      	push	{r1, r2, r3}
 800ff9a:	b500      	push	{lr}
 800ff9c:	b09c      	sub	sp, #112	; 0x70
 800ff9e:	ab1d      	add	r3, sp, #116	; 0x74
 800ffa0:	9002      	str	r0, [sp, #8]
 800ffa2:	9006      	str	r0, [sp, #24]
 800ffa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ffa8:	4809      	ldr	r0, [pc, #36]	; (800ffd0 <siprintf+0x38>)
 800ffaa:	9107      	str	r1, [sp, #28]
 800ffac:	9104      	str	r1, [sp, #16]
 800ffae:	4909      	ldr	r1, [pc, #36]	; (800ffd4 <siprintf+0x3c>)
 800ffb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffb4:	9105      	str	r1, [sp, #20]
 800ffb6:	6800      	ldr	r0, [r0, #0]
 800ffb8:	9301      	str	r3, [sp, #4]
 800ffba:	a902      	add	r1, sp, #8
 800ffbc:	f000 f8b4 	bl	8010128 <_svfiprintf_r>
 800ffc0:	9b02      	ldr	r3, [sp, #8]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	701a      	strb	r2, [r3, #0]
 800ffc6:	b01c      	add	sp, #112	; 0x70
 800ffc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffcc:	b003      	add	sp, #12
 800ffce:	4770      	bx	lr
 800ffd0:	200000ec 	.word	0x200000ec
 800ffd4:	ffff0208 	.word	0xffff0208

0800ffd8 <strncmp>:
 800ffd8:	b510      	push	{r4, lr}
 800ffda:	b16a      	cbz	r2, 800fff8 <strncmp+0x20>
 800ffdc:	3901      	subs	r1, #1
 800ffde:	1884      	adds	r4, r0, r2
 800ffe0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ffe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	d103      	bne.n	800fff4 <strncmp+0x1c>
 800ffec:	42a0      	cmp	r0, r4
 800ffee:	d001      	beq.n	800fff4 <strncmp+0x1c>
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1f5      	bne.n	800ffe0 <strncmp+0x8>
 800fff4:	1a98      	subs	r0, r3, r2
 800fff6:	bd10      	pop	{r4, pc}
 800fff8:	4610      	mov	r0, r2
 800fffa:	e7fc      	b.n	800fff6 <strncmp+0x1e>

0800fffc <_vsniprintf_r>:
 800fffc:	b530      	push	{r4, r5, lr}
 800fffe:	1e14      	subs	r4, r2, #0
 8010000:	4605      	mov	r5, r0
 8010002:	b09b      	sub	sp, #108	; 0x6c
 8010004:	4618      	mov	r0, r3
 8010006:	da05      	bge.n	8010014 <_vsniprintf_r+0x18>
 8010008:	238b      	movs	r3, #139	; 0x8b
 801000a:	602b      	str	r3, [r5, #0]
 801000c:	f04f 30ff 	mov.w	r0, #4294967295
 8010010:	b01b      	add	sp, #108	; 0x6c
 8010012:	bd30      	pop	{r4, r5, pc}
 8010014:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010018:	f8ad 300c 	strh.w	r3, [sp, #12]
 801001c:	bf14      	ite	ne
 801001e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010022:	4623      	moveq	r3, r4
 8010024:	9302      	str	r3, [sp, #8]
 8010026:	9305      	str	r3, [sp, #20]
 8010028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801002c:	9100      	str	r1, [sp, #0]
 801002e:	9104      	str	r1, [sp, #16]
 8010030:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010034:	4602      	mov	r2, r0
 8010036:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010038:	4669      	mov	r1, sp
 801003a:	4628      	mov	r0, r5
 801003c:	f000 f874 	bl	8010128 <_svfiprintf_r>
 8010040:	1c43      	adds	r3, r0, #1
 8010042:	bfbc      	itt	lt
 8010044:	238b      	movlt	r3, #139	; 0x8b
 8010046:	602b      	strlt	r3, [r5, #0]
 8010048:	2c00      	cmp	r4, #0
 801004a:	d0e1      	beq.n	8010010 <_vsniprintf_r+0x14>
 801004c:	9b00      	ldr	r3, [sp, #0]
 801004e:	2200      	movs	r2, #0
 8010050:	701a      	strb	r2, [r3, #0]
 8010052:	e7dd      	b.n	8010010 <_vsniprintf_r+0x14>

08010054 <vsniprintf>:
 8010054:	b507      	push	{r0, r1, r2, lr}
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	4613      	mov	r3, r2
 801005a:	460a      	mov	r2, r1
 801005c:	4601      	mov	r1, r0
 801005e:	4803      	ldr	r0, [pc, #12]	; (801006c <vsniprintf+0x18>)
 8010060:	6800      	ldr	r0, [r0, #0]
 8010062:	f7ff ffcb 	bl	800fffc <_vsniprintf_r>
 8010066:	b003      	add	sp, #12
 8010068:	f85d fb04 	ldr.w	pc, [sp], #4
 801006c:	200000ec 	.word	0x200000ec

08010070 <__ssputs_r>:
 8010070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010074:	688e      	ldr	r6, [r1, #8]
 8010076:	429e      	cmp	r6, r3
 8010078:	4682      	mov	sl, r0
 801007a:	460c      	mov	r4, r1
 801007c:	4690      	mov	r8, r2
 801007e:	461f      	mov	r7, r3
 8010080:	d838      	bhi.n	80100f4 <__ssputs_r+0x84>
 8010082:	898a      	ldrh	r2, [r1, #12]
 8010084:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010088:	d032      	beq.n	80100f0 <__ssputs_r+0x80>
 801008a:	6825      	ldr	r5, [r4, #0]
 801008c:	6909      	ldr	r1, [r1, #16]
 801008e:	eba5 0901 	sub.w	r9, r5, r1
 8010092:	6965      	ldr	r5, [r4, #20]
 8010094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801009c:	3301      	adds	r3, #1
 801009e:	444b      	add	r3, r9
 80100a0:	106d      	asrs	r5, r5, #1
 80100a2:	429d      	cmp	r5, r3
 80100a4:	bf38      	it	cc
 80100a6:	461d      	movcc	r5, r3
 80100a8:	0553      	lsls	r3, r2, #21
 80100aa:	d531      	bpl.n	8010110 <__ssputs_r+0xa0>
 80100ac:	4629      	mov	r1, r5
 80100ae:	f000 fb39 	bl	8010724 <_malloc_r>
 80100b2:	4606      	mov	r6, r0
 80100b4:	b950      	cbnz	r0, 80100cc <__ssputs_r+0x5c>
 80100b6:	230c      	movs	r3, #12
 80100b8:	f8ca 3000 	str.w	r3, [sl]
 80100bc:	89a3      	ldrh	r3, [r4, #12]
 80100be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100c2:	81a3      	strh	r3, [r4, #12]
 80100c4:	f04f 30ff 	mov.w	r0, #4294967295
 80100c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100cc:	6921      	ldr	r1, [r4, #16]
 80100ce:	464a      	mov	r2, r9
 80100d0:	f7ff ff4c 	bl	800ff6c <memcpy>
 80100d4:	89a3      	ldrh	r3, [r4, #12]
 80100d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100de:	81a3      	strh	r3, [r4, #12]
 80100e0:	6126      	str	r6, [r4, #16]
 80100e2:	6165      	str	r5, [r4, #20]
 80100e4:	444e      	add	r6, r9
 80100e6:	eba5 0509 	sub.w	r5, r5, r9
 80100ea:	6026      	str	r6, [r4, #0]
 80100ec:	60a5      	str	r5, [r4, #8]
 80100ee:	463e      	mov	r6, r7
 80100f0:	42be      	cmp	r6, r7
 80100f2:	d900      	bls.n	80100f6 <__ssputs_r+0x86>
 80100f4:	463e      	mov	r6, r7
 80100f6:	4632      	mov	r2, r6
 80100f8:	6820      	ldr	r0, [r4, #0]
 80100fa:	4641      	mov	r1, r8
 80100fc:	f000 faa8 	bl	8010650 <memmove>
 8010100:	68a3      	ldr	r3, [r4, #8]
 8010102:	6822      	ldr	r2, [r4, #0]
 8010104:	1b9b      	subs	r3, r3, r6
 8010106:	4432      	add	r2, r6
 8010108:	60a3      	str	r3, [r4, #8]
 801010a:	6022      	str	r2, [r4, #0]
 801010c:	2000      	movs	r0, #0
 801010e:	e7db      	b.n	80100c8 <__ssputs_r+0x58>
 8010110:	462a      	mov	r2, r5
 8010112:	f000 fb61 	bl	80107d8 <_realloc_r>
 8010116:	4606      	mov	r6, r0
 8010118:	2800      	cmp	r0, #0
 801011a:	d1e1      	bne.n	80100e0 <__ssputs_r+0x70>
 801011c:	6921      	ldr	r1, [r4, #16]
 801011e:	4650      	mov	r0, sl
 8010120:	f000 fab0 	bl	8010684 <_free_r>
 8010124:	e7c7      	b.n	80100b6 <__ssputs_r+0x46>
	...

08010128 <_svfiprintf_r>:
 8010128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012c:	4698      	mov	r8, r3
 801012e:	898b      	ldrh	r3, [r1, #12]
 8010130:	061b      	lsls	r3, r3, #24
 8010132:	b09d      	sub	sp, #116	; 0x74
 8010134:	4607      	mov	r7, r0
 8010136:	460d      	mov	r5, r1
 8010138:	4614      	mov	r4, r2
 801013a:	d50e      	bpl.n	801015a <_svfiprintf_r+0x32>
 801013c:	690b      	ldr	r3, [r1, #16]
 801013e:	b963      	cbnz	r3, 801015a <_svfiprintf_r+0x32>
 8010140:	2140      	movs	r1, #64	; 0x40
 8010142:	f000 faef 	bl	8010724 <_malloc_r>
 8010146:	6028      	str	r0, [r5, #0]
 8010148:	6128      	str	r0, [r5, #16]
 801014a:	b920      	cbnz	r0, 8010156 <_svfiprintf_r+0x2e>
 801014c:	230c      	movs	r3, #12
 801014e:	603b      	str	r3, [r7, #0]
 8010150:	f04f 30ff 	mov.w	r0, #4294967295
 8010154:	e0d1      	b.n	80102fa <_svfiprintf_r+0x1d2>
 8010156:	2340      	movs	r3, #64	; 0x40
 8010158:	616b      	str	r3, [r5, #20]
 801015a:	2300      	movs	r3, #0
 801015c:	9309      	str	r3, [sp, #36]	; 0x24
 801015e:	2320      	movs	r3, #32
 8010160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010164:	f8cd 800c 	str.w	r8, [sp, #12]
 8010168:	2330      	movs	r3, #48	; 0x30
 801016a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010314 <_svfiprintf_r+0x1ec>
 801016e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010172:	f04f 0901 	mov.w	r9, #1
 8010176:	4623      	mov	r3, r4
 8010178:	469a      	mov	sl, r3
 801017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801017e:	b10a      	cbz	r2, 8010184 <_svfiprintf_r+0x5c>
 8010180:	2a25      	cmp	r2, #37	; 0x25
 8010182:	d1f9      	bne.n	8010178 <_svfiprintf_r+0x50>
 8010184:	ebba 0b04 	subs.w	fp, sl, r4
 8010188:	d00b      	beq.n	80101a2 <_svfiprintf_r+0x7a>
 801018a:	465b      	mov	r3, fp
 801018c:	4622      	mov	r2, r4
 801018e:	4629      	mov	r1, r5
 8010190:	4638      	mov	r0, r7
 8010192:	f7ff ff6d 	bl	8010070 <__ssputs_r>
 8010196:	3001      	adds	r0, #1
 8010198:	f000 80aa 	beq.w	80102f0 <_svfiprintf_r+0x1c8>
 801019c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801019e:	445a      	add	r2, fp
 80101a0:	9209      	str	r2, [sp, #36]	; 0x24
 80101a2:	f89a 3000 	ldrb.w	r3, [sl]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f000 80a2 	beq.w	80102f0 <_svfiprintf_r+0x1c8>
 80101ac:	2300      	movs	r3, #0
 80101ae:	f04f 32ff 	mov.w	r2, #4294967295
 80101b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101b6:	f10a 0a01 	add.w	sl, sl, #1
 80101ba:	9304      	str	r3, [sp, #16]
 80101bc:	9307      	str	r3, [sp, #28]
 80101be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101c2:	931a      	str	r3, [sp, #104]	; 0x68
 80101c4:	4654      	mov	r4, sl
 80101c6:	2205      	movs	r2, #5
 80101c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101cc:	4851      	ldr	r0, [pc, #324]	; (8010314 <_svfiprintf_r+0x1ec>)
 80101ce:	f7f0 f807 	bl	80001e0 <memchr>
 80101d2:	9a04      	ldr	r2, [sp, #16]
 80101d4:	b9d8      	cbnz	r0, 801020e <_svfiprintf_r+0xe6>
 80101d6:	06d0      	lsls	r0, r2, #27
 80101d8:	bf44      	itt	mi
 80101da:	2320      	movmi	r3, #32
 80101dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101e0:	0711      	lsls	r1, r2, #28
 80101e2:	bf44      	itt	mi
 80101e4:	232b      	movmi	r3, #43	; 0x2b
 80101e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ea:	f89a 3000 	ldrb.w	r3, [sl]
 80101ee:	2b2a      	cmp	r3, #42	; 0x2a
 80101f0:	d015      	beq.n	801021e <_svfiprintf_r+0xf6>
 80101f2:	9a07      	ldr	r2, [sp, #28]
 80101f4:	4654      	mov	r4, sl
 80101f6:	2000      	movs	r0, #0
 80101f8:	f04f 0c0a 	mov.w	ip, #10
 80101fc:	4621      	mov	r1, r4
 80101fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010202:	3b30      	subs	r3, #48	; 0x30
 8010204:	2b09      	cmp	r3, #9
 8010206:	d94e      	bls.n	80102a6 <_svfiprintf_r+0x17e>
 8010208:	b1b0      	cbz	r0, 8010238 <_svfiprintf_r+0x110>
 801020a:	9207      	str	r2, [sp, #28]
 801020c:	e014      	b.n	8010238 <_svfiprintf_r+0x110>
 801020e:	eba0 0308 	sub.w	r3, r0, r8
 8010212:	fa09 f303 	lsl.w	r3, r9, r3
 8010216:	4313      	orrs	r3, r2
 8010218:	9304      	str	r3, [sp, #16]
 801021a:	46a2      	mov	sl, r4
 801021c:	e7d2      	b.n	80101c4 <_svfiprintf_r+0x9c>
 801021e:	9b03      	ldr	r3, [sp, #12]
 8010220:	1d19      	adds	r1, r3, #4
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	9103      	str	r1, [sp, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	bfbb      	ittet	lt
 801022a:	425b      	neglt	r3, r3
 801022c:	f042 0202 	orrlt.w	r2, r2, #2
 8010230:	9307      	strge	r3, [sp, #28]
 8010232:	9307      	strlt	r3, [sp, #28]
 8010234:	bfb8      	it	lt
 8010236:	9204      	strlt	r2, [sp, #16]
 8010238:	7823      	ldrb	r3, [r4, #0]
 801023a:	2b2e      	cmp	r3, #46	; 0x2e
 801023c:	d10c      	bne.n	8010258 <_svfiprintf_r+0x130>
 801023e:	7863      	ldrb	r3, [r4, #1]
 8010240:	2b2a      	cmp	r3, #42	; 0x2a
 8010242:	d135      	bne.n	80102b0 <_svfiprintf_r+0x188>
 8010244:	9b03      	ldr	r3, [sp, #12]
 8010246:	1d1a      	adds	r2, r3, #4
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	9203      	str	r2, [sp, #12]
 801024c:	2b00      	cmp	r3, #0
 801024e:	bfb8      	it	lt
 8010250:	f04f 33ff 	movlt.w	r3, #4294967295
 8010254:	3402      	adds	r4, #2
 8010256:	9305      	str	r3, [sp, #20]
 8010258:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010324 <_svfiprintf_r+0x1fc>
 801025c:	7821      	ldrb	r1, [r4, #0]
 801025e:	2203      	movs	r2, #3
 8010260:	4650      	mov	r0, sl
 8010262:	f7ef ffbd 	bl	80001e0 <memchr>
 8010266:	b140      	cbz	r0, 801027a <_svfiprintf_r+0x152>
 8010268:	2340      	movs	r3, #64	; 0x40
 801026a:	eba0 000a 	sub.w	r0, r0, sl
 801026e:	fa03 f000 	lsl.w	r0, r3, r0
 8010272:	9b04      	ldr	r3, [sp, #16]
 8010274:	4303      	orrs	r3, r0
 8010276:	3401      	adds	r4, #1
 8010278:	9304      	str	r3, [sp, #16]
 801027a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801027e:	4826      	ldr	r0, [pc, #152]	; (8010318 <_svfiprintf_r+0x1f0>)
 8010280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010284:	2206      	movs	r2, #6
 8010286:	f7ef ffab 	bl	80001e0 <memchr>
 801028a:	2800      	cmp	r0, #0
 801028c:	d038      	beq.n	8010300 <_svfiprintf_r+0x1d8>
 801028e:	4b23      	ldr	r3, [pc, #140]	; (801031c <_svfiprintf_r+0x1f4>)
 8010290:	bb1b      	cbnz	r3, 80102da <_svfiprintf_r+0x1b2>
 8010292:	9b03      	ldr	r3, [sp, #12]
 8010294:	3307      	adds	r3, #7
 8010296:	f023 0307 	bic.w	r3, r3, #7
 801029a:	3308      	adds	r3, #8
 801029c:	9303      	str	r3, [sp, #12]
 801029e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102a0:	4433      	add	r3, r6
 80102a2:	9309      	str	r3, [sp, #36]	; 0x24
 80102a4:	e767      	b.n	8010176 <_svfiprintf_r+0x4e>
 80102a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80102aa:	460c      	mov	r4, r1
 80102ac:	2001      	movs	r0, #1
 80102ae:	e7a5      	b.n	80101fc <_svfiprintf_r+0xd4>
 80102b0:	2300      	movs	r3, #0
 80102b2:	3401      	adds	r4, #1
 80102b4:	9305      	str	r3, [sp, #20]
 80102b6:	4619      	mov	r1, r3
 80102b8:	f04f 0c0a 	mov.w	ip, #10
 80102bc:	4620      	mov	r0, r4
 80102be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102c2:	3a30      	subs	r2, #48	; 0x30
 80102c4:	2a09      	cmp	r2, #9
 80102c6:	d903      	bls.n	80102d0 <_svfiprintf_r+0x1a8>
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d0c5      	beq.n	8010258 <_svfiprintf_r+0x130>
 80102cc:	9105      	str	r1, [sp, #20]
 80102ce:	e7c3      	b.n	8010258 <_svfiprintf_r+0x130>
 80102d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80102d4:	4604      	mov	r4, r0
 80102d6:	2301      	movs	r3, #1
 80102d8:	e7f0      	b.n	80102bc <_svfiprintf_r+0x194>
 80102da:	ab03      	add	r3, sp, #12
 80102dc:	9300      	str	r3, [sp, #0]
 80102de:	462a      	mov	r2, r5
 80102e0:	4b0f      	ldr	r3, [pc, #60]	; (8010320 <_svfiprintf_r+0x1f8>)
 80102e2:	a904      	add	r1, sp, #16
 80102e4:	4638      	mov	r0, r7
 80102e6:	f3af 8000 	nop.w
 80102ea:	1c42      	adds	r2, r0, #1
 80102ec:	4606      	mov	r6, r0
 80102ee:	d1d6      	bne.n	801029e <_svfiprintf_r+0x176>
 80102f0:	89ab      	ldrh	r3, [r5, #12]
 80102f2:	065b      	lsls	r3, r3, #25
 80102f4:	f53f af2c 	bmi.w	8010150 <_svfiprintf_r+0x28>
 80102f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102fa:	b01d      	add	sp, #116	; 0x74
 80102fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010300:	ab03      	add	r3, sp, #12
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	462a      	mov	r2, r5
 8010306:	4b06      	ldr	r3, [pc, #24]	; (8010320 <_svfiprintf_r+0x1f8>)
 8010308:	a904      	add	r1, sp, #16
 801030a:	4638      	mov	r0, r7
 801030c:	f000 f87a 	bl	8010404 <_printf_i>
 8010310:	e7eb      	b.n	80102ea <_svfiprintf_r+0x1c2>
 8010312:	bf00      	nop
 8010314:	08011a04 	.word	0x08011a04
 8010318:	08011a0e 	.word	0x08011a0e
 801031c:	00000000 	.word	0x00000000
 8010320:	08010071 	.word	0x08010071
 8010324:	08011a0a 	.word	0x08011a0a

08010328 <_printf_common>:
 8010328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801032c:	4616      	mov	r6, r2
 801032e:	4699      	mov	r9, r3
 8010330:	688a      	ldr	r2, [r1, #8]
 8010332:	690b      	ldr	r3, [r1, #16]
 8010334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010338:	4293      	cmp	r3, r2
 801033a:	bfb8      	it	lt
 801033c:	4613      	movlt	r3, r2
 801033e:	6033      	str	r3, [r6, #0]
 8010340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010344:	4607      	mov	r7, r0
 8010346:	460c      	mov	r4, r1
 8010348:	b10a      	cbz	r2, 801034e <_printf_common+0x26>
 801034a:	3301      	adds	r3, #1
 801034c:	6033      	str	r3, [r6, #0]
 801034e:	6823      	ldr	r3, [r4, #0]
 8010350:	0699      	lsls	r1, r3, #26
 8010352:	bf42      	ittt	mi
 8010354:	6833      	ldrmi	r3, [r6, #0]
 8010356:	3302      	addmi	r3, #2
 8010358:	6033      	strmi	r3, [r6, #0]
 801035a:	6825      	ldr	r5, [r4, #0]
 801035c:	f015 0506 	ands.w	r5, r5, #6
 8010360:	d106      	bne.n	8010370 <_printf_common+0x48>
 8010362:	f104 0a19 	add.w	sl, r4, #25
 8010366:	68e3      	ldr	r3, [r4, #12]
 8010368:	6832      	ldr	r2, [r6, #0]
 801036a:	1a9b      	subs	r3, r3, r2
 801036c:	42ab      	cmp	r3, r5
 801036e:	dc26      	bgt.n	80103be <_printf_common+0x96>
 8010370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010374:	1e13      	subs	r3, r2, #0
 8010376:	6822      	ldr	r2, [r4, #0]
 8010378:	bf18      	it	ne
 801037a:	2301      	movne	r3, #1
 801037c:	0692      	lsls	r2, r2, #26
 801037e:	d42b      	bmi.n	80103d8 <_printf_common+0xb0>
 8010380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010384:	4649      	mov	r1, r9
 8010386:	4638      	mov	r0, r7
 8010388:	47c0      	blx	r8
 801038a:	3001      	adds	r0, #1
 801038c:	d01e      	beq.n	80103cc <_printf_common+0xa4>
 801038e:	6823      	ldr	r3, [r4, #0]
 8010390:	68e5      	ldr	r5, [r4, #12]
 8010392:	6832      	ldr	r2, [r6, #0]
 8010394:	f003 0306 	and.w	r3, r3, #6
 8010398:	2b04      	cmp	r3, #4
 801039a:	bf08      	it	eq
 801039c:	1aad      	subeq	r5, r5, r2
 801039e:	68a3      	ldr	r3, [r4, #8]
 80103a0:	6922      	ldr	r2, [r4, #16]
 80103a2:	bf0c      	ite	eq
 80103a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103a8:	2500      	movne	r5, #0
 80103aa:	4293      	cmp	r3, r2
 80103ac:	bfc4      	itt	gt
 80103ae:	1a9b      	subgt	r3, r3, r2
 80103b0:	18ed      	addgt	r5, r5, r3
 80103b2:	2600      	movs	r6, #0
 80103b4:	341a      	adds	r4, #26
 80103b6:	42b5      	cmp	r5, r6
 80103b8:	d11a      	bne.n	80103f0 <_printf_common+0xc8>
 80103ba:	2000      	movs	r0, #0
 80103bc:	e008      	b.n	80103d0 <_printf_common+0xa8>
 80103be:	2301      	movs	r3, #1
 80103c0:	4652      	mov	r2, sl
 80103c2:	4649      	mov	r1, r9
 80103c4:	4638      	mov	r0, r7
 80103c6:	47c0      	blx	r8
 80103c8:	3001      	adds	r0, #1
 80103ca:	d103      	bne.n	80103d4 <_printf_common+0xac>
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295
 80103d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d4:	3501      	adds	r5, #1
 80103d6:	e7c6      	b.n	8010366 <_printf_common+0x3e>
 80103d8:	18e1      	adds	r1, r4, r3
 80103da:	1c5a      	adds	r2, r3, #1
 80103dc:	2030      	movs	r0, #48	; 0x30
 80103de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103e2:	4422      	add	r2, r4
 80103e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103ec:	3302      	adds	r3, #2
 80103ee:	e7c7      	b.n	8010380 <_printf_common+0x58>
 80103f0:	2301      	movs	r3, #1
 80103f2:	4622      	mov	r2, r4
 80103f4:	4649      	mov	r1, r9
 80103f6:	4638      	mov	r0, r7
 80103f8:	47c0      	blx	r8
 80103fa:	3001      	adds	r0, #1
 80103fc:	d0e6      	beq.n	80103cc <_printf_common+0xa4>
 80103fe:	3601      	adds	r6, #1
 8010400:	e7d9      	b.n	80103b6 <_printf_common+0x8e>
	...

08010404 <_printf_i>:
 8010404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010408:	460c      	mov	r4, r1
 801040a:	4691      	mov	r9, r2
 801040c:	7e27      	ldrb	r7, [r4, #24]
 801040e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010410:	2f78      	cmp	r7, #120	; 0x78
 8010412:	4680      	mov	r8, r0
 8010414:	469a      	mov	sl, r3
 8010416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801041a:	d807      	bhi.n	801042c <_printf_i+0x28>
 801041c:	2f62      	cmp	r7, #98	; 0x62
 801041e:	d80a      	bhi.n	8010436 <_printf_i+0x32>
 8010420:	2f00      	cmp	r7, #0
 8010422:	f000 80d8 	beq.w	80105d6 <_printf_i+0x1d2>
 8010426:	2f58      	cmp	r7, #88	; 0x58
 8010428:	f000 80a3 	beq.w	8010572 <_printf_i+0x16e>
 801042c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010434:	e03a      	b.n	80104ac <_printf_i+0xa8>
 8010436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801043a:	2b15      	cmp	r3, #21
 801043c:	d8f6      	bhi.n	801042c <_printf_i+0x28>
 801043e:	a001      	add	r0, pc, #4	; (adr r0, 8010444 <_printf_i+0x40>)
 8010440:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010444:	0801049d 	.word	0x0801049d
 8010448:	080104b1 	.word	0x080104b1
 801044c:	0801042d 	.word	0x0801042d
 8010450:	0801042d 	.word	0x0801042d
 8010454:	0801042d 	.word	0x0801042d
 8010458:	0801042d 	.word	0x0801042d
 801045c:	080104b1 	.word	0x080104b1
 8010460:	0801042d 	.word	0x0801042d
 8010464:	0801042d 	.word	0x0801042d
 8010468:	0801042d 	.word	0x0801042d
 801046c:	0801042d 	.word	0x0801042d
 8010470:	080105bd 	.word	0x080105bd
 8010474:	080104e1 	.word	0x080104e1
 8010478:	0801059f 	.word	0x0801059f
 801047c:	0801042d 	.word	0x0801042d
 8010480:	0801042d 	.word	0x0801042d
 8010484:	080105df 	.word	0x080105df
 8010488:	0801042d 	.word	0x0801042d
 801048c:	080104e1 	.word	0x080104e1
 8010490:	0801042d 	.word	0x0801042d
 8010494:	0801042d 	.word	0x0801042d
 8010498:	080105a7 	.word	0x080105a7
 801049c:	680b      	ldr	r3, [r1, #0]
 801049e:	1d1a      	adds	r2, r3, #4
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	600a      	str	r2, [r1, #0]
 80104a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80104a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104ac:	2301      	movs	r3, #1
 80104ae:	e0a3      	b.n	80105f8 <_printf_i+0x1f4>
 80104b0:	6825      	ldr	r5, [r4, #0]
 80104b2:	6808      	ldr	r0, [r1, #0]
 80104b4:	062e      	lsls	r6, r5, #24
 80104b6:	f100 0304 	add.w	r3, r0, #4
 80104ba:	d50a      	bpl.n	80104d2 <_printf_i+0xce>
 80104bc:	6805      	ldr	r5, [r0, #0]
 80104be:	600b      	str	r3, [r1, #0]
 80104c0:	2d00      	cmp	r5, #0
 80104c2:	da03      	bge.n	80104cc <_printf_i+0xc8>
 80104c4:	232d      	movs	r3, #45	; 0x2d
 80104c6:	426d      	negs	r5, r5
 80104c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104cc:	485e      	ldr	r0, [pc, #376]	; (8010648 <_printf_i+0x244>)
 80104ce:	230a      	movs	r3, #10
 80104d0:	e019      	b.n	8010506 <_printf_i+0x102>
 80104d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80104d6:	6805      	ldr	r5, [r0, #0]
 80104d8:	600b      	str	r3, [r1, #0]
 80104da:	bf18      	it	ne
 80104dc:	b22d      	sxthne	r5, r5
 80104de:	e7ef      	b.n	80104c0 <_printf_i+0xbc>
 80104e0:	680b      	ldr	r3, [r1, #0]
 80104e2:	6825      	ldr	r5, [r4, #0]
 80104e4:	1d18      	adds	r0, r3, #4
 80104e6:	6008      	str	r0, [r1, #0]
 80104e8:	0628      	lsls	r0, r5, #24
 80104ea:	d501      	bpl.n	80104f0 <_printf_i+0xec>
 80104ec:	681d      	ldr	r5, [r3, #0]
 80104ee:	e002      	b.n	80104f6 <_printf_i+0xf2>
 80104f0:	0669      	lsls	r1, r5, #25
 80104f2:	d5fb      	bpl.n	80104ec <_printf_i+0xe8>
 80104f4:	881d      	ldrh	r5, [r3, #0]
 80104f6:	4854      	ldr	r0, [pc, #336]	; (8010648 <_printf_i+0x244>)
 80104f8:	2f6f      	cmp	r7, #111	; 0x6f
 80104fa:	bf0c      	ite	eq
 80104fc:	2308      	moveq	r3, #8
 80104fe:	230a      	movne	r3, #10
 8010500:	2100      	movs	r1, #0
 8010502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010506:	6866      	ldr	r6, [r4, #4]
 8010508:	60a6      	str	r6, [r4, #8]
 801050a:	2e00      	cmp	r6, #0
 801050c:	bfa2      	ittt	ge
 801050e:	6821      	ldrge	r1, [r4, #0]
 8010510:	f021 0104 	bicge.w	r1, r1, #4
 8010514:	6021      	strge	r1, [r4, #0]
 8010516:	b90d      	cbnz	r5, 801051c <_printf_i+0x118>
 8010518:	2e00      	cmp	r6, #0
 801051a:	d04d      	beq.n	80105b8 <_printf_i+0x1b4>
 801051c:	4616      	mov	r6, r2
 801051e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010522:	fb03 5711 	mls	r7, r3, r1, r5
 8010526:	5dc7      	ldrb	r7, [r0, r7]
 8010528:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801052c:	462f      	mov	r7, r5
 801052e:	42bb      	cmp	r3, r7
 8010530:	460d      	mov	r5, r1
 8010532:	d9f4      	bls.n	801051e <_printf_i+0x11a>
 8010534:	2b08      	cmp	r3, #8
 8010536:	d10b      	bne.n	8010550 <_printf_i+0x14c>
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	07df      	lsls	r7, r3, #31
 801053c:	d508      	bpl.n	8010550 <_printf_i+0x14c>
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	6861      	ldr	r1, [r4, #4]
 8010542:	4299      	cmp	r1, r3
 8010544:	bfde      	ittt	le
 8010546:	2330      	movle	r3, #48	; 0x30
 8010548:	f806 3c01 	strble.w	r3, [r6, #-1]
 801054c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010550:	1b92      	subs	r2, r2, r6
 8010552:	6122      	str	r2, [r4, #16]
 8010554:	f8cd a000 	str.w	sl, [sp]
 8010558:	464b      	mov	r3, r9
 801055a:	aa03      	add	r2, sp, #12
 801055c:	4621      	mov	r1, r4
 801055e:	4640      	mov	r0, r8
 8010560:	f7ff fee2 	bl	8010328 <_printf_common>
 8010564:	3001      	adds	r0, #1
 8010566:	d14c      	bne.n	8010602 <_printf_i+0x1fe>
 8010568:	f04f 30ff 	mov.w	r0, #4294967295
 801056c:	b004      	add	sp, #16
 801056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010572:	4835      	ldr	r0, [pc, #212]	; (8010648 <_printf_i+0x244>)
 8010574:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010578:	6823      	ldr	r3, [r4, #0]
 801057a:	680e      	ldr	r6, [r1, #0]
 801057c:	061f      	lsls	r7, r3, #24
 801057e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010582:	600e      	str	r6, [r1, #0]
 8010584:	d514      	bpl.n	80105b0 <_printf_i+0x1ac>
 8010586:	07d9      	lsls	r1, r3, #31
 8010588:	bf44      	itt	mi
 801058a:	f043 0320 	orrmi.w	r3, r3, #32
 801058e:	6023      	strmi	r3, [r4, #0]
 8010590:	b91d      	cbnz	r5, 801059a <_printf_i+0x196>
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	f023 0320 	bic.w	r3, r3, #32
 8010598:	6023      	str	r3, [r4, #0]
 801059a:	2310      	movs	r3, #16
 801059c:	e7b0      	b.n	8010500 <_printf_i+0xfc>
 801059e:	6823      	ldr	r3, [r4, #0]
 80105a0:	f043 0320 	orr.w	r3, r3, #32
 80105a4:	6023      	str	r3, [r4, #0]
 80105a6:	2378      	movs	r3, #120	; 0x78
 80105a8:	4828      	ldr	r0, [pc, #160]	; (801064c <_printf_i+0x248>)
 80105aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105ae:	e7e3      	b.n	8010578 <_printf_i+0x174>
 80105b0:	065e      	lsls	r6, r3, #25
 80105b2:	bf48      	it	mi
 80105b4:	b2ad      	uxthmi	r5, r5
 80105b6:	e7e6      	b.n	8010586 <_printf_i+0x182>
 80105b8:	4616      	mov	r6, r2
 80105ba:	e7bb      	b.n	8010534 <_printf_i+0x130>
 80105bc:	680b      	ldr	r3, [r1, #0]
 80105be:	6826      	ldr	r6, [r4, #0]
 80105c0:	6960      	ldr	r0, [r4, #20]
 80105c2:	1d1d      	adds	r5, r3, #4
 80105c4:	600d      	str	r5, [r1, #0]
 80105c6:	0635      	lsls	r5, r6, #24
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	d501      	bpl.n	80105d0 <_printf_i+0x1cc>
 80105cc:	6018      	str	r0, [r3, #0]
 80105ce:	e002      	b.n	80105d6 <_printf_i+0x1d2>
 80105d0:	0671      	lsls	r1, r6, #25
 80105d2:	d5fb      	bpl.n	80105cc <_printf_i+0x1c8>
 80105d4:	8018      	strh	r0, [r3, #0]
 80105d6:	2300      	movs	r3, #0
 80105d8:	6123      	str	r3, [r4, #16]
 80105da:	4616      	mov	r6, r2
 80105dc:	e7ba      	b.n	8010554 <_printf_i+0x150>
 80105de:	680b      	ldr	r3, [r1, #0]
 80105e0:	1d1a      	adds	r2, r3, #4
 80105e2:	600a      	str	r2, [r1, #0]
 80105e4:	681e      	ldr	r6, [r3, #0]
 80105e6:	6862      	ldr	r2, [r4, #4]
 80105e8:	2100      	movs	r1, #0
 80105ea:	4630      	mov	r0, r6
 80105ec:	f7ef fdf8 	bl	80001e0 <memchr>
 80105f0:	b108      	cbz	r0, 80105f6 <_printf_i+0x1f2>
 80105f2:	1b80      	subs	r0, r0, r6
 80105f4:	6060      	str	r0, [r4, #4]
 80105f6:	6863      	ldr	r3, [r4, #4]
 80105f8:	6123      	str	r3, [r4, #16]
 80105fa:	2300      	movs	r3, #0
 80105fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010600:	e7a8      	b.n	8010554 <_printf_i+0x150>
 8010602:	6923      	ldr	r3, [r4, #16]
 8010604:	4632      	mov	r2, r6
 8010606:	4649      	mov	r1, r9
 8010608:	4640      	mov	r0, r8
 801060a:	47d0      	blx	sl
 801060c:	3001      	adds	r0, #1
 801060e:	d0ab      	beq.n	8010568 <_printf_i+0x164>
 8010610:	6823      	ldr	r3, [r4, #0]
 8010612:	079b      	lsls	r3, r3, #30
 8010614:	d413      	bmi.n	801063e <_printf_i+0x23a>
 8010616:	68e0      	ldr	r0, [r4, #12]
 8010618:	9b03      	ldr	r3, [sp, #12]
 801061a:	4298      	cmp	r0, r3
 801061c:	bfb8      	it	lt
 801061e:	4618      	movlt	r0, r3
 8010620:	e7a4      	b.n	801056c <_printf_i+0x168>
 8010622:	2301      	movs	r3, #1
 8010624:	4632      	mov	r2, r6
 8010626:	4649      	mov	r1, r9
 8010628:	4640      	mov	r0, r8
 801062a:	47d0      	blx	sl
 801062c:	3001      	adds	r0, #1
 801062e:	d09b      	beq.n	8010568 <_printf_i+0x164>
 8010630:	3501      	adds	r5, #1
 8010632:	68e3      	ldr	r3, [r4, #12]
 8010634:	9903      	ldr	r1, [sp, #12]
 8010636:	1a5b      	subs	r3, r3, r1
 8010638:	42ab      	cmp	r3, r5
 801063a:	dcf2      	bgt.n	8010622 <_printf_i+0x21e>
 801063c:	e7eb      	b.n	8010616 <_printf_i+0x212>
 801063e:	2500      	movs	r5, #0
 8010640:	f104 0619 	add.w	r6, r4, #25
 8010644:	e7f5      	b.n	8010632 <_printf_i+0x22e>
 8010646:	bf00      	nop
 8010648:	08011a15 	.word	0x08011a15
 801064c:	08011a26 	.word	0x08011a26

08010650 <memmove>:
 8010650:	4288      	cmp	r0, r1
 8010652:	b510      	push	{r4, lr}
 8010654:	eb01 0402 	add.w	r4, r1, r2
 8010658:	d902      	bls.n	8010660 <memmove+0x10>
 801065a:	4284      	cmp	r4, r0
 801065c:	4623      	mov	r3, r4
 801065e:	d807      	bhi.n	8010670 <memmove+0x20>
 8010660:	1e43      	subs	r3, r0, #1
 8010662:	42a1      	cmp	r1, r4
 8010664:	d008      	beq.n	8010678 <memmove+0x28>
 8010666:	f811 2b01 	ldrb.w	r2, [r1], #1
 801066a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801066e:	e7f8      	b.n	8010662 <memmove+0x12>
 8010670:	4402      	add	r2, r0
 8010672:	4601      	mov	r1, r0
 8010674:	428a      	cmp	r2, r1
 8010676:	d100      	bne.n	801067a <memmove+0x2a>
 8010678:	bd10      	pop	{r4, pc}
 801067a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801067e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010682:	e7f7      	b.n	8010674 <memmove+0x24>

08010684 <_free_r>:
 8010684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010686:	2900      	cmp	r1, #0
 8010688:	d048      	beq.n	801071c <_free_r+0x98>
 801068a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801068e:	9001      	str	r0, [sp, #4]
 8010690:	2b00      	cmp	r3, #0
 8010692:	f1a1 0404 	sub.w	r4, r1, #4
 8010696:	bfb8      	it	lt
 8010698:	18e4      	addlt	r4, r4, r3
 801069a:	f000 f8d3 	bl	8010844 <__malloc_lock>
 801069e:	4a20      	ldr	r2, [pc, #128]	; (8010720 <_free_r+0x9c>)
 80106a0:	9801      	ldr	r0, [sp, #4]
 80106a2:	6813      	ldr	r3, [r2, #0]
 80106a4:	4615      	mov	r5, r2
 80106a6:	b933      	cbnz	r3, 80106b6 <_free_r+0x32>
 80106a8:	6063      	str	r3, [r4, #4]
 80106aa:	6014      	str	r4, [r2, #0]
 80106ac:	b003      	add	sp, #12
 80106ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106b2:	f000 b8cd 	b.w	8010850 <__malloc_unlock>
 80106b6:	42a3      	cmp	r3, r4
 80106b8:	d90b      	bls.n	80106d2 <_free_r+0x4e>
 80106ba:	6821      	ldr	r1, [r4, #0]
 80106bc:	1862      	adds	r2, r4, r1
 80106be:	4293      	cmp	r3, r2
 80106c0:	bf04      	itt	eq
 80106c2:	681a      	ldreq	r2, [r3, #0]
 80106c4:	685b      	ldreq	r3, [r3, #4]
 80106c6:	6063      	str	r3, [r4, #4]
 80106c8:	bf04      	itt	eq
 80106ca:	1852      	addeq	r2, r2, r1
 80106cc:	6022      	streq	r2, [r4, #0]
 80106ce:	602c      	str	r4, [r5, #0]
 80106d0:	e7ec      	b.n	80106ac <_free_r+0x28>
 80106d2:	461a      	mov	r2, r3
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	b10b      	cbz	r3, 80106dc <_free_r+0x58>
 80106d8:	42a3      	cmp	r3, r4
 80106da:	d9fa      	bls.n	80106d2 <_free_r+0x4e>
 80106dc:	6811      	ldr	r1, [r2, #0]
 80106de:	1855      	adds	r5, r2, r1
 80106e0:	42a5      	cmp	r5, r4
 80106e2:	d10b      	bne.n	80106fc <_free_r+0x78>
 80106e4:	6824      	ldr	r4, [r4, #0]
 80106e6:	4421      	add	r1, r4
 80106e8:	1854      	adds	r4, r2, r1
 80106ea:	42a3      	cmp	r3, r4
 80106ec:	6011      	str	r1, [r2, #0]
 80106ee:	d1dd      	bne.n	80106ac <_free_r+0x28>
 80106f0:	681c      	ldr	r4, [r3, #0]
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	6053      	str	r3, [r2, #4]
 80106f6:	4421      	add	r1, r4
 80106f8:	6011      	str	r1, [r2, #0]
 80106fa:	e7d7      	b.n	80106ac <_free_r+0x28>
 80106fc:	d902      	bls.n	8010704 <_free_r+0x80>
 80106fe:	230c      	movs	r3, #12
 8010700:	6003      	str	r3, [r0, #0]
 8010702:	e7d3      	b.n	80106ac <_free_r+0x28>
 8010704:	6825      	ldr	r5, [r4, #0]
 8010706:	1961      	adds	r1, r4, r5
 8010708:	428b      	cmp	r3, r1
 801070a:	bf04      	itt	eq
 801070c:	6819      	ldreq	r1, [r3, #0]
 801070e:	685b      	ldreq	r3, [r3, #4]
 8010710:	6063      	str	r3, [r4, #4]
 8010712:	bf04      	itt	eq
 8010714:	1949      	addeq	r1, r1, r5
 8010716:	6021      	streq	r1, [r4, #0]
 8010718:	6054      	str	r4, [r2, #4]
 801071a:	e7c7      	b.n	80106ac <_free_r+0x28>
 801071c:	b003      	add	sp, #12
 801071e:	bd30      	pop	{r4, r5, pc}
 8010720:	20000590 	.word	0x20000590

08010724 <_malloc_r>:
 8010724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010726:	1ccd      	adds	r5, r1, #3
 8010728:	f025 0503 	bic.w	r5, r5, #3
 801072c:	3508      	adds	r5, #8
 801072e:	2d0c      	cmp	r5, #12
 8010730:	bf38      	it	cc
 8010732:	250c      	movcc	r5, #12
 8010734:	2d00      	cmp	r5, #0
 8010736:	4606      	mov	r6, r0
 8010738:	db01      	blt.n	801073e <_malloc_r+0x1a>
 801073a:	42a9      	cmp	r1, r5
 801073c:	d903      	bls.n	8010746 <_malloc_r+0x22>
 801073e:	230c      	movs	r3, #12
 8010740:	6033      	str	r3, [r6, #0]
 8010742:	2000      	movs	r0, #0
 8010744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010746:	f000 f87d 	bl	8010844 <__malloc_lock>
 801074a:	4921      	ldr	r1, [pc, #132]	; (80107d0 <_malloc_r+0xac>)
 801074c:	680a      	ldr	r2, [r1, #0]
 801074e:	4614      	mov	r4, r2
 8010750:	b99c      	cbnz	r4, 801077a <_malloc_r+0x56>
 8010752:	4f20      	ldr	r7, [pc, #128]	; (80107d4 <_malloc_r+0xb0>)
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	b923      	cbnz	r3, 8010762 <_malloc_r+0x3e>
 8010758:	4621      	mov	r1, r4
 801075a:	4630      	mov	r0, r6
 801075c:	f000 f862 	bl	8010824 <_sbrk_r>
 8010760:	6038      	str	r0, [r7, #0]
 8010762:	4629      	mov	r1, r5
 8010764:	4630      	mov	r0, r6
 8010766:	f000 f85d 	bl	8010824 <_sbrk_r>
 801076a:	1c43      	adds	r3, r0, #1
 801076c:	d123      	bne.n	80107b6 <_malloc_r+0x92>
 801076e:	230c      	movs	r3, #12
 8010770:	6033      	str	r3, [r6, #0]
 8010772:	4630      	mov	r0, r6
 8010774:	f000 f86c 	bl	8010850 <__malloc_unlock>
 8010778:	e7e3      	b.n	8010742 <_malloc_r+0x1e>
 801077a:	6823      	ldr	r3, [r4, #0]
 801077c:	1b5b      	subs	r3, r3, r5
 801077e:	d417      	bmi.n	80107b0 <_malloc_r+0x8c>
 8010780:	2b0b      	cmp	r3, #11
 8010782:	d903      	bls.n	801078c <_malloc_r+0x68>
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	441c      	add	r4, r3
 8010788:	6025      	str	r5, [r4, #0]
 801078a:	e004      	b.n	8010796 <_malloc_r+0x72>
 801078c:	6863      	ldr	r3, [r4, #4]
 801078e:	42a2      	cmp	r2, r4
 8010790:	bf0c      	ite	eq
 8010792:	600b      	streq	r3, [r1, #0]
 8010794:	6053      	strne	r3, [r2, #4]
 8010796:	4630      	mov	r0, r6
 8010798:	f000 f85a 	bl	8010850 <__malloc_unlock>
 801079c:	f104 000b 	add.w	r0, r4, #11
 80107a0:	1d23      	adds	r3, r4, #4
 80107a2:	f020 0007 	bic.w	r0, r0, #7
 80107a6:	1ac2      	subs	r2, r0, r3
 80107a8:	d0cc      	beq.n	8010744 <_malloc_r+0x20>
 80107aa:	1a1b      	subs	r3, r3, r0
 80107ac:	50a3      	str	r3, [r4, r2]
 80107ae:	e7c9      	b.n	8010744 <_malloc_r+0x20>
 80107b0:	4622      	mov	r2, r4
 80107b2:	6864      	ldr	r4, [r4, #4]
 80107b4:	e7cc      	b.n	8010750 <_malloc_r+0x2c>
 80107b6:	1cc4      	adds	r4, r0, #3
 80107b8:	f024 0403 	bic.w	r4, r4, #3
 80107bc:	42a0      	cmp	r0, r4
 80107be:	d0e3      	beq.n	8010788 <_malloc_r+0x64>
 80107c0:	1a21      	subs	r1, r4, r0
 80107c2:	4630      	mov	r0, r6
 80107c4:	f000 f82e 	bl	8010824 <_sbrk_r>
 80107c8:	3001      	adds	r0, #1
 80107ca:	d1dd      	bne.n	8010788 <_malloc_r+0x64>
 80107cc:	e7cf      	b.n	801076e <_malloc_r+0x4a>
 80107ce:	bf00      	nop
 80107d0:	20000590 	.word	0x20000590
 80107d4:	20000594 	.word	0x20000594

080107d8 <_realloc_r>:
 80107d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107da:	4607      	mov	r7, r0
 80107dc:	4614      	mov	r4, r2
 80107de:	460e      	mov	r6, r1
 80107e0:	b921      	cbnz	r1, 80107ec <_realloc_r+0x14>
 80107e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80107e6:	4611      	mov	r1, r2
 80107e8:	f7ff bf9c 	b.w	8010724 <_malloc_r>
 80107ec:	b922      	cbnz	r2, 80107f8 <_realloc_r+0x20>
 80107ee:	f7ff ff49 	bl	8010684 <_free_r>
 80107f2:	4625      	mov	r5, r4
 80107f4:	4628      	mov	r0, r5
 80107f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107f8:	f000 f830 	bl	801085c <_malloc_usable_size_r>
 80107fc:	42a0      	cmp	r0, r4
 80107fe:	d20f      	bcs.n	8010820 <_realloc_r+0x48>
 8010800:	4621      	mov	r1, r4
 8010802:	4638      	mov	r0, r7
 8010804:	f7ff ff8e 	bl	8010724 <_malloc_r>
 8010808:	4605      	mov	r5, r0
 801080a:	2800      	cmp	r0, #0
 801080c:	d0f2      	beq.n	80107f4 <_realloc_r+0x1c>
 801080e:	4631      	mov	r1, r6
 8010810:	4622      	mov	r2, r4
 8010812:	f7ff fbab 	bl	800ff6c <memcpy>
 8010816:	4631      	mov	r1, r6
 8010818:	4638      	mov	r0, r7
 801081a:	f7ff ff33 	bl	8010684 <_free_r>
 801081e:	e7e9      	b.n	80107f4 <_realloc_r+0x1c>
 8010820:	4635      	mov	r5, r6
 8010822:	e7e7      	b.n	80107f4 <_realloc_r+0x1c>

08010824 <_sbrk_r>:
 8010824:	b538      	push	{r3, r4, r5, lr}
 8010826:	4d06      	ldr	r5, [pc, #24]	; (8010840 <_sbrk_r+0x1c>)
 8010828:	2300      	movs	r3, #0
 801082a:	4604      	mov	r4, r0
 801082c:	4608      	mov	r0, r1
 801082e:	602b      	str	r3, [r5, #0]
 8010830:	f7f5 fe16 	bl	8006460 <_sbrk>
 8010834:	1c43      	adds	r3, r0, #1
 8010836:	d102      	bne.n	801083e <_sbrk_r+0x1a>
 8010838:	682b      	ldr	r3, [r5, #0]
 801083a:	b103      	cbz	r3, 801083e <_sbrk_r+0x1a>
 801083c:	6023      	str	r3, [r4, #0]
 801083e:	bd38      	pop	{r3, r4, r5, pc}
 8010840:	20000efc 	.word	0x20000efc

08010844 <__malloc_lock>:
 8010844:	4801      	ldr	r0, [pc, #4]	; (801084c <__malloc_lock+0x8>)
 8010846:	f000 b811 	b.w	801086c <__retarget_lock_acquire_recursive>
 801084a:	bf00      	nop
 801084c:	20000f04 	.word	0x20000f04

08010850 <__malloc_unlock>:
 8010850:	4801      	ldr	r0, [pc, #4]	; (8010858 <__malloc_unlock+0x8>)
 8010852:	f000 b80c 	b.w	801086e <__retarget_lock_release_recursive>
 8010856:	bf00      	nop
 8010858:	20000f04 	.word	0x20000f04

0801085c <_malloc_usable_size_r>:
 801085c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010860:	1f18      	subs	r0, r3, #4
 8010862:	2b00      	cmp	r3, #0
 8010864:	bfbc      	itt	lt
 8010866:	580b      	ldrlt	r3, [r1, r0]
 8010868:	18c0      	addlt	r0, r0, r3
 801086a:	4770      	bx	lr

0801086c <__retarget_lock_acquire_recursive>:
 801086c:	4770      	bx	lr

0801086e <__retarget_lock_release_recursive>:
 801086e:	4770      	bx	lr

08010870 <asin>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	ed2d 8b02 	vpush	{d8}
 8010876:	ec55 4b10 	vmov	r4, r5, d0
 801087a:	f000 f835 	bl	80108e8 <__ieee754_asin>
 801087e:	4b16      	ldr	r3, [pc, #88]	; (80108d8 <asin+0x68>)
 8010880:	eeb0 8a40 	vmov.f32	s16, s0
 8010884:	eef0 8a60 	vmov.f32	s17, s1
 8010888:	f993 3000 	ldrsb.w	r3, [r3]
 801088c:	3301      	adds	r3, #1
 801088e:	d01c      	beq.n	80108ca <asin+0x5a>
 8010890:	4622      	mov	r2, r4
 8010892:	462b      	mov	r3, r5
 8010894:	4620      	mov	r0, r4
 8010896:	4629      	mov	r1, r5
 8010898:	f7f0 f948 	bl	8000b2c <__aeabi_dcmpun>
 801089c:	b9a8      	cbnz	r0, 80108ca <asin+0x5a>
 801089e:	ec45 4b10 	vmov	d0, r4, r5
 80108a2:	f000 fd55 	bl	8011350 <fabs>
 80108a6:	4b0d      	ldr	r3, [pc, #52]	; (80108dc <asin+0x6c>)
 80108a8:	ec51 0b10 	vmov	r0, r1, d0
 80108ac:	2200      	movs	r2, #0
 80108ae:	f7f0 f933 	bl	8000b18 <__aeabi_dcmpgt>
 80108b2:	b150      	cbz	r0, 80108ca <asin+0x5a>
 80108b4:	f7ff fb30 	bl	800ff18 <__errno>
 80108b8:	ecbd 8b02 	vpop	{d8}
 80108bc:	2321      	movs	r3, #33	; 0x21
 80108be:	6003      	str	r3, [r0, #0]
 80108c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108c4:	4806      	ldr	r0, [pc, #24]	; (80108e0 <asin+0x70>)
 80108c6:	f000 bd4f 	b.w	8011368 <nan>
 80108ca:	eeb0 0a48 	vmov.f32	s0, s16
 80108ce:	eef0 0a68 	vmov.f32	s1, s17
 80108d2:	ecbd 8b02 	vpop	{d8}
 80108d6:	bd38      	pop	{r3, r4, r5, pc}
 80108d8:	20000150 	.word	0x20000150
 80108dc:	3ff00000 	.word	0x3ff00000
 80108e0:	08011a09 	.word	0x08011a09

080108e4 <atan2>:
 80108e4:	f000 ba14 	b.w	8010d10 <__ieee754_atan2>

080108e8 <__ieee754_asin>:
 80108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ec:	ed2d 8b04 	vpush	{d8-d9}
 80108f0:	ec55 4b10 	vmov	r4, r5, d0
 80108f4:	4bcc      	ldr	r3, [pc, #816]	; (8010c28 <__ieee754_asin+0x340>)
 80108f6:	b083      	sub	sp, #12
 80108f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80108fc:	4598      	cmp	r8, r3
 80108fe:	9501      	str	r5, [sp, #4]
 8010900:	dd35      	ble.n	801096e <__ieee754_asin+0x86>
 8010902:	ee10 3a10 	vmov	r3, s0
 8010906:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801090a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801090e:	ea58 0303 	orrs.w	r3, r8, r3
 8010912:	d117      	bne.n	8010944 <__ieee754_asin+0x5c>
 8010914:	a3aa      	add	r3, pc, #680	; (adr r3, 8010bc0 <__ieee754_asin+0x2d8>)
 8010916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091a:	ee10 0a10 	vmov	r0, s0
 801091e:	4629      	mov	r1, r5
 8010920:	f7ef fe6a 	bl	80005f8 <__aeabi_dmul>
 8010924:	a3a8      	add	r3, pc, #672	; (adr r3, 8010bc8 <__ieee754_asin+0x2e0>)
 8010926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092a:	4606      	mov	r6, r0
 801092c:	460f      	mov	r7, r1
 801092e:	4620      	mov	r0, r4
 8010930:	4629      	mov	r1, r5
 8010932:	f7ef fe61 	bl	80005f8 <__aeabi_dmul>
 8010936:	4602      	mov	r2, r0
 8010938:	460b      	mov	r3, r1
 801093a:	4630      	mov	r0, r6
 801093c:	4639      	mov	r1, r7
 801093e:	f7ef fca5 	bl	800028c <__adddf3>
 8010942:	e00b      	b.n	801095c <__ieee754_asin+0x74>
 8010944:	ee10 2a10 	vmov	r2, s0
 8010948:	462b      	mov	r3, r5
 801094a:	ee10 0a10 	vmov	r0, s0
 801094e:	4629      	mov	r1, r5
 8010950:	f7ef fc9a 	bl	8000288 <__aeabi_dsub>
 8010954:	4602      	mov	r2, r0
 8010956:	460b      	mov	r3, r1
 8010958:	f7ef ff78 	bl	800084c <__aeabi_ddiv>
 801095c:	4604      	mov	r4, r0
 801095e:	460d      	mov	r5, r1
 8010960:	ec45 4b10 	vmov	d0, r4, r5
 8010964:	b003      	add	sp, #12
 8010966:	ecbd 8b04 	vpop	{d8-d9}
 801096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801096e:	4baf      	ldr	r3, [pc, #700]	; (8010c2c <__ieee754_asin+0x344>)
 8010970:	4598      	cmp	r8, r3
 8010972:	dc11      	bgt.n	8010998 <__ieee754_asin+0xb0>
 8010974:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010978:	f280 80ae 	bge.w	8010ad8 <__ieee754_asin+0x1f0>
 801097c:	a394      	add	r3, pc, #592	; (adr r3, 8010bd0 <__ieee754_asin+0x2e8>)
 801097e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010982:	ee10 0a10 	vmov	r0, s0
 8010986:	4629      	mov	r1, r5
 8010988:	f7ef fc80 	bl	800028c <__adddf3>
 801098c:	4ba8      	ldr	r3, [pc, #672]	; (8010c30 <__ieee754_asin+0x348>)
 801098e:	2200      	movs	r2, #0
 8010990:	f7f0 f8c2 	bl	8000b18 <__aeabi_dcmpgt>
 8010994:	2800      	cmp	r0, #0
 8010996:	d1e3      	bne.n	8010960 <__ieee754_asin+0x78>
 8010998:	ec45 4b10 	vmov	d0, r4, r5
 801099c:	f000 fcd8 	bl	8011350 <fabs>
 80109a0:	49a3      	ldr	r1, [pc, #652]	; (8010c30 <__ieee754_asin+0x348>)
 80109a2:	ec53 2b10 	vmov	r2, r3, d0
 80109a6:	2000      	movs	r0, #0
 80109a8:	f7ef fc6e 	bl	8000288 <__aeabi_dsub>
 80109ac:	4ba1      	ldr	r3, [pc, #644]	; (8010c34 <__ieee754_asin+0x34c>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	f7ef fe22 	bl	80005f8 <__aeabi_dmul>
 80109b4:	a388      	add	r3, pc, #544	; (adr r3, 8010bd8 <__ieee754_asin+0x2f0>)
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	4604      	mov	r4, r0
 80109bc:	460d      	mov	r5, r1
 80109be:	f7ef fe1b 	bl	80005f8 <__aeabi_dmul>
 80109c2:	a387      	add	r3, pc, #540	; (adr r3, 8010be0 <__ieee754_asin+0x2f8>)
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	f7ef fc60 	bl	800028c <__adddf3>
 80109cc:	4622      	mov	r2, r4
 80109ce:	462b      	mov	r3, r5
 80109d0:	f7ef fe12 	bl	80005f8 <__aeabi_dmul>
 80109d4:	a384      	add	r3, pc, #528	; (adr r3, 8010be8 <__ieee754_asin+0x300>)
 80109d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109da:	f7ef fc55 	bl	8000288 <__aeabi_dsub>
 80109de:	4622      	mov	r2, r4
 80109e0:	462b      	mov	r3, r5
 80109e2:	f7ef fe09 	bl	80005f8 <__aeabi_dmul>
 80109e6:	a382      	add	r3, pc, #520	; (adr r3, 8010bf0 <__ieee754_asin+0x308>)
 80109e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ec:	f7ef fc4e 	bl	800028c <__adddf3>
 80109f0:	4622      	mov	r2, r4
 80109f2:	462b      	mov	r3, r5
 80109f4:	f7ef fe00 	bl	80005f8 <__aeabi_dmul>
 80109f8:	a37f      	add	r3, pc, #508	; (adr r3, 8010bf8 <__ieee754_asin+0x310>)
 80109fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fe:	f7ef fc43 	bl	8000288 <__aeabi_dsub>
 8010a02:	4622      	mov	r2, r4
 8010a04:	462b      	mov	r3, r5
 8010a06:	f7ef fdf7 	bl	80005f8 <__aeabi_dmul>
 8010a0a:	a37d      	add	r3, pc, #500	; (adr r3, 8010c00 <__ieee754_asin+0x318>)
 8010a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a10:	f7ef fc3c 	bl	800028c <__adddf3>
 8010a14:	4622      	mov	r2, r4
 8010a16:	462b      	mov	r3, r5
 8010a18:	f7ef fdee 	bl	80005f8 <__aeabi_dmul>
 8010a1c:	a37a      	add	r3, pc, #488	; (adr r3, 8010c08 <__ieee754_asin+0x320>)
 8010a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a22:	ec41 0b18 	vmov	d8, r0, r1
 8010a26:	4620      	mov	r0, r4
 8010a28:	4629      	mov	r1, r5
 8010a2a:	f7ef fde5 	bl	80005f8 <__aeabi_dmul>
 8010a2e:	a378      	add	r3, pc, #480	; (adr r3, 8010c10 <__ieee754_asin+0x328>)
 8010a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a34:	f7ef fc28 	bl	8000288 <__aeabi_dsub>
 8010a38:	4622      	mov	r2, r4
 8010a3a:	462b      	mov	r3, r5
 8010a3c:	f7ef fddc 	bl	80005f8 <__aeabi_dmul>
 8010a40:	a375      	add	r3, pc, #468	; (adr r3, 8010c18 <__ieee754_asin+0x330>)
 8010a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a46:	f7ef fc21 	bl	800028c <__adddf3>
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	462b      	mov	r3, r5
 8010a4e:	f7ef fdd3 	bl	80005f8 <__aeabi_dmul>
 8010a52:	a373      	add	r3, pc, #460	; (adr r3, 8010c20 <__ieee754_asin+0x338>)
 8010a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a58:	f7ef fc16 	bl	8000288 <__aeabi_dsub>
 8010a5c:	4622      	mov	r2, r4
 8010a5e:	462b      	mov	r3, r5
 8010a60:	f7ef fdca 	bl	80005f8 <__aeabi_dmul>
 8010a64:	4b72      	ldr	r3, [pc, #456]	; (8010c30 <__ieee754_asin+0x348>)
 8010a66:	2200      	movs	r2, #0
 8010a68:	f7ef fc10 	bl	800028c <__adddf3>
 8010a6c:	ec45 4b10 	vmov	d0, r4, r5
 8010a70:	4606      	mov	r6, r0
 8010a72:	460f      	mov	r7, r1
 8010a74:	f000 fa16 	bl	8010ea4 <__ieee754_sqrt>
 8010a78:	4b6f      	ldr	r3, [pc, #444]	; (8010c38 <__ieee754_asin+0x350>)
 8010a7a:	4598      	cmp	r8, r3
 8010a7c:	ec5b ab10 	vmov	sl, fp, d0
 8010a80:	f340 80dc 	ble.w	8010c3c <__ieee754_asin+0x354>
 8010a84:	4632      	mov	r2, r6
 8010a86:	463b      	mov	r3, r7
 8010a88:	ec51 0b18 	vmov	r0, r1, d8
 8010a8c:	f7ef fede 	bl	800084c <__aeabi_ddiv>
 8010a90:	4652      	mov	r2, sl
 8010a92:	465b      	mov	r3, fp
 8010a94:	f7ef fdb0 	bl	80005f8 <__aeabi_dmul>
 8010a98:	4652      	mov	r2, sl
 8010a9a:	465b      	mov	r3, fp
 8010a9c:	f7ef fbf6 	bl	800028c <__adddf3>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	f7ef fbf2 	bl	800028c <__adddf3>
 8010aa8:	a347      	add	r3, pc, #284	; (adr r3, 8010bc8 <__ieee754_asin+0x2e0>)
 8010aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aae:	f7ef fbeb 	bl	8000288 <__aeabi_dsub>
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	a142      	add	r1, pc, #264	; (adr r1, 8010bc0 <__ieee754_asin+0x2d8>)
 8010ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010abc:	f7ef fbe4 	bl	8000288 <__aeabi_dsub>
 8010ac0:	9b01      	ldr	r3, [sp, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	bfdc      	itt	le
 8010ac6:	4602      	movle	r2, r0
 8010ac8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8010acc:	4604      	mov	r4, r0
 8010ace:	460d      	mov	r5, r1
 8010ad0:	bfdc      	itt	le
 8010ad2:	4614      	movle	r4, r2
 8010ad4:	461d      	movle	r5, r3
 8010ad6:	e743      	b.n	8010960 <__ieee754_asin+0x78>
 8010ad8:	ee10 2a10 	vmov	r2, s0
 8010adc:	ee10 0a10 	vmov	r0, s0
 8010ae0:	462b      	mov	r3, r5
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	f7ef fd88 	bl	80005f8 <__aeabi_dmul>
 8010ae8:	a33b      	add	r3, pc, #236	; (adr r3, 8010bd8 <__ieee754_asin+0x2f0>)
 8010aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aee:	4606      	mov	r6, r0
 8010af0:	460f      	mov	r7, r1
 8010af2:	f7ef fd81 	bl	80005f8 <__aeabi_dmul>
 8010af6:	a33a      	add	r3, pc, #232	; (adr r3, 8010be0 <__ieee754_asin+0x2f8>)
 8010af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afc:	f7ef fbc6 	bl	800028c <__adddf3>
 8010b00:	4632      	mov	r2, r6
 8010b02:	463b      	mov	r3, r7
 8010b04:	f7ef fd78 	bl	80005f8 <__aeabi_dmul>
 8010b08:	a337      	add	r3, pc, #220	; (adr r3, 8010be8 <__ieee754_asin+0x300>)
 8010b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0e:	f7ef fbbb 	bl	8000288 <__aeabi_dsub>
 8010b12:	4632      	mov	r2, r6
 8010b14:	463b      	mov	r3, r7
 8010b16:	f7ef fd6f 	bl	80005f8 <__aeabi_dmul>
 8010b1a:	a335      	add	r3, pc, #212	; (adr r3, 8010bf0 <__ieee754_asin+0x308>)
 8010b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b20:	f7ef fbb4 	bl	800028c <__adddf3>
 8010b24:	4632      	mov	r2, r6
 8010b26:	463b      	mov	r3, r7
 8010b28:	f7ef fd66 	bl	80005f8 <__aeabi_dmul>
 8010b2c:	a332      	add	r3, pc, #200	; (adr r3, 8010bf8 <__ieee754_asin+0x310>)
 8010b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b32:	f7ef fba9 	bl	8000288 <__aeabi_dsub>
 8010b36:	4632      	mov	r2, r6
 8010b38:	463b      	mov	r3, r7
 8010b3a:	f7ef fd5d 	bl	80005f8 <__aeabi_dmul>
 8010b3e:	a330      	add	r3, pc, #192	; (adr r3, 8010c00 <__ieee754_asin+0x318>)
 8010b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b44:	f7ef fba2 	bl	800028c <__adddf3>
 8010b48:	4632      	mov	r2, r6
 8010b4a:	463b      	mov	r3, r7
 8010b4c:	f7ef fd54 	bl	80005f8 <__aeabi_dmul>
 8010b50:	a32d      	add	r3, pc, #180	; (adr r3, 8010c08 <__ieee754_asin+0x320>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	4680      	mov	r8, r0
 8010b58:	4689      	mov	r9, r1
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	f7ef fd4b 	bl	80005f8 <__aeabi_dmul>
 8010b62:	a32b      	add	r3, pc, #172	; (adr r3, 8010c10 <__ieee754_asin+0x328>)
 8010b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b68:	f7ef fb8e 	bl	8000288 <__aeabi_dsub>
 8010b6c:	4632      	mov	r2, r6
 8010b6e:	463b      	mov	r3, r7
 8010b70:	f7ef fd42 	bl	80005f8 <__aeabi_dmul>
 8010b74:	a328      	add	r3, pc, #160	; (adr r3, 8010c18 <__ieee754_asin+0x330>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7ef fb87 	bl	800028c <__adddf3>
 8010b7e:	4632      	mov	r2, r6
 8010b80:	463b      	mov	r3, r7
 8010b82:	f7ef fd39 	bl	80005f8 <__aeabi_dmul>
 8010b86:	a326      	add	r3, pc, #152	; (adr r3, 8010c20 <__ieee754_asin+0x338>)
 8010b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8c:	f7ef fb7c 	bl	8000288 <__aeabi_dsub>
 8010b90:	4632      	mov	r2, r6
 8010b92:	463b      	mov	r3, r7
 8010b94:	f7ef fd30 	bl	80005f8 <__aeabi_dmul>
 8010b98:	4b25      	ldr	r3, [pc, #148]	; (8010c30 <__ieee754_asin+0x348>)
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f7ef fb76 	bl	800028c <__adddf3>
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	4640      	mov	r0, r8
 8010ba6:	4649      	mov	r1, r9
 8010ba8:	f7ef fe50 	bl	800084c <__aeabi_ddiv>
 8010bac:	4622      	mov	r2, r4
 8010bae:	462b      	mov	r3, r5
 8010bb0:	f7ef fd22 	bl	80005f8 <__aeabi_dmul>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	4620      	mov	r0, r4
 8010bba:	4629      	mov	r1, r5
 8010bbc:	e6bf      	b.n	801093e <__ieee754_asin+0x56>
 8010bbe:	bf00      	nop
 8010bc0:	54442d18 	.word	0x54442d18
 8010bc4:	3ff921fb 	.word	0x3ff921fb
 8010bc8:	33145c07 	.word	0x33145c07
 8010bcc:	3c91a626 	.word	0x3c91a626
 8010bd0:	8800759c 	.word	0x8800759c
 8010bd4:	7e37e43c 	.word	0x7e37e43c
 8010bd8:	0dfdf709 	.word	0x0dfdf709
 8010bdc:	3f023de1 	.word	0x3f023de1
 8010be0:	7501b288 	.word	0x7501b288
 8010be4:	3f49efe0 	.word	0x3f49efe0
 8010be8:	b5688f3b 	.word	0xb5688f3b
 8010bec:	3fa48228 	.word	0x3fa48228
 8010bf0:	0e884455 	.word	0x0e884455
 8010bf4:	3fc9c155 	.word	0x3fc9c155
 8010bf8:	03eb6f7d 	.word	0x03eb6f7d
 8010bfc:	3fd4d612 	.word	0x3fd4d612
 8010c00:	55555555 	.word	0x55555555
 8010c04:	3fc55555 	.word	0x3fc55555
 8010c08:	b12e9282 	.word	0xb12e9282
 8010c0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010c10:	1b8d0159 	.word	0x1b8d0159
 8010c14:	3fe6066c 	.word	0x3fe6066c
 8010c18:	9c598ac8 	.word	0x9c598ac8
 8010c1c:	40002ae5 	.word	0x40002ae5
 8010c20:	1c8a2d4b 	.word	0x1c8a2d4b
 8010c24:	40033a27 	.word	0x40033a27
 8010c28:	3fefffff 	.word	0x3fefffff
 8010c2c:	3fdfffff 	.word	0x3fdfffff
 8010c30:	3ff00000 	.word	0x3ff00000
 8010c34:	3fe00000 	.word	0x3fe00000
 8010c38:	3fef3332 	.word	0x3fef3332
 8010c3c:	ee10 2a10 	vmov	r2, s0
 8010c40:	ee10 0a10 	vmov	r0, s0
 8010c44:	465b      	mov	r3, fp
 8010c46:	4659      	mov	r1, fp
 8010c48:	f7ef fb20 	bl	800028c <__adddf3>
 8010c4c:	4632      	mov	r2, r6
 8010c4e:	463b      	mov	r3, r7
 8010c50:	ec41 0b19 	vmov	d9, r0, r1
 8010c54:	ec51 0b18 	vmov	r0, r1, d8
 8010c58:	f7ef fdf8 	bl	800084c <__aeabi_ddiv>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	460b      	mov	r3, r1
 8010c60:	ec51 0b19 	vmov	r0, r1, d9
 8010c64:	f7ef fcc8 	bl	80005f8 <__aeabi_dmul>
 8010c68:	f04f 0800 	mov.w	r8, #0
 8010c6c:	4606      	mov	r6, r0
 8010c6e:	460f      	mov	r7, r1
 8010c70:	4642      	mov	r2, r8
 8010c72:	465b      	mov	r3, fp
 8010c74:	4640      	mov	r0, r8
 8010c76:	4659      	mov	r1, fp
 8010c78:	f7ef fcbe 	bl	80005f8 <__aeabi_dmul>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	460b      	mov	r3, r1
 8010c80:	4620      	mov	r0, r4
 8010c82:	4629      	mov	r1, r5
 8010c84:	f7ef fb00 	bl	8000288 <__aeabi_dsub>
 8010c88:	4642      	mov	r2, r8
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	460d      	mov	r5, r1
 8010c8e:	465b      	mov	r3, fp
 8010c90:	4650      	mov	r0, sl
 8010c92:	4659      	mov	r1, fp
 8010c94:	f7ef fafa 	bl	800028c <__adddf3>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	f7ef fdd4 	bl	800084c <__aeabi_ddiv>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	f7ef faf0 	bl	800028c <__adddf3>
 8010cac:	4602      	mov	r2, r0
 8010cae:	460b      	mov	r3, r1
 8010cb0:	a113      	add	r1, pc, #76	; (adr r1, 8010d00 <__ieee754_asin+0x418>)
 8010cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cb6:	f7ef fae7 	bl	8000288 <__aeabi_dsub>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	f7ef fae1 	bl	8000288 <__aeabi_dsub>
 8010cc6:	4642      	mov	r2, r8
 8010cc8:	4604      	mov	r4, r0
 8010cca:	460d      	mov	r5, r1
 8010ccc:	465b      	mov	r3, fp
 8010cce:	4640      	mov	r0, r8
 8010cd0:	4659      	mov	r1, fp
 8010cd2:	f7ef fadb 	bl	800028c <__adddf3>
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	460b      	mov	r3, r1
 8010cda:	a10b      	add	r1, pc, #44	; (adr r1, 8010d08 <__ieee754_asin+0x420>)
 8010cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ce0:	f7ef fad2 	bl	8000288 <__aeabi_dsub>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	4620      	mov	r0, r4
 8010cea:	4629      	mov	r1, r5
 8010cec:	f7ef facc 	bl	8000288 <__aeabi_dsub>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	a104      	add	r1, pc, #16	; (adr r1, 8010d08 <__ieee754_asin+0x420>)
 8010cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cfa:	e6df      	b.n	8010abc <__ieee754_asin+0x1d4>
 8010cfc:	f3af 8000 	nop.w
 8010d00:	33145c07 	.word	0x33145c07
 8010d04:	3c91a626 	.word	0x3c91a626
 8010d08:	54442d18 	.word	0x54442d18
 8010d0c:	3fe921fb 	.word	0x3fe921fb

08010d10 <__ieee754_atan2>:
 8010d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d14:	ec57 6b11 	vmov	r6, r7, d1
 8010d18:	4273      	negs	r3, r6
 8010d1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010ea0 <__ieee754_atan2+0x190>
 8010d1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010d22:	4333      	orrs	r3, r6
 8010d24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010d28:	4573      	cmp	r3, lr
 8010d2a:	ec51 0b10 	vmov	r0, r1, d0
 8010d2e:	ee11 8a10 	vmov	r8, s2
 8010d32:	d80a      	bhi.n	8010d4a <__ieee754_atan2+0x3a>
 8010d34:	4244      	negs	r4, r0
 8010d36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d3a:	4304      	orrs	r4, r0
 8010d3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010d40:	4574      	cmp	r4, lr
 8010d42:	ee10 9a10 	vmov	r9, s0
 8010d46:	468c      	mov	ip, r1
 8010d48:	d907      	bls.n	8010d5a <__ieee754_atan2+0x4a>
 8010d4a:	4632      	mov	r2, r6
 8010d4c:	463b      	mov	r3, r7
 8010d4e:	f7ef fa9d 	bl	800028c <__adddf3>
 8010d52:	ec41 0b10 	vmov	d0, r0, r1
 8010d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010d5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010d62:	4334      	orrs	r4, r6
 8010d64:	d103      	bne.n	8010d6e <__ieee754_atan2+0x5e>
 8010d66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d6a:	f000 b951 	b.w	8011010 <atan>
 8010d6e:	17bc      	asrs	r4, r7, #30
 8010d70:	f004 0402 	and.w	r4, r4, #2
 8010d74:	ea53 0909 	orrs.w	r9, r3, r9
 8010d78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010d7c:	d107      	bne.n	8010d8e <__ieee754_atan2+0x7e>
 8010d7e:	2c02      	cmp	r4, #2
 8010d80:	d060      	beq.n	8010e44 <__ieee754_atan2+0x134>
 8010d82:	2c03      	cmp	r4, #3
 8010d84:	d1e5      	bne.n	8010d52 <__ieee754_atan2+0x42>
 8010d86:	a142      	add	r1, pc, #264	; (adr r1, 8010e90 <__ieee754_atan2+0x180>)
 8010d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d8c:	e7e1      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010d8e:	ea52 0808 	orrs.w	r8, r2, r8
 8010d92:	d106      	bne.n	8010da2 <__ieee754_atan2+0x92>
 8010d94:	f1bc 0f00 	cmp.w	ip, #0
 8010d98:	da5f      	bge.n	8010e5a <__ieee754_atan2+0x14a>
 8010d9a:	a13f      	add	r1, pc, #252	; (adr r1, 8010e98 <__ieee754_atan2+0x188>)
 8010d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010da0:	e7d7      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010da2:	4572      	cmp	r2, lr
 8010da4:	d10f      	bne.n	8010dc6 <__ieee754_atan2+0xb6>
 8010da6:	4293      	cmp	r3, r2
 8010da8:	f104 34ff 	add.w	r4, r4, #4294967295
 8010dac:	d107      	bne.n	8010dbe <__ieee754_atan2+0xae>
 8010dae:	2c02      	cmp	r4, #2
 8010db0:	d84c      	bhi.n	8010e4c <__ieee754_atan2+0x13c>
 8010db2:	4b35      	ldr	r3, [pc, #212]	; (8010e88 <__ieee754_atan2+0x178>)
 8010db4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010db8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010dbc:	e7c9      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010dbe:	2c02      	cmp	r4, #2
 8010dc0:	d848      	bhi.n	8010e54 <__ieee754_atan2+0x144>
 8010dc2:	4b32      	ldr	r3, [pc, #200]	; (8010e8c <__ieee754_atan2+0x17c>)
 8010dc4:	e7f6      	b.n	8010db4 <__ieee754_atan2+0xa4>
 8010dc6:	4573      	cmp	r3, lr
 8010dc8:	d0e4      	beq.n	8010d94 <__ieee754_atan2+0x84>
 8010dca:	1a9b      	subs	r3, r3, r2
 8010dcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010dd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010dd4:	da1e      	bge.n	8010e14 <__ieee754_atan2+0x104>
 8010dd6:	2f00      	cmp	r7, #0
 8010dd8:	da01      	bge.n	8010dde <__ieee754_atan2+0xce>
 8010dda:	323c      	adds	r2, #60	; 0x3c
 8010ddc:	db1e      	blt.n	8010e1c <__ieee754_atan2+0x10c>
 8010dde:	4632      	mov	r2, r6
 8010de0:	463b      	mov	r3, r7
 8010de2:	f7ef fd33 	bl	800084c <__aeabi_ddiv>
 8010de6:	ec41 0b10 	vmov	d0, r0, r1
 8010dea:	f000 fab1 	bl	8011350 <fabs>
 8010dee:	f000 f90f 	bl	8011010 <atan>
 8010df2:	ec51 0b10 	vmov	r0, r1, d0
 8010df6:	2c01      	cmp	r4, #1
 8010df8:	d013      	beq.n	8010e22 <__ieee754_atan2+0x112>
 8010dfa:	2c02      	cmp	r4, #2
 8010dfc:	d015      	beq.n	8010e2a <__ieee754_atan2+0x11a>
 8010dfe:	2c00      	cmp	r4, #0
 8010e00:	d0a7      	beq.n	8010d52 <__ieee754_atan2+0x42>
 8010e02:	a319      	add	r3, pc, #100	; (adr r3, 8010e68 <__ieee754_atan2+0x158>)
 8010e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e08:	f7ef fa3e 	bl	8000288 <__aeabi_dsub>
 8010e0c:	a318      	add	r3, pc, #96	; (adr r3, 8010e70 <__ieee754_atan2+0x160>)
 8010e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e12:	e014      	b.n	8010e3e <__ieee754_atan2+0x12e>
 8010e14:	a118      	add	r1, pc, #96	; (adr r1, 8010e78 <__ieee754_atan2+0x168>)
 8010e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e1a:	e7ec      	b.n	8010df6 <__ieee754_atan2+0xe6>
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	2100      	movs	r1, #0
 8010e20:	e7e9      	b.n	8010df6 <__ieee754_atan2+0xe6>
 8010e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e26:	4619      	mov	r1, r3
 8010e28:	e793      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010e2a:	a30f      	add	r3, pc, #60	; (adr r3, 8010e68 <__ieee754_atan2+0x158>)
 8010e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e30:	f7ef fa2a 	bl	8000288 <__aeabi_dsub>
 8010e34:	4602      	mov	r2, r0
 8010e36:	460b      	mov	r3, r1
 8010e38:	a10d      	add	r1, pc, #52	; (adr r1, 8010e70 <__ieee754_atan2+0x160>)
 8010e3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e3e:	f7ef fa23 	bl	8000288 <__aeabi_dsub>
 8010e42:	e786      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010e44:	a10a      	add	r1, pc, #40	; (adr r1, 8010e70 <__ieee754_atan2+0x160>)
 8010e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e4a:	e782      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010e4c:	a10c      	add	r1, pc, #48	; (adr r1, 8010e80 <__ieee754_atan2+0x170>)
 8010e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e52:	e77e      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010e54:	2000      	movs	r0, #0
 8010e56:	2100      	movs	r1, #0
 8010e58:	e77b      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010e5a:	a107      	add	r1, pc, #28	; (adr r1, 8010e78 <__ieee754_atan2+0x168>)
 8010e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e60:	e777      	b.n	8010d52 <__ieee754_atan2+0x42>
 8010e62:	bf00      	nop
 8010e64:	f3af 8000 	nop.w
 8010e68:	33145c07 	.word	0x33145c07
 8010e6c:	3ca1a626 	.word	0x3ca1a626
 8010e70:	54442d18 	.word	0x54442d18
 8010e74:	400921fb 	.word	0x400921fb
 8010e78:	54442d18 	.word	0x54442d18
 8010e7c:	3ff921fb 	.word	0x3ff921fb
 8010e80:	54442d18 	.word	0x54442d18
 8010e84:	3fe921fb 	.word	0x3fe921fb
 8010e88:	08011a38 	.word	0x08011a38
 8010e8c:	08011a50 	.word	0x08011a50
 8010e90:	54442d18 	.word	0x54442d18
 8010e94:	c00921fb 	.word	0xc00921fb
 8010e98:	54442d18 	.word	0x54442d18
 8010e9c:	bff921fb 	.word	0xbff921fb
 8010ea0:	7ff00000 	.word	0x7ff00000

08010ea4 <__ieee754_sqrt>:
 8010ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea8:	ec55 4b10 	vmov	r4, r5, d0
 8010eac:	4e56      	ldr	r6, [pc, #344]	; (8011008 <__ieee754_sqrt+0x164>)
 8010eae:	43ae      	bics	r6, r5
 8010eb0:	ee10 0a10 	vmov	r0, s0
 8010eb4:	ee10 3a10 	vmov	r3, s0
 8010eb8:	4629      	mov	r1, r5
 8010eba:	462a      	mov	r2, r5
 8010ebc:	d110      	bne.n	8010ee0 <__ieee754_sqrt+0x3c>
 8010ebe:	ee10 2a10 	vmov	r2, s0
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	f7ef fb98 	bl	80005f8 <__aeabi_dmul>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7ef f9dc 	bl	800028c <__adddf3>
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	460d      	mov	r5, r1
 8010ed8:	ec45 4b10 	vmov	d0, r4, r5
 8010edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee0:	2d00      	cmp	r5, #0
 8010ee2:	dc10      	bgt.n	8010f06 <__ieee754_sqrt+0x62>
 8010ee4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ee8:	4330      	orrs	r0, r6
 8010eea:	d0f5      	beq.n	8010ed8 <__ieee754_sqrt+0x34>
 8010eec:	b15d      	cbz	r5, 8010f06 <__ieee754_sqrt+0x62>
 8010eee:	ee10 2a10 	vmov	r2, s0
 8010ef2:	462b      	mov	r3, r5
 8010ef4:	ee10 0a10 	vmov	r0, s0
 8010ef8:	f7ef f9c6 	bl	8000288 <__aeabi_dsub>
 8010efc:	4602      	mov	r2, r0
 8010efe:	460b      	mov	r3, r1
 8010f00:	f7ef fca4 	bl	800084c <__aeabi_ddiv>
 8010f04:	e7e6      	b.n	8010ed4 <__ieee754_sqrt+0x30>
 8010f06:	1509      	asrs	r1, r1, #20
 8010f08:	d076      	beq.n	8010ff8 <__ieee754_sqrt+0x154>
 8010f0a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010f0e:	07ce      	lsls	r6, r1, #31
 8010f10:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8010f14:	bf5e      	ittt	pl
 8010f16:	0fda      	lsrpl	r2, r3, #31
 8010f18:	005b      	lslpl	r3, r3, #1
 8010f1a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8010f1e:	0fda      	lsrs	r2, r3, #31
 8010f20:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8010f24:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010f28:	2000      	movs	r0, #0
 8010f2a:	106d      	asrs	r5, r5, #1
 8010f2c:	005b      	lsls	r3, r3, #1
 8010f2e:	f04f 0e16 	mov.w	lr, #22
 8010f32:	4684      	mov	ip, r0
 8010f34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010f38:	eb0c 0401 	add.w	r4, ip, r1
 8010f3c:	4294      	cmp	r4, r2
 8010f3e:	bfde      	ittt	le
 8010f40:	1b12      	suble	r2, r2, r4
 8010f42:	eb04 0c01 	addle.w	ip, r4, r1
 8010f46:	1840      	addle	r0, r0, r1
 8010f48:	0052      	lsls	r2, r2, #1
 8010f4a:	f1be 0e01 	subs.w	lr, lr, #1
 8010f4e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010f52:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010f56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f5a:	d1ed      	bne.n	8010f38 <__ieee754_sqrt+0x94>
 8010f5c:	4671      	mov	r1, lr
 8010f5e:	2720      	movs	r7, #32
 8010f60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010f64:	4562      	cmp	r2, ip
 8010f66:	eb04 060e 	add.w	r6, r4, lr
 8010f6a:	dc02      	bgt.n	8010f72 <__ieee754_sqrt+0xce>
 8010f6c:	d113      	bne.n	8010f96 <__ieee754_sqrt+0xf2>
 8010f6e:	429e      	cmp	r6, r3
 8010f70:	d811      	bhi.n	8010f96 <__ieee754_sqrt+0xf2>
 8010f72:	2e00      	cmp	r6, #0
 8010f74:	eb06 0e04 	add.w	lr, r6, r4
 8010f78:	da43      	bge.n	8011002 <__ieee754_sqrt+0x15e>
 8010f7a:	f1be 0f00 	cmp.w	lr, #0
 8010f7e:	db40      	blt.n	8011002 <__ieee754_sqrt+0x15e>
 8010f80:	f10c 0801 	add.w	r8, ip, #1
 8010f84:	eba2 020c 	sub.w	r2, r2, ip
 8010f88:	429e      	cmp	r6, r3
 8010f8a:	bf88      	it	hi
 8010f8c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010f90:	1b9b      	subs	r3, r3, r6
 8010f92:	4421      	add	r1, r4
 8010f94:	46c4      	mov	ip, r8
 8010f96:	0052      	lsls	r2, r2, #1
 8010f98:	3f01      	subs	r7, #1
 8010f9a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010f9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010fa2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010fa6:	d1dd      	bne.n	8010f64 <__ieee754_sqrt+0xc0>
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	d006      	beq.n	8010fba <__ieee754_sqrt+0x116>
 8010fac:	1c4c      	adds	r4, r1, #1
 8010fae:	bf13      	iteet	ne
 8010fb0:	3101      	addne	r1, #1
 8010fb2:	3001      	addeq	r0, #1
 8010fb4:	4639      	moveq	r1, r7
 8010fb6:	f021 0101 	bicne.w	r1, r1, #1
 8010fba:	1043      	asrs	r3, r0, #1
 8010fbc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010fc0:	0849      	lsrs	r1, r1, #1
 8010fc2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010fc6:	07c2      	lsls	r2, r0, #31
 8010fc8:	bf48      	it	mi
 8010fca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010fce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8010fd2:	460c      	mov	r4, r1
 8010fd4:	463d      	mov	r5, r7
 8010fd6:	e77f      	b.n	8010ed8 <__ieee754_sqrt+0x34>
 8010fd8:	0ada      	lsrs	r2, r3, #11
 8010fda:	3815      	subs	r0, #21
 8010fdc:	055b      	lsls	r3, r3, #21
 8010fde:	2a00      	cmp	r2, #0
 8010fe0:	d0fa      	beq.n	8010fd8 <__ieee754_sqrt+0x134>
 8010fe2:	02d7      	lsls	r7, r2, #11
 8010fe4:	d50a      	bpl.n	8010ffc <__ieee754_sqrt+0x158>
 8010fe6:	f1c1 0420 	rsb	r4, r1, #32
 8010fea:	fa23 f404 	lsr.w	r4, r3, r4
 8010fee:	1e4d      	subs	r5, r1, #1
 8010ff0:	408b      	lsls	r3, r1
 8010ff2:	4322      	orrs	r2, r4
 8010ff4:	1b41      	subs	r1, r0, r5
 8010ff6:	e788      	b.n	8010f0a <__ieee754_sqrt+0x66>
 8010ff8:	4608      	mov	r0, r1
 8010ffa:	e7f0      	b.n	8010fde <__ieee754_sqrt+0x13a>
 8010ffc:	0052      	lsls	r2, r2, #1
 8010ffe:	3101      	adds	r1, #1
 8011000:	e7ef      	b.n	8010fe2 <__ieee754_sqrt+0x13e>
 8011002:	46e0      	mov	r8, ip
 8011004:	e7be      	b.n	8010f84 <__ieee754_sqrt+0xe0>
 8011006:	bf00      	nop
 8011008:	7ff00000 	.word	0x7ff00000
 801100c:	00000000 	.word	0x00000000

08011010 <atan>:
 8011010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	ec55 4b10 	vmov	r4, r5, d0
 8011018:	4bc3      	ldr	r3, [pc, #780]	; (8011328 <atan+0x318>)
 801101a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801101e:	429e      	cmp	r6, r3
 8011020:	46ab      	mov	fp, r5
 8011022:	dd18      	ble.n	8011056 <atan+0x46>
 8011024:	4bc1      	ldr	r3, [pc, #772]	; (801132c <atan+0x31c>)
 8011026:	429e      	cmp	r6, r3
 8011028:	dc01      	bgt.n	801102e <atan+0x1e>
 801102a:	d109      	bne.n	8011040 <atan+0x30>
 801102c:	b144      	cbz	r4, 8011040 <atan+0x30>
 801102e:	4622      	mov	r2, r4
 8011030:	462b      	mov	r3, r5
 8011032:	4620      	mov	r0, r4
 8011034:	4629      	mov	r1, r5
 8011036:	f7ef f929 	bl	800028c <__adddf3>
 801103a:	4604      	mov	r4, r0
 801103c:	460d      	mov	r5, r1
 801103e:	e006      	b.n	801104e <atan+0x3e>
 8011040:	f1bb 0f00 	cmp.w	fp, #0
 8011044:	f300 8131 	bgt.w	80112aa <atan+0x29a>
 8011048:	a59b      	add	r5, pc, #620	; (adr r5, 80112b8 <atan+0x2a8>)
 801104a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801104e:	ec45 4b10 	vmov	d0, r4, r5
 8011052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011056:	4bb6      	ldr	r3, [pc, #728]	; (8011330 <atan+0x320>)
 8011058:	429e      	cmp	r6, r3
 801105a:	dc14      	bgt.n	8011086 <atan+0x76>
 801105c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011060:	429e      	cmp	r6, r3
 8011062:	dc0d      	bgt.n	8011080 <atan+0x70>
 8011064:	a396      	add	r3, pc, #600	; (adr r3, 80112c0 <atan+0x2b0>)
 8011066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106a:	ee10 0a10 	vmov	r0, s0
 801106e:	4629      	mov	r1, r5
 8011070:	f7ef f90c 	bl	800028c <__adddf3>
 8011074:	4baf      	ldr	r3, [pc, #700]	; (8011334 <atan+0x324>)
 8011076:	2200      	movs	r2, #0
 8011078:	f7ef fd4e 	bl	8000b18 <__aeabi_dcmpgt>
 801107c:	2800      	cmp	r0, #0
 801107e:	d1e6      	bne.n	801104e <atan+0x3e>
 8011080:	f04f 3aff 	mov.w	sl, #4294967295
 8011084:	e02b      	b.n	80110de <atan+0xce>
 8011086:	f000 f963 	bl	8011350 <fabs>
 801108a:	4bab      	ldr	r3, [pc, #684]	; (8011338 <atan+0x328>)
 801108c:	429e      	cmp	r6, r3
 801108e:	ec55 4b10 	vmov	r4, r5, d0
 8011092:	f300 80bf 	bgt.w	8011214 <atan+0x204>
 8011096:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801109a:	429e      	cmp	r6, r3
 801109c:	f300 80a0 	bgt.w	80111e0 <atan+0x1d0>
 80110a0:	ee10 2a10 	vmov	r2, s0
 80110a4:	ee10 0a10 	vmov	r0, s0
 80110a8:	462b      	mov	r3, r5
 80110aa:	4629      	mov	r1, r5
 80110ac:	f7ef f8ee 	bl	800028c <__adddf3>
 80110b0:	4ba0      	ldr	r3, [pc, #640]	; (8011334 <atan+0x324>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	f7ef f8e8 	bl	8000288 <__aeabi_dsub>
 80110b8:	2200      	movs	r2, #0
 80110ba:	4606      	mov	r6, r0
 80110bc:	460f      	mov	r7, r1
 80110be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110c2:	4620      	mov	r0, r4
 80110c4:	4629      	mov	r1, r5
 80110c6:	f7ef f8e1 	bl	800028c <__adddf3>
 80110ca:	4602      	mov	r2, r0
 80110cc:	460b      	mov	r3, r1
 80110ce:	4630      	mov	r0, r6
 80110d0:	4639      	mov	r1, r7
 80110d2:	f7ef fbbb 	bl	800084c <__aeabi_ddiv>
 80110d6:	f04f 0a00 	mov.w	sl, #0
 80110da:	4604      	mov	r4, r0
 80110dc:	460d      	mov	r5, r1
 80110de:	4622      	mov	r2, r4
 80110e0:	462b      	mov	r3, r5
 80110e2:	4620      	mov	r0, r4
 80110e4:	4629      	mov	r1, r5
 80110e6:	f7ef fa87 	bl	80005f8 <__aeabi_dmul>
 80110ea:	4602      	mov	r2, r0
 80110ec:	460b      	mov	r3, r1
 80110ee:	4680      	mov	r8, r0
 80110f0:	4689      	mov	r9, r1
 80110f2:	f7ef fa81 	bl	80005f8 <__aeabi_dmul>
 80110f6:	a374      	add	r3, pc, #464	; (adr r3, 80112c8 <atan+0x2b8>)
 80110f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fc:	4606      	mov	r6, r0
 80110fe:	460f      	mov	r7, r1
 8011100:	f7ef fa7a 	bl	80005f8 <__aeabi_dmul>
 8011104:	a372      	add	r3, pc, #456	; (adr r3, 80112d0 <atan+0x2c0>)
 8011106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110a:	f7ef f8bf 	bl	800028c <__adddf3>
 801110e:	4632      	mov	r2, r6
 8011110:	463b      	mov	r3, r7
 8011112:	f7ef fa71 	bl	80005f8 <__aeabi_dmul>
 8011116:	a370      	add	r3, pc, #448	; (adr r3, 80112d8 <atan+0x2c8>)
 8011118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111c:	f7ef f8b6 	bl	800028c <__adddf3>
 8011120:	4632      	mov	r2, r6
 8011122:	463b      	mov	r3, r7
 8011124:	f7ef fa68 	bl	80005f8 <__aeabi_dmul>
 8011128:	a36d      	add	r3, pc, #436	; (adr r3, 80112e0 <atan+0x2d0>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	f7ef f8ad 	bl	800028c <__adddf3>
 8011132:	4632      	mov	r2, r6
 8011134:	463b      	mov	r3, r7
 8011136:	f7ef fa5f 	bl	80005f8 <__aeabi_dmul>
 801113a:	a36b      	add	r3, pc, #428	; (adr r3, 80112e8 <atan+0x2d8>)
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7ef f8a4 	bl	800028c <__adddf3>
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	f7ef fa56 	bl	80005f8 <__aeabi_dmul>
 801114c:	a368      	add	r3, pc, #416	; (adr r3, 80112f0 <atan+0x2e0>)
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	f7ef f89b 	bl	800028c <__adddf3>
 8011156:	4642      	mov	r2, r8
 8011158:	464b      	mov	r3, r9
 801115a:	f7ef fa4d 	bl	80005f8 <__aeabi_dmul>
 801115e:	a366      	add	r3, pc, #408	; (adr r3, 80112f8 <atan+0x2e8>)
 8011160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011164:	4680      	mov	r8, r0
 8011166:	4689      	mov	r9, r1
 8011168:	4630      	mov	r0, r6
 801116a:	4639      	mov	r1, r7
 801116c:	f7ef fa44 	bl	80005f8 <__aeabi_dmul>
 8011170:	a363      	add	r3, pc, #396	; (adr r3, 8011300 <atan+0x2f0>)
 8011172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011176:	f7ef f887 	bl	8000288 <__aeabi_dsub>
 801117a:	4632      	mov	r2, r6
 801117c:	463b      	mov	r3, r7
 801117e:	f7ef fa3b 	bl	80005f8 <__aeabi_dmul>
 8011182:	a361      	add	r3, pc, #388	; (adr r3, 8011308 <atan+0x2f8>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	f7ef f87e 	bl	8000288 <__aeabi_dsub>
 801118c:	4632      	mov	r2, r6
 801118e:	463b      	mov	r3, r7
 8011190:	f7ef fa32 	bl	80005f8 <__aeabi_dmul>
 8011194:	a35e      	add	r3, pc, #376	; (adr r3, 8011310 <atan+0x300>)
 8011196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119a:	f7ef f875 	bl	8000288 <__aeabi_dsub>
 801119e:	4632      	mov	r2, r6
 80111a0:	463b      	mov	r3, r7
 80111a2:	f7ef fa29 	bl	80005f8 <__aeabi_dmul>
 80111a6:	a35c      	add	r3, pc, #368	; (adr r3, 8011318 <atan+0x308>)
 80111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ac:	f7ef f86c 	bl	8000288 <__aeabi_dsub>
 80111b0:	4632      	mov	r2, r6
 80111b2:	463b      	mov	r3, r7
 80111b4:	f7ef fa20 	bl	80005f8 <__aeabi_dmul>
 80111b8:	4602      	mov	r2, r0
 80111ba:	460b      	mov	r3, r1
 80111bc:	4640      	mov	r0, r8
 80111be:	4649      	mov	r1, r9
 80111c0:	f7ef f864 	bl	800028c <__adddf3>
 80111c4:	4622      	mov	r2, r4
 80111c6:	462b      	mov	r3, r5
 80111c8:	f7ef fa16 	bl	80005f8 <__aeabi_dmul>
 80111cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80111d0:	4602      	mov	r2, r0
 80111d2:	460b      	mov	r3, r1
 80111d4:	d14b      	bne.n	801126e <atan+0x25e>
 80111d6:	4620      	mov	r0, r4
 80111d8:	4629      	mov	r1, r5
 80111da:	f7ef f855 	bl	8000288 <__aeabi_dsub>
 80111de:	e72c      	b.n	801103a <atan+0x2a>
 80111e0:	ee10 0a10 	vmov	r0, s0
 80111e4:	4b53      	ldr	r3, [pc, #332]	; (8011334 <atan+0x324>)
 80111e6:	2200      	movs	r2, #0
 80111e8:	4629      	mov	r1, r5
 80111ea:	f7ef f84d 	bl	8000288 <__aeabi_dsub>
 80111ee:	4b51      	ldr	r3, [pc, #324]	; (8011334 <atan+0x324>)
 80111f0:	4606      	mov	r6, r0
 80111f2:	460f      	mov	r7, r1
 80111f4:	2200      	movs	r2, #0
 80111f6:	4620      	mov	r0, r4
 80111f8:	4629      	mov	r1, r5
 80111fa:	f7ef f847 	bl	800028c <__adddf3>
 80111fe:	4602      	mov	r2, r0
 8011200:	460b      	mov	r3, r1
 8011202:	4630      	mov	r0, r6
 8011204:	4639      	mov	r1, r7
 8011206:	f7ef fb21 	bl	800084c <__aeabi_ddiv>
 801120a:	f04f 0a01 	mov.w	sl, #1
 801120e:	4604      	mov	r4, r0
 8011210:	460d      	mov	r5, r1
 8011212:	e764      	b.n	80110de <atan+0xce>
 8011214:	4b49      	ldr	r3, [pc, #292]	; (801133c <atan+0x32c>)
 8011216:	429e      	cmp	r6, r3
 8011218:	da1d      	bge.n	8011256 <atan+0x246>
 801121a:	ee10 0a10 	vmov	r0, s0
 801121e:	4b48      	ldr	r3, [pc, #288]	; (8011340 <atan+0x330>)
 8011220:	2200      	movs	r2, #0
 8011222:	4629      	mov	r1, r5
 8011224:	f7ef f830 	bl	8000288 <__aeabi_dsub>
 8011228:	4b45      	ldr	r3, [pc, #276]	; (8011340 <atan+0x330>)
 801122a:	4606      	mov	r6, r0
 801122c:	460f      	mov	r7, r1
 801122e:	2200      	movs	r2, #0
 8011230:	4620      	mov	r0, r4
 8011232:	4629      	mov	r1, r5
 8011234:	f7ef f9e0 	bl	80005f8 <__aeabi_dmul>
 8011238:	4b3e      	ldr	r3, [pc, #248]	; (8011334 <atan+0x324>)
 801123a:	2200      	movs	r2, #0
 801123c:	f7ef f826 	bl	800028c <__adddf3>
 8011240:	4602      	mov	r2, r0
 8011242:	460b      	mov	r3, r1
 8011244:	4630      	mov	r0, r6
 8011246:	4639      	mov	r1, r7
 8011248:	f7ef fb00 	bl	800084c <__aeabi_ddiv>
 801124c:	f04f 0a02 	mov.w	sl, #2
 8011250:	4604      	mov	r4, r0
 8011252:	460d      	mov	r5, r1
 8011254:	e743      	b.n	80110de <atan+0xce>
 8011256:	462b      	mov	r3, r5
 8011258:	ee10 2a10 	vmov	r2, s0
 801125c:	4939      	ldr	r1, [pc, #228]	; (8011344 <atan+0x334>)
 801125e:	2000      	movs	r0, #0
 8011260:	f7ef faf4 	bl	800084c <__aeabi_ddiv>
 8011264:	f04f 0a03 	mov.w	sl, #3
 8011268:	4604      	mov	r4, r0
 801126a:	460d      	mov	r5, r1
 801126c:	e737      	b.n	80110de <atan+0xce>
 801126e:	4b36      	ldr	r3, [pc, #216]	; (8011348 <atan+0x338>)
 8011270:	4e36      	ldr	r6, [pc, #216]	; (801134c <atan+0x33c>)
 8011272:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011276:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801127a:	e9da 2300 	ldrd	r2, r3, [sl]
 801127e:	f7ef f803 	bl	8000288 <__aeabi_dsub>
 8011282:	4622      	mov	r2, r4
 8011284:	462b      	mov	r3, r5
 8011286:	f7ee ffff 	bl	8000288 <__aeabi_dsub>
 801128a:	4602      	mov	r2, r0
 801128c:	460b      	mov	r3, r1
 801128e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011292:	f7ee fff9 	bl	8000288 <__aeabi_dsub>
 8011296:	f1bb 0f00 	cmp.w	fp, #0
 801129a:	4604      	mov	r4, r0
 801129c:	460d      	mov	r5, r1
 801129e:	f6bf aed6 	bge.w	801104e <atan+0x3e>
 80112a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112a6:	461d      	mov	r5, r3
 80112a8:	e6d1      	b.n	801104e <atan+0x3e>
 80112aa:	a51d      	add	r5, pc, #116	; (adr r5, 8011320 <atan+0x310>)
 80112ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80112b0:	e6cd      	b.n	801104e <atan+0x3e>
 80112b2:	bf00      	nop
 80112b4:	f3af 8000 	nop.w
 80112b8:	54442d18 	.word	0x54442d18
 80112bc:	bff921fb 	.word	0xbff921fb
 80112c0:	8800759c 	.word	0x8800759c
 80112c4:	7e37e43c 	.word	0x7e37e43c
 80112c8:	e322da11 	.word	0xe322da11
 80112cc:	3f90ad3a 	.word	0x3f90ad3a
 80112d0:	24760deb 	.word	0x24760deb
 80112d4:	3fa97b4b 	.word	0x3fa97b4b
 80112d8:	a0d03d51 	.word	0xa0d03d51
 80112dc:	3fb10d66 	.word	0x3fb10d66
 80112e0:	c54c206e 	.word	0xc54c206e
 80112e4:	3fb745cd 	.word	0x3fb745cd
 80112e8:	920083ff 	.word	0x920083ff
 80112ec:	3fc24924 	.word	0x3fc24924
 80112f0:	5555550d 	.word	0x5555550d
 80112f4:	3fd55555 	.word	0x3fd55555
 80112f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80112fc:	bfa2b444 	.word	0xbfa2b444
 8011300:	52defd9a 	.word	0x52defd9a
 8011304:	3fadde2d 	.word	0x3fadde2d
 8011308:	af749a6d 	.word	0xaf749a6d
 801130c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011310:	fe231671 	.word	0xfe231671
 8011314:	3fbc71c6 	.word	0x3fbc71c6
 8011318:	9998ebc4 	.word	0x9998ebc4
 801131c:	3fc99999 	.word	0x3fc99999
 8011320:	54442d18 	.word	0x54442d18
 8011324:	3ff921fb 	.word	0x3ff921fb
 8011328:	440fffff 	.word	0x440fffff
 801132c:	7ff00000 	.word	0x7ff00000
 8011330:	3fdbffff 	.word	0x3fdbffff
 8011334:	3ff00000 	.word	0x3ff00000
 8011338:	3ff2ffff 	.word	0x3ff2ffff
 801133c:	40038000 	.word	0x40038000
 8011340:	3ff80000 	.word	0x3ff80000
 8011344:	bff00000 	.word	0xbff00000
 8011348:	08011a88 	.word	0x08011a88
 801134c:	08011a68 	.word	0x08011a68

08011350 <fabs>:
 8011350:	ec51 0b10 	vmov	r0, r1, d0
 8011354:	ee10 2a10 	vmov	r2, s0
 8011358:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801135c:	ec43 2b10 	vmov	d0, r2, r3
 8011360:	4770      	bx	lr
 8011362:	0000      	movs	r0, r0
 8011364:	0000      	movs	r0, r0
	...

08011368 <nan>:
 8011368:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011370 <nan+0x8>
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	00000000 	.word	0x00000000
 8011374:	7ff80000 	.word	0x7ff80000

08011378 <_init>:
 8011378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137a:	bf00      	nop
 801137c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801137e:	bc08      	pop	{r3}
 8011380:	469e      	mov	lr, r3
 8011382:	4770      	bx	lr

08011384 <_fini>:
 8011384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011386:	bf00      	nop
 8011388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801138a:	bc08      	pop	{r3}
 801138c:	469e      	mov	lr, r3
 801138e:	4770      	bx	lr
