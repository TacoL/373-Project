
STEVALFCU01V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001143c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  080115e0  080115e0  000125e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011cf0  08011cf0  0001313c  2**0
                  CONTENTS
  4 .ARM          00000008  08011cf0  08011cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cf8  08011cf8  0001313c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011cf8  08011cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011cfc  08011cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08011d00  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dfc  2000013c  08011e3c  0001313c  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  20000f38  08011e3c  00013f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001313c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037a14  00000000  00000000  0001316c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005985  00000000  00000000  0004ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003010  00000000  00000000  00050508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002547  00000000  00000000  00053518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e4bd  00000000  00000000  00055a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030f60  00000000  00000000  00073f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5825  00000000  00000000  000a4e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a6a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d724  00000000  00000000  0015a6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00167e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000013c 	.word	0x2000013c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080115c4 	.word	0x080115c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000140 	.word	0x20000140
 80001dc:	080115c4 	.word	0x080115c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <ahrs_fusion_ag>:
int acc_over = 0;
extern int16_t gTHR;
float ahrs_kp;

void ahrs_fusion_ag(AxesRaw_TypeDef_Float *acc, AxesRaw_TypeDef_Float *gyro, AHRS_State_TypeDef *ahrs)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09a      	sub	sp, #104	@ 0x68
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  float ex, ey, ez;
  float q0q0, q0q1, q0q2, /*q0q3,*/ q1q1, /*q1q2,*/ q1q3, q2q2, q2q3, q3q3;
  float halfT;
 
  
  if(gTHR<MIN_THR)
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <ahrs_fusion_ag+0x20>)
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f38:	dc0a      	bgt.n	8000f50 <ahrs_fusion_ag+0x2c>
  {
    ahrs_kp = AHRS_KP_BIG;
 8000f3a:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <ahrs_fusion_ag+0x24>)
 8000f3c:	4a03      	ldr	r2, [pc, #12]	@ (8000f4c <ahrs_fusion_ag+0x28>)
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e009      	b.n	8000f56 <ahrs_fusion_ag+0x32>
 8000f42:	bf00      	nop
 8000f44:	20000954 	.word	0x20000954
 8000f48:	20000170 	.word	0x20000170
 8000f4c:	41200000 	.word	0x41200000
  }
  else
  {
    ahrs_kp = AHRS_KP_NORM;
 8000f50:	4be1      	ldr	r3, [pc, #900]	@ (80012d8 <ahrs_fusion_ag+0x3b4>)
 8000f52:	4ae2      	ldr	r2, [pc, #904]	@ (80012dc <ahrs_fusion_ag+0x3b8>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  axf = acc->AXIS_X;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	667b      	str	r3, [r7, #100]	@ 0x64
  ayf = acc->AXIS_Y;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	663b      	str	r3, [r7, #96]	@ 0x60
  azf = acc->AXIS_Z;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	65fb      	str	r3, [r7, #92]	@ 0x5c

  // mdps convert to rad/s
  gxf = ((float)gyro->AXIS_X) * ((float)COE_MDPS_TO_RADPS);  
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80012e0 <ahrs_fusion_ag+0x3bc>
 8000f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f76:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  gyf = ((float)gyro->AXIS_Y) * ((float)COE_MDPS_TO_RADPS);  
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f80:	ed9f 7ad7 	vldr	s14, [pc, #860]	@ 80012e0 <ahrs_fusion_ag+0x3bc>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  gzf = ((float)gyro->AXIS_Z) * ((float)COE_MDPS_TO_RADPS); 
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f92:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 80012e0 <ahrs_fusion_ag+0x3bc>
 8000f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50


  // auxiliary variables to reduce number of repeated operations
  q0q0 = q0*q0;
 8000f9e:	4bd1      	ldr	r3, [pc, #836]	@ (80012e4 <ahrs_fusion_ag+0x3c0>)
 8000fa0:	ed93 7a00 	vldr	s14, [r3]
 8000fa4:	4bcf      	ldr	r3, [pc, #828]	@ (80012e4 <ahrs_fusion_ag+0x3c0>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fae:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  q0q1 = q0*q1;
 8000fb2:	4bcc      	ldr	r3, [pc, #816]	@ (80012e4 <ahrs_fusion_ag+0x3c0>)
 8000fb4:	ed93 7a00 	vldr	s14, [r3]
 8000fb8:	4bcb      	ldr	r3, [pc, #812]	@ (80012e8 <ahrs_fusion_ag+0x3c4>)
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  q0q2 = q0*q2;
 8000fc6:	4bc7      	ldr	r3, [pc, #796]	@ (80012e4 <ahrs_fusion_ag+0x3c0>)
 8000fc8:	ed93 7a00 	vldr	s14, [r3]
 8000fcc:	4bc7      	ldr	r3, [pc, #796]	@ (80012ec <ahrs_fusion_ag+0x3c8>)
 8000fce:	edd3 7a00 	vldr	s15, [r3]
 8000fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  //q0q3 = q0*q3;
  q1q1 = q1*q1;
 8000fda:	4bc3      	ldr	r3, [pc, #780]	@ (80012e8 <ahrs_fusion_ag+0x3c4>)
 8000fdc:	ed93 7a00 	vldr	s14, [r3]
 8000fe0:	4bc1      	ldr	r3, [pc, #772]	@ (80012e8 <ahrs_fusion_ag+0x3c4>)
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  //q1q2 = q1*q2;
  q1q3 = q1*q3;
 8000fee:	4bbe      	ldr	r3, [pc, #760]	@ (80012e8 <ahrs_fusion_ag+0x3c4>)
 8000ff0:	ed93 7a00 	vldr	s14, [r3]
 8000ff4:	4bbe      	ldr	r3, [pc, #760]	@ (80012f0 <ahrs_fusion_ag+0x3cc>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffe:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  q2q2 = q2*q2;
 8001002:	4bba      	ldr	r3, [pc, #744]	@ (80012ec <ahrs_fusion_ag+0x3c8>)
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	4bb8      	ldr	r3, [pc, #736]	@ (80012ec <ahrs_fusion_ag+0x3c8>)
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001012:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  q2q3 = q2*q3;
 8001016:	4bb5      	ldr	r3, [pc, #724]	@ (80012ec <ahrs_fusion_ag+0x3c8>)
 8001018:	ed93 7a00 	vldr	s14, [r3]
 800101c:	4bb4      	ldr	r3, [pc, #720]	@ (80012f0 <ahrs_fusion_ag+0x3cc>)
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001026:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  q3q3 = q3*q3;
 800102a:	4bb1      	ldr	r3, [pc, #708]	@ (80012f0 <ahrs_fusion_ag+0x3cc>)
 800102c:	ed93 7a00 	vldr	s14, [r3]
 8001030:	4baf      	ldr	r3, [pc, #700]	@ (80012f0 <ahrs_fusion_ag+0x3cc>)
 8001032:	edd3 7a00 	vldr	s15, [r3]
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

  // normalise the accelerometer measurement
  norm = invSqrt(axf*axf+ayf*ayf+azf*azf);
 800103e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001042:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001046:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800104a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800104e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001052:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001056:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800105a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105e:	eeb0 0a67 	vmov.f32	s0, s15
 8001062:	f000 f9e5 	bl	8001430 <invSqrt>
 8001066:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

  axf = axf * norm;
 800106a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800106e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001076:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
  ayf = ayf * norm;
 800107a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800107e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001086:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
  azf = azf * norm;
 800108a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800108e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001096:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

  // estimated direction of gravity and flux (v and w)
  vx = 2*(q1q3 - q0q2);
 800109a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800109e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80010a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010aa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  vy = 2*(q0q1 + q2q3);
 80010ae:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80010b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  vz = q0q0 - q1q1 - q2q2 + q3q3;
 80010c2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80010c6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ce:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80010da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010de:	edc7 7a08 	vstr	s15, [r7, #32]

  ex = (ayf*vz - azf*vy);
 80010e2:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80010e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80010ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ee:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80010f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fe:	edc7 7a07 	vstr	s15, [r7, #28]
  ey = (azf*vx - axf*vz);
 8001102:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001106:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800110a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110e:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001112:	edd7 7a08 	vldr	s15, [r7, #32]
 8001116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111e:	edc7 7a06 	vstr	s15, [r7, #24]
  ez = (axf*vy - ayf*vx);
 8001122:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001126:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800112a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112e:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001132:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113e:	edc7 7a05 	vstr	s15, [r7, #20]

  // integral error scaled integral gain
  exInt = exInt + ex*AHRS_KI*SENSOR_SAMPLING_TIME;
 8001142:	edd7 7a07 	vldr	s15, [r7, #28]
 8001146:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80012f4 <ahrs_fusion_ag+0x3d0>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80012f8 <ahrs_fusion_ag+0x3d4>
 8001152:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001156:	4b69      	ldr	r3, [pc, #420]	@ (80012fc <ahrs_fusion_ag+0x3d8>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	4b66      	ldr	r3, [pc, #408]	@ (80012fc <ahrs_fusion_ag+0x3d8>)
 8001162:	edc3 7a00 	vstr	s15, [r3]
  eyInt = eyInt + ey*AHRS_KI*SENSOR_SAMPLING_TIME;
 8001166:	edd7 7a06 	vldr	s15, [r7, #24]
 800116a:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80012f4 <ahrs_fusion_ag+0x3d0>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80012f8 <ahrs_fusion_ag+0x3d4>
 8001176:	ee27 7a87 	vmul.f32	s14, s15, s14
 800117a:	4b61      	ldr	r3, [pc, #388]	@ (8001300 <ahrs_fusion_ag+0x3dc>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001184:	4b5e      	ldr	r3, [pc, #376]	@ (8001300 <ahrs_fusion_ag+0x3dc>)
 8001186:	edc3 7a00 	vstr	s15, [r3]
  ezInt = ezInt + ez*AHRS_KI*SENSOR_SAMPLING_TIME;
 800118a:	edd7 7a05 	vldr	s15, [r7, #20]
 800118e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80012f4 <ahrs_fusion_ag+0x3d0>
 8001192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001196:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80012f8 <ahrs_fusion_ag+0x3d4>
 800119a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800119e:	4b59      	ldr	r3, [pc, #356]	@ (8001304 <ahrs_fusion_ag+0x3e0>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a8:	4b56      	ldr	r3, [pc, #344]	@ (8001304 <ahrs_fusion_ag+0x3e0>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]

  // adjusted gyroscope measurements
  gxf = gxf + ahrs_kp*ex + exInt;
 80011ae:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <ahrs_fusion_ag+0x3b4>)
 80011b0:	ed93 7a00 	vldr	s14, [r3]
 80011b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011bc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80011c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c4:	4b4d      	ldr	r3, [pc, #308]	@ (80012fc <ahrs_fusion_ag+0x3d8>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ce:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  gyf = gyf + ahrs_kp*ey + eyInt;
 80011d2:	4b41      	ldr	r3, [pc, #260]	@ (80012d8 <ahrs_fusion_ag+0x3b4>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80011e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e8:	4b45      	ldr	r3, [pc, #276]	@ (8001300 <ahrs_fusion_ag+0x3dc>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  gzf = gzf + ahrs_kp*ez + ezInt;
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <ahrs_fusion_ag+0x3b4>)
 80011f8:	ed93 7a00 	vldr	s14, [r3]
 80011fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120c:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <ahrs_fusion_ag+0x3e0>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

  // integrate quaternion rate and normalise
  halfT = 0.5f*SENSOR_SAMPLING_TIME;
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <ahrs_fusion_ag+0x3e4>)
 800121c:	613b      	str	r3, [r7, #16]
  q0 = q0 + (-q1*gxf - q2*gyf - q3*gzf)*halfT;
 800121e:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <ahrs_fusion_ag+0x3c4>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eeb1 7a67 	vneg.f32	s14, s15
 8001228:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800122c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <ahrs_fusion_ag+0x3c8>)
 8001232:	edd3 6a00 	vldr	s13, [r3]
 8001236:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800123a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <ahrs_fusion_ag+0x3cc>)
 8001244:	edd3 6a00 	vldr	s13, [r3]
 8001248:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001254:	edd7 7a04 	vldr	s15, [r7, #16]
 8001258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <ahrs_fusion_ag+0x3c0>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <ahrs_fusion_ag+0x3c0>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
  q1 = q1 + (q0*gxf + q2*gzf - q3*gyf)*halfT;
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <ahrs_fusion_ag+0x3c0>)
 800126e:	ed93 7a00 	vldr	s14, [r3]
 8001272:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <ahrs_fusion_ag+0x3c8>)
 800127c:	edd3 6a00 	vldr	s13, [r3]
 8001280:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <ahrs_fusion_ag+0x3cc>)
 800128e:	edd3 6a00 	vldr	s13, [r3]
 8001292:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800129e:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <ahrs_fusion_ag+0x3c4>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <ahrs_fusion_ag+0x3c4>)
 80012b2:	edc3 7a00 	vstr	s15, [r3]
  q2 = q2 + (q0*gyf - q1*gzf + q3*gxf)*halfT;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <ahrs_fusion_ag+0x3c0>)
 80012b8:	ed93 7a00 	vldr	s14, [r3]
 80012bc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80012c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <ahrs_fusion_ag+0x3c4>)
 80012c6:	edd3 6a00 	vldr	s13, [r3]
 80012ca:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80012ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d6:	e019      	b.n	800130c <ahrs_fusion_ag+0x3e8>
 80012d8:	20000170 	.word	0x20000170
 80012dc:	3ecccccd 	.word	0x3ecccccd
 80012e0:	379268a9 	.word	0x379268a9
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000158 	.word	0x20000158
 80012ec:	2000015c 	.word	0x2000015c
 80012f0:	20000160 	.word	0x20000160
 80012f4:	3dcccccd 	.word	0x3dcccccd
 80012f8:	3bcccccd 	.word	0x3bcccccd
 80012fc:	20000164 	.word	0x20000164
 8001300:	20000168 	.word	0x20000168
 8001304:	2000016c 	.word	0x2000016c
 8001308:	3b4ccccd 	.word	0x3b4ccccd
 800130c:	4b44      	ldr	r3, [pc, #272]	@ (8001420 <ahrs_fusion_ag+0x4fc>)
 800130e:	edd3 6a00 	vldr	s13, [r3]
 8001312:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800131e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001326:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <ahrs_fusion_ag+0x500>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <ahrs_fusion_ag+0x500>)
 8001332:	edc3 7a00 	vstr	s15, [r3]
  q3 = q3 + (q0*gzf + q1*gyf - q2*gxf)*halfT;
 8001336:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <ahrs_fusion_ag+0x504>)
 8001338:	ed93 7a00 	vldr	s14, [r3]
 800133c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001344:	4b39      	ldr	r3, [pc, #228]	@ (800142c <ahrs_fusion_ag+0x508>)
 8001346:	edd3 6a00 	vldr	s13, [r3]
 800134a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800134e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001356:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <ahrs_fusion_ag+0x500>)
 8001358:	edd3 6a00 	vldr	s13, [r3]
 800135c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001368:	edd7 7a04 	vldr	s15, [r7, #16]
 800136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <ahrs_fusion_ag+0x4fc>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <ahrs_fusion_ag+0x4fc>)
 800137c:	edc3 7a00 	vstr	s15, [r3]

  // normalise quaternion
  norm = invSqrt(q0q0 + q1q1 + q2q2 + q3q3); 
 8001380:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001384:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800138c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001394:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	f000 f846 	bl	8001430 <invSqrt>
 80013a4:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
  q0 *= norm;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <ahrs_fusion_ag+0x504>)
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <ahrs_fusion_ag+0x504>)
 80013b8:	edc3 7a00 	vstr	s15, [r3]
  q1 *= norm;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <ahrs_fusion_ag+0x508>)
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <ahrs_fusion_ag+0x508>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
  q2 *= norm;
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <ahrs_fusion_ag+0x500>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <ahrs_fusion_ag+0x500>)
 80013e0:	edc3 7a00 	vstr	s15, [r3]
  q3 *= norm;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <ahrs_fusion_ag+0x4fc>)
 80013e6:	ed93 7a00 	vldr	s14, [r3]
 80013ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <ahrs_fusion_ag+0x4fc>)
 80013f4:	edc3 7a00 	vstr	s15, [r3]

  ahrs->q.q0 = q0;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <ahrs_fusion_ag+0x504>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	601a      	str	r2, [r3, #0]
  ahrs->q.q1 = q1;
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <ahrs_fusion_ag+0x508>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	605a      	str	r2, [r3, #4]
  ahrs->q.q2 = q2;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <ahrs_fusion_ag+0x500>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]
  ahrs->q.q3 = q3;
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <ahrs_fusion_ag+0x4fc>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	60da      	str	r2, [r3, #12]

}
 8001418:	bf00      	nop
 800141a:	3768      	adds	r7, #104	@ 0x68
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000160 	.word	0x20000160
 8001424:	2000015c 	.word	0x2000015c
 8001428:	20000000 	.word	0x20000000
 800142c:	20000158 	.word	0x20000158

08001430 <invSqrt>:
//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) 
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800143a:	edd7 7a01 	vldr	s15, [r7, #4]
 800143e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001446:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	105a      	asrs	r2, r3, #1
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <invSqrt+0x74>)
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001468:	ed97 7a04 	vldr	s14, [r7, #16]
 800146c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001474:	edd7 7a04 	vldr	s15, [r7, #16]
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001484:	edd7 7a04 	vldr	s15, [r7, #16]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	ee07 3a90 	vmov	s15, r3
}
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	5f3759df 	.word	0x5f3759df

080014a8 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <BSP_SPI2_Init+0x54>)
 80014b4:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <BSP_SPI2_Init+0x58>)
 80014b6:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <BSP_SPI2_Init+0x5c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	4911      	ldr	r1, [pc, #68]	@ (8001504 <BSP_SPI2_Init+0x5c>)
 80014c0:	600a      	str	r2, [r1, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d114      	bne.n	80014f0 <BSP_SPI2_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <BSP_SPI2_Init+0x54>)
 80014c8:	f00a fbbc 	bl	800bc44 <HAL_SPI_GetState>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10e      	bne.n	80014f0 <BSP_SPI2_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI2_MspInit(&hspi2);
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <BSP_SPI2_Init+0x54>)
 80014d4:	f000 f8bc 	bl	8001650 <SPI2_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d108      	bne.n	80014f0 <BSP_SPI2_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI2_Init(&hspi2) != HAL_OK)
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <BSP_SPI2_Init+0x54>)
 80014e0:	f000 f87a 	bl	80015d8 <MX_SPI2_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <BSP_SPI2_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80014ea:	f06f 0307 	mvn.w	r3, #7
 80014ee:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200002a0 	.word	0x200002a0
 8001500:	40003800 	.word	0x40003800
 8001504:	20000174 	.word	0x20000174

08001508 <BSP_SPI2_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800150e:	f06f 0307 	mvn.w	r3, #7
 8001512:	607b      	str	r3, [r7, #4]
  if (SPI2InitCounter > 0)
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <BSP_SPI2_DeInit+0x48>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <BSP_SPI2_DeInit+0x3c>
  {
    if (--SPI2InitCounter == 0)
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <BSP_SPI2_DeInit+0x48>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <BSP_SPI2_DeInit+0x48>)
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <BSP_SPI2_DeInit+0x48>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10a      	bne.n	8001544 <BSP_SPI2_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
	  SPI2_MspDeInit(&hspi2);
 800152e:	4809      	ldr	r0, [pc, #36]	@ (8001554 <BSP_SPI2_DeInit+0x4c>)
 8001530:	f000 f8f2 	bl	8001718 <SPI2_MspDeInit>
#endif
	  /* DeInit the SPI*/
	  if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8001534:	4807      	ldr	r0, [pc, #28]	@ (8001554 <BSP_SPI2_DeInit+0x4c>)
 8001536:	f009 fe64 	bl	800b202 <HAL_SPI_DeInit>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <BSP_SPI2_DeInit+0x3c>
	  {
		ret = BSP_ERROR_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
	  }
	}
  }
  return ret;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000174 	.word	0x20000174
 8001554:	200002a0 	.word	0x200002a0

08001558 <BSP_SPI2_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t Length)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8001568:	887a      	ldrh	r2, [r7, #2]
 800156a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4806      	ldr	r0, [pc, #24]	@ (800158c <BSP_SPI2_Send+0x34>)
 8001572:	f009 fe6e 	bl	800b252 <HAL_SPI_Transmit>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <BSP_SPI2_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800157c:	f06f 0305 	mvn.w	r3, #5
 8001580:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002a0 	.word	0x200002a0

08001590 <BSP_SPI2_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv(uint8_t *pData, uint16_t Length)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 80015a0:	887a      	ldrh	r2, [r7, #2]
 80015a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <BSP_SPI2_Recv+0x34>)
 80015aa:	f009 ff8e 	bl	800b4ca <HAL_SPI_Receive>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <BSP_SPI2_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80015b4:	f06f 0305 	mvn.w	r3, #5
 80015b8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200002a0 	.word	0x200002a0

080015c8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80015cc:	f007 fef8 	bl	80093c0 <HAL_GetTick>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI2;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a19      	ldr	r2, [pc, #100]	@ (800164c <MX_SPI2_Init+0x74>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001610:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	220a      	movs	r2, #10
 800162e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f009 fd5d 	bl	800b0f0 <HAL_SPI_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_SPI2_Init+0x68>
  {
    ret = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40003800 	.word	0x40003800

08001650 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	4b2c      	ldr	r3, [pc, #176]	@ (8001710 <SPI2_MspInit+0xc0>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	4a2b      	ldr	r2, [pc, #172]	@ (8001710 <SPI2_MspInit+0xc0>)
 8001662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001666:	6413      	str	r3, [r2, #64]	@ 0x40
 8001668:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <SPI2_MspInit+0xc0>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <SPI2_MspInit+0xc0>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	4a24      	ldr	r2, [pc, #144]	@ (8001710 <SPI2_MspInit+0xc0>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	6313      	str	r3, [r2, #48]	@ 0x30
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <SPI2_MspInit+0xc0>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8001690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 80016a2:	2305      	movs	r3, #5
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4819      	ldr	r0, [pc, #100]	@ (8001714 <SPI2_MspInit+0xc4>)
 80016ae:	f008 fc79 	bl	8009fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 80016b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 80016c4:	2305      	movs	r3, #5
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4811      	ldr	r0, [pc, #68]	@ (8001714 <SPI2_MspInit+0xc4>)
 80016d0:	f008 fc68 	bl	8009fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 80016d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 80016e6:	2305      	movs	r3, #5
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4808      	ldr	r0, [pc, #32]	@ (8001714 <SPI2_MspInit+0xc4>)
 80016f2:	f008 fc57 	bl	8009fa4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2024      	movs	r0, #36	@ 0x24
 80016fc:	f008 fb7b 	bl	8009df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001700:	2024      	movs	r0, #36	@ 0x24
 8001702:	f008 fb94 	bl	8009e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	@ 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40020400 	.word	0x40020400

08001718 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <SPI2_MspDeInit+0x40>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <SPI2_MspDeInit+0x40>)
 8001726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800172a:	6413      	str	r3, [r2, #64]	@ 0x40
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 800172c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001730:	480a      	ldr	r0, [pc, #40]	@ (800175c <SPI2_MspDeInit+0x44>)
 8001732:	f008 fdbb 	bl	800a2ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 8001736:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800173a:	4808      	ldr	r0, [pc, #32]	@ (800175c <SPI2_MspDeInit+0x44>)
 800173c:	f008 fdb6 	bl	800a2ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 8001740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <SPI2_MspDeInit+0x44>)
 8001746:	f008 fdb1 	bl	800a2ac <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 800174a:	2024      	movs	r0, #36	@ 0x24
 800174c:	f008 fb7d 	bl	8009e4a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400

08001760 <myprintf>:

extern UART_HandleTypeDef huart1;

#ifdef DEBUG
int myprintf(const char *format, ...)
{
 8001760:	b40f      	push	{r0, r1, r2, r3}
 8001762:	b580      	push	{r7, lr}
 8001764:	b0c2      	sub	sp, #264	@ 0x108
 8001766:	af00      	add	r7, sp, #0
    va_list arg;
    va_start(arg, format);
 8001768:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800176c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    char temp[255];
    int len;
    // Limit the length of string to 254
    len = vsnprintf(temp, 254, format, arg);
 8001770:	4638      	mov	r0, r7
 8001772:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001776:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800177a:	21fe      	movs	r1, #254	@ 0xfe
 800177c:	f00e fd02 	bl	8010184 <vsniprintf>
 8001780:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    usart_puts(temp, len);
 8001784:	463b      	mov	r3, r7
 8001786:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f80a 	bl	80017a4 <usart_puts>
    return len;
 8001790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
}
 8001794:	4618      	mov	r0, r3
 8001796:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017a0:	b004      	add	sp, #16
 80017a2:	4770      	bx	lr

080017a4 <usart_puts>:
    
int usart_puts(const char *str, int len) 
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    //putc(*str ++);
    //while (huart1.Lock == HAL_LOCKED);
    HAL_UART_Transmit(&huart1, (uint8_t *)str, len, 1000);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <usart_puts+0x24>)
 80017ba:	f00b feb4 	bl	800d526 <HAL_UART_Transmit>
    return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200003d0 	.word	0x200003d0

080017cc <PIDControlInit>:
extern int16_t gTHR;
int16_t motor_thr;
float dt_recip;

void PIDControlInit(P_PI_PIDControlTypeDef *pid)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  pid->ts = PID_SAMPLING_TIME;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a33      	ldr	r2, [pc, #204]	@ (80018a4 <PIDControlInit+0xd8>)
 80017d8:	601a      	str	r2, [r3, #0]

  pid->x_kp1 = PITCH_PID_KP1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a32      	ldr	r2, [pc, #200]	@ (80018a8 <PIDControlInit+0xdc>)
 80017de:	605a      	str	r2, [r3, #4]
  pid->x_ki1 = PITCH_PID_KI1;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  pid->x_i1_limit = PITCH_PID_I1_LIMIT;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ee:	641a      	str	r2, [r3, #64]	@ 0x40
  pid->x_kp2 = PITCH_PID_KP2;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a2e      	ldr	r2, [pc, #184]	@ (80018ac <PIDControlInit+0xe0>)
 80017f4:	60da      	str	r2, [r3, #12]
  pid->x_ki2 = PITCH_PID_KI2;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a2c      	ldr	r2, [pc, #176]	@ (80018ac <PIDControlInit+0xe0>)
 80017fa:	611a      	str	r2, [r3, #16]
  pid->x_kd2 = PITCH_PID_KD2;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a2c      	ldr	r2, [pc, #176]	@ (80018b0 <PIDControlInit+0xe4>)
 8001800:	615a      	str	r2, [r3, #20]
  pid->x_i2_limit = PITCH_PID_I2_LIMIT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a2b      	ldr	r2, [pc, #172]	@ (80018b4 <PIDControlInit+0xe8>)
 8001806:	64da      	str	r2, [r3, #76]	@ 0x4c
  pid->x_s1 = 0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	659a      	str	r2, [r3, #88]	@ 0x58
  pid->x_s2 = 0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	65da      	str	r2, [r3, #92]	@ 0x5c

  pid->y_kp1 = ROLL_PID_KP1;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <PIDControlInit+0xdc>)
 800181c:	619a      	str	r2, [r3, #24]
  pid->y_ki1 = ROLL_PID_KI1;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  pid->y_i1_limit = ROLL_PID_I1_LIMIT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
  pid->y_kp2 = ROLL_PID_KP2;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a1e      	ldr	r2, [pc, #120]	@ (80018ac <PIDControlInit+0xe0>)
 8001832:	621a      	str	r2, [r3, #32]
  pid->y_ki2 = ROLL_PID_KI2;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <PIDControlInit+0xe0>)
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24
  pid->y_kd2 = ROLL_PID_KD2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <PIDControlInit+0xe4>)
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
  pid->y_i2_limit = ROLL_PID_I2_LIMIT;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a1c      	ldr	r2, [pc, #112]	@ (80018b4 <PIDControlInit+0xe8>)
 8001844:	651a      	str	r2, [r3, #80]	@ 0x50
  pid->y_s1 = 0;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	661a      	str	r2, [r3, #96]	@ 0x60
  pid->y_s2 = 0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	665a      	str	r2, [r3, #100]	@ 0x64

  pid->z_kp1 = YAW_PID_KP1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800185c:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid->z_ki1 = YAW_PID_KI1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	631a      	str	r2, [r3, #48]	@ 0x30
  pid->z_i1_limit = YAW_PID_I1_LIMIT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800186c:	649a      	str	r2, [r3, #72]	@ 0x48
  pid->z_kp2 = YAW_PID_KP2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a11      	ldr	r2, [pc, #68]	@ (80018b8 <PIDControlInit+0xec>)
 8001872:	635a      	str	r2, [r3, #52]	@ 0x34
  pid->z_ki2 = YAW_PID_KI2;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <PIDControlInit+0xdc>)
 8001878:	639a      	str	r2, [r3, #56]	@ 0x38
  pid->z_kd2 = YAW_PID_KD2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <PIDControlInit+0xdc>)
 800187e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pid->z_i2_limit = YAW_PID_I2_LIMIT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001886:	655a      	str	r2, [r3, #84]	@ 0x54
  pid->z_s1 = 0;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	669a      	str	r2, [r3, #104]	@ 0x68
  pid->z_s2 = 0;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	3aa3d70a 	.word	0x3aa3d70a
 80018a8:	40400000 	.word	0x40400000
 80018ac:	42a00000 	.word	0x42a00000
 80018b0:	41200000 	.word	0x41200000
 80018b4:	41a00000 	.word	0x41a00000
 80018b8:	44610000 	.word	0x44610000

080018bc <FlightControlPID_OuterLoop>:


}

void FlightControlPID_OuterLoop(EulerAngleTypeDef *euler_rc, EulerAngleTypeDef *euler_ahrs, AHRS_State_TypeDef *ahrs, P_PI_PIDControlTypeDef *pid)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  float error;

  if(gTHR<MIN_THR)
 80018ca:	4b86      	ldr	r3, [pc, #536]	@ (8001ae4 <FlightControlPID_OuterLoop+0x228>)
 80018cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80018d2:	dc0b      	bgt.n	80018ec <FlightControlPID_OuterLoop+0x30>
  {
    pid_x_integ1 = 0;
 80018d4:	4b84      	ldr	r3, [pc, #528]	@ (8001ae8 <FlightControlPID_OuterLoop+0x22c>)
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
    pid_y_integ1 = 0;
 80018dc:	4b83      	ldr	r3, [pc, #524]	@ (8001aec <FlightControlPID_OuterLoop+0x230>)
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
    pid_z_integ1 = 0;
 80018e4:	4b82      	ldr	r3, [pc, #520]	@ (8001af0 <FlightControlPID_OuterLoop+0x234>)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
  }

  //x-axis pid
  error = euler_rc->thx - euler_ahrs->thx;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	ed93 7a00 	vldr	s14, [r3]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fc:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ1 += error*pid->ts;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	ed93 7a00 	vldr	s14, [r3]
 8001906:	edd7 7a05 	vldr	s15, [r7, #20]
 800190a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190e:	4b76      	ldr	r3, [pc, #472]	@ (8001ae8 <FlightControlPID_OuterLoop+0x22c>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	4b73      	ldr	r3, [pc, #460]	@ (8001ae8 <FlightControlPID_OuterLoop+0x22c>)
 800191a:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ1 > pid->x_i1_limit)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001924:	4b70      	ldr	r3, [pc, #448]	@ (8001ae8 <FlightControlPID_OuterLoop+0x22c>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	d504      	bpl.n	800193e <FlightControlPID_OuterLoop+0x82>
    pid_x_integ1 = pid->x_i1_limit;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	4a6b      	ldr	r2, [pc, #428]	@ (8001ae8 <FlightControlPID_OuterLoop+0x22c>)
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e014      	b.n	8001968 <FlightControlPID_OuterLoop+0xac>
  else if(pid_x_integ1 < -pid->x_i1_limit)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001944:	eeb1 7a67 	vneg.f32	s14, s15
 8001948:	4b67      	ldr	r3, [pc, #412]	@ (8001ae8 <FlightControlPID_OuterLoop+0x22c>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	dd07      	ble.n	8001968 <FlightControlPID_OuterLoop+0xac>
    pid_x_integ1 = -pid->x_i1_limit;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800195e:	eef1 7a67 	vneg.f32	s15, s15
 8001962:	4b61      	ldr	r3, [pc, #388]	@ (8001ae8 <FlightControlPID_OuterLoop+0x22c>)
 8001964:	edc3 7a00 	vstr	s15, [r3]
  pid->x_s1 =  pid->x_kp1*error + pid->x_ki1*pid_x_integ1;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	ed93 7a01 	vldr	s14, [r3, #4]
 800196e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	edd3 6a02 	vldr	s13, [r3, #8]
 800197c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ae8 <FlightControlPID_OuterLoop+0x22c>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

  //y-axis pid
  error = euler_rc->thy - euler_ahrs->thy;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	ed93 7a01 	vldr	s14, [r3, #4]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	edd3 7a01 	vldr	s15, [r3, #4]
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ1 += error*pid->ts;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b2:	4b4e      	ldr	r3, [pc, #312]	@ (8001aec <FlightControlPID_OuterLoop+0x230>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	4b4b      	ldr	r3, [pc, #300]	@ (8001aec <FlightControlPID_OuterLoop+0x230>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ1 > pid->y_i1_limit)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80019c8:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <FlightControlPID_OuterLoop+0x230>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	d504      	bpl.n	80019e2 <FlightControlPID_OuterLoop+0x126>
    pid_y_integ1 = pid->y_i1_limit;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019dc:	4a43      	ldr	r2, [pc, #268]	@ (8001aec <FlightControlPID_OuterLoop+0x230>)
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e014      	b.n	8001a0c <FlightControlPID_OuterLoop+0x150>
  else if(pid_y_integ1 < -pid->y_i1_limit)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80019e8:	eeb1 7a67 	vneg.f32	s14, s15
 80019ec:	4b3f      	ldr	r3, [pc, #252]	@ (8001aec <FlightControlPID_OuterLoop+0x230>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	dd07      	ble.n	8001a0c <FlightControlPID_OuterLoop+0x150>
    pid_y_integ1 = -pid->y_i1_limit;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001a02:	eef1 7a67 	vneg.f32	s15, s15
 8001a06:	4b39      	ldr	r3, [pc, #228]	@ (8001aec <FlightControlPID_OuterLoop+0x230>)
 8001a08:	edc3 7a00 	vstr	s15, [r3]
  pid->y_s1 =  pid->y_kp1*error + pid->y_ki1*pid_y_integ1;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a20:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <FlightControlPID_OuterLoop+0x230>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

  //z-axis pid
  error = euler_rc->thz - euler_ahrs->thz;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a44:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ1 += error*pid->ts;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a56:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <FlightControlPID_OuterLoop+0x234>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a60:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <FlightControlPID_OuterLoop+0x234>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ1 > pid->z_i1_limit)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <FlightControlPID_OuterLoop+0x234>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	d504      	bpl.n	8001a86 <FlightControlPID_OuterLoop+0x1ca>
    pid_z_integ1 = pid->z_i1_limit;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a80:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <FlightControlPID_OuterLoop+0x234>)
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	e014      	b.n	8001ab0 <FlightControlPID_OuterLoop+0x1f4>
  else if(pid_z_integ1 < -pid->z_i1_limit)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001a8c:	eeb1 7a67 	vneg.f32	s14, s15
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <FlightControlPID_OuterLoop+0x234>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9e:	dd07      	ble.n	8001ab0 <FlightControlPID_OuterLoop+0x1f4>
    pid_z_integ1 = -pid->z_i1_limit;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001aa6:	eef1 7a67 	vneg.f32	s15, s15
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <FlightControlPID_OuterLoop+0x234>)
 8001aac:	edc3 7a00 	vstr	s15, [r3]
  pid->z_s1 =  pid->z_kp1*error + pid->z_ki1*pid_z_integ1;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <FlightControlPID_OuterLoop+0x234>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
}
 8001ad8:	bf00      	nop
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20000954 	.word	0x20000954
 8001ae8:	20000178 	.word	0x20000178
 8001aec:	2000017c 	.word	0x2000017c
 8001af0:	20000180 	.word	0x20000180

08001af4 <FlightControlPID_innerLoop>:

void FlightControlPID_innerLoop(EulerAngleTypeDef *euler_rc, Gyro_Rad *gyro_rad, AHRS_State_TypeDef *ahrs, P_PI_PIDControlTypeDef *pid, MotorControlTypeDef *motor_pwm)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  float error, deriv;

  if(gTHR<MIN_THR)
 8001b02:	4bbd      	ldr	r3, [pc, #756]	@ (8001df8 <FlightControlPID_innerLoop+0x304>)
 8001b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b08:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b0a:	dc0b      	bgt.n	8001b24 <FlightControlPID_innerLoop+0x30>
  {
    pid_x_integ2 = 0;
 8001b0c:	4bbb      	ldr	r3, [pc, #748]	@ (8001dfc <FlightControlPID_innerLoop+0x308>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
    pid_y_integ2 = 0;
 8001b14:	4bba      	ldr	r3, [pc, #744]	@ (8001e00 <FlightControlPID_innerLoop+0x30c>)
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
    pid_z_integ2 = 0;
 8001b1c:	4bb9      	ldr	r3, [pc, #740]	@ (8001e04 <FlightControlPID_innerLoop+0x310>)
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
  }
  
  dt_recip = 1/pid->ts;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	ed93 7a00 	vldr	s14, [r3]
 8001b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b32:	4bb5      	ldr	r3, [pc, #724]	@ (8001e08 <FlightControlPID_innerLoop+0x314>)
 8001b34:	edc3 7a00 	vstr	s15, [r3]

  //X Axis
  error = pid->x_s1 - gyro_rad->gx;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ2 += error*pid->ts;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b5a:	4ba8      	ldr	r3, [pc, #672]	@ (8001dfc <FlightControlPID_innerLoop+0x308>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b64:	4ba5      	ldr	r3, [pc, #660]	@ (8001dfc <FlightControlPID_innerLoop+0x308>)
 8001b66:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ2 > pid->x_i2_limit)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001b70:	4ba2      	ldr	r3, [pc, #648]	@ (8001dfc <FlightControlPID_innerLoop+0x308>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	d504      	bpl.n	8001b8a <FlightControlPID_innerLoop+0x96>
    pid_x_integ2 = pid->x_i2_limit;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a9d      	ldr	r2, [pc, #628]	@ (8001dfc <FlightControlPID_innerLoop+0x308>)
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e014      	b.n	8001bb4 <FlightControlPID_innerLoop+0xc0>
  else if(pid_x_integ2 < -pid->x_i2_limit)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001b90:	eeb1 7a67 	vneg.f32	s14, s15
 8001b94:	4b99      	ldr	r3, [pc, #612]	@ (8001dfc <FlightControlPID_innerLoop+0x308>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	dd07      	ble.n	8001bb4 <FlightControlPID_innerLoop+0xc0>
    pid_x_integ2 = -pid->x_i2_limit;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001baa:	eef1 7a67 	vneg.f32	s15, s15
 8001bae:	4b93      	ldr	r3, [pc, #588]	@ (8001dfc <FlightControlPID_innerLoop+0x308>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_x_pre_error2)*dt_recip;
 8001bb4:	4b95      	ldr	r3, [pc, #596]	@ (8001e0c <FlightControlPID_innerLoop+0x318>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc2:	4b91      	ldr	r3, [pc, #580]	@ (8001e08 <FlightControlPID_innerLoop+0x314>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bcc:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_error2 = error;
 8001bd0:	4a8e      	ldr	r2, [pc, #568]	@ (8001e0c <FlightControlPID_innerLoop+0x318>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	6013      	str	r3, [r2, #0]
  deriv = pid_x_pre_deriv + (deriv - pid_x_pre_deriv)*D_FILTER_COFF;
 8001bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8001e10 <FlightControlPID_innerLoop+0x31c>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8001e14 <FlightControlPID_innerLoop+0x320>
 8001be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bec:	4b88      	ldr	r3, [pc, #544]	@ (8001e10 <FlightControlPID_innerLoop+0x31c>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_deriv = deriv;
 8001bfa:	4a85      	ldr	r2, [pc, #532]	@ (8001e10 <FlightControlPID_innerLoop+0x31c>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6013      	str	r3, [r2, #0]
  pid->x_s2 = pid->x_kp2*error + pid->x_ki2*pid_x_integ2 + pid->x_kd2*deriv;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c14:	4b79      	ldr	r3, [pc, #484]	@ (8001dfc <FlightControlPID_innerLoop+0x308>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	edd3 6a05 	vldr	s13, [r3, #20]
 8001c28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
  
  if(pid->x_s2 > MAX_ADJ_AMOUNT)  pid->x_s2 = MAX_ADJ_AMOUNT;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001c40:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001e18 <FlightControlPID_innerLoop+0x324>
 8001c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	dd02      	ble.n	8001c54 <FlightControlPID_innerLoop+0x160>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	4a72      	ldr	r2, [pc, #456]	@ (8001e1c <FlightControlPID_innerLoop+0x328>)
 8001c52:	65da      	str	r2, [r3, #92]	@ 0x5c
  if(pid->x_s2 < -MAX_ADJ_AMOUNT)  pid->x_s2 = -MAX_ADJ_AMOUNT;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001c5a:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001e20 <FlightControlPID_innerLoop+0x32c>
 8001c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c66:	d502      	bpl.n	8001c6e <FlightControlPID_innerLoop+0x17a>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e24 <FlightControlPID_innerLoop+0x330>)
 8001c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

  //Y Axis
  error = pid->y_s1 - gyro_rad->gy;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7e:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ2 += error*pid->ts;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c90:	4b5b      	ldr	r3, [pc, #364]	@ (8001e00 <FlightControlPID_innerLoop+0x30c>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9a:	4b59      	ldr	r3, [pc, #356]	@ (8001e00 <FlightControlPID_innerLoop+0x30c>)
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ2 > pid->y_i2_limit)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001ca6:	4b56      	ldr	r3, [pc, #344]	@ (8001e00 <FlightControlPID_innerLoop+0x30c>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	d504      	bpl.n	8001cc0 <FlightControlPID_innerLoop+0x1cc>
    pid_y_integ2 = pid->y_i2_limit;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cba:	4a51      	ldr	r2, [pc, #324]	@ (8001e00 <FlightControlPID_innerLoop+0x30c>)
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e014      	b.n	8001cea <FlightControlPID_innerLoop+0x1f6>
  else if(pid_y_integ2 < -pid->y_i2_limit)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001cc6:	eeb1 7a67 	vneg.f32	s14, s15
 8001cca:	4b4d      	ldr	r3, [pc, #308]	@ (8001e00 <FlightControlPID_innerLoop+0x30c>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	dd07      	ble.n	8001cea <FlightControlPID_innerLoop+0x1f6>
    pid_y_integ2 = -pid->y_i2_limit;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001ce0:	eef1 7a67 	vneg.f32	s15, s15
 8001ce4:	4b46      	ldr	r3, [pc, #280]	@ (8001e00 <FlightControlPID_innerLoop+0x30c>)
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_y_pre_error2)*dt_recip;
 8001cea:	4b4f      	ldr	r3, [pc, #316]	@ (8001e28 <FlightControlPID_innerLoop+0x334>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cf8:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <FlightControlPID_innerLoop+0x314>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d02:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_error2 = error;
 8001d06:	4a48      	ldr	r2, [pc, #288]	@ (8001e28 <FlightControlPID_innerLoop+0x334>)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	6013      	str	r3, [r2, #0]
  deriv = pid_y_pre_deriv + (deriv - pid_y_pre_deriv)*D_FILTER_COFF;
 8001d0c:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <FlightControlPID_innerLoop+0x338>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001e14 <FlightControlPID_innerLoop+0x320>
 8001d1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d22:	4b42      	ldr	r3, [pc, #264]	@ (8001e2c <FlightControlPID_innerLoop+0x338>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2c:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_deriv = deriv;
 8001d30:	4a3e      	ldr	r2, [pc, #248]	@ (8001e2c <FlightControlPID_innerLoop+0x338>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6013      	str	r3, [r2, #0]
  pid->y_s2 = pid->y_kp2*error + pid->y_ki2*pid_y_integ2 + pid->y_kd2*deriv;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <FlightControlPID_innerLoop+0x30c>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

  if(pid->y_s2 > MAX_ADJ_AMOUNT)  pid->y_s2 = MAX_ADJ_AMOUNT;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001d76:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001e18 <FlightControlPID_innerLoop+0x324>
 8001d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	dd02      	ble.n	8001d8a <FlightControlPID_innerLoop+0x296>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4a25      	ldr	r2, [pc, #148]	@ (8001e1c <FlightControlPID_innerLoop+0x328>)
 8001d88:	665a      	str	r2, [r3, #100]	@ 0x64
  if(pid->y_s2 < -MAX_ADJ_AMOUNT)  pid->y_s2 = -MAX_ADJ_AMOUNT;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001d90:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001e20 <FlightControlPID_innerLoop+0x32c>
 8001d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	d502      	bpl.n	8001da4 <FlightControlPID_innerLoop+0x2b0>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	4a20      	ldr	r2, [pc, #128]	@ (8001e24 <FlightControlPID_innerLoop+0x330>)
 8001da2:	665a      	str	r2, [r3, #100]	@ 0x64

  //Z Axis
  error = pid->z_s1 - gyro_rad->gz;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	edd3 7a02 	vldr	s15, [r3, #8]
 8001db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db4:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ2 += error*pid->ts;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	ed93 7a00 	vldr	s14, [r3]
 8001dbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <FlightControlPID_innerLoop+0x310>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <FlightControlPID_innerLoop+0x310>)
 8001dd2:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ2 > pid->z_i2_limit)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <FlightControlPID_innerLoop+0x310>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	d521      	bpl.n	8001e30 <FlightControlPID_innerLoop+0x33c>
    pid_z_integ2 = pid->z_i2_limit;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <FlightControlPID_innerLoop+0x310>)
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e031      	b.n	8001e5a <FlightControlPID_innerLoop+0x366>
 8001df6:	bf00      	nop
 8001df8:	20000954 	.word	0x20000954
 8001dfc:	20000184 	.word	0x20000184
 8001e00:	20000188 	.word	0x20000188
 8001e04:	2000018c 	.word	0x2000018c
 8001e08:	200001a8 	.word	0x200001a8
 8001e0c:	20000190 	.word	0x20000190
 8001e10:	2000019c 	.word	0x2000019c
 8001e14:	3ccccccd 	.word	0x3ccccccd
 8001e18:	44480000 	.word	0x44480000
 8001e1c:	44480000 	.word	0x44480000
 8001e20:	c4480000 	.word	0xc4480000
 8001e24:	c4480000 	.word	0xc4480000
 8001e28:	20000194 	.word	0x20000194
 8001e2c:	200001a0 	.word	0x200001a0
  else if(pid_z_integ2 < -pid->z_i2_limit)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001e36:	eeb1 7a67 	vneg.f32	s14, s15
 8001e3a:	4b74      	ldr	r3, [pc, #464]	@ (800200c <FlightControlPID_innerLoop+0x518>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	dd07      	ble.n	8001e5a <FlightControlPID_innerLoop+0x366>
    pid_z_integ2 = -pid->z_i2_limit;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001e50:	eef1 7a67 	vneg.f32	s15, s15
 8001e54:	4b6d      	ldr	r3, [pc, #436]	@ (800200c <FlightControlPID_innerLoop+0x518>)
 8001e56:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_z_pre_error2)*dt_recip;
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002010 <FlightControlPID_innerLoop+0x51c>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	4b6a      	ldr	r3, [pc, #424]	@ (8002014 <FlightControlPID_innerLoop+0x520>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_z_pre_error2 = error;
 8001e76:	4a66      	ldr	r2, [pc, #408]	@ (8002010 <FlightControlPID_innerLoop+0x51c>)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	6013      	str	r3, [r2, #0]
  pid->z_s2 = pid->z_kp2*error + pid->z_ki2*pid_z_integ2 + pid->z_kd2*deriv;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001e90:	4b5e      	ldr	r3, [pc, #376]	@ (800200c <FlightControlPID_innerLoop+0x518>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001ea4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c

  if(pid->z_s2 > MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = MAX_ADJ_AMOUNT_YAW;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001ebc:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002018 <FlightControlPID_innerLoop+0x524>
 8001ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	dd02      	ble.n	8001ed0 <FlightControlPID_innerLoop+0x3dc>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	4a53      	ldr	r2, [pc, #332]	@ (800201c <FlightControlPID_innerLoop+0x528>)
 8001ece:	66da      	str	r2, [r3, #108]	@ 0x6c
  if(pid->z_s2 < -MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = -MAX_ADJ_AMOUNT_YAW;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001ed6:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8002020 <FlightControlPID_innerLoop+0x52c>
 8001eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d502      	bpl.n	8001eea <FlightControlPID_innerLoop+0x3f6>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4a4f      	ldr	r2, [pc, #316]	@ (8002024 <FlightControlPID_innerLoop+0x530>)
 8001ee8:	66da      	str	r2, [r3, #108]	@ 0x6c

  
#ifdef MOTOR_DC

  motor_thr = ((int16_t) (0.05f*(float)gTHR + 633.333f));           //Official MiniDrone Kit >> 630 to 1700
 8001eea:	4b4f      	ldr	r3, [pc, #316]	@ (8002028 <FlightControlPID_innerLoop+0x534>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef8:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800202c <FlightControlPID_innerLoop+0x538>
 8001efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f00:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002030 <FlightControlPID_innerLoop+0x53c>
 8001f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f0c:	ee17 3a90 	vmov	r3, s15
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	4b48      	ldr	r3, [pc, #288]	@ (8002034 <FlightControlPID_innerLoop+0x540>)
 8001f14:	801a      	strh	r2, [r3, #0]
  //motor_thr = 0.28f*gTHR + 750.0f;                 //TGY-i6 remocon and external ESC STEVAL-ESC001V1
    motor_thr = ((int16_t) (0.28f*(float)gTHR + 850.0f));                 //TGY-i6 remocon and external ESC Afro12A

#endif

  motor_pwm->motor1_pwm = motor_thr - pid->x_s2 - pid->y_s2 + pid->z_s2 + MOTOR_OFF1;
 8001f16:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <FlightControlPID_innerLoop+0x540>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001f2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f42:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002038 <FlightControlPID_innerLoop+0x544>
 8001f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
  motor_pwm->motor2_pwm = motor_thr + pid->x_s2 - pid->y_s2 - pid->z_s2 + MOTOR_OFF2;
 8001f50:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <FlightControlPID_innerLoop+0x540>)
 8001f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002038 <FlightControlPID_innerLoop+0x544>
 8001f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	edc3 7a01 	vstr	s15, [r3, #4]
  motor_pwm->motor3_pwm = motor_thr + pid->x_s2 + pid->y_s2 + pid->z_s2 + MOTOR_OFF3;
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <FlightControlPID_innerLoop+0x540>)
 8001f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002038 <FlightControlPID_innerLoop+0x544>
 8001fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	edc3 7a02 	vstr	s15, [r3, #8]
  motor_pwm->motor4_pwm = motor_thr - pid->x_s2 + pid->y_s2 - pid->z_s2 + MOTOR_OFF4;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <FlightControlPID_innerLoop+0x540>)
 8001fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002038 <FlightControlPID_innerLoop+0x544>
 8001ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	edc3 7a03 	vstr	s15, [r3, #12]

}
 8001ffe:	bf00      	nop
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	2000018c 	.word	0x2000018c
 8002010:	20000198 	.word	0x20000198
 8002014:	200001a8 	.word	0x200001a8
 8002018:	44480000 	.word	0x44480000
 800201c:	44480000 	.word	0x44480000
 8002020:	c4480000 	.word	0xc4480000
 8002024:	c4480000 	.word	0xc4480000
 8002028:	20000954 	.word	0x20000954
 800202c:	3d4ccccd 	.word	0x3d4ccccd
 8002030:	441e5550 	.word	0x441e5550
 8002034:	200001a4 	.word	0x200001a4
	...

08002040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int16_t pid_interval, i;

	  int mytimcnt = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
	  acc_fil.AXIS_X = 0;
 800204a:	4b32      	ldr	r3, [pc, #200]	@ (8002114 <main+0xd4>)
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
	  acc_fil.AXIS_Y = 0;
 8002052:	4b30      	ldr	r3, [pc, #192]	@ (8002114 <main+0xd4>)
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	605a      	str	r2, [r3, #4]
	  acc_fil.AXIS_Z = 0;
 800205a:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <main+0xd4>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
	  mag_fil.AXIS_X = 0;
 8002062:	4b2d      	ldr	r3, [pc, #180]	@ (8002118 <main+0xd8>)
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
	  mag_fil.AXIS_Y = 0;
 800206a:	4b2b      	ldr	r3, [pc, #172]	@ (8002118 <main+0xd8>)
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
	  mag_fil.AXIS_Z = 0;
 8002072:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <main+0xd8>)
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
	  gyro_fil.AXIS_X = 0;
 800207a:	4b28      	ldr	r3, [pc, #160]	@ (800211c <main+0xdc>)
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
	  gyro_fil.AXIS_Y = 0;
 8002082:	4b26      	ldr	r3, [pc, #152]	@ (800211c <main+0xdc>)
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
	  gyro_fil.AXIS_Z = 0;
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <main+0xdc>)
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
	  euler_rc_fil.thx = 0;
 8002092:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <main+0xe0>)
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
	  euler_rc_fil.thy = 0;
 800209a:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <main+0xe0>)
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	605a      	str	r2, [r3, #4]
	  euler_rc_fil.thz = 0;
 80020a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <main+0xe0>)
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
	  acc_off_calc.AXIS_X = 0;
 80020aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <main+0xe4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
	  acc_off_calc.AXIS_Y = 0;
 80020b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <main+0xe4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
	  acc_off_calc.AXIS_Z = 0;
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <main+0xe4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
	  gyro_off_calc.AXIS_X = 0;
 80020bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <main+0xe8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
	  gyro_off_calc.AXIS_Y = 0;
 80020c2:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <main+0xe8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
	  gyro_off_calc.AXIS_Z = 0;
 80020c8:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <main+0xe8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
	  acc_offset.AXIS_X = 0;
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <main+0xec>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
	  acc_offset.AXIS_Y = 0;
 80020d4:	4b15      	ldr	r3, [pc, #84]	@ (800212c <main+0xec>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
	  acc_offset.AXIS_Z = 1000;
 80020da:	4b14      	ldr	r3, [pc, #80]	@ (800212c <main+0xec>)
 80020dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020e0:	609a      	str	r2, [r3, #8]
	  gyro_offset.AXIS_X = 0;
 80020e2:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <main+0xf0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
	  gyro_offset.AXIS_Y = 0;
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <main+0xf0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]
	  gyro_offset.AXIS_Z = 0;
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <main+0xf0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
	  euler_rc.thz = euler_ahrs.thz;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002134 <main+0xf4>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002138 <main+0xf8>)
 80020fa:	6093      	str	r3, [r2, #8]
	  euler_ahrs_offset.thx = 0;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <main+0xfc>)
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
	  euler_ahrs_offset.thy = 0;
 8002104:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <main+0xfc>)
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	605a      	str	r2, [r3, #4]

	  for(i=0;i<4;i++)
 800210c:	2300      	movs	r3, #0
 800210e:	81fb      	strh	r3, [r7, #14]
 8002110:	e0ee      	b.n	80022f0 <main+0x2b0>
 8002112:	bf00      	nop
 8002114:	20000574 	.word	0x20000574
 8002118:	20000754 	.word	0x20000754
 800211c:	20000664 	.word	0x20000664
 8002120:	200004d8 	.word	0x200004d8
 8002124:	20000760 	.word	0x20000760
 8002128:	2000076c 	.word	0x2000076c
 800212c:	20000778 	.word	0x20000778
 8002130:	20000784 	.word	0x20000784
 8002134:	200004cc 	.word	0x200004cc
 8002138:	200004c0 	.word	0x200004c0
 800213c:	20000790 	.word	0x20000790
	  {
	    acc_y_pre[i].AXIS_X = 0;
 8002140:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002144:	49d3      	ldr	r1, [pc, #844]	@ (8002494 <main+0x454>)
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
	    acc_y_pre[i].AXIS_Y = 0;
 8002156:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800215a:	49ce      	ldr	r1, [pc, #824]	@ (8002494 <main+0x454>)
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3304      	adds	r3, #4
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
	    acc_y_pre[i].AXIS_Z = 0;
 800216e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002172:	49c8      	ldr	r1, [pc, #800]	@ (8002494 <main+0x454>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3308      	adds	r3, #8
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
	    acc_x_pre[i].AXIS_X = 0;
 8002186:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800218a:	49c3      	ldr	r1, [pc, #780]	@ (8002498 <main+0x458>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
	    acc_x_pre[i].AXIS_Y = 0;
 800219c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021a0:	49bd      	ldr	r1, [pc, #756]	@ (8002498 <main+0x458>)
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	3304      	adds	r3, #4
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
	    acc_x_pre[i].AXIS_Z = 0;
 80021b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021b8:	49b7      	ldr	r1, [pc, #732]	@ (8002498 <main+0x458>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3308      	adds	r3, #8
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
	    gyro_y_pre[i].AXIS_X = 0;
 80021cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021d0:	49b2      	ldr	r1, [pc, #712]	@ (800249c <main+0x45c>)
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
	    gyro_y_pre[i].AXIS_Y = 0;
 80021e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021e6:	49ad      	ldr	r1, [pc, #692]	@ (800249c <main+0x45c>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3304      	adds	r3, #4
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
	    gyro_y_pre[i].AXIS_Z = 0;
 80021fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021fe:	49a7      	ldr	r1, [pc, #668]	@ (800249c <main+0x45c>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	3308      	adds	r3, #8
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
	    gyro_x_pre[i].AXIS_X = 0;
 8002212:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002216:	49a2      	ldr	r1, [pc, #648]	@ (80024a0 <main+0x460>)
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
	    gyro_x_pre[i].AXIS_Y = 0;
 8002228:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800222c:	499c      	ldr	r1, [pc, #624]	@ (80024a0 <main+0x460>)
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	3304      	adds	r3, #4
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
	    gyro_x_pre[i].AXIS_Z = 0;
 8002240:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002244:	4996      	ldr	r1, [pc, #600]	@ (80024a0 <main+0x460>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	3308      	adds	r3, #8
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
	    euler_rc_y_pre[i].thx = 0;
 8002258:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800225c:	4991      	ldr	r1, [pc, #580]	@ (80024a4 <main+0x464>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
	    euler_rc_y_pre[i].thy = 0;
 800226e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002272:	498c      	ldr	r1, [pc, #560]	@ (80024a4 <main+0x464>)
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3304      	adds	r3, #4
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
	    euler_rc_y_pre[i].thz = 0;
 8002286:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800228a:	4986      	ldr	r1, [pc, #536]	@ (80024a4 <main+0x464>)
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	3308      	adds	r3, #8
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
	    euler_rc_x_pre[i].thx = 0;
 800229e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022a2:	4981      	ldr	r1, [pc, #516]	@ (80024a8 <main+0x468>)
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
	    euler_rc_x_pre[i].thy = 0;
 80022b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022b8:	497b      	ldr	r1, [pc, #492]	@ (80024a8 <main+0x468>)
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3304      	adds	r3, #4
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
	    euler_rc_x_pre[i].thz = 0;
 80022cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022d0:	4975      	ldr	r1, [pc, #468]	@ (80024a8 <main+0x468>)
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3308      	adds	r3, #8
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
	  for(i=0;i<4;i++)
 80022e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	81fb      	strh	r3, [r7, #14]
 80022f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	f77f af23 	ble.w	8002140 <main+0x100>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022fa:	f006 fffb 	bl	80092f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  if (BSP_SPI2_Init()!=BSP_ERROR_NONE)
 80022fe:	f7ff f8d3 	bl	80014a8 <BSP_SPI2_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <main+0x2cc>
 	  Error_Handler();
 8002308:	f001 ff74 	bl	80041f4 <Error_Handler>
  // if (HCI_TL_SPI_Init(NULL)!=BSP_ERROR_NONE)
  // 	  Error_Handler();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230c:	f000 fbae 	bl	8002a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002310:	f000 fe5a 	bl	8002fc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002314:	f000 fc16 	bl	8002b44 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002318:	f000 fc66 	bl	8002be8 <MX_I2C2_Init>
  MX_TIM2_Init();
 800231c:	f000 fcc8 	bl	8002cb0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002320:	f000 fe28 	bl	8002f74 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002324:	f000 fd54 	bl	8002dd0 <MX_TIM4_Init>
  MX_TIM9_Init();
 8002328:	f000 fdea 	bl	8002f00 <MX_TIM9_Init>
  MX_SPI1_Init();
 800232c:	f000 fc8a 	bl	8002c44 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */



  PRINTF("STEVAL-FCU001V2 FW rev.1.0 - May 2021\r\n\r\n");
 8002330:	485e      	ldr	r0, [pc, #376]	@ (80024ac <main+0x46c>)
 8002332:	f7ff fa15 	bl	8001760 <myprintf>

 //  Initialize Onboard LED
  BSP_LED_Init(LED1);
 8002336:	2000      	movs	r0, #0
 8002338:	f001 fc00 	bl	8003b3c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800233c:	2001      	movs	r0, #1
 800233e:	f001 fbfd 	bl	8003b3c <BSP_LED_Init>
  BSP_LED_Off(LED1);
 8002342:	2000      	movs	r0, #0
 8002344:	f001 fc5a 	bl	8003bfc <BSP_LED_Off>
  BSP_LED_Off(LED2);
 8002348:	2001      	movs	r0, #1
 800234a:	f001 fc57 	bl	8003bfc <BSP_LED_Off>

  // initialize All Sensors
  CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSR_0, MOTION_GYRO | MOTION_ACCELERO);
 800234e:	2103      	movs	r1, #3
 8002350:	2000      	movs	r0, #0
 8002352:	f00d fb83 	bl	800fa5c <CUSTOM_MOTION_SENSOR_Init>
  CUSTOM_ENV_SENSOR_Init(CUSTOM_LPS22HH_0,ENV_PRESSURE | ENV_TEMPERATURE);
 8002356:	2103      	movs	r1, #3
 8002358:	2000      	movs	r0, #0
 800235a:	f00d f919 	bl	800f590 <CUSTOM_ENV_SENSOR_Init>

  // Enable All Sensors
  CUSTOM_MOTION_SENSOR_Enable(CUSTOM_LSM6DSR_0, MOTION_GYRO | MOTION_ACCELERO);
 800235e:	2103      	movs	r1, #3
 8002360:	2000      	movs	r0, #0
 8002362:	f00d fc03 	bl	800fb6c <CUSTOM_MOTION_SENSOR_Enable>
  CUSTOM_ENV_SENSOR_Enable(CUSTOM_LPS22HH_0,ENV_PRESSURE | ENV_TEMPERATURE);
 8002366:	2103      	movs	r1, #3
 8002368:	2000      	movs	r0, #0
 800236a:	f00d f999 	bl	800f6a0 <CUSTOM_ENV_SENSOR_Enable>

  /* Initialize settings for 6-axis MEMS Accelerometer */
   /* ODR 6.6kHz */
   /* FS 4g */
  CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_LSM6DSR_0,MOTION_ACCELERO,6660.0f);
 800236e:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 80024b0 <main+0x470>
 8002372:	2102      	movs	r1, #2
 8002374:	2000      	movs	r0, #0
 8002376:	f00d fc7f 	bl	800fc78 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
  CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_LSM6DSR_0,MOTION_ACCELERO,4);
 800237a:	2204      	movs	r2, #4
 800237c:	2102      	movs	r1, #2
 800237e:	2000      	movs	r0, #0
 8002380:	f00d fcc0 	bl	800fd04 <CUSTOM_MOTION_SENSOR_SetFullScale>
   /* ODR/2 low pass filtered sent to composite filter */
   /* Low pass filter enabled @ ODR/400 */
  // LSM6DSL_ACC_GYRO_IN_ODR_DIV_2      = 0x00,
  // LSM6DSL_ACC_GYRO_LPF2_XL_ENABLE      = 0x80,
  // LSM6DSL_ACC_GYRO_HPCF_XL_DIV400      = 0x60
  CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSR_0, LSM6DSR_CTRL8_XL, 0x80 | 0x60 | 0x00);
 8002384:	22e0      	movs	r2, #224	@ 0xe0
 8002386:	2117      	movs	r1, #23
 8002388:	2000      	movs	r0, #0
 800238a:	f00d fe81 	bl	8010090 <CUSTOM_MOTION_SENSOR_Write_Register>
  CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSR_0,0x10, (uint8_t) tmp_6axis_reg_value);
  */

  /* Initialize settings for 6-axis MEMS Gyroscope */
  /* Gyroscope settings: full scale 2000dps, ODR 416Hz */
  CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSR_0,LSM6DSR_CTRL2_G, 0x6C);
 800238e:	226c      	movs	r2, #108	@ 0x6c
 8002390:	2111      	movs	r1, #17
 8002392:	2000      	movs	r0, #0
 8002394:	f00d fe7c 	bl	8010090 <CUSTOM_MOTION_SENSOR_Write_Register>

  /* LPF1 FTYPE set to 10b */
  uint8_t tmp_LPF1;
  CUSTOM_MOTION_SENSOR_Read_Register(CUSTOM_LSM6DSR_0,LSM6DSR_CTRL6_C, &tmp_LPF1);
 8002398:	1d7b      	adds	r3, r7, #5
 800239a:	461a      	mov	r2, r3
 800239c:	2115      	movs	r1, #21
 800239e:	2000      	movs	r0, #0
 80023a0:	f00d fe4e 	bl	8010040 <CUSTOM_MOTION_SENSOR_Read_Register>
  CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSR_0,LSM6DSR_CTRL6_C, tmp_LPF1 & 0xFA);
 80023a4:	797b      	ldrb	r3, [r7, #5]
 80023a6:	f023 0305 	bic.w	r3, r3, #5
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	2115      	movs	r1, #21
 80023b0:	2000      	movs	r0, #0
 80023b2:	f00d fe6d 	bl	8010090 <CUSTOM_MOTION_SENSOR_Write_Register>

  /* Initialize Remote control*/
  init_remote_control();
 80023b6:	f002 f89b 	bl	80044f0 <init_remote_control>

  /* Initialize TIM2 for External Remocon RF receiver PWM Input*/
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 80023ba:	2100      	movs	r1, #0
 80023bc:	483d      	ldr	r0, [pc, #244]	@ (80024b4 <main+0x474>)
 80023be:	f009 ffa9 	bl	800c314 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 80023c2:	2104      	movs	r1, #4
 80023c4:	483b      	ldr	r0, [pc, #236]	@ (80024b4 <main+0x474>)
 80023c6:	f009 ffa5 	bl	800c314 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_3);
 80023ca:	2108      	movs	r1, #8
 80023cc:	4839      	ldr	r0, [pc, #228]	@ (80024b4 <main+0x474>)
 80023ce:	f009 ffa1 	bl	800c314 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_4);
 80023d2:	210c      	movs	r1, #12
 80023d4:	4837      	ldr	r0, [pc, #220]	@ (80024b4 <main+0x474>)
 80023d6:	f009 ff9d 	bl	800c314 <HAL_TIM_IC_Start_IT>

  /* Initialize TIM4 for Motors PWM Output*/
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80023da:	2100      	movs	r1, #0
 80023dc:	4836      	ldr	r0, [pc, #216]	@ (80024b8 <main+0x478>)
 80023de:	f009 fe8f 	bl	800c100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80023e2:	2104      	movs	r1, #4
 80023e4:	4834      	ldr	r0, [pc, #208]	@ (80024b8 <main+0x478>)
 80023e6:	f009 fe8b 	bl	800c100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80023ea:	2108      	movs	r1, #8
 80023ec:	4832      	ldr	r0, [pc, #200]	@ (80024b8 <main+0x478>)
 80023ee:	f009 fe87 	bl	800c100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80023f2:	210c      	movs	r1, #12
 80023f4:	4830      	ldr	r0, [pc, #192]	@ (80024b8 <main+0x478>)
 80023f6:	f009 fe83 	bl	800c100 <HAL_TIM_PWM_Start>

  /* Initialize General purpose TIM9 50Hz*/
  HAL_TIM_Base_Start_IT(&htim9);
 80023fa:	4830      	ldr	r0, [pc, #192]	@ (80024bc <main+0x47c>)
 80023fc:	f009 fdc4 	bl	800bf88 <HAL_TIM_Base_Start_IT>

  /* Initialize PID and set Motor PWM to zero */
  PIDControlInit(&pid);
 8002400:	482f      	ldr	r0, [pc, #188]	@ (80024c0 <main+0x480>)
 8002402:	f7ff f9e3 	bl	80017cc <PIDControlInit>
  set_motor_pwm_zero(&motor_pwm);
 8002406:	482f      	ldr	r0, [pc, #188]	@ (80024c4 <main+0x484>)
 8002408:	f001 ffa6 	bl	8004358 <set_motor_pwm_zero>

  /* Setup a timer with 1ms interval */
  pid_interval = (int16_t)(PID_SAMPLING_TIME*1000.0f);
 800240c:	2301      	movs	r3, #1
 800240e:	80fb      	strh	r3, [r7, #6]
  SetupTimer(&tim, pid_interval);
 8002410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002414:	4619      	mov	r1, r3
 8002416:	482c      	ldr	r0, [pc, #176]	@ (80024c8 <main+0x488>)
 8002418:	f004 f884 	bl	8006524 <SetupTimer>

  /* Start timer */
  StartTimer(&tim);
 800241c:	482a      	ldr	r0, [pc, #168]	@ (80024c8 <main+0x488>)
 800241e:	f004 f898 	bl	8006552 <StartTimer>
  ch = 0;
 8002422:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <main+0x48c>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
  ch_flag = 0;
 8002428:	4b29      	ldr	r3, [pc, #164]	@ (80024d0 <main+0x490>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]


  /* BLE communication */
  PRINTF("BLE communication initialization...\n\n");
 800242e:	4829      	ldr	r0, [pc, #164]	@ (80024d4 <main+0x494>)
 8002430:	f7ff f996 	bl	8001760 <myprintf>
  BlueNRG_Init();
 8002434:	f001 fc16 	bl	8003c64 <BlueNRG_Init>
  /* Initialize the BlueNRG Custom services */
  PRINTF("BLE services initialization...\r\n");
 8002438:	4827      	ldr	r0, [pc, #156]	@ (80024d8 <main+0x498>)
 800243a:	f7ff f991 	bl	8001760 <myprintf>
  Init_BlueNRG_Custom_Services();
 800243e:	f001 fd53 	bl	8003ee8 <Init_BlueNRG_Custom_Services>

  CUSTOM_ENV_SENSOR_GetValue(CUSTOM_LPS22HH_0,ENV_PRESSURE,&press_zero_level);
 8002442:	4a26      	ldr	r2, [pc, #152]	@ (80024dc <main+0x49c>)
 8002444:	2102      	movs	r1, #2
 8002446:	2000      	movs	r0, #0
 8002448:	f00d f96c 	bl	800f724 <CUSTOM_ENV_SENSOR_GetValue>
  CUSTOM_ENV_SENSOR_GetValue(CUSTOM_LPS22HH_0,ENV_TEMPERATURE,&temperature);
 800244c:	4a24      	ldr	r2, [pc, #144]	@ (80024e0 <main+0x4a0>)
 800244e:	2101      	movs	r1, #1
 8002450:	2000      	movs	r0, #0
 8002452:	f00d f967 	bl	800f724 <CUSTOM_ENV_SENSOR_GetValue>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (HCI_ProcessEvent) {
 8002456:	4b23      	ldr	r3, [pc, #140]	@ (80024e4 <main+0x4a4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <main+0x428>
			HCI_ProcessEvent = 0;
 800245e:	4b21      	ldr	r3, [pc, #132]	@ (80024e4 <main+0x4a4>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
			HCI_Process();
 8002464:	f00c fbf2 	bl	800ec4c <HCI_Process>
		}

		if (set_connectable) {
 8002468:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <main+0x4a8>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <main+0x43a>
			 //Now update the BLE advertize data and make the Board connectable
			setConnectable();
 8002470:	f002 ffb4 	bl	80053dc <setConnectable>
			set_connectable = FALSE;
 8002474:	4b1c      	ldr	r3, [pc, #112]	@ (80024e8 <main+0x4a8>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
		}

		if (tim9_event_flag == 1) {     // Timer9 event: frequency 800Hz
 800247a:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <main+0x4ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	f040 8285 	bne.w	800298e <main+0x94e>
			tim9_event_flag = 0;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <main+0x4ac>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

			count1++;
 800248a:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <main+0x4b0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	e030      	b.n	80024f4 <main+0x4b4>
 8002492:	bf00      	nop
 8002494:	20000580 	.word	0x20000580
 8002498:	200005b0 	.word	0x200005b0
 800249c:	20000670 	.word	0x20000670
 80024a0:	200006a0 	.word	0x200006a0
 80024a4:	200004e4 	.word	0x200004e4
 80024a8:	20000514 	.word	0x20000514
 80024ac:	080115e0 	.word	0x080115e0
 80024b0:	45d02000 	.word	0x45d02000
 80024b4:	200002f8 	.word	0x200002f8
 80024b8:	20000340 	.word	0x20000340
 80024bc:	20000388 	.word	0x20000388
 80024c0:	20000450 	.word	0x20000450
 80024c4:	200007b8 	.word	0x200007b8
 80024c8:	20000a28 	.word	0x20000a28
 80024cc:	20000434 	.word	0x20000434
 80024d0:	20000435 	.word	0x20000435
 80024d4:	0801160c 	.word	0x0801160c
 80024d8:	08011634 	.word	0x08011634
 80024dc:	200007f0 	.word	0x200007f0
 80024e0:	200007f4 	.word	0x200007f4
 80024e4:	20000414 	.word	0x20000414
 80024e8:	20000024 	.word	0x20000024
 80024ec:	20000438 	.word	0x20000438
 80024f0:	200007c8 	.word	0x200007c8
 80024f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002530 <main+0x4f0>)
 80024f6:	6013      	str	r3, [r2, #0]

			acc_ahrs.AXIS_X = 0;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <main+0x4f4>)
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
			acc_ahrs.AXIS_Y = 0;
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <main+0x4f4>)
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
			acc_ahrs.AXIS_Z = 0;
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <main+0x4f4>)
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
			gyro_ahrs.AXIS_X = 0;
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <main+0x4f8>)
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
			gyro_ahrs.AXIS_Y = 0;
 8002518:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <main+0x4f8>)
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
			gyro_ahrs.AXIS_Z = 0;
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <main+0x4f8>)
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	609a      	str	r2, [r3, #8]

			for (i = 0; i < FIFO_Order; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	81fb      	strh	r3, [r7, #14]
 800252c:	e07c      	b.n	8002628 <main+0x5e8>
 800252e:	bf00      	nop
 8002530:	200007c8 	.word	0x200007c8
 8002534:	20000658 	.word	0x20000658
 8002538:	20000748 	.word	0x20000748
				acc_ahrs.AXIS_X += acc_ahrs_FIFO[i].AXIS_X;
 800253c:	4bbc      	ldr	r3, [pc, #752]	@ (8002830 <main+0x7f0>)
 800253e:	ed93 7a00 	vldr	s14, [r3]
 8002542:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002546:	49bb      	ldr	r1, [pc, #748]	@ (8002834 <main+0x7f4>)
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255a:	4bb5      	ldr	r3, [pc, #724]	@ (8002830 <main+0x7f0>)
 800255c:	edc3 7a00 	vstr	s15, [r3]
				acc_ahrs.AXIS_Y += acc_ahrs_FIFO[i].AXIS_Y;
 8002560:	4bb3      	ldr	r3, [pc, #716]	@ (8002830 <main+0x7f0>)
 8002562:	ed93 7a01 	vldr	s14, [r3, #4]
 8002566:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800256a:	49b2      	ldr	r1, [pc, #712]	@ (8002834 <main+0x7f4>)
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3304      	adds	r3, #4
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	4bab      	ldr	r3, [pc, #684]	@ (8002830 <main+0x7f0>)
 8002582:	edc3 7a01 	vstr	s15, [r3, #4]
				acc_ahrs.AXIS_Z += acc_ahrs_FIFO[i].AXIS_Z;
 8002586:	4baa      	ldr	r3, [pc, #680]	@ (8002830 <main+0x7f0>)
 8002588:	ed93 7a02 	vldr	s14, [r3, #8]
 800258c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002590:	49a8      	ldr	r1, [pc, #672]	@ (8002834 <main+0x7f4>)
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	3308      	adds	r3, #8
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a6:	4ba2      	ldr	r3, [pc, #648]	@ (8002830 <main+0x7f0>)
 80025a8:	edc3 7a02 	vstr	s15, [r3, #8]
				gyro_ahrs.AXIS_X += gyro_ahrs_FIFO[i].AXIS_X;
 80025ac:	4ba2      	ldr	r3, [pc, #648]	@ (8002838 <main+0x7f8>)
 80025ae:	ed93 7a00 	vldr	s14, [r3]
 80025b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80025b6:	49a1      	ldr	r1, [pc, #644]	@ (800283c <main+0x7fc>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	4b9b      	ldr	r3, [pc, #620]	@ (8002838 <main+0x7f8>)
 80025cc:	edc3 7a00 	vstr	s15, [r3]
				gyro_ahrs.AXIS_Y += gyro_ahrs_FIFO[i].AXIS_Y;
 80025d0:	4b99      	ldr	r3, [pc, #612]	@ (8002838 <main+0x7f8>)
 80025d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80025d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80025da:	4998      	ldr	r1, [pc, #608]	@ (800283c <main+0x7fc>)
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3304      	adds	r3, #4
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f0:	4b91      	ldr	r3, [pc, #580]	@ (8002838 <main+0x7f8>)
 80025f2:	edc3 7a01 	vstr	s15, [r3, #4]
				gyro_ahrs.AXIS_Z += gyro_ahrs_FIFO[i].AXIS_Z;
 80025f6:	4b90      	ldr	r3, [pc, #576]	@ (8002838 <main+0x7f8>)
 80025f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80025fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002600:	498e      	ldr	r1, [pc, #568]	@ (800283c <main+0x7fc>)
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3308      	adds	r3, #8
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002616:	4b88      	ldr	r3, [pc, #544]	@ (8002838 <main+0x7f8>)
 8002618:	edc3 7a02 	vstr	s15, [r3, #8]
			for (i = 0; i < FIFO_Order; i++) {
 800261c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002620:	b29b      	uxth	r3, r3
 8002622:	3301      	adds	r3, #1
 8002624:	b29b      	uxth	r3, r3
 8002626:	81fb      	strh	r3, [r7, #14]
 8002628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800262c:	2b04      	cmp	r3, #4
 800262e:	dd85      	ble.n	800253c <main+0x4fc>
			}

			acc_ahrs.AXIS_X *= FIFO_Order_Recip;
 8002630:	4b7f      	ldr	r3, [pc, #508]	@ (8002830 <main+0x7f0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd ff87 	bl	8000548 <__aeabi_f2d>
 800263a:	a37b      	add	r3, pc, #492	@ (adr r3, 8002828 <main+0x7e8>)
 800263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002640:	f7fd ffda 	bl	80005f8 <__aeabi_dmul>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f7fe fa84 	bl	8000b58 <__aeabi_d2f>
 8002650:	4603      	mov	r3, r0
 8002652:	4a77      	ldr	r2, [pc, #476]	@ (8002830 <main+0x7f0>)
 8002654:	6013      	str	r3, [r2, #0]
			acc_ahrs.AXIS_Y *= FIFO_Order_Recip;
 8002656:	4b76      	ldr	r3, [pc, #472]	@ (8002830 <main+0x7f0>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff74 	bl	8000548 <__aeabi_f2d>
 8002660:	a371      	add	r3, pc, #452	@ (adr r3, 8002828 <main+0x7e8>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	f7fd ffc7 	bl	80005f8 <__aeabi_dmul>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fa71 	bl	8000b58 <__aeabi_d2f>
 8002676:	4603      	mov	r3, r0
 8002678:	4a6d      	ldr	r2, [pc, #436]	@ (8002830 <main+0x7f0>)
 800267a:	6053      	str	r3, [r2, #4]
			acc_ahrs.AXIS_Z *= FIFO_Order_Recip;
 800267c:	4b6c      	ldr	r3, [pc, #432]	@ (8002830 <main+0x7f0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd ff61 	bl	8000548 <__aeabi_f2d>
 8002686:	a368      	add	r3, pc, #416	@ (adr r3, 8002828 <main+0x7e8>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fd ffb4 	bl	80005f8 <__aeabi_dmul>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	f7fe fa5e 	bl	8000b58 <__aeabi_d2f>
 800269c:	4603      	mov	r3, r0
 800269e:	4a64      	ldr	r2, [pc, #400]	@ (8002830 <main+0x7f0>)
 80026a0:	6093      	str	r3, [r2, #8]
			gyro_ahrs.AXIS_X *= FIFO_Order_Recip;
 80026a2:	4b65      	ldr	r3, [pc, #404]	@ (8002838 <main+0x7f8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff4e 	bl	8000548 <__aeabi_f2d>
 80026ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8002828 <main+0x7e8>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd ffa1 	bl	80005f8 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa4b 	bl	8000b58 <__aeabi_d2f>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002838 <main+0x7f8>)
 80026c6:	6013      	str	r3, [r2, #0]
			gyro_ahrs.AXIS_Y *= FIFO_Order_Recip;
 80026c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <main+0x7f8>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff3b 	bl	8000548 <__aeabi_f2d>
 80026d2:	a355      	add	r3, pc, #340	@ (adr r3, 8002828 <main+0x7e8>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fd ff8e 	bl	80005f8 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe fa38 	bl	8000b58 <__aeabi_d2f>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a53      	ldr	r2, [pc, #332]	@ (8002838 <main+0x7f8>)
 80026ec:	6053      	str	r3, [r2, #4]
			gyro_ahrs.AXIS_Z *= FIFO_Order_Recip;
 80026ee:	4b52      	ldr	r3, [pc, #328]	@ (8002838 <main+0x7f8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd ff28 	bl	8000548 <__aeabi_f2d>
 80026f8:	a34b      	add	r3, pc, #300	@ (adr r3, 8002828 <main+0x7e8>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ff7b 	bl	80005f8 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa25 	bl	8000b58 <__aeabi_d2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4a49      	ldr	r2, [pc, #292]	@ (8002838 <main+0x7f8>)
 8002712:	6093      	str	r3, [r2, #8]

			acc_fil_int.AXIS_X = (int32_t) acc_ahrs.AXIS_X;
 8002714:	4b46      	ldr	r3, [pc, #280]	@ (8002830 <main+0x7f0>)
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271e:	ee17 2a90 	vmov	r2, s15
 8002722:	4b47      	ldr	r3, [pc, #284]	@ (8002840 <main+0x800>)
 8002724:	601a      	str	r2, [r3, #0]
			acc_fil_int.AXIS_Y = (int32_t) acc_ahrs.AXIS_Y;
 8002726:	4b42      	ldr	r3, [pc, #264]	@ (8002830 <main+0x7f0>)
 8002728:	edd3 7a01 	vldr	s15, [r3, #4]
 800272c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002730:	ee17 2a90 	vmov	r2, s15
 8002734:	4b42      	ldr	r3, [pc, #264]	@ (8002840 <main+0x800>)
 8002736:	605a      	str	r2, [r3, #4]
			acc_fil_int.AXIS_Z = (int32_t) acc_ahrs.AXIS_Z;
 8002738:	4b3d      	ldr	r3, [pc, #244]	@ (8002830 <main+0x7f0>)
 800273a:	edd3 7a02 	vldr	s15, [r3, #8]
 800273e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002742:	ee17 2a90 	vmov	r2, s15
 8002746:	4b3e      	ldr	r3, [pc, #248]	@ (8002840 <main+0x800>)
 8002748:	609a      	str	r2, [r3, #8]
			gyro_fil_int.AXIS_X = (int32_t) gyro_ahrs.AXIS_X;
 800274a:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <main+0x7f8>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002754:	ee17 2a90 	vmov	r2, s15
 8002758:	4b3a      	ldr	r3, [pc, #232]	@ (8002844 <main+0x804>)
 800275a:	601a      	str	r2, [r3, #0]
			gyro_fil_int.AXIS_Y = (int32_t) gyro_ahrs.AXIS_Y;
 800275c:	4b36      	ldr	r3, [pc, #216]	@ (8002838 <main+0x7f8>)
 800275e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002766:	ee17 2a90 	vmov	r2, s15
 800276a:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <main+0x804>)
 800276c:	605a      	str	r2, [r3, #4]
			gyro_fil_int.AXIS_Z = (int32_t) gyro_ahrs.AXIS_Z;
 800276e:	4b32      	ldr	r3, [pc, #200]	@ (8002838 <main+0x7f8>)
 8002770:	edd3 7a02 	vldr	s15, [r3, #8]
 8002774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002778:	ee17 2a90 	vmov	r2, s15
 800277c:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <main+0x804>)
 800277e:	609a      	str	r2, [r3, #8]

			//PRINTF("%f %f %f %f\n", acc_ahrs.AXIS_X, acc_ahrs.AXIS_Y, gyro_ahrs.AXIS_X, gyro_ahrs.AXIS_Y);

			// AHRS update, quaternion & true gyro data are stored in ahrs
			ahrs_fusion_ag(&acc_ahrs, &gyro_ahrs, &ahrs);
 8002780:	4a31      	ldr	r2, [pc, #196]	@ (8002848 <main+0x808>)
 8002782:	492d      	ldr	r1, [pc, #180]	@ (8002838 <main+0x7f8>)
 8002784:	482a      	ldr	r0, [pc, #168]	@ (8002830 <main+0x7f0>)
 8002786:	f7fe fbcd 	bl	8000f24 <ahrs_fusion_ag>

			// Calculate euler angle drone
			QuaternionToEuler(&ahrs.q, &euler_ahrs);
 800278a:	4930      	ldr	r1, [pc, #192]	@ (800284c <main+0x80c>)
 800278c:	482e      	ldr	r0, [pc, #184]	@ (8002848 <main+0x808>)
 800278e:	f001 fdfd 	bl	800438c <QuaternionToEuler>

			//          gRUD = (joydata[3]-128)*(-13);
			//          gTHR = joydata[4]*13;
			//          gAIL = (joydata[5]-128)*(-13);
			//          gELE = (joydata[6]-128)*13;
			gRUD = (joydata[2] - 128) * (-13);
 8002792:	4b2f      	ldr	r3, [pc, #188]	@ (8002850 <main+0x810>)
 8002794:	789b      	ldrb	r3, [r3, #2]
 8002796:	3b80      	subs	r3, #128	@ 0x80
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	0312      	lsls	r2, r2, #12
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	00d2      	lsls	r2, r2, #3
 80027a2:	441a      	add	r2, r3
 80027a4:	0052      	lsls	r2, r2, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <main+0x814>)
 80027ae:	801a      	strh	r2, [r3, #0]
			gTHR = joydata[3] * 13;
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <main+0x810>)
 80027b2:	78db      	ldrb	r3, [r3, #3]
 80027b4:	461a      	mov	r2, r3
 80027b6:	0052      	lsls	r2, r2, #1
 80027b8:	441a      	add	r2, r3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4413      	add	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <main+0x818>)
 80027c4:	801a      	strh	r2, [r3, #0]
			gAIL = (joydata[4] - 128) * (-13);
 80027c6:	4b22      	ldr	r3, [pc, #136]	@ (8002850 <main+0x810>)
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	3b80      	subs	r3, #128	@ 0x80
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	0312      	lsls	r2, r2, #12
 80027d2:	1ad2      	subs	r2, r2, r3
 80027d4:	00d2      	lsls	r2, r2, #3
 80027d6:	441a      	add	r2, r3
 80027d8:	0052      	lsls	r2, r2, #1
 80027da:	4413      	add	r3, r2
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b21a      	sxth	r2, r3
 80027e0:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <main+0x81c>)
 80027e2:	801a      	strh	r2, [r3, #0]
			gELE = (joydata[5] - 128) * 13;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <main+0x810>)
 80027e6:	795b      	ldrb	r3, [r3, #5]
 80027e8:	3b80      	subs	r3, #128	@ 0x80
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	0052      	lsls	r2, r2, #1
 80027f0:	441a      	add	r2, r3
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b21a      	sxth	r2, r3
 80027fa:	4b19      	ldr	r3, [pc, #100]	@ (8002860 <main+0x820>)
 80027fc:	801a      	strh	r2, [r3, #0]
			/* joydata[6]: seek bar data*/
			/* joydata[7]: additional button data
			 first bit: Takeoff (0 = Land,  1 = Takeoff)
			 second bit: Calibration When it changes status is active
			 third bit: Arming (0 = Disarmed,  1 = Armed) */
			gJoystick_status = joydata[7];
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <main+0x810>)
 8002800:	79db      	ldrb	r3, [r3, #7]
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b17      	ldr	r3, [pc, #92]	@ (8002864 <main+0x824>)
 8002806:	801a      	strh	r2, [r3, #0]
			if ((gJoystick_status & 0x04) == 0x04) {
 8002808:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <main+0x824>)
 800280a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d02e      	beq.n	8002876 <main+0x836>
				rc_enable_motor = 1;
 8002818:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <main+0x828>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]
				fly_ready = 1;
 800281e:	4b13      	ldr	r3, [pc, #76]	@ (800286c <main+0x82c>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
				BSP_LED_On(LED2);
 8002824:	2001      	movs	r0, #1
 8002826:	e023      	b.n	8002870 <main+0x830>
 8002828:	9999999a 	.word	0x9999999a
 800282c:	3fc99999 	.word	0x3fc99999
 8002830:	20000658 	.word	0x20000658
 8002834:	200005e0 	.word	0x200005e0
 8002838:	20000748 	.word	0x20000748
 800283c:	200006d0 	.word	0x200006d0
 8002840:	2000055c 	.word	0x2000055c
 8002844:	20000568 	.word	0x20000568
 8002848:	200007d0 	.word	0x200007d0
 800284c:	200004cc 	.word	0x200004cc
 8002850:	20000418 	.word	0x20000418
 8002854:	20000956 	.word	0x20000956
 8002858:	20000954 	.word	0x20000954
 800285c:	20000950 	.word	0x20000950
 8002860:	20000952 	.word	0x20000952
 8002864:	20000420 	.word	0x20000420
 8002868:	20000428 	.word	0x20000428
 800286c:	20000430 	.word	0x20000430
 8002870:	f001 f9aa 	bl	8003bc8 <BSP_LED_On>
 8002874:	e005      	b.n	8002882 <main+0x842>
			} else {
				rc_enable_motor = 0;
 8002876:	4b69      	ldr	r3, [pc, #420]	@ (8002a1c <main+0x9dc>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
				fly_ready = 0;
 800287c:	4b68      	ldr	r3, [pc, #416]	@ (8002a20 <main+0x9e0>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
			}

			if (connected) {
 8002882:	4b68      	ldr	r3, [pc, #416]	@ (8002a24 <main+0x9e4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <main+0x85e>
				rc_connection_flag = 1; /* BLE Remocon connected flag for enabling motor output */
 800288a:	4b67      	ldr	r3, [pc, #412]	@ (8002a28 <main+0x9e8>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
				SendMotionData();
 8002890:	f001 fb68 	bl	8003f64 <SendMotionData>
				SendBattEnvData();
 8002894:	f001 fb8c 	bl	8003fb0 <SendBattEnvData>
				SendArmingData();
 8002898:	f001 fca0 	bl	80041dc <SendArmingData>
 800289c:	e011      	b.n	80028c2 <main+0x882>
			} else {
				rc_connection_flag = 0;
 800289e:	4b62      	ldr	r3, [pc, #392]	@ (8002a28 <main+0x9e8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
				gTHR = 0;
 80028a4:	4b61      	ldr	r3, [pc, #388]	@ (8002a2c <main+0x9ec>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	801a      	strh	r2, [r3, #0]
				rc_enable_motor = 0;
 80028aa:	4b5c      	ldr	r3, [pc, #368]	@ (8002a1c <main+0x9dc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
				fly_ready = 0;
 80028b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002a20 <main+0x9e0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
				BSP_LED_Off(LED1);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f001 f9a0 	bl	8003bfc <BSP_LED_Off>
				BSP_LED_Off(LED2);
 80028bc:	2001      	movs	r0, #1
 80028be:	f001 f99d 	bl	8003bfc <BSP_LED_Off>
			}

			if (joydata[7] & 0x02) {
 80028c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a30 <main+0x9f0>)
 80028c4:	79db      	ldrb	r3, [r3, #7]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <main+0x89a>
				rc_cal_flag = 1;
 80028ce:	4b59      	ldr	r3, [pc, #356]	@ (8002a34 <main+0x9f4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
				BSP_LED_On(LED1);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f001 f977 	bl	8003bc8 <BSP_LED_On>
	              BSP_LED_On(LED2);
	            }
#endif

			// Get target euler angle from remote control
			GetTargetEulerAngle(&euler_rc, &euler_ahrs);
 80028da:	4957      	ldr	r1, [pc, #348]	@ (8002a38 <main+0x9f8>)
 80028dc:	4857      	ldr	r0, [pc, #348]	@ (8002a3c <main+0x9fc>)
 80028de:	f001 fed1 	bl	8004684 <GetTargetEulerAngle>

			if (gTHR < MIN_THR) {
 80028e2:	4b52      	ldr	r3, [pc, #328]	@ (8002a2c <main+0x9ec>)
 80028e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80028ea:	dc07      	bgt.n	80028fc <main+0x8bc>
				euler_ahrs_offset.thx = 0;
 80028ec:	4b54      	ldr	r3, [pc, #336]	@ (8002a40 <main+0xa00>)
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
				euler_ahrs_offset.thy = 0;
 80028f4:	4b52      	ldr	r3, [pc, #328]	@ (8002a40 <main+0xa00>)
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	605a      	str	r2, [r3, #4]
			}

			Fly_origin.X_Degree = (int16_t) (euler_ahrs.thx * 5730);
 80028fc:	4b4e      	ldr	r3, [pc, #312]	@ (8002a38 <main+0x9f8>)
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002a44 <main+0xa04>
 8002906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800290e:	ee17 3a90 	vmov	r3, s15
 8002912:	b21a      	sxth	r2, r3
 8002914:	4b4c      	ldr	r3, [pc, #304]	@ (8002a48 <main+0xa08>)
 8002916:	801a      	strh	r2, [r3, #0]
			Fly_origin.Y_Degree = (int16_t) (euler_ahrs.thy * 5730);
 8002918:	4b47      	ldr	r3, [pc, #284]	@ (8002a38 <main+0x9f8>)
 800291a:	edd3 7a01 	vldr	s15, [r3, #4]
 800291e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8002a44 <main+0xa04>
 8002922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800292a:	ee17 3a90 	vmov	r3, s15
 800292e:	b21a      	sxth	r2, r3
 8002930:	4b45      	ldr	r3, [pc, #276]	@ (8002a48 <main+0xa08>)
 8002932:	805a      	strh	r2, [r3, #2]
			Fly_origin.Z_Degree = (int16_t) (euler_ahrs.thz * 5730);
 8002934:	4b40      	ldr	r3, [pc, #256]	@ (8002a38 <main+0x9f8>)
 8002936:	edd3 7a02 	vldr	s15, [r3, #8]
 800293a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002a44 <main+0xa04>
 800293e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002946:	ee17 3a90 	vmov	r3, s15
 800294a:	b21a      	sxth	r2, r3
 800294c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a48 <main+0xa08>)
 800294e:	809a      	strh	r2, [r3, #4]

			if (gTHR < MIN_THR) {
 8002950:	4b36      	ldr	r3, [pc, #216]	@ (8002a2c <main+0x9ec>)
 8002952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002956:	2bc7      	cmp	r3, #199	@ 0xc7
 8002958:	dc07      	bgt.n	800296a <main+0x92a>
				euler_rc.thz = 0;
 800295a:	4b38      	ldr	r3, [pc, #224]	@ (8002a3c <main+0x9fc>)
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
				euler_ahrs.thz = 0;
 8002962:	4b35      	ldr	r3, [pc, #212]	@ (8002a38 <main+0x9f8>)
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
			}

			euler_rc_fil.thx = euler_rc.thx;
 800296a:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <main+0x9fc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a37      	ldr	r2, [pc, #220]	@ (8002a4c <main+0xa0c>)
 8002970:	6013      	str	r3, [r2, #0]
			euler_rc_fil.thy = euler_rc.thy;
 8002972:	4b32      	ldr	r3, [pc, #200]	@ (8002a3c <main+0x9fc>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a35      	ldr	r2, [pc, #212]	@ (8002a4c <main+0xa0c>)
 8002978:	6053      	str	r3, [r2, #4]
			euler_rc_fil.thz = euler_rc.thz;
 800297a:	4b30      	ldr	r3, [pc, #192]	@ (8002a3c <main+0x9fc>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4a33      	ldr	r2, [pc, #204]	@ (8002a4c <main+0xa0c>)
 8002980:	6093      	str	r3, [r2, #8]

			FlightControlPID_OuterLoop(&euler_rc_fil, &euler_ahrs, &ahrs, &pid);
 8002982:	4b33      	ldr	r3, [pc, #204]	@ (8002a50 <main+0xa10>)
 8002984:	4a33      	ldr	r2, [pc, #204]	@ (8002a54 <main+0xa14>)
 8002986:	492c      	ldr	r1, [pc, #176]	@ (8002a38 <main+0x9f8>)
 8002988:	4830      	ldr	r0, [pc, #192]	@ (8002a4c <main+0xa0c>)
 800298a:	f7fe ff97 	bl	80018bc <FlightControlPID_OuterLoop>
			/* Magnetometer data on UART for debug*/
			//PRINTF("Magnetometer X = %d\tY = %d\tZ = %d\n\n", mag.AXIS_X, mag.AXIS_Y, mag.AXIS_Z);

		}

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET) {
 800298e:	2102      	movs	r1, #2
 8002990:	4831      	ldr	r0, [pc, #196]	@ (8002a58 <main+0xa18>)
 8002992:	f007 fd6f 	bl	800a474 <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <main+0x962>
			ch_flag = 1;
 800299c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <main+0xa1c>)
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
		}

		if (isTimerEventExist(&tim))    // Check if a timer event is present
 80029a2:	482f      	ldr	r0, [pc, #188]	@ (8002a60 <main+0xa20>)
 80029a4:	f003 fdf5 	bl	8006592 <isTimerEventExist>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f43f ad53 	beq.w	8002456 <main+0x416>
				{

			ClearTimer(&tim);           // Clear current event;
 80029b0:	482b      	ldr	r0, [pc, #172]	@ (8002a60 <main+0xa20>)
 80029b2:	f003 fde1 	bl	8006578 <ClearTimer>

			count2++;
 80029b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <main+0xa24>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	4a29      	ldr	r2, [pc, #164]	@ (8002a64 <main+0xa24>)
 80029be:	6013      	str	r3, [r2, #0]

			mytimcnt++;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
			if (rc_connection_flag && rc_enable_motor) {
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <main+0x9e8>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d014      	beq.n	80029f8 <main+0x9b8>
 80029ce:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <main+0x9dc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <main+0x9b8>
				if (mytimcnt % 50 == 0)
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4b23      	ldr	r3, [pc, #140]	@ (8002a68 <main+0xa28>)
 80029da:	fb83 1302 	smull	r1, r3, r3, r2
 80029de:	1119      	asrs	r1, r3, #4
 80029e0:	17d3      	asrs	r3, r2, #31
 80029e2:	1acb      	subs	r3, r1, r3
 80029e4:	2132      	movs	r1, #50	@ 0x32
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d114      	bne.n	8002a1a <main+0x9da>
					BSP_LED_On(LED2);
 80029f0:	2001      	movs	r0, #1
 80029f2:	f001 f8e9 	bl	8003bc8 <BSP_LED_On>
				if (mytimcnt % 50 == 0)
 80029f6:	e010      	b.n	8002a1a <main+0x9da>
			} else {
				if (mytimcnt % 50 == 0)
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <main+0xa28>)
 80029fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002a00:	1119      	asrs	r1, r3, #4
 8002a02:	17d3      	asrs	r3, r2, #31
 8002a04:	1acb      	subs	r3, r1, r3
 8002a06:	2132      	movs	r1, #50	@ 0x32
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f47f ad21 	bne.w	8002456 <main+0x416>
					BSP_LED_Toggle(LED2);
 8002a14:	2001      	movs	r0, #1
 8002a16:	f001 f90b 	bl	8003c30 <BSP_LED_Toggle>
		if (HCI_ProcessEvent) {
 8002a1a:	e51c      	b.n	8002456 <main+0x416>
 8002a1c:	20000428 	.word	0x20000428
 8002a20:	20000430 	.word	0x20000430
 8002a24:	200009a8 	.word	0x200009a8
 8002a28:	20000918 	.word	0x20000918
 8002a2c:	20000954 	.word	0x20000954
 8002a30:	20000418 	.word	0x20000418
 8002a34:	20000424 	.word	0x20000424
 8002a38:	200004cc 	.word	0x200004cc
 8002a3c:	200004c0 	.word	0x200004c0
 8002a40:	20000790 	.word	0x20000790
 8002a44:	45b31000 	.word	0x45b31000
 8002a48:	200007a4 	.word	0x200007a4
 8002a4c:	200004d8 	.word	0x200004d8
 8002a50:	20000450 	.word	0x20000450
 8002a54:	200007d0 	.word	0x200007d0
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	20000435 	.word	0x20000435
 8002a60:	20000a28 	.word	0x20000a28
 8002a64:	200007cc 	.word	0x200007cc
 8002a68:	51eb851f 	.word	0x51eb851f

08002a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b094      	sub	sp, #80	@ 0x50
 8002a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a72:	f107 0320 	add.w	r3, r7, #32
 8002a76:	2230      	movs	r2, #48	@ 0x30
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00d fb90 	bl	80101a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	4b29      	ldr	r3, [pc, #164]	@ (8002b3c <SystemClock_Config+0xd0>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	4a28      	ldr	r2, [pc, #160]	@ (8002b3c <SystemClock_Config+0xd0>)
 8002a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa0:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <SystemClock_Config+0xd0>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002aac:	2300      	movs	r3, #0
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	4b23      	ldr	r3, [pc, #140]	@ (8002b40 <SystemClock_Config+0xd4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ab8:	4a21      	ldr	r2, [pc, #132]	@ (8002b40 <SystemClock_Config+0xd4>)
 8002aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b40 <SystemClock_Config+0xd4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ad0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ae4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002aea:	2304      	movs	r3, #4
 8002aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002aee:	2307      	movs	r3, #7
 8002af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002af2:	f107 0320 	add.w	r3, r7, #32
 8002af6:	4618      	mov	r0, r3
 8002af8:	f007 fe64 	bl	800a7c4 <HAL_RCC_OscConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002b02:	f001 fb77 	bl	80041f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b06:	230f      	movs	r3, #15
 8002b08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f008 f8c6 	bl	800acb4 <HAL_RCC_ClockConfig>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002b2e:	f001 fb61 	bl	80041f4 <Error_Handler>
  }
}
 8002b32:	bf00      	nop
 8002b34:	3750      	adds	r7, #80	@ 0x50
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40007000 	.word	0x40007000

08002b44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b56:	4b21      	ldr	r3, [pc, #132]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b58:	4a21      	ldr	r2, [pc, #132]	@ (8002be0 <MX_ADC1_Init+0x9c>)
 8002b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b64:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b70:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b76:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b7e:	4b17      	ldr	r3, [pc, #92]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b84:	4b15      	ldr	r3, [pc, #84]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b86:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <MX_ADC1_Init+0xa0>)
 8002b88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b8a:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ba4:	480d      	ldr	r0, [pc, #52]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002ba6:	f006 fc45 	bl	8009434 <HAL_ADC_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002bb0:	f001 fb20 	bl	80041f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002bb4:	2309      	movs	r3, #9
 8002bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4805      	ldr	r0, [pc, #20]	@ (8002bdc <MX_ADC1_Init+0x98>)
 8002bc6:	f006 fdf9 	bl	80097bc <HAL_ADC_ConfigChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002bd0:	f001 fb10 	bl	80041f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200001ac 	.word	0x200001ac
 8002be0:	40012000 	.word	0x40012000
 8002be4:	0f000001 	.word	0x0f000001

08002be8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002bec:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002bee:	4a13      	ldr	r2, [pc, #76]	@ (8002c3c <MX_I2C2_Init+0x54>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002bf4:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <MX_I2C2_Init+0x58>)
 8002bf6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002c06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c18:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c24:	4804      	ldr	r0, [pc, #16]	@ (8002c38 <MX_I2C2_Init+0x50>)
 8002c26:	f007 fc89 	bl	800a53c <HAL_I2C_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002c30:	f001 fae0 	bl	80041f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	200001f4 	.word	0x200001f4
 8002c3c:	40005800 	.word	0x40005800
 8002c40:	000186a0 	.word	0x000186a0

08002c44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c48:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c4a:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <MX_SPI1_Init+0x68>)
 8002c4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c78:	2218      	movs	r2, #24
 8002c7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c88:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c90:	220a      	movs	r2, #10
 8002c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c94:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <MX_SPI1_Init+0x64>)
 8002c96:	f008 fa2b 	bl	800b0f0 <HAL_SPI_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ca0:	f001 faa8 	bl	80041f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000248 	.word	0x20000248
 8002cac:	40013000 	.word	0x40013000

08002cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb6:	f107 0318 	add.w	r3, r7, #24
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cce:	463b      	mov	r3, r7
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cda:	4b3c      	ldr	r3, [pc, #240]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002cdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ce0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8002ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002ce4:	2214      	movs	r2, #20
 8002ce6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce8:	4b38      	ldr	r3, [pc, #224]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32767;
 8002cee:	4b37      	ldr	r3, [pc, #220]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002cf0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002cf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf6:	4b35      	ldr	r3, [pc, #212]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfc:	4b33      	ldr	r3, [pc, #204]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d02:	4832      	ldr	r0, [pc, #200]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002d04:	f009 f8f0 	bl	800bee8 <HAL_TIM_Base_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002d0e:	f001 fa71 	bl	80041f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d16:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d18:	f107 0318 	add.w	r3, r7, #24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	482b      	ldr	r0, [pc, #172]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002d20:	f009 fe66 	bl	800c9f0 <HAL_TIM_ConfigClockSource>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002d2a:	f001 fa63 	bl	80041f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002d2e:	4827      	ldr	r0, [pc, #156]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002d30:	f009 fa96 	bl	800c260 <HAL_TIM_IC_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d3a:	f001 fa5b 	bl	80041f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d46:	f107 0310 	add.w	r3, r7, #16
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	481f      	ldr	r0, [pc, #124]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002d4e:	f00a fb1b 	bl	800d388 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002d58:	f001 fa4c 	bl	80041f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002d5c:	230a      	movs	r3, #10
 8002d5e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d60:	2301      	movs	r3, #1
 8002d62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4619      	mov	r1, r3
 8002d72:	4816      	ldr	r0, [pc, #88]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002d74:	f009 fcea 	bl	800c74c <HAL_TIM_IC_ConfigChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002d7e:	f001 fa39 	bl	80041f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	2204      	movs	r2, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4810      	ldr	r0, [pc, #64]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002d8a:	f009 fcdf 	bl	800c74c <HAL_TIM_IC_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002d94:	f001 fa2e 	bl	80041f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002d98:	463b      	mov	r3, r7
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	480b      	ldr	r0, [pc, #44]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002da0:	f009 fcd4 	bl	800c74c <HAL_TIM_IC_ConfigChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8002daa:	f001 fa23 	bl	80041f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002dae:	463b      	mov	r3, r7
 8002db0:	220c      	movs	r2, #12
 8002db2:	4619      	mov	r1, r3
 8002db4:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <MX_TIM2_Init+0x11c>)
 8002db6:	f009 fcc9 	bl	800c74c <HAL_TIM_IC_ConfigChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8002dc0:	f001 fa18 	bl	80041f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dc4:	bf00      	nop
 8002dc6:	3728      	adds	r7, #40	@ 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	200002f8 	.word	0x200002f8

08002dd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08e      	sub	sp, #56	@ 0x38
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de4:	f107 0320 	add.w	r3, r7, #32
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
#ifdef MOTOR_DC
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e00:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e02:	4a3e      	ldr	r2, [pc, #248]	@ (8002efc <MX_TIM4_Init+0x12c>)
 8002e04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8002e06:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e08:	2254      	movs	r2, #84	@ 0x54
 8002e0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8002e12:	4b39      	ldr	r3, [pc, #228]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e14:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002e18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e20:	4b35      	ldr	r3, [pc, #212]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e26:	4834      	ldr	r0, [pc, #208]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e28:	f009 f85e 	bl	800bee8 <HAL_TIM_Base_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002e32:	f001 f9df 	bl	80041f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e40:	4619      	mov	r1, r3
 8002e42:	482d      	ldr	r0, [pc, #180]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e44:	f009 fdd4 	bl	800c9f0 <HAL_TIM_ConfigClockSource>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002e4e:	f001 f9d1 	bl	80041f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e52:	4829      	ldr	r0, [pc, #164]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e54:	f009 f8fa 	bl	800c04c <HAL_TIM_PWM_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002e5e:	f001 f9c9 	bl	80041f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e6a:	f107 0320 	add.w	r3, r7, #32
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4821      	ldr	r0, [pc, #132]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e72:	f00a fa89 	bl	800d388 <HAL_TIMEx_MasterConfigSynchronization>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002e7c:	f001 f9ba 	bl	80041f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e80:	2360      	movs	r3, #96	@ 0x60
 8002e82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	2200      	movs	r2, #0
 8002e94:	4619      	mov	r1, r3
 8002e96:	4818      	ldr	r0, [pc, #96]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002e98:	f009 fcec 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002ea2:	f001 f9a7 	bl	80041f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4812      	ldr	r0, [pc, #72]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002eae:	f009 fce1 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002eb8:	f001 f99c 	bl	80041f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480d      	ldr	r0, [pc, #52]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002ec4:	f009 fcd6 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002ece:	f001 f991 	bl	80041f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	220c      	movs	r2, #12
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4807      	ldr	r0, [pc, #28]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002eda:	f009 fccb 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002ee4:	f001 f986 	bl	80041f4 <Error_Handler>
    {
      Error_Handler();
    }
#endif
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ee8:	4803      	ldr	r0, [pc, #12]	@ (8002ef8 <MX_TIM4_Init+0x128>)
 8002eea:	f003 f9d9 	bl	80062a0 <HAL_TIM_MspPostInit>

}
 8002eee:	bf00      	nop
 8002ef0:	3738      	adds	r7, #56	@ 0x38
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000340 	.word	0x20000340
 8002efc:	40000800 	.word	0x40000800

08002f00 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f06:	463b      	mov	r3, r7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002f12:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <MX_TIM9_Init+0x6c>)
 8002f14:	4a16      	ldr	r2, [pc, #88]	@ (8002f70 <MX_TIM9_Init+0x70>)
 8002f16:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 51;
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <MX_TIM9_Init+0x6c>)
 8002f1a:	2233      	movs	r2, #51	@ 0x33
 8002f1c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <MX_TIM9_Init+0x6c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1999;
 8002f24:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <MX_TIM9_Init+0x6c>)
 8002f26:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002f2a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <MX_TIM9_Init+0x6c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <MX_TIM9_Init+0x6c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002f38:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <MX_TIM9_Init+0x6c>)
 8002f3a:	f008 ffd5 	bl	800bee8 <HAL_TIM_Base_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002f44:	f001 f956 	bl	80041f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f4c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002f4e:	463b      	mov	r3, r7
 8002f50:	4619      	mov	r1, r3
 8002f52:	4806      	ldr	r0, [pc, #24]	@ (8002f6c <MX_TIM9_Init+0x6c>)
 8002f54:	f009 fd4c 	bl	800c9f0 <HAL_TIM_ConfigClockSource>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002f5e:	f001 f949 	bl	80041f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000388 	.word	0x20000388
 8002f70:	40014000 	.word	0x40014000

08002f74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	@ (8002fc4 <MX_USART1_UART_Init+0x50>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	@ (8002fc0 <MX_USART1_UART_Init+0x4c>)
 8002fac:	f00a fa6e 	bl	800d48c <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fb6:	f001 f91d 	bl	80041f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200003d0 	.word	0x200003d0
 8002fc4:	40011000 	.word	0x40011000

08002fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	@ 0x28
 8002fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b65      	ldr	r3, [pc, #404]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	4a64      	ldr	r2, [pc, #400]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fee:	4b62      	ldr	r3, [pc, #392]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b5e      	ldr	r3, [pc, #376]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	4a5d      	ldr	r2, [pc, #372]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8003004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003008:	6313      	str	r3, [r2, #48]	@ 0x30
 800300a:	4b5b      	ldr	r3, [pc, #364]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	4b57      	ldr	r3, [pc, #348]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a56      	ldr	r2, [pc, #344]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b54      	ldr	r3, [pc, #336]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	4b50      	ldr	r3, [pc, #320]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a4f      	ldr	r2, [pc, #316]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b4d      	ldr	r3, [pc, #308]	@ (8003178 <MX_GPIO_Init+0x1b0>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LPS22HH_CS_GPIO_Port, LPS22HH_CS_Pin, GPIO_PIN_SET);
 800304e:	2201      	movs	r2, #1
 8003050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003054:	4849      	ldr	r0, [pc, #292]	@ (800317c <MX_GPIO_Init+0x1b4>)
 8003056:	f007 fa25 	bl	800a4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 800305a:	2201      	movs	r2, #1
 800305c:	2101      	movs	r1, #1
 800305e:	4848      	ldr	r0, [pc, #288]	@ (8003180 <MX_GPIO_Init+0x1b8>)
 8003060:	f007 fa20 	bl	800a4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_RSTN_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8003064:	2200      	movs	r2, #0
 8003066:	2134      	movs	r1, #52	@ 0x34
 8003068:	4845      	ldr	r0, [pc, #276]	@ (8003180 <MX_GPIO_Init+0x1b8>)
 800306a:	f007 fa1b 	bl	800a4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSR_CS_GPIO_Port, LSM6DSR_CS_Pin, GPIO_PIN_SET);
 800306e:	2201      	movs	r2, #1
 8003070:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003074:	4843      	ldr	r0, [pc, #268]	@ (8003184 <MX_GPIO_Init+0x1bc>)
 8003076:	f007 fa15 	bl	800a4a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LPS22HH_CS_Pin */
  GPIO_InitStruct.Pin = LPS22HH_CS_Pin;
 800307a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800307e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003080:	2301      	movs	r3, #1
 8003082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LPS22HH_CS_GPIO_Port, &GPIO_InitStruct);
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4619      	mov	r1, r3
 8003092:	483a      	ldr	r0, [pc, #232]	@ (800317c <MX_GPIO_Init+0x1b4>)
 8003094:	f006 ff86 	bl	8009fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_Monitor_Pin */
  GPIO_InitStruct.Pin = USB_Monitor_Pin;
 8003098:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800309c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800309e:	2303      	movs	r3, #3
 80030a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_Monitor_GPIO_Port, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	4833      	ldr	r0, [pc, #204]	@ (800317c <MX_GPIO_Init+0x1b4>)
 80030ae:	f006 ff79 	bl	8009fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_IRQ_Pin */
  GPIO_InitStruct.Pin = BLE_IRQ_Pin;
 80030b2:	2310      	movs	r3, #16
 80030b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030b6:	4b34      	ldr	r3, [pc, #208]	@ (8003188 <MX_GPIO_Init+0x1c0>)
 80030b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_IRQ_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4619      	mov	r1, r3
 80030c4:	482f      	ldr	r0, [pc, #188]	@ (8003184 <MX_GPIO_Init+0x1bc>)
 80030c6:	f006 ff6d 	bl	8009fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 80030ca:	2301      	movs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	4827      	ldr	r0, [pc, #156]	@ (8003180 <MX_GPIO_Init+0x1b8>)
 80030e2:	f006 ff5f 	bl	8009fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RSTN_Pin */
  GPIO_InitStruct.Pin = BLE_RSTN_Pin;
 80030e6:	2304      	movs	r3, #4
 80030e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_RSTN_GPIO_Port, &GPIO_InitStruct);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	4820      	ldr	r0, [pc, #128]	@ (8003180 <MX_GPIO_Init+0x1b8>)
 80030fe:	f006 ff51 	bl	8009fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSR_CS_Pin */
  GPIO_InitStruct.Pin = LSM6DSR_CS_Pin;
 8003102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	2301      	movs	r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LSM6DSR_CS_GPIO_Port, &GPIO_InitStruct);
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	4619      	mov	r1, r3
 800311a:	481a      	ldr	r0, [pc, #104]	@ (8003184 <MX_GPIO_Init+0x1bc>)
 800311c:	f006 ff42 	bl	8009fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003120:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312e:	2303      	movs	r3, #3
 8003130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003132:	230a      	movs	r3, #10
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	4811      	ldr	r0, [pc, #68]	@ (8003184 <MX_GPIO_Init+0x1bc>)
 800313e:	f006 ff31 	bl	8009fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8003142:	2330      	movs	r3, #48	@ 0x30
 8003144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003146:	2311      	movs	r3, #17
 8003148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	4619      	mov	r1, r3
 8003158:	4809      	ldr	r0, [pc, #36]	@ (8003180 <MX_GPIO_Init+0x1b8>)
 800315a:	f006 ff23 	bl	8009fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2100      	movs	r1, #0
 8003162:	200a      	movs	r0, #10
 8003164:	f006 fe47 	bl	8009df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003168:	200a      	movs	r0, #10
 800316a:	f006 fe60 	bl	8009e2e <HAL_NVIC_EnableIRQ>

}
 800316e:	bf00      	nop
 8003170:	3728      	adds	r7, #40	@ 0x28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	40020800 	.word	0x40020800
 8003180:	40020400 	.word	0x40020400
 8003184:	40020000 	.word	0x40020000
 8003188:	10110000 	.word	0x10110000

0800318c <ReadSensorRawData>:
 *      Acc - mg
 *      Gyro - mdps
 *      Mag - mguass
 */
void ReadSensorRawData( AxesRaw_TypeDef *acc, AxesRaw_TypeDef *gyro,  float *pre)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08e      	sub	sp, #56	@ 0x38
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
    int32_t t1;
    CUSTOM_MOTION_SENSOR_AxesRaw_t acc_temp_int16, gyro_temp_int16;            /* Data Type int16_t */
    AxesRaw_TypeDef acc_temp, gyro_temp;
    /* Data Type int32_t */
    // Read data is in mg unit
    CUSTOM_MOTION_SENSOR_GetAxesRaw(CUSTOM_LSM6DSR_0, MOTION_ACCELERO, &acc_temp_int16);
 8003198:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800319c:	461a      	mov	r2, r3
 800319e:	2102      	movs	r1, #2
 80031a0:	2000      	movs	r0, #0
 80031a2:	f00c fd25 	bl	800fbf0 <CUSTOM_MOTION_SENSOR_GetAxesRaw>
    acc_temp.AXIS_X = (int32_t) acc_temp_int16.x;                /* Casting data to int32_t */
 80031a6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80031aa:	61fb      	str	r3, [r7, #28]
    acc_temp.AXIS_Y = (int32_t) acc_temp_int16.y;
 80031ac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80031b0:	623b      	str	r3, [r7, #32]
    acc_temp.AXIS_Z = (int32_t) acc_temp_int16.z;
 80031b2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
    // Read data is in mdps unit
    CUSTOM_MOTION_SENSOR_GetAxesRaw(CUSTOM_LSM6DSR_0, MOTION_GYRO, &gyro_temp_int16);
 80031b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031bc:	461a      	mov	r2, r3
 80031be:	2101      	movs	r1, #1
 80031c0:	2000      	movs	r0, #0
 80031c2:	f00c fd15 	bl	800fbf0 <CUSTOM_MOTION_SENSOR_GetAxesRaw>
    gyro_temp.AXIS_X = (int32_t) gyro_temp_int16.x;                /* Casting data to int32_t */
 80031c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80031ca:	613b      	str	r3, [r7, #16]
    gyro_temp.AXIS_Y = (int32_t) gyro_temp_int16.y;
 80031cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80031d0:	617b      	str	r3, [r7, #20]
    gyro_temp.AXIS_Z = (int32_t) gyro_temp_int16.z;
 80031d2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80031d6:	61bb      	str	r3, [r7, #24]

    if (USE_PRESSURE_SENSOR)
    	CUSTOM_ENV_SENSOR_GetValue(CUSTOM_LPS22HH_0,ENV_PRESSURE, pre);
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	2102      	movs	r1, #2
 80031dc:	2000      	movs	r0, #0
 80031de:	f00c faa1 	bl	800f724 <CUSTOM_ENV_SENSOR_GetValue>
        // No need to convert in this case
    }
    else if (COORDINATE_SYSTEM == 3)
    {

      acc->AXIS_X = -acc_temp.AXIS_Y;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	425a      	negs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	601a      	str	r2, [r3, #0]
      acc->AXIS_Y = acc_temp.AXIS_X;
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	605a      	str	r2, [r3, #4]
      acc->AXIS_Z = acc_temp.AXIS_Z;
 80031f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	609a      	str	r2, [r3, #8]

      gyro->AXIS_X = -gyro_temp.AXIS_Y;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	425a      	negs	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	601a      	str	r2, [r3, #0]
      gyro->AXIS_Y = gyro_temp.AXIS_X;
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	605a      	str	r2, [r3, #4]
      gyro->AXIS_Z = gyro_temp.AXIS_Z;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	609a      	str	r2, [r3, #8]
        // convert gyro
        gyro->AXIS_X = - gyro->AXIS_X;
        gyro->AXIS_Y = - gyro->AXIS_Y;

    }
}
 800320a:	bf00      	nop
 800320c:	3738      	adds	r7, #56	@ 0x38
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_TIM_PeriodElapsedCallback>:
/*
 *  Handle Timer9 interrupt @ 800Hz
 *  Set the event flag and increase time index
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	6078      	str	r0, [r7, #4]
  if(sensor_init_cali == 0)
 800321c:	4ba8      	ldr	r3, [pc, #672]	@ (80034c0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 80b7 	bne.w	8003394 <HAL_TIM_PeriodElapsedCallback+0x180>
  {
    sensor_init_cali_count++;
 8003226:	4ba7      	ldr	r3, [pc, #668]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	4aa5      	ldr	r2, [pc, #660]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800322e:	6013      	str	r3, [r2, #0]

    if(sensor_init_cali_count > 800)
 8003230:	4ba4      	ldr	r3, [pc, #656]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003238:	f340 80ac 	ble.w	8003394 <HAL_TIM_PeriodElapsedCallback+0x180>
    {
      // Read sensor data and prepare for specific coodinate system
      ReadSensorRawData( &acc, &gyro, &press);
 800323c:	4aa2      	ldr	r2, [pc, #648]	@ (80034c8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800323e:	49a3      	ldr	r1, [pc, #652]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003240:	48a3      	ldr	r0, [pc, #652]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003242:	f7ff ffa3 	bl	800318c <ReadSensorRawData>

      acc_off_calc.AXIS_X += acc.AXIS_X;
 8003246:	4ba3      	ldr	r3, [pc, #652]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4ba1      	ldr	r3, [pc, #644]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4413      	add	r3, r2
 8003250:	4aa0      	ldr	r2, [pc, #640]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003252:	6013      	str	r3, [r2, #0]
      acc_off_calc.AXIS_Y += acc.AXIS_Y;
 8003254:	4b9f      	ldr	r3, [pc, #636]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	4b9d      	ldr	r3, [pc, #628]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4413      	add	r3, r2
 800325e:	4a9d      	ldr	r2, [pc, #628]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003260:	6053      	str	r3, [r2, #4]
      acc_off_calc.AXIS_Z += acc.AXIS_Z;
 8003262:	4b9c      	ldr	r3, [pc, #624]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	4b9a      	ldr	r3, [pc, #616]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	4413      	add	r3, r2
 800326c:	4a99      	ldr	r2, [pc, #612]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800326e:	6093      	str	r3, [r2, #8]

      gyro_off_calc.AXIS_X += gyro.AXIS_X;
 8003270:	4b99      	ldr	r3, [pc, #612]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b95      	ldr	r3, [pc, #596]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4413      	add	r3, r2
 800327a:	4a97      	ldr	r2, [pc, #604]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800327c:	6013      	str	r3, [r2, #0]
      gyro_off_calc.AXIS_Y += gyro.AXIS_Y;
 800327e:	4b96      	ldr	r3, [pc, #600]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	4b92      	ldr	r3, [pc, #584]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4413      	add	r3, r2
 8003288:	4a93      	ldr	r2, [pc, #588]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800328a:	6053      	str	r3, [r2, #4]
      gyro_off_calc.AXIS_Z += gyro.AXIS_Z;
 800328c:	4b92      	ldr	r3, [pc, #584]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	4b8e      	ldr	r3, [pc, #568]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4413      	add	r3, r2
 8003296:	4a90      	ldr	r2, [pc, #576]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003298:	6093      	str	r3, [r2, #8]

      if (sensor_init_cali_count >= 1600)
 800329a:	4b8a      	ldr	r3, [pc, #552]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80032a2:	db77      	blt.n	8003394 <HAL_TIM_PeriodElapsedCallback+0x180>
      {
        acc_offset.AXIS_X = (int32_t) (acc_off_calc.AXIS_X * 0.00125f);
 80032a4:	4b8b      	ldr	r3, [pc, #556]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b0:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80032b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032bc:	ee17 2a90 	vmov	r2, s15
 80032c0:	4b86      	ldr	r3, [pc, #536]	@ (80034dc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80032c2:	601a      	str	r2, [r3, #0]
        acc_offset.AXIS_Y = (int32_t) (acc_off_calc.AXIS_Y * 0.00125f);
 80032c4:	4b83      	ldr	r3, [pc, #524]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032d0:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80032d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032dc:	ee17 2a90 	vmov	r2, s15
 80032e0:	4b7e      	ldr	r3, [pc, #504]	@ (80034dc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80032e2:	605a      	str	r2, [r3, #4]
        acc_offset.AXIS_Z = (int32_t) (acc_off_calc.AXIS_Z * 0.00125f);
 80032e4:	4b7b      	ldr	r3, [pc, #492]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80032f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fc:	ee17 2a90 	vmov	r2, s15
 8003300:	4b76      	ldr	r3, [pc, #472]	@ (80034dc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003302:	609a      	str	r2, [r3, #8]

        gyro_offset.AXIS_X = (int32_t) (gyro_off_calc.AXIS_X * 0.00125f);
 8003304:	4b74      	ldr	r3, [pc, #464]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003310:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8003314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331c:	ee17 2a90 	vmov	r2, s15
 8003320:	4b6f      	ldr	r3, [pc, #444]	@ (80034e0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003322:	601a      	str	r2, [r3, #0]
        gyro_offset.AXIS_Y = (int32_t) (gyro_off_calc.AXIS_Y * 0.00125f);
 8003324:	4b6c      	ldr	r3, [pc, #432]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003330:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8003334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800333c:	ee17 2a90 	vmov	r2, s15
 8003340:	4b67      	ldr	r3, [pc, #412]	@ (80034e0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003342:	605a      	str	r2, [r3, #4]
        gyro_offset.AXIS_Z = (int32_t) (gyro_off_calc.AXIS_Z * 0.00125f);
 8003344:	4b64      	ldr	r3, [pc, #400]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003350:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8003354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800335c:	ee17 2a90 	vmov	r2, s15
 8003360:	4b5f      	ldr	r3, [pc, #380]	@ (80034e0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003362:	609a      	str	r2, [r3, #8]

        acc_off_calc.AXIS_X = 0;
 8003364:	4b5b      	ldr	r3, [pc, #364]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
        acc_off_calc.AXIS_Y = 0;
 800336a:	4b5a      	ldr	r3, [pc, #360]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800336c:	2200      	movs	r2, #0
 800336e:	605a      	str	r2, [r3, #4]
        acc_off_calc.AXIS_Z = 0;
 8003370:	4b58      	ldr	r3, [pc, #352]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
        gyro_off_calc.AXIS_X = 0;
 8003376:	4b58      	ldr	r3, [pc, #352]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
        gyro_off_calc.AXIS_Y = 0;
 800337c:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800337e:	2200      	movs	r2, #0
 8003380:	605a      	str	r2, [r3, #4]
        gyro_off_calc.AXIS_Z = 0;
 8003382:	4b55      	ldr	r3, [pc, #340]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]

        sensor_init_cali_count = 0;
 8003388:	4b4e      	ldr	r3, [pc, #312]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
        sensor_init_cali = 1;
 800338e:	4b4c      	ldr	r3, [pc, #304]	@ (80034c0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if(sensor_init_cali == 1)
 8003394:	4b4a      	ldr	r3, [pc, #296]	@ (80034c0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	f040 83a8 	bne.w	8003aee <HAL_TIM_PeriodElapsedCallback+0x8da>
  {
    tim9_cnt++;
 800339e:	4b51      	ldr	r3, [pc, #324]	@ (80034e4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a4f      	ldr	r2, [pc, #316]	@ (80034e4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80033a6:	6013      	str	r3, [r2, #0]
    tim9_cnt2++;
 80033a8:	4b4f      	ldr	r3, [pc, #316]	@ (80034e8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a4e      	ldr	r2, [pc, #312]	@ (80034e8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80033b0:	6013      	str	r3, [r2, #0]

    // Read sensor data and prepare for specific coodinate system
    ReadSensorRawData( &acc, &gyro, &press);
 80033b2:	4a45      	ldr	r2, [pc, #276]	@ (80034c8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80033b4:	4945      	ldr	r1, [pc, #276]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80033b6:	4846      	ldr	r0, [pc, #280]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80033b8:	f7ff fee8 	bl	800318c <ReadSensorRawData>

    if (rc_cal_flag == 1)
 80033bc:	4b4b      	ldr	r3, [pc, #300]	@ (80034ec <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f040 80cb 	bne.w	800355c <HAL_TIM_PeriodElapsedCallback+0x348>
    {
      acc_off_calc.AXIS_X += acc.AXIS_X;
 80033c6:	4b43      	ldr	r3, [pc, #268]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b41      	ldr	r3, [pc, #260]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	4a40      	ldr	r2, [pc, #256]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80033d2:	6013      	str	r3, [r2, #0]
      acc_off_calc.AXIS_Y += acc.AXIS_Y;
 80033d4:	4b3f      	ldr	r3, [pc, #252]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4b3d      	ldr	r3, [pc, #244]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	4a3d      	ldr	r2, [pc, #244]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80033e0:	6053      	str	r3, [r2, #4]
      acc_off_calc.AXIS_Z += acc.AXIS_Z;
 80033e2:	4b3c      	ldr	r3, [pc, #240]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	4b3a      	ldr	r3, [pc, #232]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4413      	add	r3, r2
 80033ec:	4a39      	ldr	r2, [pc, #228]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80033ee:	6093      	str	r3, [r2, #8]

      gyro_off_calc.AXIS_X += gyro.AXIS_X;
 80033f0:	4b39      	ldr	r3, [pc, #228]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b35      	ldr	r3, [pc, #212]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	4a37      	ldr	r2, [pc, #220]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80033fc:	6013      	str	r3, [r2, #0]
      gyro_off_calc.AXIS_Y += gyro.AXIS_Y;
 80033fe:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4b32      	ldr	r3, [pc, #200]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4413      	add	r3, r2
 8003408:	4a33      	ldr	r2, [pc, #204]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800340a:	6053      	str	r3, [r2, #4]
      gyro_off_calc.AXIS_Z += gyro.AXIS_Z;
 800340c:	4b32      	ldr	r3, [pc, #200]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	4b2e      	ldr	r3, [pc, #184]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4413      	add	r3, r2
 8003416:	4a30      	ldr	r2, [pc, #192]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003418:	6093      	str	r3, [r2, #8]

      rc_cal_cnt++;
 800341a:	4b35      	ldr	r3, [pc, #212]	@ (80034f0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3301      	adds	r3, #1
 8003420:	4a33      	ldr	r2, [pc, #204]	@ (80034f0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003422:	6013      	str	r3, [r2, #0]

      if (rc_cal_cnt >= 800)
 8003424:	4b32      	ldr	r3, [pc, #200]	@ (80034f0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800342c:	f2c0 8096 	blt.w	800355c <HAL_TIM_PeriodElapsedCallback+0x348>
      {
        acc_offset.AXIS_X = (int32_t) (acc_off_calc.AXIS_X * 0.00125f);
 8003430:	4b28      	ldr	r3, [pc, #160]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800343c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8003440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003448:	ee17 2a90 	vmov	r2, s15
 800344c:	4b23      	ldr	r3, [pc, #140]	@ (80034dc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800344e:	601a      	str	r2, [r3, #0]
        acc_offset.AXIS_Y = (int32_t) (acc_off_calc.AXIS_Y * 0.00125f);
 8003450:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8003460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003468:	ee17 2a90 	vmov	r2, s15
 800346c:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800346e:	605a      	str	r2, [r3, #4]
        acc_offset.AXIS_Z = (int32_t) (acc_off_calc.AXIS_Z * 0.00125f);
 8003470:	4b18      	ldr	r3, [pc, #96]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8003480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003488:	ee17 2a90 	vmov	r2, s15
 800348c:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800348e:	609a      	str	r2, [r3, #8]

        gyro_offset.AXIS_X = (int32_t) (gyro_off_calc.AXIS_X * 0.00125f);
 8003490:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80034a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a8:	ee17 2a90 	vmov	r2, s15
 80034ac:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80034ae:	601a      	str	r2, [r3, #0]
        gyro_offset.AXIS_Y = (int32_t) (gyro_off_calc.AXIS_Y * 0.00125f);
 80034b0:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034bc:	e01c      	b.n	80034f8 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 80034be:	bf00      	nop
 80034c0:	2000079c 	.word	0x2000079c
 80034c4:	200007a0 	.word	0x200007a0
 80034c8:	200007ec 	.word	0x200007ec
 80034cc:	20000550 	.word	0x20000550
 80034d0:	20000544 	.word	0x20000544
 80034d4:	20000760 	.word	0x20000760
 80034d8:	2000076c 	.word	0x2000076c
 80034dc:	20000778 	.word	0x20000778
 80034e0:	20000784 	.word	0x20000784
 80034e4:	2000043c 	.word	0x2000043c
 80034e8:	20000440 	.word	0x20000440
 80034ec:	20000424 	.word	0x20000424
 80034f0:	2000042c 	.word	0x2000042c
 80034f4:	3aa3d70a 	.word	0x3aa3d70a
 80034f8:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80034fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003504:	ee17 2a90 	vmov	r2, s15
 8003508:	4b97      	ldr	r3, [pc, #604]	@ (8003768 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800350a:	605a      	str	r2, [r3, #4]
        gyro_offset.AXIS_Z = (int32_t) (gyro_off_calc.AXIS_Z * 0.00125f);
 800350c:	4b97      	ldr	r3, [pc, #604]	@ (800376c <HAL_TIM_PeriodElapsedCallback+0x558>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003518:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003770 <HAL_TIM_PeriodElapsedCallback+0x55c>
 800351c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003524:	ee17 2a90 	vmov	r2, s15
 8003528:	4b8f      	ldr	r3, [pc, #572]	@ (8003768 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800352a:	609a      	str	r2, [r3, #8]

        acc_off_calc.AXIS_X = 0;
 800352c:	4b91      	ldr	r3, [pc, #580]	@ (8003774 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
        acc_off_calc.AXIS_Y = 0;
 8003532:	4b90      	ldr	r3, [pc, #576]	@ (8003774 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8003534:	2200      	movs	r2, #0
 8003536:	605a      	str	r2, [r3, #4]
        acc_off_calc.AXIS_Z = 0;
 8003538:	4b8e      	ldr	r3, [pc, #568]	@ (8003774 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
        gyro_off_calc.AXIS_X = 0;
 800353e:	4b8b      	ldr	r3, [pc, #556]	@ (800376c <HAL_TIM_PeriodElapsedCallback+0x558>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
        gyro_off_calc.AXIS_Y = 0;
 8003544:	4b89      	ldr	r3, [pc, #548]	@ (800376c <HAL_TIM_PeriodElapsedCallback+0x558>)
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
        gyro_off_calc.AXIS_Z = 0;
 800354a:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_TIM_PeriodElapsedCallback+0x558>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]

        rc_cal_cnt = 0;
 8003550:	4b89      	ldr	r3, [pc, #548]	@ (8003778 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
        rc_cal_flag = 0;
 8003556:	4b89      	ldr	r3, [pc, #548]	@ (800377c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
      }
    }

    acc.AXIS_X -= acc_offset.AXIS_X;
 800355c:	4b88      	ldr	r3, [pc, #544]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4b88      	ldr	r3, [pc, #544]	@ (8003784 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	4a86      	ldr	r2, [pc, #536]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003568:	6013      	str	r3, [r2, #0]
    acc.AXIS_Y -= acc_offset.AXIS_Y;
 800356a:	4b85      	ldr	r3, [pc, #532]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4b85      	ldr	r3, [pc, #532]	@ (8003784 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	4a82      	ldr	r2, [pc, #520]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003576:	6053      	str	r3, [r2, #4]
    acc.AXIS_Z -= (acc_offset.AXIS_Z - 1000);
 8003578:	4b81      	ldr	r3, [pc, #516]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	4b81      	ldr	r3, [pc, #516]	@ (8003784 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	4a7e      	ldr	r2, [pc, #504]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003588:	6093      	str	r3, [r2, #8]
    gyro.AXIS_X -= gyro_offset.AXIS_X;
 800358a:	4b7f      	ldr	r3, [pc, #508]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b76      	ldr	r3, [pc, #472]	@ (8003768 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	4a7c      	ldr	r2, [pc, #496]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003596:	6013      	str	r3, [r2, #0]
    gyro.AXIS_Y -= gyro_offset.AXIS_Y;
 8003598:	4b7b      	ldr	r3, [pc, #492]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4b72      	ldr	r3, [pc, #456]	@ (8003768 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	4a79      	ldr	r2, [pc, #484]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80035a4:	6053      	str	r3, [r2, #4]
    gyro.AXIS_Z -= gyro_offset.AXIS_Z;
 80035a6:	4b78      	ldr	r3, [pc, #480]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003768 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	4a75      	ldr	r2, [pc, #468]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80035b2:	6093      	str	r3, [r2, #8]

    // Save filtered data to acc_FIFO
    acc_FIFO[tim9_cnt2-1].AXIS_X = acc.AXIS_X;
 80035b4:	4b72      	ldr	r3, [pc, #456]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	4b74      	ldr	r3, [pc, #464]	@ (800378c <HAL_TIM_PeriodElapsedCallback+0x578>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	ee07 1a90 	vmov	s15, r1
 80035c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c6:	4972      	ldr	r1, [pc, #456]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	edc3 7a00 	vstr	s15, [r3]
    acc_FIFO[tim9_cnt2-1].AXIS_Y = acc.AXIS_Y;
 80035d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	4b6c      	ldr	r3, [pc, #432]	@ (800378c <HAL_TIM_PeriodElapsedCallback+0x578>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	ee07 1a90 	vmov	s15, r1
 80035e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e8:	4969      	ldr	r1, [pc, #420]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3304      	adds	r3, #4
 80035f6:	edc3 7a00 	vstr	s15, [r3]
    acc_FIFO[tim9_cnt2-1].AXIS_Z = acc.AXIS_Z;
 80035fa:	4b61      	ldr	r3, [pc, #388]	@ (8003780 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	4b63      	ldr	r3, [pc, #396]	@ (800378c <HAL_TIM_PeriodElapsedCallback+0x578>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	ee07 1a90 	vmov	s15, r1
 8003608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360c:	4960      	ldr	r1, [pc, #384]	@ (8003790 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3308      	adds	r3, #8
 800361a:	edc3 7a00 	vstr	s15, [r3]

    // IIR Filtering on gyro
    gyro_fil.AXIS_X = gyro_fil_coeff.b0*gyro.AXIS_X + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_X + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_X
 800361e:	4b5d      	ldr	r3, [pc, #372]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003620:	ed93 7a02 	vldr	s14, [r3, #8]
 8003624:	4b58      	ldr	r3, [pc, #352]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003634:	4b57      	ldr	r3, [pc, #348]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003636:	edd3 6a03 	vldr	s13, [r3, #12]
 800363a:	4b57      	ldr	r3, [pc, #348]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x584>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003648:	4b52      	ldr	r3, [pc, #328]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800364a:	edd3 6a04 	vldr	s13, [r3, #16]
 800364e:	4b52      	ldr	r3, [pc, #328]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003650:	edd3 7a03 	vldr	s15, [r3, #12]
 8003654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003658:	ee37 7a27 	vadd.f32	s14, s14, s15
                                                    + gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_X + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_X;
 800365c:	4b4d      	ldr	r3, [pc, #308]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800365e:	edd3 6a00 	vldr	s13, [r3]
 8003662:	4b4e      	ldr	r3, [pc, #312]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x588>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800366c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003670:	4b48      	ldr	r3, [pc, #288]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003672:	edd3 6a01 	vldr	s13, [r3, #4]
 8003676:	4b49      	ldr	r3, [pc, #292]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x588>)
 8003678:	edd3 7a03 	vldr	s15, [r3, #12]
 800367c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003680:	ee77 7a27 	vadd.f32	s15, s14, s15
    gyro_fil.AXIS_X = gyro_fil_coeff.b0*gyro.AXIS_X + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_X + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_X
 8003684:	4b46      	ldr	r3, [pc, #280]	@ (80037a0 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8003686:	edc3 7a00 	vstr	s15, [r3]
    gyro_fil.AXIS_Y = gyro_fil_coeff.b0*gyro.AXIS_Y + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Y + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Y
 800368a:	4b42      	ldr	r3, [pc, #264]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800368c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003690:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80036a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80036a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80036ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036b4:	4b37      	ldr	r3, [pc, #220]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036b6:	edd3 6a04 	vldr	s13, [r3, #16]
 80036ba:	4b37      	ldr	r3, [pc, #220]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80036bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80036c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c4:	ee37 7a27 	vadd.f32	s14, s14, s15
                                                    + gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_Y + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_Y;
 80036c8:	4b32      	ldr	r3, [pc, #200]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036ca:	edd3 6a00 	vldr	s13, [r3]
 80036ce:	4b33      	ldr	r3, [pc, #204]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x588>)
 80036d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80036d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036de:	edd3 6a01 	vldr	s13, [r3, #4]
 80036e2:	4b2e      	ldr	r3, [pc, #184]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x588>)
 80036e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80036e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    gyro_fil.AXIS_Y = gyro_fil_coeff.b0*gyro.AXIS_Y + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Y + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Y
 80036f0:	4b2b      	ldr	r3, [pc, #172]	@ (80037a0 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80036f2:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_fil.AXIS_Z = gyro_fil_coeff.b0*gyro.AXIS_Z + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Z + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Z
 80036f6:	4b27      	ldr	r3, [pc, #156]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80036f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80036fc:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800370c:	4b21      	ldr	r3, [pc, #132]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800370e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003712:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003714:	edd3 7a02 	vldr	s15, [r3, #8]
 8003718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800371c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003720:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003722:	edd3 6a04 	vldr	s13, [r3, #16]
 8003726:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003728:	edd3 7a05 	vldr	s15, [r3, #20]
 800372c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003730:	ee37 7a27 	vadd.f32	s14, s14, s15
                                                    + gyro_fil_coeff.a1*gyro_y_pre[0].AXIS_Z + gyro_fil_coeff.a2*gyro_y_pre[1].AXIS_Z;
 8003734:	4b17      	ldr	r3, [pc, #92]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003736:	edd3 6a00 	vldr	s13, [r3]
 800373a:	4b18      	ldr	r3, [pc, #96]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x588>)
 800373c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003748:	4b12      	ldr	r3, [pc, #72]	@ (8003794 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800374a:	edd3 6a01 	vldr	s13, [r3, #4]
 800374e:	4b13      	ldr	r3, [pc, #76]	@ (800379c <HAL_TIM_PeriodElapsedCallback+0x588>)
 8003750:	edd3 7a05 	vldr	s15, [r3, #20]
 8003754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003758:	ee77 7a27 	vadd.f32	s15, s14, s15
    gyro_fil.AXIS_Z = gyro_fil_coeff.b0*gyro.AXIS_Z + gyro_fil_coeff.b1*gyro_x_pre[0].AXIS_Z + gyro_fil_coeff.b2*gyro_x_pre[1].AXIS_Z
 800375c:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800375e:	edc3 7a02 	vstr	s15, [r3, #8]
    // Shift IIR filter state
    for(int i=1;i>0;i--)
 8003762:	2301      	movs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e08e      	b.n	8003886 <HAL_TIM_PeriodElapsedCallback+0x672>
 8003768:	20000784 	.word	0x20000784
 800376c:	2000076c 	.word	0x2000076c
 8003770:	3aa3d70a 	.word	0x3aa3d70a
 8003774:	20000760 	.word	0x20000760
 8003778:	2000042c 	.word	0x2000042c
 800377c:	20000424 	.word	0x20000424
 8003780:	20000544 	.word	0x20000544
 8003784:	20000778 	.word	0x20000778
 8003788:	20000550 	.word	0x20000550
 800378c:	20000440 	.word	0x20000440
 8003790:	2000061c 	.word	0x2000061c
 8003794:	20000004 	.word	0x20000004
 8003798:	200006a0 	.word	0x200006a0
 800379c:	20000670 	.word	0x20000670
 80037a0:	20000664 	.word	0x20000664
    {
      gyro_x_pre[i].AXIS_X = gyro_x_pre[i-1].AXIS_X;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	4966      	ldr	r1, [pc, #408]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	6819      	ldr	r1, [r3, #0]
 80037b6:	4863      	ldr	r0, [pc, #396]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4403      	add	r3, r0
 80037c4:	6019      	str	r1, [r3, #0]
      gyro_x_pre[i].AXIS_Y = gyro_x_pre[i-1].AXIS_Y;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1e5a      	subs	r2, r3, #1
 80037ca:	495e      	ldr	r1, [pc, #376]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3304      	adds	r3, #4
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	485a      	ldr	r0, [pc, #360]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4403      	add	r3, r0
 80037e8:	3304      	adds	r3, #4
 80037ea:	6019      	str	r1, [r3, #0]
      gyro_x_pre[i].AXIS_Z = gyro_x_pre[i-1].AXIS_Z;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e5a      	subs	r2, r3, #1
 80037f0:	4954      	ldr	r1, [pc, #336]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	3308      	adds	r3, #8
 80037fe:	6819      	ldr	r1, [r3, #0]
 8003800:	4850      	ldr	r0, [pc, #320]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4403      	add	r3, r0
 800380e:	3308      	adds	r3, #8
 8003810:	6019      	str	r1, [r3, #0]
      gyro_y_pre[i].AXIS_X = gyro_y_pre[i-1].AXIS_X;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	494c      	ldr	r1, [pc, #304]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	4848      	ldr	r0, [pc, #288]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4403      	add	r3, r0
 8003832:	6019      	str	r1, [r3, #0]
      gyro_y_pre[i].AXIS_Y = gyro_y_pre[i-1].AXIS_Y;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e5a      	subs	r2, r3, #1
 8003838:	4943      	ldr	r1, [pc, #268]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3304      	adds	r3, #4
 8003846:	6819      	ldr	r1, [r3, #0]
 8003848:	483f      	ldr	r0, [pc, #252]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4403      	add	r3, r0
 8003856:	3304      	adds	r3, #4
 8003858:	6019      	str	r1, [r3, #0]
      gyro_y_pre[i].AXIS_Z = gyro_y_pre[i-1].AXIS_Z;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1e5a      	subs	r2, r3, #1
 800385e:	493a      	ldr	r1, [pc, #232]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003860:	4613      	mov	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	3308      	adds	r3, #8
 800386c:	6819      	ldr	r1, [r3, #0]
 800386e:	4836      	ldr	r0, [pc, #216]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4403      	add	r3, r0
 800387c:	3308      	adds	r3, #8
 800387e:	6019      	str	r1, [r3, #0]
    for(int i=1;i>0;i--)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3b01      	subs	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	dc8b      	bgt.n	80037a4 <HAL_TIM_PeriodElapsedCallback+0x590>
    }
    gyro_x_pre[0].AXIS_X = gyro.AXIS_X;
 800388c:	4b2f      	ldr	r3, [pc, #188]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x738>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003898:	4b2a      	ldr	r3, [pc, #168]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 800389a:	edc3 7a00 	vstr	s15, [r3]
    gyro_x_pre[0].AXIS_Y = gyro.AXIS_Y;
 800389e:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x738>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038aa:	4b26      	ldr	r3, [pc, #152]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80038ac:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_x_pre[0].AXIS_Z = gyro.AXIS_Z;
 80038b0:	4b26      	ldr	r3, [pc, #152]	@ (800394c <HAL_TIM_PeriodElapsedCallback+0x738>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038bc:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80038be:	edc3 7a02 	vstr	s15, [r3, #8]
    gyro_y_pre[0].AXIS_X = gyro_fil.AXIS_X;
 80038c2:	4b23      	ldr	r3, [pc, #140]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a20      	ldr	r2, [pc, #128]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80038c8:	6013      	str	r3, [r2, #0]
    gyro_y_pre[0].AXIS_Y = gyro_fil.AXIS_Y;
 80038ca:	4b21      	ldr	r3, [pc, #132]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80038d0:	6053      	str	r3, [r2, #4]
    gyro_y_pre[0].AXIS_Z = gyro_fil.AXIS_Z;
 80038d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80038d8:	6093      	str	r3, [r2, #8]

    //  Save filtered data to gyro_FIFO
    gyro_FIFO[tim9_cnt2-1].AXIS_X = gyro_fil.AXIS_X;
 80038da:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1e5a      	subs	r2, r3, #1
 80038e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	481c      	ldr	r0, [pc, #112]	@ (8003958 <HAL_TIM_PeriodElapsedCallback+0x744>)
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4403      	add	r3, r0
 80038f0:	6019      	str	r1, [r3, #0]
    gyro_FIFO[tim9_cnt2-1].AXIS_Y = gyro_fil.AXIS_Y;
 80038f2:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1e5a      	subs	r2, r3, #1
 80038f8:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	4816      	ldr	r0, [pc, #88]	@ (8003958 <HAL_TIM_PeriodElapsedCallback+0x744>)
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4403      	add	r3, r0
 8003908:	3304      	adds	r3, #4
 800390a:	6019      	str	r1, [r3, #0]
    gyro_FIFO[tim9_cnt2-1].AXIS_Z = gyro_fil.AXIS_Z;
 800390c:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0x740>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003914:	6899      	ldr	r1, [r3, #8]
 8003916:	4810      	ldr	r0, [pc, #64]	@ (8003958 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4403      	add	r3, r0
 8003922:	3308      	adds	r3, #8
 8003924:	6019      	str	r1, [r3, #0]


    if(tim9_cnt2 == FIFO_Order)
 8003926:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b05      	cmp	r3, #5
 800392c:	f040 8086 	bne.w	8003a3c <HAL_TIM_PeriodElapsedCallback+0x828>
    {
      tim9_cnt2 = 0;
 8003930:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
      tim9_event_flag = 1;
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_TIM_PeriodElapsedCallback+0x748>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]
      for(int i=0;i<FIFO_Order;i++)
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	e079      	b.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0x822>
 8003942:	bf00      	nop
 8003944:	200006a0 	.word	0x200006a0
 8003948:	20000670 	.word	0x20000670
 800394c:	20000550 	.word	0x20000550
 8003950:	20000664 	.word	0x20000664
 8003954:	20000440 	.word	0x20000440
 8003958:	2000070c 	.word	0x2000070c
 800395c:	20000438 	.word	0x20000438
      {
        acc_ahrs_FIFO[i].AXIS_X = acc_FIFO[i].AXIS_X;
 8003960:	4965      	ldr	r1, [pc, #404]	@ (8003af8 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	4862      	ldr	r0, [pc, #392]	@ (8003afc <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4403      	add	r3, r0
 800397e:	6019      	str	r1, [r3, #0]
        acc_ahrs_FIFO[i].AXIS_Y = acc_FIFO[i].AXIS_Y;
 8003980:	495d      	ldr	r1, [pc, #372]	@ (8003af8 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3304      	adds	r3, #4
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	485a      	ldr	r0, [pc, #360]	@ (8003afc <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4403      	add	r3, r0
 80039a0:	3304      	adds	r3, #4
 80039a2:	6019      	str	r1, [r3, #0]
        acc_ahrs_FIFO[i].AXIS_Z = acc_FIFO[i].AXIS_Z;
 80039a4:	4954      	ldr	r1, [pc, #336]	@ (8003af8 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3308      	adds	r3, #8
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	4851      	ldr	r0, [pc, #324]	@ (8003afc <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4403      	add	r3, r0
 80039c4:	3308      	adds	r3, #8
 80039c6:	6019      	str	r1, [r3, #0]
        gyro_ahrs_FIFO[i].AXIS_X = gyro_FIFO[i].AXIS_X;
 80039c8:	494d      	ldr	r1, [pc, #308]	@ (8003b00 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	6819      	ldr	r1, [r3, #0]
 80039d8:	484a      	ldr	r0, [pc, #296]	@ (8003b04 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4403      	add	r3, r0
 80039e6:	6019      	str	r1, [r3, #0]
        gyro_ahrs_FIFO[i].AXIS_Y = gyro_FIFO[i].AXIS_Y;
 80039e8:	4945      	ldr	r1, [pc, #276]	@ (8003b00 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	3304      	adds	r3, #4
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	4842      	ldr	r0, [pc, #264]	@ (8003b04 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4403      	add	r3, r0
 8003a08:	3304      	adds	r3, #4
 8003a0a:	6019      	str	r1, [r3, #0]
        gyro_ahrs_FIFO[i].AXIS_Z = gyro_FIFO[i].AXIS_Z;
 8003a0c:	493c      	ldr	r1, [pc, #240]	@ (8003b00 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	6819      	ldr	r1, [r3, #0]
 8003a1e:	4839      	ldr	r0, [pc, #228]	@ (8003b04 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4403      	add	r3, r0
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	6019      	str	r1, [r3, #0]
      for(int i=0;i<FIFO_Order;i++)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	dd91      	ble.n	8003960 <HAL_TIM_PeriodElapsedCallback+0x74c>
      }
    }


      gyro_rad.gx = ((float)gyro_fil.AXIS_X)*((float)COE_MDPS_TO_RADPS);
 8003a3c:	4b32      	ldr	r3, [pc, #200]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003a3e:	edd3 7a00 	vldr	s15, [r3]
 8003a42:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003b0c <HAL_TIM_PeriodElapsedCallback+0x8f8>
 8003a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a4a:	4b31      	ldr	r3, [pc, #196]	@ (8003b10 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a4c:	edc3 7a00 	vstr	s15, [r3]
      gyro_rad.gy = ((float)gyro_fil.AXIS_Y)*((float)COE_MDPS_TO_RADPS);
 8003a50:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003a52:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a56:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003b0c <HAL_TIM_PeriodElapsedCallback+0x8f8>
 8003a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b10 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a60:	edc3 7a01 	vstr	s15, [r3, #4]
      gyro_rad.gz = ((float)gyro_fil.AXIS_Z)*((float)COE_MDPS_TO_RADPS);
 8003a64:	4b28      	ldr	r3, [pc, #160]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8003a66:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a6a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003b0c <HAL_TIM_PeriodElapsedCallback+0x8f8>
 8003a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a72:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a74:	edc3 7a02 	vstr	s15, [r3, #8]

      euler_ahrs.thz += gyro_rad.gz*PID_SAMPLING_TIME;
 8003a78:	4b26      	ldr	r3, [pc, #152]	@ (8003b14 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003a7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003a80:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a84:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8003b18 <HAL_TIM_PeriodElapsedCallback+0x904>
 8003a88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003a92:	edc3 7a02 	vstr	s15, [r3, #8]

      if(gTHR<MIN_THR)
 8003a96:	4b21      	ldr	r3, [pc, #132]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a9e:	dc07      	bgt.n	8003ab0 <HAL_TIM_PeriodElapsedCallback+0x89c>
      {
        euler_rc.thz = 0;
 8003aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b20 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
        euler_ahrs.thz = 0;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
      }

      if (rc_connection_flag && rc_enable_motor)
 8003ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b24 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_TIM_PeriodElapsedCallback+0x8be>
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <HAL_TIM_PeriodElapsedCallback+0x914>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_TIM_PeriodElapsedCallback+0x8be>
      {   // Do PID Control
        FlightControlPID_innerLoop(&euler_rc_fil, &gyro_rad, &ahrs, &pid, &motor_pwm);
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b30 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8003ac8:	4911      	ldr	r1, [pc, #68]	@ (8003b10 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003aca:	481b      	ldr	r0, [pc, #108]	@ (8003b38 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8003acc:	f7fe f812 	bl	8001af4 <FlightControlPID_innerLoop>
 8003ad0:	e002      	b.n	8003ad8 <HAL_TIM_PeriodElapsedCallback+0x8c4>
      }
      else
      {
        // set motor output zero
        set_motor_pwm_zero(&motor_pwm);
 8003ad2:	4816      	ldr	r0, [pc, #88]	@ (8003b2c <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003ad4:	f000 fc40 	bl	8004358 <set_motor_pwm_zero>
      }

      if(gTHR<MIN_THR)
 8003ad8:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ade:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ae0:	dc02      	bgt.n	8003ae8 <HAL_TIM_PeriodElapsedCallback+0x8d4>
      {
        set_motor_pwm_zero(&motor_pwm);
 8003ae2:	4812      	ldr	r0, [pc, #72]	@ (8003b2c <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003ae4:	f000 fc38 	bl	8004358 <set_motor_pwm_zero>
      }

      set_motor_pwm(&motor_pwm);      /* To comment if want to debug remocon calibration switching off the motors */
 8003ae8:	4810      	ldr	r0, [pc, #64]	@ (8003b2c <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003aea:	f000 fb8b 	bl	8004204 <set_motor_pwm>
  }
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000061c 	.word	0x2000061c
 8003afc:	200005e0 	.word	0x200005e0
 8003b00:	2000070c 	.word	0x2000070c
 8003b04:	200006d0 	.word	0x200006d0
 8003b08:	20000664 	.word	0x20000664
 8003b0c:	379268a9 	.word	0x379268a9
 8003b10:	200007ac 	.word	0x200007ac
 8003b14:	200004cc 	.word	0x200004cc
 8003b18:	3aa3d70a 	.word	0x3aa3d70a
 8003b1c:	20000954 	.word	0x20000954
 8003b20:	200004c0 	.word	0x200004c0
 8003b24:	20000918 	.word	0x20000918
 8003b28:	20000428 	.word	0x20000428
 8003b2c:	200007b8 	.word	0x200007b8
 8003b30:	20000450 	.word	0x20000450
 8003b34:	200007d0 	.word	0x200007d0
 8003b38:	200004d8 	.word	0x200004d8

08003b3c <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	@ 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <BSP_LED_Init+0x2c>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	4b1a      	ldr	r3, [pc, #104]	@ (8003bbc <BSP_LED_Init+0x80>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	4a19      	ldr	r2, [pc, #100]	@ (8003bbc <BSP_LED_Init+0x80>)
 8003b56:	f043 0302 	orr.w	r3, r3, #2
 8003b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b5c:	4b17      	ldr	r3, [pc, #92]	@ (8003bbc <BSP_LED_Init+0x80>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10d      	bne.n	8003b8a <BSP_LED_Init+0x4e>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <BSP_LED_Init+0x80>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	4a11      	ldr	r2, [pc, #68]	@ (8003bbc <BSP_LED_Init+0x80>)
 8003b78:	f043 0302 	orr.w	r3, r3, #2
 8003b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <BSP_LED_Init+0x80>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc0 <BSP_LED_Init+0x84>)
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b94:	2301      	movs	r3, #1
 8003b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	4a08      	ldr	r2, [pc, #32]	@ (8003bc4 <BSP_LED_Init+0x88>)
 8003ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba8:	f107 0214 	add.w	r2, r7, #20
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f006 f9f8 	bl	8009fa4 <HAL_GPIO_Init>
}
 8003bb4:	bf00      	nop
 8003bb6:	3728      	adds	r7, #40	@ 0x28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08011c1c 	.word	0x08011c1c
 8003bc4:	20000018 	.word	0x20000018

08003bc8 <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	4a07      	ldr	r2, [pc, #28]	@ (8003bf4 <BSP_LED_On+0x2c>)
 8003bd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	4a06      	ldr	r2, [pc, #24]	@ (8003bf8 <BSP_LED_On+0x30>)
 8003bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2200      	movs	r2, #0
 8003be6:	4619      	mov	r1, r3
 8003be8:	f006 fc5c 	bl	800a4a4 <HAL_GPIO_WritePin>
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000018 	.word	0x20000018
 8003bf8:	08011c1c 	.word	0x08011c1c

08003bfc <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	4a07      	ldr	r2, [pc, #28]	@ (8003c28 <BSP_LED_Off+0x2c>)
 8003c0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	4a06      	ldr	r2, [pc, #24]	@ (8003c2c <BSP_LED_Off+0x30>)
 8003c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f006 fc42 	bl	800a4a4 <HAL_GPIO_WritePin>
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000018 	.word	0x20000018
 8003c2c:	08011c1c 	.word	0x08011c1c

08003c30 <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	4a07      	ldr	r2, [pc, #28]	@ (8003c5c <BSP_LED_Toggle+0x2c>)
 8003c3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	4906      	ldr	r1, [pc, #24]	@ (8003c60 <BSP_LED_Toggle+0x30>)
 8003c46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f006 fc41 	bl	800a4d6 <HAL_GPIO_TogglePin>

}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000018 	.word	0x20000018
 8003c60:	08011c1c 	.word	0x08011c1c

08003c64 <BlueNRG_Init>:
}*/



void BlueNRG_Init(void)
{
 8003c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c66:	b08f      	sub	sp, #60	@ 0x3c
 8003c68:	af08      	add	r7, sp, #32

  int ret = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
  uint8_t  hwVersion=0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	74fb      	strb	r3, [r7, #19]
  uint16_t fwVersion=0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	823b      	strh	r3, [r7, #16]

  PRINTF("****** START BLE TESTS ******\r\n");
 8003c76:	4883      	ldr	r0, [pc, #524]	@ (8003e84 <BlueNRG_Init+0x220>)
 8003c78:	f7fd fd72 	bl	8001760 <myprintf>
  BNRG_SPI_Init();
 8003c7c:	f002 fd02 	bl	8006684 <BNRG_SPI_Init>
  /* Commented on Jan 15, 2020 */
  //for(i=0;i<6;i++)
  //  bdaddr[i] = tmp_bdaddr[i];

  /* Added on Jan 15, 2020 */
  bdaddr[0] = (STM32_UUID[1]>>24)&0xFF;
 8003c80:	4b81      	ldr	r3, [pc, #516]	@ (8003e88 <BlueNRG_Init+0x224>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	4b80      	ldr	r3, [pc, #512]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003c8a:	701a      	strb	r2, [r3, #0]
  bdaddr[1] = (STM32_UUID[0]    )&0xFF;
 8003c8c:	4b80      	ldr	r3, [pc, #512]	@ (8003e90 <BlueNRG_Init+0x22c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4b7e      	ldr	r3, [pc, #504]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003c94:	705a      	strb	r2, [r3, #1]
  bdaddr[2] = (STM32_UUID[2] >>8)&0xFF;
 8003c96:	4b7f      	ldr	r3, [pc, #508]	@ (8003e94 <BlueNRG_Init+0x230>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003ca0:	709a      	strb	r2, [r3, #2]
  bdaddr[3] = (STM32_UUID[0]>>16)&0xFF;
 8003ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8003e90 <BlueNRG_Init+0x22c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4b78      	ldr	r3, [pc, #480]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003cac:	70da      	strb	r2, [r3, #3]
  bdaddr[4] = (hwVersion > 0x30) ?
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b30      	cmp	r3, #48	@ 0x30
 8003cb2:	d901      	bls.n	8003cb8 <BlueNRG_Init+0x54>
 8003cb4:	228c      	movs	r2, #140	@ 0x8c
 8003cb6:	e000      	b.n	8003cba <BlueNRG_Init+0x56>
 8003cb8:	2228      	movs	r2, #40	@ 0x28
 8003cba:	4b74      	ldr	r3, [pc, #464]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003cbc:	711a      	strb	r2, [r3, #4]
            ((((0x34-48)*10) + (0x30-48)+100)&0xFF) :
            ((((0x34-48)*10) + (0x30-48)    )&0xFF) ;
  bdaddr[5] = 0xC0; /* for a Legal BLE Random MAC */
 8003cbe:	4b73      	ldr	r3, [pc, #460]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003cc0:	22c0      	movs	r2, #192	@ 0xc0
 8003cc2:	715a      	strb	r2, [r3, #5]

  /* Initialize the BlueNRG HCI */
  HCI_Init();
 8003cc4:	f00a ff7a 	bl	800ebbc <HCI_Init>

 /* Reset BlueNRG hardware */
  BlueNRG_RST();
 8003cc8:	f002 fd0e 	bl	80066e8 <BlueNRG_RST>

  /* get the BlueNRG HW and FW versions */
  PRINTF("\r\nReading BlueNRG version ...\r\n");
 8003ccc:	4872      	ldr	r0, [pc, #456]	@ (8003e98 <BlueNRG_Init+0x234>)
 8003cce:	f7fd fd47 	bl	8001760 <myprintf>
  if (getBlueNRGVersion(&hwVersion, &fwVersion)== BLE_STATUS_SUCCESS)
 8003cd2:	f107 0210 	add.w	r2, r7, #16
 8003cd6:	f107 0313 	add.w	r3, r7, #19
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f00a ff21 	bl	800eb24 <getBlueNRGVersion>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 80c0 	bne.w	8003e6a <BlueNRG_Init+0x206>
  {

    /*
     * Reset BlueNRG again otherwise it will fail.
     */
    BlueNRG_RST();
 8003cea:	f002 fcfd 	bl	80066e8 <BlueNRG_RST>
    //  testStatus = COMPONENT_ERROR;
    //  PRINTF("\r\nSetting Pubblic BD_ADDR failed *****\r\n");
    //  goto fail;
    //}

    PRINTF("GATT Initializzation...\r\n");
 8003cee:	486b      	ldr	r0, [pc, #428]	@ (8003e9c <BlueNRG_Init+0x238>)
 8003cf0:	f7fd fd36 	bl	8001760 <myprintf>
    ret = aci_gatt_init();
 8003cf4:	f00a fc66 	bl	800e5c4 <aci_gatt_init>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	617b      	str	r3, [r7, #20]
    if(ret){
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <BlueNRG_Init+0xac>
      testStatus = COMPONENT_ERROR;
 8003d02:	4b67      	ldr	r3, [pc, #412]	@ (8003ea0 <BlueNRG_Init+0x23c>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
      PRINTF("\r\nGATT_Init failed ****\r\n");
 8003d08:	4866      	ldr	r0, [pc, #408]	@ (8003ea4 <BlueNRG_Init+0x240>)
 8003d0a:	f7fd fd29 	bl	8001760 <myprintf>
      goto fail;
 8003d0e:	e0a8      	b.n	8003e62 <BlueNRG_Init+0x1fe>
//       PRINTF("\r\naci_gatt_update_char_value failed\r\n");
//      while(1);
//    }

    /* Set the GAP INIT like X-NUCLEO-IDB05A1 eval board  since using same SPBTLE_RF module*/
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8003d10:	4b65      	ldr	r3, [pc, #404]	@ (8003ea8 <BlueNRG_Init+0x244>)
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	4b65      	ldr	r3, [pc, #404]	@ (8003eac <BlueNRG_Init+0x248>)
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	4b65      	ldr	r3, [pc, #404]	@ (8003eb0 <BlueNRG_Init+0x24c>)
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	2001      	movs	r0, #1
 8003d20:	f00a fa68 	bl	800e1f4 <aci_gap_init_IDB05A1>
 8003d24:	4603      	mov	r3, r0
 8003d26:	617b      	str	r3, [r7, #20]

    if(ret != BLE_STATUS_SUCCESS){
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <BlueNRG_Init+0xd2>
      PRINTF("\r\nGAP_Init failed\r\n");
 8003d2e:	4861      	ldr	r0, [pc, #388]	@ (8003eb4 <BlueNRG_Init+0x250>)
 8003d30:	f7fd fd16 	bl	8001760 <myprintf>
      goto fail;
 8003d34:	e095      	b.n	8003e62 <BlueNRG_Init+0x1fe>
    }

    // Added Jan 10th
    ret = hci_le_set_random_address(bdaddr);
 8003d36:	4855      	ldr	r0, [pc, #340]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003d38:	f00b fa53 	bl	800f1e2 <hci_le_set_random_address>
 8003d3c:	6178      	str	r0, [r7, #20]
    // Added Jan 10th
    const char BoardName[7] = {NAME_BLUEMS};
 8003d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb8 <BlueNRG_Init+0x254>)
 8003d40:	f107 0308 	add.w	r3, r7, #8
 8003d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d48:	6018      	str	r0, [r3, #0]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	8019      	strh	r1, [r3, #0]
 8003d4e:	3302      	adds	r3, #2
 8003d50:	0c0a      	lsrs	r2, r1, #16
 8003d52:	701a      	strb	r2, [r3, #0]
    // Added Jan 10th
    ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8003d54:	4b56      	ldr	r3, [pc, #344]	@ (8003eb0 <BlueNRG_Init+0x24c>)
 8003d56:	8818      	ldrh	r0, [r3, #0]
 8003d58:	4b54      	ldr	r3, [pc, #336]	@ (8003eac <BlueNRG_Init+0x248>)
 8003d5a:	8819      	ldrh	r1, [r3, #0]
 8003d5c:	f107 0308 	add.w	r3, r7, #8
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2307      	movs	r3, #7
 8003d64:	2200      	movs	r2, #0
 8003d66:	f00a fda7 	bl	800e8b8 <aci_gatt_update_char_value>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	617b      	str	r3, [r7, #20]
                                       7/*strlen(BoardName)*/, (uint8_t *)BoardName);

    PRINTF("GAP setting Authentication ....\r\n");
 8003d6e:	4853      	ldr	r0, [pc, #332]	@ (8003ebc <BlueNRG_Init+0x258>)
 8003d70:	f7fd fcf6 	bl	8001760 <myprintf>
    ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8003d74:	2301      	movs	r3, #1
 8003d76:	9303      	str	r3, [sp, #12]
 8003d78:	4b51      	ldr	r3, [pc, #324]	@ (8003ec0 <BlueNRG_Init+0x25c>)
 8003d7a:	9302      	str	r3, [sp, #8]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2310      	movs	r3, #16
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2307      	movs	r3, #7
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f00a fb78 	bl	800e480 <aci_gap_set_auth_requirement>
 8003d90:	4603      	mov	r3, r0
 8003d92:	617b      	str	r3, [r7, #20]
                                       OOB_AUTH_DATA_ABSENT,
                                       NULL, 7, 16,
                                       USE_FIXED_PIN_FOR_PAIRING, 123456,
                                       BONDING);
    if (ret != BLE_STATUS_SUCCESS) {
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <BlueNRG_Init+0x144>
      testStatus = COMPONENT_ERROR;
 8003d9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ea0 <BlueNRG_Init+0x23c>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
       PRINTF("\r\nGAP setting Authentication failed ******\r\n");
 8003da0:	4848      	ldr	r0, [pc, #288]	@ (8003ec4 <BlueNRG_Init+0x260>)
 8003da2:	f7fd fcdd 	bl	8001760 <myprintf>
       goto fail;
 8003da6:	e05c      	b.n	8003e62 <BlueNRG_Init+0x1fe>
    }

    PRINTF("SERVER: BLE Stack Initialized \r\n"
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	469c      	mov	ip, r3
 8003dac:	8a3b      	ldrh	r3, [r7, #16]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	469e      	mov	lr, r3
 8003db4:	8a3b      	ldrh	r3, [r7, #16]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	2b30      	cmp	r3, #48	@ 0x30
 8003dc2:	d904      	bls.n	8003dce <BlueNRG_Init+0x16a>
 8003dc4:	8a3b      	ldrh	r3, [r7, #16]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3360      	adds	r3, #96	@ 0x60
 8003dcc:	e000      	b.n	8003dd0 <BlueNRG_Init+0x16c>
 8003dce:	2361      	movs	r3, #97	@ 0x61
 8003dd0:	492e      	ldr	r1, [pc, #184]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003dd2:	7949      	ldrb	r1, [r1, #5]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	492d      	ldr	r1, [pc, #180]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003dd8:	7909      	ldrb	r1, [r1, #4]
 8003dda:	460c      	mov	r4, r1
 8003ddc:	492b      	ldr	r1, [pc, #172]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003dde:	78c9      	ldrb	r1, [r1, #3]
 8003de0:	460d      	mov	r5, r1
 8003de2:	492a      	ldr	r1, [pc, #168]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003de4:	7889      	ldrb	r1, [r1, #2]
 8003de6:	460e      	mov	r6, r1
 8003de8:	4928      	ldr	r1, [pc, #160]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003dea:	7849      	ldrb	r1, [r1, #1]
 8003dec:	6079      	str	r1, [r7, #4]
 8003dee:	4927      	ldr	r1, [pc, #156]	@ (8003e8c <BlueNRG_Init+0x228>)
 8003df0:	7809      	ldrb	r1, [r1, #0]
 8003df2:	9106      	str	r1, [sp, #24]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	9105      	str	r1, [sp, #20]
 8003df8:	9604      	str	r6, [sp, #16]
 8003dfa:	9503      	str	r5, [sp, #12]
 8003dfc:	9402      	str	r4, [sp, #8]
 8003dfe:	9001      	str	r0, [sp, #4]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	4672      	mov	r2, lr
 8003e06:	4661      	mov	r1, ip
 8003e08:	482f      	ldr	r0, [pc, #188]	@ (8003ec8 <BlueNRG_Init+0x264>)
 8003e0a:	f7fd fca9 	bl	8001760 <myprintf>
           (fwVersion>>4)&0xF,
           (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a',
           bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);

    /* Set output power level */
    aci_hal_set_tx_power_level(1,4);    /* -2.1dBm */
 8003e0e:	2104      	movs	r1, #4
 8003e10:	2001      	movs	r0, #1
 8003e12:	f00a fe14 	bl	800ea3e <aci_hal_set_tx_power_level>

    ret = Add_ConsoleW2ST_Service();
 8003e16:	f000 fdc9 	bl	80049ac <Add_ConsoleW2ST_Service>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	617b      	str	r3, [r7, #20]
    if(ret == BLE_STATUS_SUCCESS)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <BlueNRG_Init+0x1c8>
       PRINTF("Console Service W2ST added successfully\r\n");
 8003e24:	4829      	ldr	r0, [pc, #164]	@ (8003ecc <BlueNRG_Init+0x268>)
 8003e26:	f7fd fc9b 	bl	8001760 <myprintf>
 8003e2a:	e005      	b.n	8003e38 <BlueNRG_Init+0x1d4>
    else{
       testStatus = COMPONENT_ERROR;
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <BlueNRG_Init+0x23c>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
       PRINTF("\r\nError while adding Console Service W2ST\r\n");
 8003e32:	4827      	ldr	r0, [pc, #156]	@ (8003ed0 <BlueNRG_Init+0x26c>)
 8003e34:	f7fd fc94 	bl	8001760 <myprintf>
    }

    ret = Add_ConfigW2ST_Service();
 8003e38:	f000 fd42 	bl	80048c0 <Add_ConfigW2ST_Service>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	617b      	str	r3, [r7, #20]
    if(ret == BLE_STATUS_SUCCESS)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <BlueNRG_Init+0x1ea>
       PRINTF("Config  Service W2ST added successfully\r\n");
 8003e46:	4823      	ldr	r0, [pc, #140]	@ (8003ed4 <BlueNRG_Init+0x270>)
 8003e48:	f7fd fc8a 	bl	8001760 <myprintf>
 8003e4c:	e005      	b.n	8003e5a <BlueNRG_Init+0x1f6>
    else{
       testStatus = COMPONENT_ERROR;
 8003e4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <BlueNRG_Init+0x23c>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
       PRINTF("\r\nError while adding Config Service W2ST\r\n");
 8003e54:	4820      	ldr	r0, [pc, #128]	@ (8003ed8 <BlueNRG_Init+0x274>)
 8003e56:	f7fd fc83 	bl	8001760 <myprintf>
    }

    PRINTF("\r\nAll test passed!\r\n");
 8003e5a:	4820      	ldr	r0, [pc, #128]	@ (8003edc <BlueNRG_Init+0x278>)
 8003e5c:	f7fd fc80 	bl	8001760 <myprintf>
 8003e60:	e009      	b.n	8003e76 <BlueNRG_Init+0x212>
  }
  PRINTF("****** END BLE TESTS ******\r\n");
  return;

fail:
  testStatus = COMPONENT_ERROR;
 8003e62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea0 <BlueNRG_Init+0x23c>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
  return;
 8003e68:	e009      	b.n	8003e7e <BlueNRG_Init+0x21a>
       testStatus = COMPONENT_ERROR;
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <BlueNRG_Init+0x23c>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
       PRINTF("\r\nError in BlueNRG tests. ******\r\n");
 8003e70:	481b      	ldr	r0, [pc, #108]	@ (8003ee0 <BlueNRG_Init+0x27c>)
 8003e72:	f7fd fc75 	bl	8001760 <myprintf>
  PRINTF("****** END BLE TESTS ******\r\n");
 8003e76:	481b      	ldr	r0, [pc, #108]	@ (8003ee4 <BlueNRG_Init+0x280>)
 8003e78:	f7fd fc72 	bl	8001760 <myprintf>
  return;
 8003e7c:	bf00      	nop
}
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e84:	08011658 	.word	0x08011658
 8003e88:	1fff7a14 	.word	0x1fff7a14
 8003e8c:	20000448 	.word	0x20000448
 8003e90:	1fff7a10 	.word	0x1fff7a10
 8003e94:	1fff7a18 	.word	0x1fff7a18
 8003e98:	08011678 	.word	0x08011678
 8003e9c:	08011698 	.word	0x08011698
 8003ea0:	20000444 	.word	0x20000444
 8003ea4:	080116b4 	.word	0x080116b4
 8003ea8:	20000804 	.word	0x20000804
 8003eac:	20000802 	.word	0x20000802
 8003eb0:	20000800 	.word	0x20000800
 8003eb4:	080116d0 	.word	0x080116d0
 8003eb8:	080118a4 	.word	0x080118a4
 8003ebc:	080116e4 	.word	0x080116e4
 8003ec0:	0001e240 	.word	0x0001e240
 8003ec4:	08011708 	.word	0x08011708
 8003ec8:	08011738 	.word	0x08011738
 8003ecc:	08011798 	.word	0x08011798
 8003ed0:	080117c4 	.word	0x080117c4
 8003ed4:	080117f0 	.word	0x080117f0
 8003ed8:	0801181c 	.word	0x0801181c
 8003edc:	08011848 	.word	0x08011848
 8003ee0:	08011860 	.word	0x08011860
 8003ee4:	08011884 	.word	0x08011884

08003ee8 <Init_BlueNRG_Custom_Services>:
/** @brief Initialize all the Custom BlueNRG services
 * @param None
 * @retval None
 */
static void Init_BlueNRG_Custom_Services(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  int ret;

  ret = Add_HWServW2ST_Service();
 8003eee:	f000 ff0b 	bl	8004d08 <Add_HWServW2ST_Service>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	607b      	str	r3, [r7, #4]
  if(ret == BLE_STATUS_SUCCESS) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <Init_BlueNRG_Custom_Services+0x1c>
     PRINTF("HW      Service W2ST added successfully\r\n");
 8003efc:	4813      	ldr	r0, [pc, #76]	@ (8003f4c <Init_BlueNRG_Custom_Services+0x64>)
 8003efe:	f7fd fc2f 	bl	8001760 <myprintf>
 8003f02:	e002      	b.n	8003f0a <Init_BlueNRG_Custom_Services+0x22>
  } else {
     PRINTF("\r\nError while adding HW Service W2ST\r\n");
 8003f04:	4812      	ldr	r0, [pc, #72]	@ (8003f50 <Init_BlueNRG_Custom_Services+0x68>)
 8003f06:	f7fd fc2b 	bl	8001760 <myprintf>
  }

  ret = Add_ConsoleW2ST_Service();
 8003f0a:	f000 fd4f 	bl	80049ac <Add_ConsoleW2ST_Service>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	607b      	str	r3, [r7, #4]
  if(ret == BLE_STATUS_SUCCESS) {
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d103      	bne.n	8003f20 <Init_BlueNRG_Custom_Services+0x38>
     PRINTF("Console Service W2ST added successfully\r\n");
 8003f18:	480e      	ldr	r0, [pc, #56]	@ (8003f54 <Init_BlueNRG_Custom_Services+0x6c>)
 8003f1a:	f7fd fc21 	bl	8001760 <myprintf>
 8003f1e:	e002      	b.n	8003f26 <Init_BlueNRG_Custom_Services+0x3e>
  } else {
     PRINTF("\r\nError while adding Console Service W2ST\r\n");
 8003f20:	480d      	ldr	r0, [pc, #52]	@ (8003f58 <Init_BlueNRG_Custom_Services+0x70>)
 8003f22:	f7fd fc1d 	bl	8001760 <myprintf>
  }

  ret = Add_ConfigW2ST_Service();
 8003f26:	f000 fccb 	bl	80048c0 <Add_ConfigW2ST_Service>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	607b      	str	r3, [r7, #4]
  if(ret == BLE_STATUS_SUCCESS) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <Init_BlueNRG_Custom_Services+0x54>
     PRINTF("Config  Service W2ST added successfully\r\n");
 8003f34:	4809      	ldr	r0, [pc, #36]	@ (8003f5c <Init_BlueNRG_Custom_Services+0x74>)
 8003f36:	f7fd fc13 	bl	8001760 <myprintf>
  } else {
     PRINTF("\r\nError while adding Config Service W2ST\r\n");
  }
}
 8003f3a:	e002      	b.n	8003f42 <Init_BlueNRG_Custom_Services+0x5a>
     PRINTF("\r\nError while adding Config Service W2ST\r\n");
 8003f3c:	4808      	ldr	r0, [pc, #32]	@ (8003f60 <Init_BlueNRG_Custom_Services+0x78>)
 8003f3e:	f7fd fc0f 	bl	8001760 <myprintf>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	080118ac 	.word	0x080118ac
 8003f50:	080118d8 	.word	0x080118d8
 8003f54:	08011798 	.word	0x08011798
 8003f58:	080117c4 	.word	0x080117c4
 8003f5c:	080117f0 	.word	0x080117f0
 8003f60:	0801181c 	.word	0x0801181c

08003f64 <SendMotionData>:
  * @brief  Send Motion Data Acc/Mag/Gyro to BLE
  * @param  None
  * @retval None
  */
static void SendMotionData(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
  AxesRaw_TypeDef ACC_Value;
  AxesRaw_TypeDef GYR_Value;



  ACC_Value.AXIS_X = acc.AXIS_X;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <SendMotionData+0x40>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]
  ACC_Value.AXIS_Y = acc.AXIS_Y;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <SendMotionData+0x40>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]
  ACC_Value.AXIS_Z = acc.AXIS_Z;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <SendMotionData+0x40>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	617b      	str	r3, [r7, #20]
  GYR_Value.AXIS_X = gyro.AXIS_X;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <SendMotionData+0x44>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	603b      	str	r3, [r7, #0]
  GYR_Value.AXIS_Y = gyro.AXIS_Y;
 8003f82:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <SendMotionData+0x44>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	607b      	str	r3, [r7, #4]
  GYR_Value.AXIS_Z = gyro.AXIS_Z;
 8003f88:	4b07      	ldr	r3, [pc, #28]	@ (8003fa8 <SendMotionData+0x44>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60bb      	str	r3, [r7, #8]
  /*Debug */
  //PRINTF("ACC[X, Y, Z]: %d\t%d\t%d\t\r\n", ACC_Value.AXIS_X, ACC_Value.AXIS_Y, ACC_Value.AXIS_Z);
  //PRINTF("GYRO[X, Y, Z]: %d\t%d\t%d\t\r", GYR_Value.AXIS_X, GYR_Value.AXIS_Y, GYR_Value.AXIS_Z);
  //PRINTF("MAG[X, Y, Z]: %d\t%d\t%d\t\n", MAG_Value.AXIS_X, MAG_Value.AXIS_Y, MAG_Value.AXIS_Z);

  AccGyroMag_Update(&ACC_Value, &GYR_Value, &GYR_Value);
 8003f8e:	463a      	mov	r2, r7
 8003f90:	4639      	mov	r1, r7
 8003f92:	f107 030c 	add.w	r3, r7, #12
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 f84c 	bl	8005034 <AccGyroMag_Update>

}
 8003f9c:	bf00      	nop
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000544 	.word	0x20000544
 8003fa8:	20000550 	.word	0x20000550
 8003fac:	00000000 	.word	0x00000000

08003fb0 <SendBattEnvData>:

static void SendBattEnvData(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
   int32_t decPart, intPart;
   int32_t PressToSend=0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
   uint16_t BattToSend=0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	82fb      	strh	r3, [r7, #22]
   int16_t RSSIToSend=0, TempToSend=0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	81fb      	strh	r3, [r7, #14]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	81bb      	strh	r3, [r7, #12]
   int8_t rssi;
   uint16_t conn_handle;

   HAL_ADC_Start(&hadc1);
 8003fc6:	487a      	ldr	r0, [pc, #488]	@ (80041b0 <SendBattEnvData+0x200>)
 8003fc8:	f005 fa78 	bl	80094bc <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8003fcc:	4979      	ldr	r1, [pc, #484]	@ (80041b4 <SendBattEnvData+0x204>)
 8003fce:	4878      	ldr	r0, [pc, #480]	@ (80041b0 <SendBattEnvData+0x200>)
 8003fd0:	f005 fb5b 	bl	800968a <HAL_ADC_PollForConversion>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d133      	bne.n	8004042 <SendBattEnvData+0x92>
        {
            VBAT_Sense = HAL_ADC_GetValue(&hadc1);
 8003fda:	4875      	ldr	r0, [pc, #468]	@ (80041b0 <SendBattEnvData+0x200>)
 8003fdc:	f005 fbe0 	bl	80097a0 <HAL_ADC_GetValue>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4a75      	ldr	r2, [pc, #468]	@ (80041b8 <SendBattEnvData+0x208>)
 8003fe4:	6013      	str	r3, [r2, #0]
            VBAT = (((VBAT_Sense*3.3)/4095)*(BAT_RUP+BAT_RDW))/BAT_RDW;
 8003fe6:	4b74      	ldr	r3, [pc, #464]	@ (80041b8 <SendBattEnvData+0x208>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fa8a 	bl	8000504 <__aeabi_ui2d>
 8003ff0:	a36b      	add	r3, pc, #428	@ (adr r3, 80041a0 <SendBattEnvData+0x1f0>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc faff 	bl	80005f8 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	a369      	add	r3, pc, #420	@ (adr r3, 80041a8 <SendBattEnvData+0x1f8>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc fc20 	bl	800084c <__aeabi_ddiv>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	4b68      	ldr	r3, [pc, #416]	@ (80041bc <SendBattEnvData+0x20c>)
 800401a:	f7fc faed 	bl	80005f8 <__aeabi_dmul>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	4b65      	ldr	r3, [pc, #404]	@ (80041c0 <SendBattEnvData+0x210>)
 800402c:	f7fc fc0e 	bl	800084c <__aeabi_ddiv>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	f7fc fd8e 	bl	8000b58 <__aeabi_d2f>
 800403c:	4603      	mov	r3, r0
 800403e:	4a61      	ldr	r2, [pc, #388]	@ (80041c4 <SendBattEnvData+0x214>)
 8004040:	6013      	str	r3, [r2, #0]
            //PRINTF("Battery voltage = %fV\n\n", VBAT);
        }
    HAL_ADC_Stop(&hadc1);
 8004042:	485b      	ldr	r0, [pc, #364]	@ (80041b0 <SendBattEnvData+0x200>)
 8004044:	f005 faee 	bl	8009624 <HAL_ADC_Stop>

    // Pressure to Send
    MCR_BLUEMS_F2I_2D(press, intPart, decPart);
 8004048:	4b5f      	ldr	r3, [pc, #380]	@ (80041c8 <SendBattEnvData+0x218>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004052:	ee17 3a90 	vmov	r3, s15
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	4b5b      	ldr	r3, [pc, #364]	@ (80041c8 <SendBattEnvData+0x218>)
 800405a:	ed93 7a00 	vldr	s14, [r3]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80041cc <SendBattEnvData+0x21c>
 8004070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004074:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004078:	ee17 3a90 	vmov	r3, s15
 800407c:	607b      	str	r3, [r7, #4]
    PressToSend=intPart*100+decPart;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2264      	movs	r2, #100	@ 0x64
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

    // Battery to Send
    VBAT = ((VBAT - 3.7f)*100.0f)/(4.2f-3.7f);
 800408c:	4b4d      	ldr	r3, [pc, #308]	@ (80041c4 <SendBattEnvData+0x214>)
 800408e:	edd3 7a00 	vldr	s15, [r3]
 8004092:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80041d0 <SendBattEnvData+0x220>
 8004096:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800409a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80041cc <SendBattEnvData+0x21c>
 800409e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040a2:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80041d4 <SendBattEnvData+0x224>
 80040a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040aa:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <SendBattEnvData+0x214>)
 80040ac:	edc3 7a00 	vstr	s15, [r3]
    if (VBAT < 0) VBAT = 0;
 80040b0:	4b44      	ldr	r3, [pc, #272]	@ (80041c4 <SendBattEnvData+0x214>)
 80040b2:	edd3 7a00 	vldr	s15, [r3]
 80040b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040be:	d503      	bpl.n	80040c8 <SendBattEnvData+0x118>
 80040c0:	4b40      	ldr	r3, [pc, #256]	@ (80041c4 <SendBattEnvData+0x214>)
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
    MCR_BLUEMS_F2I_1D((int32_t)VBAT, intPart, decPart);
 80040c8:	4b3e      	ldr	r3, [pc, #248]	@ (80041c4 <SendBattEnvData+0x214>)
 80040ca:	edd3 7a00 	vldr	s15, [r3]
 80040ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d2:	ee17 3a90 	vmov	r3, s15
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	4b3a      	ldr	r3, [pc, #232]	@ (80041c4 <SendBattEnvData+0x214>)
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e2:	ee17 2a90 	vmov	r2, s15
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad2      	subs	r2, r2, r3
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	607b      	str	r3, [r7, #4]
    BattToSend = intPart*10+decPart;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	b29b      	uxth	r3, r3
 8004106:	4413      	add	r3, r2
 8004108:	82fb      	strh	r3, [r7, #22]
    if (BattToSend > 1000){
 800410a:	8afb      	ldrh	r3, [r7, #22]
 800410c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004110:	d902      	bls.n	8004118 <SendBattEnvData+0x168>
      BattToSend =1000;
 8004112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004116:	82fb      	strh	r3, [r7, #22]
    }

    // Temperature to Send
    MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8004118:	4b2f      	ldr	r3, [pc, #188]	@ (80041d8 <SendBattEnvData+0x228>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004122:	ee17 3a90 	vmov	r3, s15
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <SendBattEnvData+0x228>)
 800412a:	ed93 7a00 	vldr	s14, [r3]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800413c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004148:	ee17 3a90 	vmov	r3, s15
 800414c:	607b      	str	r3, [r7, #4]
    TempToSend = intPart*10+decPart;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	b29b      	uxth	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	0092      	lsls	r2, r2, #2
 8004156:	4413      	add	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	b29b      	uxth	r3, r3
 8004160:	4413      	add	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	81bb      	strh	r3, [r7, #12]

    // RSSI to send
    hci_read_rssi(&conn_handle, &rssi);
 8004166:	1cfa      	adds	r2, r7, #3
 8004168:	463b      	mov	r3, r7
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f00b f86f 	bl	800f250 <hci_read_rssi>
    RSSIToSend = (int16_t)rssi*10;
 8004172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004176:	b29b      	uxth	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	4413      	add	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	81fb      	strh	r3, [r7, #14]

    Batt_Env_RSSI_Update(PressToSend,BattToSend,(int16_t) TempToSend,RSSIToSend );
 8004184:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004188:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800418c:	8af9      	ldrh	r1, [r7, #22]
 800418e:	6938      	ldr	r0, [r7, #16]
 8004190:	f001 f816 	bl	80051c0 <Batt_Env_RSSI_Update>

}
 8004194:	bf00      	nop
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	f3af 8000 	nop.w
 80041a0:	66666666 	.word	0x66666666
 80041a4:	400a6666 	.word	0x400a6666
 80041a8:	00000000 	.word	0x00000000
 80041ac:	40affe00 	.word	0x40affe00
 80041b0:	200001ac 	.word	0x200001ac
 80041b4:	000f4240 	.word	0x000f4240
 80041b8:	200007f8 	.word	0x200007f8
 80041bc:	403e0000 	.word	0x403e0000
 80041c0:	40340000 	.word	0x40340000
 80041c4:	200007fc 	.word	0x200007fc
 80041c8:	200007ec 	.word	0x200007ec
 80041cc:	42c80000 	.word	0x42c80000
 80041d0:	406ccccd 	.word	0x406ccccd
 80041d4:	3efffff8 	.word	0x3efffff8
 80041d8:	200007f4 	.word	0x200007f4

080041dc <SendArmingData>:


static void SendArmingData(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
   ARMING_Update(rc_enable_motor);
 80041e0:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <SendArmingData+0x14>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 f8a6 	bl	8005338 <ARMING_Update>
}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20000428 	.word	0x20000428

080041f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <set_motor_pwm>:
/*
 * Setup the driving power for 4 motors. p1~p4 data range is 0~1999, which equals
 * to 0~100% duty cycle (for DC motor configuration)
 */
void set_motor_pwm(MotorControlTypeDef *motor_pwm)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if (motor_pwm->motor1_pwm >= MOTOR_MAX_PWM_VALUE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8004350 <set_motor_pwm+0x14c>
 8004216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421e:	db05      	blt.n	800422c <set_motor_pwm+0x28>
    htim4.Instance->CCR1 = MOTOR_MAX_PWM_VALUE;
 8004220:	4b4c      	ldr	r3, [pc, #304]	@ (8004354 <set_motor_pwm+0x150>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f240 726c 	movw	r2, #1900	@ 0x76c
 8004228:	635a      	str	r2, [r3, #52]	@ 0x34
 800422a:	e016      	b.n	800425a <set_motor_pwm+0x56>
  else if (motor_pwm->motor1_pwm <= MOTOR_MIN_PWM_VALUE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	d804      	bhi.n	8004246 <set_motor_pwm+0x42>
    htim4.Instance->CCR1 = MOTOR_MIN_PWM_VALUE;
 800423c:	4b45      	ldr	r3, [pc, #276]	@ (8004354 <set_motor_pwm+0x150>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2200      	movs	r2, #0
 8004242:	635a      	str	r2, [r3, #52]	@ 0x34
 8004244:	e009      	b.n	800425a <set_motor_pwm+0x56>
  else
    htim4.Instance->CCR1 = (uint32_t) motor_pwm->motor1_pwm; 
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	edd3 7a00 	vldr	s15, [r3]
 800424c:	4b41      	ldr	r3, [pc, #260]	@ (8004354 <set_motor_pwm+0x150>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004254:	ee17 2a90 	vmov	r2, s15
 8004258:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm->motor2_pwm >= MOTOR_MAX_PWM_VALUE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004260:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8004350 <set_motor_pwm+0x14c>
 8004264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	db05      	blt.n	800427a <set_motor_pwm+0x76>
    htim4.Instance->CCR2 = MOTOR_MAX_PWM_VALUE;
 800426e:	4b39      	ldr	r3, [pc, #228]	@ (8004354 <set_motor_pwm+0x150>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f240 726c 	movw	r2, #1900	@ 0x76c
 8004276:	639a      	str	r2, [r3, #56]	@ 0x38
 8004278:	e016      	b.n	80042a8 <set_motor_pwm+0xa4>
  else if (motor_pwm->motor2_pwm <= MOTOR_MIN_PWM_VALUE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004280:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004288:	d804      	bhi.n	8004294 <set_motor_pwm+0x90>
    htim4.Instance->CCR2 = MOTOR_MIN_PWM_VALUE;
 800428a:	4b32      	ldr	r3, [pc, #200]	@ (8004354 <set_motor_pwm+0x150>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38
 8004292:	e009      	b.n	80042a8 <set_motor_pwm+0xa4>
  else
    htim4.Instance->CCR2 = (uint32_t) motor_pwm->motor2_pwm;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	edd3 7a01 	vldr	s15, [r3, #4]
 800429a:	4b2e      	ldr	r3, [pc, #184]	@ (8004354 <set_motor_pwm+0x150>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a2:	ee17 2a90 	vmov	r2, s15
 80042a6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm->motor3_pwm >= MOTOR_MAX_PWM_VALUE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80042ae:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004350 <set_motor_pwm+0x14c>
 80042b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ba:	db05      	blt.n	80042c8 <set_motor_pwm+0xc4>
    htim4.Instance->CCR3 = MOTOR_MAX_PWM_VALUE;
 80042bc:	4b25      	ldr	r3, [pc, #148]	@ (8004354 <set_motor_pwm+0x150>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f240 726c 	movw	r2, #1900	@ 0x76c
 80042c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042c6:	e016      	b.n	80042f6 <set_motor_pwm+0xf2>
  else if (motor_pwm->motor3_pwm <= MOTOR_MIN_PWM_VALUE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80042ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	d804      	bhi.n	80042e2 <set_motor_pwm+0xde>
    htim4.Instance->CCR3 = MOTOR_MIN_PWM_VALUE;
 80042d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <set_motor_pwm+0x150>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2200      	movs	r2, #0
 80042de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042e0:	e009      	b.n	80042f6 <set_motor_pwm+0xf2>
  else
    htim4.Instance->CCR3 = (uint32_t) motor_pwm->motor3_pwm;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80042e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <set_motor_pwm+0x150>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f0:	ee17 2a90 	vmov	r2, s15
 80042f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm->motor4_pwm >= MOTOR_MAX_PWM_VALUE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80042fc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004350 <set_motor_pwm+0x14c>
 8004300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	db05      	blt.n	8004316 <set_motor_pwm+0x112>
    htim4.Instance->CCR4 = MOTOR_MAX_PWM_VALUE;
 800430a:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <set_motor_pwm+0x150>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f240 726c 	movw	r2, #1900	@ 0x76c
 8004312:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm->motor4_pwm <= MOTOR_MIN_PWM_VALUE)
    htim4.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
  else
    htim4.Instance->CCR4 = (uint32_t) motor_pwm->motor4_pwm;
}
 8004314:	e016      	b.n	8004344 <set_motor_pwm+0x140>
  else if (motor_pwm->motor4_pwm <= MOTOR_MIN_PWM_VALUE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	edd3 7a03 	vldr	s15, [r3, #12]
 800431c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d804      	bhi.n	8004330 <set_motor_pwm+0x12c>
    htim4.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <set_motor_pwm+0x150>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800432e:	e009      	b.n	8004344 <set_motor_pwm+0x140>
    htim4.Instance->CCR4 = (uint32_t) motor_pwm->motor4_pwm;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	edd3 7a03 	vldr	s15, [r3, #12]
 8004336:	4b07      	ldr	r3, [pc, #28]	@ (8004354 <set_motor_pwm+0x150>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433e:	ee17 2a90 	vmov	r2, s15
 8004342:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	44ed8000 	.word	0x44ed8000
 8004354:	20000340 	.word	0x20000340

08004358 <set_motor_pwm_zero>:


void set_motor_pwm_zero(MotorControlTypeDef *motor_pwm)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  motor_pwm->motor1_pwm = 0;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
  motor_pwm->motor2_pwm = 0;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	605a      	str	r2, [r3, #4]
  motor_pwm->motor3_pwm = 0;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  motor_pwm->motor4_pwm = 0;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	60da      	str	r2, [r3, #12]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <QuaternionToEuler>:

/*
 * Convert Quaternion to Euler Angle
 */
void QuaternionToEuler(QuaternionTypeDef *qr, EulerAngleTypeDef *ea)
{
 800438c:	b5b0      	push	{r4, r5, r7, lr}
 800438e:	b08e      	sub	sp, #56	@ 0x38
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
    float q0q0, q1q1, q2q2, q3q3;
    float dq0, dq1, dq2;
    float dq1q3, dq0q2/*, dq1q2*/;
    float dq0q1, dq2q3/*, dq0q3*/;

    q0q0 = qr->q0*qr->q0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	ed93 7a00 	vldr	s14, [r3]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	edd3 7a00 	vldr	s15, [r3]
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    q1q1 = qr->q1*qr->q1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q2q2 = qr->q2*qr->q2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    q3q3 = qr->q3*qr->q3;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	edd3 7a03 	vldr	s15, [r3, #12]
 80043de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    dq0 = 2*qr->q0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    dq1 = 2*qr->q1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80043fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043fe:	edc7 7a08 	vstr	s15, [r7, #32]
    dq2 = 2*qr->q2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	edd3 7a02 	vldr	s15, [r3, #8]
 8004408:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800440c:	edc7 7a07 	vstr	s15, [r7, #28]
    //dq1q2 = dq1 * qr->q2;
    dq1q3 = dq1 * qr->q3;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	edd3 7a03 	vldr	s15, [r3, #12]
 8004416:	ed97 7a08 	vldr	s14, [r7, #32]
 800441a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441e:	edc7 7a06 	vstr	s15, [r7, #24]
    dq0q2 = dq0 * qr->q2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	edd3 7a02 	vldr	s15, [r3, #8]
 8004428:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800442c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004430:	edc7 7a05 	vstr	s15, [r7, #20]
    //dq0q3 = dq0 * qr->q3;
    dq0q1 = dq0 * qr->q1;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	edd3 7a01 	vldr	s15, [r3, #4]
 800443a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a04 	vstr	s15, [r7, #16]
    dq2q3 = dq2 * qr->q3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	edd3 7a03 	vldr	s15, [r3, #12]
 800444c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004454:	edc7 7a03 	vstr	s15, [r7, #12]

    ea->thx = atan2(dq0q1+dq2q3, q0q0+q3q3-q1q1-q2q2);
 8004458:	ed97 7a04 	vldr	s14, [r7, #16]
 800445c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004464:	ee17 0a90 	vmov	r0, s15
 8004468:	f7fc f86e 	bl	8000548 <__aeabi_f2d>
 800446c:	4604      	mov	r4, r0
 800446e:	460d      	mov	r5, r1
 8004470:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004474:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800447c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004484:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800448c:	ee17 0a90 	vmov	r0, s15
 8004490:	f7fc f85a 	bl	8000548 <__aeabi_f2d>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	ec43 2b11 	vmov	d1, r2, r3
 800449c:	ec45 4b10 	vmov	d0, r4, r5
 80044a0:	f00c fb42 	bl	8010b28 <atan2>
 80044a4:	ec53 2b10 	vmov	r2, r3, d0
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	f7fc fb54 	bl	8000b58 <__aeabi_d2f>
 80044b0:	4602      	mov	r2, r0
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	601a      	str	r2, [r3, #0]
    ea->thy = asin(dq0q2-dq1q3);
 80044b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80044ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80044be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c2:	ee17 0a90 	vmov	r0, s15
 80044c6:	f7fc f83f 	bl	8000548 <__aeabi_f2d>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	ec43 2b10 	vmov	d0, r2, r3
 80044d2:	f00c faf5 	bl	8010ac0 <asin>
 80044d6:	ec53 2b10 	vmov	r2, r3, d0
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	f7fc fb3b 	bl	8000b58 <__aeabi_d2f>
 80044e2:	4602      	mov	r2, r0
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	605a      	str	r2, [r3, #4]
    
    

    //ea->thz = atan2(dq1q2+dq0q3, q0q0+q1q1-q2q2-q3q3);

}
 80044e8:	bf00      	nop
 80044ea:	3738      	adds	r7, #56	@ 0x38
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bdb0      	pop	{r4, r5, r7, pc}

080044f0 <init_remote_control>:

// privite function
void init_rc_variables(void);

void init_remote_control(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  rc_connection_flag = 0;
 80044f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <init_remote_control+0x40>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
  rc_timeout = 1000;
 80044fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004534 <init_remote_control+0x44>)
 80044fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004500:	601a      	str	r2, [r3, #0]

  // Initial R/C global variables
  gAIL = 0;
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <init_remote_control+0x48>)
 8004504:	2200      	movs	r2, #0
 8004506:	801a      	strh	r2, [r3, #0]
  gELE = 0;
 8004508:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <init_remote_control+0x4c>)
 800450a:	2200      	movs	r2, #0
 800450c:	801a      	strh	r2, [r3, #0]
  gTHR = 0;
 800450e:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <init_remote_control+0x50>)
 8004510:	2200      	movs	r2, #0
 8004512:	801a      	strh	r2, [r3, #0]
  gRUD = 0;
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <init_remote_control+0x54>)
 8004516:	2200      	movs	r2, #0
 8004518:	801a      	strh	r2, [r3, #0]

  init_rc_variables();
 800451a:	f000 f819 	bl	8004550 <init_rc_variables>
  // queue for test purpose
  cnt = 0;
 800451e:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <init_remote_control+0x58>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
  init_queue(&que);
 8004524:	4809      	ldr	r0, [pc, #36]	@ (800454c <init_remote_control+0x5c>)
 8004526:	f000 f967 	bl	80047f8 <init_queue>
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000918 	.word	0x20000918
 8004534:	20000914 	.word	0x20000914
 8004538:	20000950 	.word	0x20000950
 800453c:	20000952 	.word	0x20000952
 8004540:	20000954 	.word	0x20000954
 8004544:	20000956 	.word	0x20000956
 8004548:	200009a4 	.word	0x200009a4
 800454c:	20000958 	.word	0x20000958

08004550 <init_rc_variables>:

void init_rc_variables(void)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
  uint32_t i;
  rc_connection_flag = 0;
 8004556:	4b13      	ldr	r3, [pc, #76]	@ (80045a4 <init_rc_variables+0x54>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
  for (i=0;i<4;i++)
 800455c:	2300      	movs	r3, #0
 800455e:	607b      	str	r3, [r7, #4]
 8004560:	e016      	b.n	8004590 <init_rc_variables+0x40>
  {
    rc_flag[i] = 0;
 8004562:	4a11      	ldr	r2, [pc, #68]	@ (80045a8 <init_rc_variables+0x58>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
    rc_t_rise[i] = 0;
 800456c:	4a0f      	ldr	r2, [pc, #60]	@ (80045ac <init_rc_variables+0x5c>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2100      	movs	r1, #0
 8004572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rc_t_fall[i] = 0;
 8004576:	4a0e      	ldr	r2, [pc, #56]	@ (80045b0 <init_rc_variables+0x60>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2100      	movs	r1, #0
 800457c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rc_t[i] = 0;
 8004580:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <init_rc_variables+0x64>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2100      	movs	r1, #0
 8004586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i=0;i<4;i++)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3301      	adds	r3, #1
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d9e5      	bls.n	8004562 <init_rc_variables+0x12>
  }
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	20000918 	.word	0x20000918
 80045a8:	2000091c 	.word	0x2000091c
 80045ac:	20000920 	.word	0x20000920
 80045b0:	20000930 	.word	0x20000930
 80045b4:	20000940 	.word	0x20000940

080045b8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
      }
  }
  #endif
  #ifdef REMOCON_BLE
        
        update_rc_data(0);
 80045c0:	2000      	movs	r0, #0
 80045c2:	f000 f805 	bl	80045d0 <update_rc_data>
      
  #endif
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <update_rc_data>:
}


/* Update global variables of R/C data */
void update_rc_data(int32_t idx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
      default: break;
    }
  #endif
  
  // Activate Calibration Procedure  
  if ( (gTHR == 0) && (gELE < - RC_CAL_THRESHOLD) && (gAIL > RC_CAL_THRESHOLD) && (gRUD < - RC_CAL_THRESHOLD))
 80045d8:	4b23      	ldr	r3, [pc, #140]	@ (8004668 <update_rc_data+0x98>)
 80045da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d114      	bne.n	800460c <update_rc_data+0x3c>
 80045e2:	4b22      	ldr	r3, [pc, #136]	@ (800466c <update_rc_data+0x9c>)
 80045e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e8:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 80045ec:	da0e      	bge.n	800460c <update_rc_data+0x3c>
 80045ee:	4b20      	ldr	r3, [pc, #128]	@ (8004670 <update_rc_data+0xa0>)
 80045f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f4:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80045f8:	dd08      	ble.n	800460c <update_rc_data+0x3c>
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <update_rc_data+0xa4>)
 80045fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004600:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 8004604:	da02      	bge.n	800460c <update_rc_data+0x3c>
  {
    rc_cal_flag = 1;
 8004606:	4b1c      	ldr	r3, [pc, #112]	@ (8004678 <update_rc_data+0xa8>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
  }

  // Activate Arming/Disarming 
  if ( (gTHR == 0) && (gELE < - RC_CAL_THRESHOLD) && (gAIL < - RC_CAL_THRESHOLD) && (gRUD > RC_CAL_THRESHOLD))
 800460c:	4b16      	ldr	r3, [pc, #88]	@ (8004668 <update_rc_data+0x98>)
 800460e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d122      	bne.n	800465c <update_rc_data+0x8c>
 8004616:	4b15      	ldr	r3, [pc, #84]	@ (800466c <update_rc_data+0x9c>)
 8004618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800461c:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 8004620:	da1c      	bge.n	800465c <update_rc_data+0x8c>
 8004622:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <update_rc_data+0xa0>)
 8004624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004628:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 800462c:	da16      	bge.n	800465c <update_rc_data+0x8c>
 800462e:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <update_rc_data+0xa4>)
 8004630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004634:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8004638:	dd10      	ble.n	800465c <update_rc_data+0x8c>
  {
    if (rc_enable_motor==0) // if not armed -> arm
 800463a:	4b10      	ldr	r3, [pc, #64]	@ (800467c <update_rc_data+0xac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <update_rc_data+0x80>
    {
      rc_enable_motor = 1;
 8004642:	4b0e      	ldr	r3, [pc, #56]	@ (800467c <update_rc_data+0xac>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
      fly_ready = 1;
 8004648:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <update_rc_data+0xb0>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    {
      rc_enable_motor = 0;
      fly_ready = 0;
    }
  }
}
 800464e:	e005      	b.n	800465c <update_rc_data+0x8c>
      rc_enable_motor = 0;
 8004650:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <update_rc_data+0xac>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
      fly_ready = 0;
 8004656:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <update_rc_data+0xb0>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000954 	.word	0x20000954
 800466c:	20000952 	.word	0x20000952
 8004670:	20000950 	.word	0x20000950
 8004674:	20000956 	.word	0x20000956
 8004678:	20000424 	.word	0x20000424
 800467c:	20000428 	.word	0x20000428
 8004680:	20000430 	.word	0x20000430

08004684 <GetTargetEulerAngle>:

/*
 * Convert RC received gAIL, gELE, gRUD
 */
void GetTargetEulerAngle(EulerAngleTypeDef *euler_rc, EulerAngleTypeDef *euler_ahrs)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
    t1 = gELE;
 800468e:	4b51      	ldr	r3, [pc, #324]	@ (80047d4 <GetTargetEulerAngle+0x150>)
 8004690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004694:	461a      	mov	r2, r3
 8004696:	4b50      	ldr	r3, [pc, #320]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004698:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 800469a:	4b4f      	ldr	r3, [pc, #316]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80046a2:	dd04      	ble.n	80046ae <GetTargetEulerAngle+0x2a>
        t1 = RC_FULLSCALE;
 80046a4:	4b4c      	ldr	r3, [pc, #304]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80046a6:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e007      	b.n	80046be <GetTargetEulerAngle+0x3a>
    else if (t1 < -RC_FULLSCALE)
 80046ae:	4b4a      	ldr	r3, [pc, #296]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 80046b6:	da02      	bge.n	80046be <GetTargetEulerAngle+0x3a>
        t1 = - RC_FULLSCALE;
 80046b8:	4b47      	ldr	r3, [pc, #284]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80046ba:	4a48      	ldr	r2, [pc, #288]	@ (80047dc <GetTargetEulerAngle+0x158>)
 80046bc:	601a      	str	r2, [r3, #0]
    euler_rc->thx = -t1 * max_pitch_rad / RC_FULLSCALE;
 80046be:	4b46      	ldr	r3, [pc, #280]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	425b      	negs	r3, r3
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046cc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80047e0 <GetTargetEulerAngle+0x15c>
 80046d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046d4:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80047e4 <GetTargetEulerAngle+0x160>
 80046d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	edc3 7a00 	vstr	s15, [r3]

    t1 = gAIL;
 80046e2:	4b41      	ldr	r3, [pc, #260]	@ (80047e8 <GetTargetEulerAngle+0x164>)
 80046e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046e8:	461a      	mov	r2, r3
 80046ea:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80046ec:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80046ee:	4b3a      	ldr	r3, [pc, #232]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80046f6:	dd04      	ble.n	8004702 <GetTargetEulerAngle+0x7e>
        t1 = RC_FULLSCALE;
 80046f8:	4b37      	ldr	r3, [pc, #220]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80046fa:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e007      	b.n	8004712 <GetTargetEulerAngle+0x8e>
    else if (t1 < -RC_FULLSCALE)
 8004702:	4b35      	ldr	r3, [pc, #212]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 800470a:	da02      	bge.n	8004712 <GetTargetEulerAngle+0x8e>
        t1 = - RC_FULLSCALE;
 800470c:	4b32      	ldr	r3, [pc, #200]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 800470e:	4a33      	ldr	r2, [pc, #204]	@ (80047dc <GetTargetEulerAngle+0x158>)
 8004710:	601a      	str	r2, [r3, #0]
    euler_rc->thy = -t1 * max_roll_rad / RC_FULLSCALE;
 8004712:	4b31      	ldr	r3, [pc, #196]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	425b      	negs	r3, r3
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004720:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80047e0 <GetTargetEulerAngle+0x15c>
 8004724:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004728:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80047e4 <GetTargetEulerAngle+0x160>
 800472c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	edc3 7a01 	vstr	s15, [r3, #4]

    t1 = gRUD;
 8004736:	4b2d      	ldr	r3, [pc, #180]	@ (80047ec <GetTargetEulerAngle+0x168>)
 8004738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800473c:	461a      	mov	r2, r3
 800473e:	4b26      	ldr	r3, [pc, #152]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004740:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8004742:	4b25      	ldr	r3, [pc, #148]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800474a:	dd04      	ble.n	8004756 <GetTargetEulerAngle+0xd2>
        t1 = RC_FULLSCALE;
 800474c:	4b22      	ldr	r3, [pc, #136]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 800474e:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e007      	b.n	8004766 <GetTargetEulerAngle+0xe2>
    else if (t1 < -RC_FULLSCALE)
 8004756:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 800475e:	da02      	bge.n	8004766 <GetTargetEulerAngle+0xe2>
        t1 = - RC_FULLSCALE;
 8004760:	4b1d      	ldr	r3, [pc, #116]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004762:	4a1e      	ldr	r2, [pc, #120]	@ (80047dc <GetTargetEulerAngle+0x158>)
 8004764:	601a      	str	r2, [r3, #0]

    if(rc_z_control_flag == 1)
 8004766:	4b22      	ldr	r3, [pc, #136]	@ (80047f0 <GetTargetEulerAngle+0x16c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d11f      	bne.n	80047ae <GetTargetEulerAngle+0x12a>
    {
      if(t1 > EULER_Z_TH)
 800476e:	4b1a      	ldr	r3, [pc, #104]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004776:	dd0a      	ble.n	800478e <GetTargetEulerAngle+0x10a>
      {
        euler_rc->thz = euler_rc->thz + max_yaw_rad;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	edd3 7a02 	vldr	s15, [r3, #8]
 800477e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80047f4 <GetTargetEulerAngle+0x170>
 8004782:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	edc3 7a02 	vstr	s15, [r3, #8]
      if(t1 > -EULER_Z_TH&&t1 < EULER_Z_TH)
      {
           rc_z_control_flag = 1;
      }
    }
}
 800478c:	e01c      	b.n	80047c8 <GetTargetEulerAngle+0x144>
      else if(t1 < -EULER_Z_TH)
 800478e:	4b12      	ldr	r3, [pc, #72]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 8004796:	da17      	bge.n	80047c8 <GetTargetEulerAngle+0x144>
        euler_rc->thz = euler_rc->thz - max_yaw_rad;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	edd3 7a02 	vldr	s15, [r3, #8]
 800479e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80047f4 <GetTargetEulerAngle+0x170>
 80047a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80047ac:	e00c      	b.n	80047c8 <GetTargetEulerAngle+0x144>
      if(t1 > -EULER_Z_TH&&t1 < EULER_Z_TH)
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 80047b6:	dd07      	ble.n	80047c8 <GetTargetEulerAngle+0x144>
 80047b8:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <GetTargetEulerAngle+0x154>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80047c0:	da02      	bge.n	80047c8 <GetTargetEulerAngle+0x144>
           rc_z_control_flag = 1;
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <GetTargetEulerAngle+0x16c>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	20000952 	.word	0x20000952
 80047d8:	20000910 	.word	0x20000910
 80047dc:	fffff8f8 	.word	0xfffff8f8
 80047e0:	3f060a92 	.word	0x3f060a92
 80047e4:	44e10000 	.word	0x44e10000
 80047e8:	20000950 	.word	0x20000950
 80047ec:	20000956 	.word	0x20000956
 80047f0:	20000020 	.word	0x20000020
 80047f4:	3bd67750 	.word	0x3bd67750

080047f8 <init_queue>:


void init_queue(Queue_TypeDef *q)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  int32_t i;

  q->header = 0;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	801a      	strh	r2, [r3, #0]
  q->tail = 0;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	805a      	strh	r2, [r3, #2]
  q->length = QUEUE_LENGTH;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2210      	movs	r2, #16
 8004810:	809a      	strh	r2, [r3, #4]
  q->full = 0;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	80da      	strh	r2, [r3, #6]
  q->empty = 1;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	811a      	strh	r2, [r3, #8]
  for (i=0;i<QUEUE_LENGTH;i++)
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e00f      	b.n	8004844 <init_queue+0x4c>
  {
    q->buffer[i][0] = 0;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3302      	adds	r3, #2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	2200      	movs	r2, #0
 8004830:	805a      	strh	r2, [r3, #2]
    q->buffer[i][1] = 0;
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	2200      	movs	r2, #0
 800483c:	819a      	strh	r2, [r3, #12]
  for (i=0;i<QUEUE_LENGTH;i++)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3301      	adds	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b0f      	cmp	r3, #15
 8004848:	ddec      	ble.n	8004824 <init_queue+0x2c>
  }
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <safe_aci_gatt_update_char_value>:
tBleStatus safe_aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
				      const uint8_t *charValue)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b087      	sub	sp, #28
 800485c:	af02      	add	r7, sp, #8
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4623      	mov	r3, r4
 8004868:	80fb      	strh	r3, [r7, #6]
 800486a:	4603      	mov	r3, r0
 800486c:	80bb      	strh	r3, [r7, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	70fb      	strb	r3, [r7, #3]
 8004872:	4613      	mov	r3, r2
 8004874:	70bb      	strb	r3, [r7, #2]
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 8004876:	2364      	movs	r3, #100	@ 0x64
 8004878:	73fb      	strb	r3, [r7, #15]
  
  if (breath > 0) {
 800487a:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <safe_aci_gatt_update_char_value+0x64>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	dd05      	ble.n	800488e <safe_aci_gatt_update_char_value+0x36>
    breath--;
 8004882:	4b0e      	ldr	r3, [pc, #56]	@ (80048bc <safe_aci_gatt_update_char_value+0x64>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	4a0c      	ldr	r2, [pc, #48]	@ (80048bc <safe_aci_gatt_update_char_value+0x64>)
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	e010      	b.n	80048b0 <safe_aci_gatt_update_char_value+0x58>
  } else {
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
 800488e:	78bc      	ldrb	r4, [r7, #2]
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	88b9      	ldrh	r1, [r7, #4]
 8004894:	88f8      	ldrh	r0, [r7, #6]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	4623      	mov	r3, r4
 800489c:	f00a f80c 	bl	800e8b8 <aci_gatt_update_char_value>
 80048a0:	4603      	mov	r3, r0
 80048a2:	73fb      	strb	r3, [r7, #15]
    
    if (ret != BLE_STATUS_SUCCESS){
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <safe_aci_gatt_update_char_value+0x58>
      breath = ACC_BLUENRG_CONGESTION_SKIP;
 80048aa:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <safe_aci_gatt_update_char_value+0x64>)
 80048ac:	221e      	movs	r2, #30
 80048ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  return (ret);
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd90      	pop	{r4, r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200009f4 	.word	0x200009f4

080048c0 <Add_ConfigW2ST_Service>:
 * @brief  Add the Config service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_ConfigW2ST_Service(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	@ 0x30
 80048c4:	af06      	add	r7, sp, #24
  tBleStatus ret;

  uint8_t uuid[16];

  COPY_CONFIG_SERVICE_UUID(uuid);
 80048c6:	231b      	movs	r3, #27
 80048c8:	713b      	strb	r3, [r7, #4]
 80048ca:	23c5      	movs	r3, #197	@ 0xc5
 80048cc:	717b      	strb	r3, [r7, #5]
 80048ce:	23d5      	movs	r3, #213	@ 0xd5
 80048d0:	71bb      	strb	r3, [r7, #6]
 80048d2:	23a5      	movs	r3, #165	@ 0xa5
 80048d4:	71fb      	strb	r3, [r7, #7]
 80048d6:	2302      	movs	r3, #2
 80048d8:	723b      	strb	r3, [r7, #8]
 80048da:	2300      	movs	r3, #0
 80048dc:	727b      	strb	r3, [r7, #9]
 80048de:	23b4      	movs	r3, #180	@ 0xb4
 80048e0:	72bb      	strb	r3, [r7, #10]
 80048e2:	239a      	movs	r3, #154	@ 0x9a
 80048e4:	72fb      	strb	r3, [r7, #11]
 80048e6:	23e1      	movs	r3, #225	@ 0xe1
 80048e8:	733b      	strb	r3, [r7, #12]
 80048ea:	2311      	movs	r3, #17
 80048ec:	737b      	strb	r3, [r7, #13]
 80048ee:	230f      	movs	r3, #15
 80048f0:	73bb      	strb	r3, [r7, #14]
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	2300      	movs	r3, #0
 80048f8:	743b      	strb	r3, [r7, #16]
 80048fa:	2300      	movs	r3, #0
 80048fc:	747b      	strb	r3, [r7, #17]
 80048fe:	2300      	movs	r3, #0
 8004900:	74bb      	strb	r3, [r7, #18]
 8004902:	2300      	movs	r3, #0
 8004904:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3,&ConfigServW2STHandle);
 8004906:	1d39      	adds	r1, r7, #4
 8004908:	4b26      	ldr	r3, [pc, #152]	@ (80049a4 <Add_ConfigW2ST_Service+0xe4>)
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2304      	movs	r3, #4
 800490e:	2201      	movs	r2, #1
 8004910:	2002      	movs	r0, #2
 8004912:	f009 fe7a 	bl	800e60a <aci_gatt_add_serv>
 8004916:	4603      	mov	r3, r0
 8004918:	75fb      	strb	r3, [r7, #23]

  if (ret != BLE_STATUS_SUCCESS)
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d139      	bne.n	8004994 <Add_ConfigW2ST_Service+0xd4>
    goto fail;

  COPY_CONFIG_W2ST_CHAR_UUID(uuid);
 8004920:	231b      	movs	r3, #27
 8004922:	713b      	strb	r3, [r7, #4]
 8004924:	23c5      	movs	r3, #197	@ 0xc5
 8004926:	717b      	strb	r3, [r7, #5]
 8004928:	23d5      	movs	r3, #213	@ 0xd5
 800492a:	71bb      	strb	r3, [r7, #6]
 800492c:	23a5      	movs	r3, #165	@ 0xa5
 800492e:	71fb      	strb	r3, [r7, #7]
 8004930:	2302      	movs	r3, #2
 8004932:	723b      	strb	r3, [r7, #8]
 8004934:	2300      	movs	r3, #0
 8004936:	727b      	strb	r3, [r7, #9]
 8004938:	2336      	movs	r3, #54	@ 0x36
 800493a:	72bb      	strb	r3, [r7, #10]
 800493c:	23ac      	movs	r3, #172	@ 0xac
 800493e:	72fb      	strb	r3, [r7, #11]
 8004940:	23e1      	movs	r3, #225	@ 0xe1
 8004942:	733b      	strb	r3, [r7, #12]
 8004944:	2311      	movs	r3, #17
 8004946:	737b      	strb	r3, [r7, #13]
 8004948:	230f      	movs	r3, #15
 800494a:	73bb      	strb	r3, [r7, #14]
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]
 8004950:	2302      	movs	r3, #2
 8004952:	743b      	strb	r3, [r7, #16]
 8004954:	2300      	movs	r3, #0
 8004956:	747b      	strb	r3, [r7, #17]
 8004958:	2300      	movs	r3, #0
 800495a:	74bb      	strb	r3, [r7, #18]
 800495c:	2300      	movs	r3, #0
 800495e:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConfigServW2STHandle, UUID_TYPE_128, uuid, 20 /* Max Dimension */,
 8004960:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <Add_ConfigW2ST_Service+0xe4>)
 8004962:	8818      	ldrh	r0, [r3, #0]
 8004964:	1d3a      	adds	r2, r7, #4
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <Add_ConfigW2ST_Service+0xe8>)
 8004968:	9305      	str	r3, [sp, #20]
 800496a:	2301      	movs	r3, #1
 800496c:	9304      	str	r3, [sp, #16]
 800496e:	2310      	movs	r3, #16
 8004970:	9303      	str	r3, [sp, #12]
 8004972:	2305      	movs	r3, #5
 8004974:	9302      	str	r3, [sp, #8]
 8004976:	2300      	movs	r3, #0
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	2314      	movs	r3, #20
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2314      	movs	r3, #20
 8004980:	2102      	movs	r1, #2
 8004982:	f009 fecb 	bl	800e71c <aci_gatt_add_char>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &ConfigCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <Add_ConfigW2ST_Service+0xd8>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8004990:	2300      	movs	r3, #0
 8004992:	e003      	b.n	800499c <Add_ConfigW2ST_Service+0xdc>
    goto fail;
 8004994:	bf00      	nop
 8004996:	e000      	b.n	800499a <Add_ConfigW2ST_Service+0xda>
    goto fail;
 8004998:	bf00      	nop

fail:
  //PRINTF("Error while adding Configuration service.\n");
  return BLE_STATUS_ERROR;
 800499a:	2347      	movs	r3, #71	@ 0x47
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	200009b8 	.word	0x200009b8
 80049a8:	200009ba 	.word	0x200009ba

080049ac <Add_ConsoleW2ST_Service>:
 * @brief  Add the Console service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_ConsoleW2ST_Service(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	@ 0x30
 80049b0:	af06      	add	r7, sp, #24
  tBleStatus ret;

  uint8_t uuid[16];

  COPY_CONSOLE_SERVICE_UUID(uuid);
 80049b2:	231b      	movs	r3, #27
 80049b4:	713b      	strb	r3, [r7, #4]
 80049b6:	23c5      	movs	r3, #197	@ 0xc5
 80049b8:	717b      	strb	r3, [r7, #5]
 80049ba:	23d5      	movs	r3, #213	@ 0xd5
 80049bc:	71bb      	strb	r3, [r7, #6]
 80049be:	23a5      	movs	r3, #165	@ 0xa5
 80049c0:	71fb      	strb	r3, [r7, #7]
 80049c2:	2302      	movs	r3, #2
 80049c4:	723b      	strb	r3, [r7, #8]
 80049c6:	2300      	movs	r3, #0
 80049c8:	727b      	strb	r3, [r7, #9]
 80049ca:	23b4      	movs	r3, #180	@ 0xb4
 80049cc:	72bb      	strb	r3, [r7, #10]
 80049ce:	239a      	movs	r3, #154	@ 0x9a
 80049d0:	72fb      	strb	r3, [r7, #11]
 80049d2:	23e1      	movs	r3, #225	@ 0xe1
 80049d4:	733b      	strb	r3, [r7, #12]
 80049d6:	2311      	movs	r3, #17
 80049d8:	737b      	strb	r3, [r7, #13]
 80049da:	230e      	movs	r3, #14
 80049dc:	73bb      	strb	r3, [r7, #14]
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	2300      	movs	r3, #0
 80049e4:	743b      	strb	r3, [r7, #16]
 80049e6:	2300      	movs	r3, #0
 80049e8:	747b      	strb	r3, [r7, #17]
 80049ea:	2300      	movs	r3, #0
 80049ec:	74bb      	strb	r3, [r7, #18]
 80049ee:	2300      	movs	r3, #0
 80049f0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE, 1+3*2,&ConsoleW2STHandle);
 80049f2:	1d39      	adds	r1, r7, #4
 80049f4:	4b43      	ldr	r3, [pc, #268]	@ (8004b04 <Add_ConsoleW2ST_Service+0x158>)
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2307      	movs	r3, #7
 80049fa:	2201      	movs	r2, #1
 80049fc:	2002      	movs	r0, #2
 80049fe:	f009 fe04 	bl	800e60a <aci_gatt_add_serv>
 8004a02:	4603      	mov	r3, r0
 8004a04:	75fb      	strb	r3, [r7, #23]

  if (ret != BLE_STATUS_SUCCESS) {
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d171      	bne.n	8004af0 <Add_ConsoleW2ST_Service+0x144>
    goto fail;
  }

  COPY_TERM_CHAR_UUID(uuid);
 8004a0c:	231b      	movs	r3, #27
 8004a0e:	713b      	strb	r3, [r7, #4]
 8004a10:	23c5      	movs	r3, #197	@ 0xc5
 8004a12:	717b      	strb	r3, [r7, #5]
 8004a14:	23d5      	movs	r3, #213	@ 0xd5
 8004a16:	71bb      	strb	r3, [r7, #6]
 8004a18:	23a5      	movs	r3, #165	@ 0xa5
 8004a1a:	71fb      	strb	r3, [r7, #7]
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	723b      	strb	r3, [r7, #8]
 8004a20:	2300      	movs	r3, #0
 8004a22:	727b      	strb	r3, [r7, #9]
 8004a24:	2336      	movs	r3, #54	@ 0x36
 8004a26:	72bb      	strb	r3, [r7, #10]
 8004a28:	23ac      	movs	r3, #172	@ 0xac
 8004a2a:	72fb      	strb	r3, [r7, #11]
 8004a2c:	23e1      	movs	r3, #225	@ 0xe1
 8004a2e:	733b      	strb	r3, [r7, #12]
 8004a30:	2311      	movs	r3, #17
 8004a32:	737b      	strb	r3, [r7, #13]
 8004a34:	230e      	movs	r3, #14
 8004a36:	73bb      	strb	r3, [r7, #14]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73fb      	strb	r3, [r7, #15]
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	743b      	strb	r3, [r7, #16]
 8004a40:	2300      	movs	r3, #0
 8004a42:	747b      	strb	r3, [r7, #17]
 8004a44:	2300      	movs	r3, #0
 8004a46:	74bb      	strb	r3, [r7, #18]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConsoleW2STHandle, UUID_TYPE_128, uuid, W2ST_CONSOLE_MAX_CHAR_LEN,
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <Add_ConsoleW2ST_Service+0x158>)
 8004a4e:	8818      	ldrh	r0, [r3, #0]
 8004a50:	1d3a      	adds	r2, r7, #4
 8004a52:	4b2d      	ldr	r3, [pc, #180]	@ (8004b08 <Add_ConsoleW2ST_Service+0x15c>)
 8004a54:	9305      	str	r3, [sp, #20]
 8004a56:	2301      	movs	r3, #1
 8004a58:	9304      	str	r3, [sp, #16]
 8004a5a:	2310      	movs	r3, #16
 8004a5c:	9303      	str	r3, [sp, #12]
 8004a5e:	2305      	movs	r3, #5
 8004a60:	9302      	str	r3, [sp, #8]
 8004a62:	2300      	movs	r3, #0
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	231e      	movs	r3, #30
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	2314      	movs	r3, #20
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	f009 fe55 	bl	800e71c <aci_gatt_add_char>
 8004a72:	4603      	mov	r3, r0
 8004a74:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE | CHAR_PROP_READ ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &TermCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d13b      	bne.n	8004af4 <Add_ConsoleW2ST_Service+0x148>
    goto fail;
  }

  COPY_STDERR_CHAR_UUID(uuid);
 8004a7c:	231b      	movs	r3, #27
 8004a7e:	713b      	strb	r3, [r7, #4]
 8004a80:	23c5      	movs	r3, #197	@ 0xc5
 8004a82:	717b      	strb	r3, [r7, #5]
 8004a84:	23d5      	movs	r3, #213	@ 0xd5
 8004a86:	71bb      	strb	r3, [r7, #6]
 8004a88:	23a5      	movs	r3, #165	@ 0xa5
 8004a8a:	71fb      	strb	r3, [r7, #7]
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	723b      	strb	r3, [r7, #8]
 8004a90:	2300      	movs	r3, #0
 8004a92:	727b      	strb	r3, [r7, #9]
 8004a94:	2336      	movs	r3, #54	@ 0x36
 8004a96:	72bb      	strb	r3, [r7, #10]
 8004a98:	23ac      	movs	r3, #172	@ 0xac
 8004a9a:	72fb      	strb	r3, [r7, #11]
 8004a9c:	23e1      	movs	r3, #225	@ 0xe1
 8004a9e:	733b      	strb	r3, [r7, #12]
 8004aa0:	2311      	movs	r3, #17
 8004aa2:	737b      	strb	r3, [r7, #13]
 8004aa4:	230e      	movs	r3, #14
 8004aa6:	73bb      	strb	r3, [r7, #14]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	2302      	movs	r3, #2
 8004aae:	743b      	strb	r3, [r7, #16]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	747b      	strb	r3, [r7, #17]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	74bb      	strb	r3, [r7, #18]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	74fb      	strb	r3, [r7, #19]
  ret =  aci_gatt_add_char(ConsoleW2STHandle, UUID_TYPE_128, uuid, W2ST_CONSOLE_MAX_CHAR_LEN,
 8004abc:	4b11      	ldr	r3, [pc, #68]	@ (8004b04 <Add_ConsoleW2ST_Service+0x158>)
 8004abe:	8818      	ldrh	r0, [r3, #0]
 8004ac0:	1d3a      	adds	r2, r7, #4
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <Add_ConsoleW2ST_Service+0x160>)
 8004ac4:	9305      	str	r3, [sp, #20]
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	2310      	movs	r3, #16
 8004acc:	9303      	str	r3, [sp, #12]
 8004ace:	2304      	movs	r3, #4
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	2312      	movs	r3, #18
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2314      	movs	r3, #20
 8004adc:	2102      	movs	r1, #2
 8004ade:	f009 fe1d 	bl	800e71c <aci_gatt_add_char>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &StdErrCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <Add_ConsoleW2ST_Service+0x14c>
     goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e005      	b.n	8004afc <Add_ConsoleW2ST_Service+0x150>
    goto fail;
 8004af0:	bf00      	nop
 8004af2:	e002      	b.n	8004afa <Add_ConsoleW2ST_Service+0x14e>
    goto fail;
 8004af4:	bf00      	nop
 8004af6:	e000      	b.n	8004afa <Add_ConsoleW2ST_Service+0x14e>
     goto fail;
 8004af8:	bf00      	nop

fail:
  //PRINTF("Error while adding Console service.\n");
  return BLE_STATUS_ERROR;
 8004afa:	2347      	movs	r3, #71	@ 0x47
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200009bc 	.word	0x200009bc
 8004b08:	200009be 	.word	0x200009be
 8004b0c:	200009c0 	.word	0x200009c0

08004b10 <Stderr_Update>:
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */
tBleStatus Stderr_Update(uint8_t *data,uint8_t length)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;

  /* Split the code in packages*/
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e02d      	b.n	8004b7e <Stderr_Update+0x6e>
    DataToSend = (length-Offset);
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 8004b2a:	7bbb      	ldrb	r3, [r7, #14]
 8004b2c:	2b14      	cmp	r3, #20
 8004b2e:	bf28      	it	cs
 8004b30:	2314      	movcs	r3, #20
 8004b32:	73bb      	strb	r3, [r7, #14]

    /* keep a copy */
    memcpy(LastStderrBuffer,data+Offset,DataToSend);
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4413      	add	r3, r2
 8004b3a:	7bba      	ldrb	r2, [r7, #14]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4814      	ldr	r0, [pc, #80]	@ (8004b90 <Stderr_Update+0x80>)
 8004b40:	f00b fb74 	bl	801022c <memcpy>
    LastStderrLen = DataToSend;
 8004b44:	4a13      	ldr	r2, [pc, #76]	@ (8004b94 <Stderr_Update+0x84>)
 8004b46:	7bbb      	ldrb	r3, [r7, #14]
 8004b48:	7013      	strb	r3, [r2, #0]

    ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, DataToSend , data+Offset);
 8004b4a:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <Stderr_Update+0x88>)
 8004b4c:	8818      	ldrh	r0, [r3, #0]
 8004b4e:	4b13      	ldr	r3, [pc, #76]	@ (8004b9c <Stderr_Update+0x8c>)
 8004b50:	8819      	ldrh	r1, [r3, #0]
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	4413      	add	r3, r2
 8004b58:	7bba      	ldrb	r2, [r7, #14]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f009 feaa 	bl	800e8b8 <aci_gatt_update_char_value>
 8004b64:	4603      	mov	r3, r0
 8004b66:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS) {
 8004b68:	7b7b      	ldrb	r3, [r7, #13]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <Stderr_Update+0x62>
      return BLE_STATUS_ERROR;
 8004b6e:	2347      	movs	r3, #71	@ 0x47
 8004b70:	e00a      	b.n	8004b88 <Stderr_Update+0x78>
    }
    HAL_Delay(10);
 8004b72:	200a      	movs	r0, #10
 8004b74:	f004 fc30 	bl	80093d8 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	73fb      	strb	r3, [r7, #15]
 8004b7e:	7bfa      	ldrb	r2, [r7, #15]
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3cd      	bcc.n	8004b22 <Stderr_Update+0x12>
  }

  return BLE_STATUS_SUCCESS;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	200009c4 	.word	0x200009c4
 8004b94:	200009d8 	.word	0x200009d8
 8004b98:	200009bc 	.word	0x200009bc
 8004b9c:	200009c0 	.word	0x200009c0

08004ba0 <Term_Update>:
 * @param  uint8_t *data string to write
 * @param  uint8_t lenght lengt of string to write
 * @retval tBleStatus      Status
 */
tBleStatus Term_Update(uint8_t *data,uint8_t length)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;

  /* Split the code in packages */
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
 8004bac:	2300      	movs	r3, #0
 8004bae:	73fb      	strb	r3, [r7, #15]
 8004bb0:	e030      	b.n	8004c14 <Term_Update+0x74>
    DataToSend = (length-Offset);
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_CONSOLE_MAX_CHAR_LEN) ?  W2ST_CONSOLE_MAX_CHAR_LEN : DataToSend;
 8004bba:	7bbb      	ldrb	r3, [r7, #14]
 8004bbc:	2b14      	cmp	r3, #20
 8004bbe:	bf28      	it	cs
 8004bc0:	2314      	movcs	r3, #20
 8004bc2:	73bb      	strb	r3, [r7, #14]

    /* keep a copy */
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	7bba      	ldrb	r2, [r7, #14]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4816      	ldr	r0, [pc, #88]	@ (8004c28 <Term_Update+0x88>)
 8004bd0:	f00b fb2c 	bl	801022c <memcpy>
    LastTermLen = DataToSend;
 8004bd4:	4a15      	ldr	r2, [pc, #84]	@ (8004c2c <Term_Update+0x8c>)
 8004bd6:	7bbb      	ldrb	r3, [r7, #14]
 8004bd8:	7013      	strb	r3, [r2, #0]

    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 8004bda:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <Term_Update+0x90>)
 8004bdc:	8818      	ldrh	r0, [r3, #0]
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <Term_Update+0x94>)
 8004be0:	8819      	ldrh	r1, [r3, #0]
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	4413      	add	r3, r2
 8004be8:	7bba      	ldrb	r2, [r7, #14]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f009 fe62 	bl	800e8b8 <aci_gatt_update_char_value>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS) {
 8004bf8:	7b7b      	ldrb	r3, [r7, #13]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <Term_Update+0x68>
        PRINTF("Error Updating Stdout Char\r\n");
 8004bfe:	480e      	ldr	r0, [pc, #56]	@ (8004c38 <Term_Update+0x98>)
 8004c00:	f7fc fdae 	bl	8001760 <myprintf>
      return BLE_STATUS_ERROR;
 8004c04:	2347      	movs	r3, #71	@ 0x47
 8004c06:	e00a      	b.n	8004c1e <Term_Update+0x7e>
    }
    HAL_Delay(20);
 8004c08:	2014      	movs	r0, #20
 8004c0a:	f004 fbe5 	bl	80093d8 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_CONSOLE_MAX_CHAR_LEN){
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	3314      	adds	r3, #20
 8004c12:	73fb      	strb	r3, [r7, #15]
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d3ca      	bcc.n	8004bb2 <Term_Update+0x12>
  }

  return BLE_STATUS_SUCCESS;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	200009dc 	.word	0x200009dc
 8004c2c:	200009f0 	.word	0x200009f0
 8004c30:	200009bc 	.word	0x200009bc
 8004c34:	200009be 	.word	0x200009be
 8004c38:	08011900 	.word	0x08011900

08004c3c <Stderr_Update_AfterRead>:
 * @brief  Update Stderr characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Stderr_Update_AfterRead(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af02      	add	r7, sp, #8
  tBleStatus ret;

  ret = aci_gatt_update_char_value(ConsoleW2STHandle, StdErrCharHandle, 0, LastStderrLen , LastStderrBuffer);
 8004c42:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <Stderr_Update_AfterRead+0x34>)
 8004c44:	8818      	ldrh	r0, [r3, #0]
 8004c46:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <Stderr_Update_AfterRead+0x38>)
 8004c48:	8819      	ldrh	r1, [r3, #0]
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <Stderr_Update_AfterRead+0x3c>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c7c <Stderr_Update_AfterRead+0x40>)
 8004c50:	9200      	str	r2, [sp, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f009 fe30 	bl	800e8b8 <aci_gatt_update_char_value>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) {
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <Stderr_Update_AfterRead+0x2a>
    return BLE_STATUS_ERROR;
 8004c62:	2347      	movs	r3, #71	@ 0x47
 8004c64:	e000      	b.n	8004c68 <Stderr_Update_AfterRead+0x2c>
  }

  return BLE_STATUS_SUCCESS;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	200009bc 	.word	0x200009bc
 8004c74:	200009c0 	.word	0x200009c0
 8004c78:	200009d8 	.word	0x200009d8
 8004c7c:	200009c4 	.word	0x200009c4

08004c80 <Term_Update_AfterRead>:
 * @brief  Update Terminal characteristic value after a read request
 * @param None
 * @retval tBleStatus      Status
 */
static tBleStatus Term_Update_AfterRead(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af02      	add	r7, sp, #8
  tBleStatus ret;

  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 8004c86:	4b18      	ldr	r3, [pc, #96]	@ (8004ce8 <Term_Update_AfterRead+0x68>)
 8004c88:	8818      	ldrh	r0, [r3, #0]
 8004c8a:	4b18      	ldr	r3, [pc, #96]	@ (8004cec <Term_Update_AfterRead+0x6c>)
 8004c8c:	8819      	ldrh	r1, [r3, #0]
 8004c8e:	4b18      	ldr	r3, [pc, #96]	@ (8004cf0 <Term_Update_AfterRead+0x70>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	4a18      	ldr	r2, [pc, #96]	@ (8004cf4 <Term_Update_AfterRead+0x74>)
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f009 fe0e 	bl	800e8b8 <aci_gatt_update_char_value>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) {
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01b      	beq.n	8004cde <Term_Update_AfterRead+0x5e>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR)){
 8004ca6:	4b14      	ldr	r3, [pc, #80]	@ (8004cf8 <Term_Update_AfterRead+0x78>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	0a5b      	lsrs	r3, r3, #9
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00e      	beq.n	8004cd4 <Term_Update_AfterRead+0x54>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Stdout Char\r\n");
 8004cb6:	4911      	ldr	r1, [pc, #68]	@ (8004cfc <Term_Update_AfterRead+0x7c>)
 8004cb8:	4811      	ldr	r0, [pc, #68]	@ (8004d00 <Term_Update_AfterRead+0x80>)
 8004cba:	f00b fa13 	bl	80100e4 <siprintf>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4a10      	ldr	r2, [pc, #64]	@ (8004d04 <Term_Update_AfterRead+0x84>)
 8004cc2:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d04 <Term_Update_AfterRead+0x84>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	4619      	mov	r1, r3
 8004ccc:	480c      	ldr	r0, [pc, #48]	@ (8004d00 <Term_Update_AfterRead+0x80>)
 8004cce:	f7ff ff1f 	bl	8004b10 <Stderr_Update>
 8004cd2:	e002      	b.n	8004cda <Term_Update_AfterRead+0x5a>
    } else {
      PRINTF("Error Updating Stdout Char\r\n");
 8004cd4:	4809      	ldr	r0, [pc, #36]	@ (8004cfc <Term_Update_AfterRead+0x7c>)
 8004cd6:	f7fc fd43 	bl	8001760 <myprintf>
    }
    return BLE_STATUS_ERROR;
 8004cda:	2347      	movs	r3, #71	@ 0x47
 8004cdc:	e000      	b.n	8004ce0 <Term_Update_AfterRead+0x60>
  }

  return BLE_STATUS_SUCCESS;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	200009bc 	.word	0x200009bc
 8004cec:	200009be 	.word	0x200009be
 8004cf0:	200009f0 	.word	0x200009f0
 8004cf4:	200009dc 	.word	0x200009dc
 8004cf8:	20000808 	.word	0x20000808
 8004cfc:	08011900 	.word	0x08011900
 8004d00:	2000080c 	.word	0x2000080c
 8004d04:	2000090c 	.word	0x2000090c

08004d08 <Add_HWServW2ST_Service>:
 * @brief  Add the HW Features service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	@ 0x30
 8004d0c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberChars = 5;
 8004d0e:	2305      	movs	r3, #5
 8004d10:	617b      	str	r3, [r7, #20]
    /* Battery Present */
    NumberChars++;
  }
#endif /* STM32_SENSORTILE */

  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8004d12:	231b      	movs	r3, #27
 8004d14:	703b      	strb	r3, [r7, #0]
 8004d16:	23c5      	movs	r3, #197	@ 0xc5
 8004d18:	707b      	strb	r3, [r7, #1]
 8004d1a:	23d5      	movs	r3, #213	@ 0xd5
 8004d1c:	70bb      	strb	r3, [r7, #2]
 8004d1e:	23a5      	movs	r3, #165	@ 0xa5
 8004d20:	70fb      	strb	r3, [r7, #3]
 8004d22:	2302      	movs	r3, #2
 8004d24:	713b      	strb	r3, [r7, #4]
 8004d26:	2300      	movs	r3, #0
 8004d28:	717b      	strb	r3, [r7, #5]
 8004d2a:	23b4      	movs	r3, #180	@ 0xb4
 8004d2c:	71bb      	strb	r3, [r7, #6]
 8004d2e:	239a      	movs	r3, #154	@ 0x9a
 8004d30:	71fb      	strb	r3, [r7, #7]
 8004d32:	23e1      	movs	r3, #225	@ 0xe1
 8004d34:	723b      	strb	r3, [r7, #8]
 8004d36:	2311      	movs	r3, #17
 8004d38:	727b      	strb	r3, [r7, #9]
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	72bb      	strb	r3, [r7, #10]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	72fb      	strb	r3, [r7, #11]
 8004d42:	2300      	movs	r3, #0
 8004d44:	733b      	strb	r3, [r7, #12]
 8004d46:	2300      	movs	r3, #0
 8004d48:	737b      	strb	r3, [r7, #13]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73bb      	strb	r3, [r7, #14]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	0052      	lsls	r2, r2, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	4639      	mov	r1, r7
 8004d64:	4aac      	ldr	r2, [pc, #688]	@ (8005018 <Add_HWServW2ST_Service+0x310>)
 8004d66:	9200      	str	r2, [sp, #0]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	2002      	movs	r0, #2
 8004d6c:	f009 fc4d 	bl	800e60a <aci_gatt_add_serv>
 8004d70:	4603      	mov	r3, r0
 8004d72:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberChars,
                          &HWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 813d 	bne.w	8004ff6 <Add_HWServW2ST_Service+0x2ee>
    goto fail;
  }

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8004d7c:	231b      	movs	r3, #27
 8004d7e:	703b      	strb	r3, [r7, #0]
 8004d80:	23c5      	movs	r3, #197	@ 0xc5
 8004d82:	707b      	strb	r3, [r7, #1]
 8004d84:	23d5      	movs	r3, #213	@ 0xd5
 8004d86:	70bb      	strb	r3, [r7, #2]
 8004d88:	23a5      	movs	r3, #165	@ 0xa5
 8004d8a:	70fb      	strb	r3, [r7, #3]
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	713b      	strb	r3, [r7, #4]
 8004d90:	2300      	movs	r3, #0
 8004d92:	717b      	strb	r3, [r7, #5]
 8004d94:	2336      	movs	r3, #54	@ 0x36
 8004d96:	71bb      	strb	r3, [r7, #6]
 8004d98:	23ac      	movs	r3, #172	@ 0xac
 8004d9a:	71fb      	strb	r3, [r7, #7]
 8004d9c:	23e1      	movs	r3, #225	@ 0xe1
 8004d9e:	723b      	strb	r3, [r7, #8]
 8004da0:	2311      	movs	r3, #17
 8004da2:	727b      	strb	r3, [r7, #9]
 8004da4:	2301      	movs	r3, #1
 8004da6:	72bb      	strb	r3, [r7, #10]
 8004da8:	2300      	movs	r3, #0
 8004daa:	72fb      	strb	r3, [r7, #11]
 8004dac:	2300      	movs	r3, #0
 8004dae:	733b      	strb	r3, [r7, #12]
 8004db0:	2300      	movs	r3, #0
 8004db2:	737b      	strb	r3, [r7, #13]
 8004db4:	2300      	movs	r3, #0
 8004db6:	73bb      	strb	r3, [r7, #14]
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]
//    uuid[14] |= 0x04; /* One Temperature value*/
//    EnvironmentalCharSize+=2;
//  }

  
    uuid[14] |= 0x05; /* Two Temperature values*/
 8004dbc:	7bbb      	ldrb	r3, [r7, #14]
 8004dbe:	f043 0305 	orr.w	r3, r3, #5
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=2*2;
 8004dc6:	4b95      	ldr	r3, [pc, #596]	@ (800501c <Add_HWServW2ST_Service+0x314>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4b93      	ldr	r3, [pc, #588]	@ (800501c <Add_HWServW2ST_Service+0x314>)
 8004dd0:	701a      	strb	r2, [r3, #0]
 

  
   uuid[14] |= 0x08; /* Battery level (percentage of full battery) */
 8004dd2:	7bbb      	ldrb	r3, [r7, #14]
 8004dd4:	f043 0308 	orr.w	r3, r3, #8
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	73bb      	strb	r3, [r7, #14]
   EnvironmentalCharSize+=2;
 8004ddc:	4b8f      	ldr	r3, [pc, #572]	@ (800501c <Add_HWServW2ST_Service+0x314>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	3302      	adds	r3, #2
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	4b8d      	ldr	r3, [pc, #564]	@ (800501c <Add_HWServW2ST_Service+0x314>)
 8004de6:	701a      	strb	r2, [r3, #0]
 
    uuid[14] |= 0x10; /* Pressure value*/
 8004de8:	7bbb      	ldrb	r3, [r7, #14]
 8004dea:	f043 0310 	orr.w	r3, r3, #16
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	73bb      	strb	r3, [r7, #14]
    EnvironmentalCharSize+=4;
 8004df2:	4b8a      	ldr	r3, [pc, #552]	@ (800501c <Add_HWServW2ST_Service+0x314>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	3304      	adds	r3, #4
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	4b88      	ldr	r3, [pc, #544]	@ (800501c <Add_HWServW2ST_Service+0x314>)
 8004dfc:	701a      	strb	r2, [r3, #0]
//                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
//                           ATTR_PERMISSION_NONE,
//                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
//                           16, 0, &EnvironmentalCharHandle);
//  
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+4+2+2+2,
 8004dfe:	4b86      	ldr	r3, [pc, #536]	@ (8005018 <Add_HWServW2ST_Service+0x310>)
 8004e00:	8818      	ldrh	r0, [r3, #0]
 8004e02:	463a      	mov	r2, r7
 8004e04:	4b86      	ldr	r3, [pc, #536]	@ (8005020 <Add_HWServW2ST_Service+0x318>)
 8004e06:	9305      	str	r3, [sp, #20]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	9303      	str	r3, [sp, #12]
 8004e10:	2304      	movs	r3, #4
 8004e12:	9302      	str	r3, [sp, #8]
 8004e14:	2300      	movs	r3, #0
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	2312      	movs	r3, #18
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	2102      	movs	r1, #2
 8004e20:	f009 fc7c 	bl	800e71c <aci_gatt_add_char>
 8004e24:	4603      	mov	r3, r0
 8004e26:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 80e5 	bne.w	8004ffa <Add_HWServW2ST_Service+0x2f2>
    goto fail;
  }

  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8004e30:	231b      	movs	r3, #27
 8004e32:	703b      	strb	r3, [r7, #0]
 8004e34:	23c5      	movs	r3, #197	@ 0xc5
 8004e36:	707b      	strb	r3, [r7, #1]
 8004e38:	23d5      	movs	r3, #213	@ 0xd5
 8004e3a:	70bb      	strb	r3, [r7, #2]
 8004e3c:	23a5      	movs	r3, #165	@ 0xa5
 8004e3e:	70fb      	strb	r3, [r7, #3]
 8004e40:	2302      	movs	r3, #2
 8004e42:	713b      	strb	r3, [r7, #4]
 8004e44:	2300      	movs	r3, #0
 8004e46:	717b      	strb	r3, [r7, #5]
 8004e48:	2336      	movs	r3, #54	@ 0x36
 8004e4a:	71bb      	strb	r3, [r7, #6]
 8004e4c:	23ac      	movs	r3, #172	@ 0xac
 8004e4e:	71fb      	strb	r3, [r7, #7]
 8004e50:	23e1      	movs	r3, #225	@ 0xe1
 8004e52:	723b      	strb	r3, [r7, #8]
 8004e54:	2311      	movs	r3, #17
 8004e56:	727b      	strb	r3, [r7, #9]
 8004e58:	2301      	movs	r3, #1
 8004e5a:	72bb      	strb	r3, [r7, #10]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	72fb      	strb	r3, [r7, #11]
 8004e60:	2300      	movs	r3, #0
 8004e62:	733b      	strb	r3, [r7, #12]
 8004e64:	2300      	movs	r3, #0
 8004e66:	737b      	strb	r3, [r7, #13]
 8004e68:	23e0      	movs	r3, #224	@ 0xe0
 8004e6a:	73bb      	strb	r3, [r7, #14]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+3*3*2,
 8004e70:	4b69      	ldr	r3, [pc, #420]	@ (8005018 <Add_HWServW2ST_Service+0x310>)
 8004e72:	8818      	ldrh	r0, [r3, #0]
 8004e74:	463a      	mov	r2, r7
 8004e76:	4b6b      	ldr	r3, [pc, #428]	@ (8005024 <Add_HWServW2ST_Service+0x31c>)
 8004e78:	9305      	str	r3, [sp, #20]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	2310      	movs	r3, #16
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	2304      	movs	r3, #4
 8004e84:	9302      	str	r3, [sp, #8]
 8004e86:	2300      	movs	r3, #0
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	2310      	movs	r3, #16
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2314      	movs	r3, #20
 8004e90:	2102      	movs	r1, #2
 8004e92:	f009 fc43 	bl	800e71c <aci_gatt_add_char>
 8004e96:	4603      	mov	r3, r0
 8004e98:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f040 80ae 	bne.w	8004ffe <Add_HWServW2ST_Service+0x2f6>
    goto fail;
  }

  COPY_ACC_EVENT_W2ST_CHAR_UUID(uuid);
 8004ea2:	231b      	movs	r3, #27
 8004ea4:	703b      	strb	r3, [r7, #0]
 8004ea6:	23c5      	movs	r3, #197	@ 0xc5
 8004ea8:	707b      	strb	r3, [r7, #1]
 8004eaa:	23d5      	movs	r3, #213	@ 0xd5
 8004eac:	70bb      	strb	r3, [r7, #2]
 8004eae:	23a5      	movs	r3, #165	@ 0xa5
 8004eb0:	70fb      	strb	r3, [r7, #3]
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	713b      	strb	r3, [r7, #4]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	717b      	strb	r3, [r7, #5]
 8004eba:	2336      	movs	r3, #54	@ 0x36
 8004ebc:	71bb      	strb	r3, [r7, #6]
 8004ebe:	23ac      	movs	r3, #172	@ 0xac
 8004ec0:	71fb      	strb	r3, [r7, #7]
 8004ec2:	23e1      	movs	r3, #225	@ 0xe1
 8004ec4:	723b      	strb	r3, [r7, #8]
 8004ec6:	2311      	movs	r3, #17
 8004ec8:	727b      	strb	r3, [r7, #9]
 8004eca:	2301      	movs	r3, #1
 8004ecc:	72bb      	strb	r3, [r7, #10]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	72fb      	strb	r3, [r7, #11]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	733b      	strb	r3, [r7, #12]
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	737b      	strb	r3, [r7, #13]
 8004eda:	2300      	movs	r3, #0
 8004edc:	73bb      	strb	r3, [r7, #14]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+2,
 8004ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8005018 <Add_HWServW2ST_Service+0x310>)
 8004ee4:	8818      	ldrh	r0, [r3, #0]
 8004ee6:	463a      	mov	r2, r7
 8004ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8005028 <Add_HWServW2ST_Service+0x320>)
 8004eea:	9305      	str	r3, [sp, #20]
 8004eec:	2300      	movs	r3, #0
 8004eee:	9304      	str	r3, [sp, #16]
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	9303      	str	r3, [sp, #12]
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	9302      	str	r3, [sp, #8]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	2312      	movs	r3, #18
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	2304      	movs	r3, #4
 8004f02:	2102      	movs	r1, #2
 8004f04:	f009 fc0a 	bl	800e71c <aci_gatt_add_char>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccEventCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d177      	bne.n	8005002 <Add_HWServW2ST_Service+0x2fa>
    goto fail;
  }

  COPY_ARMING_W2ST_CHAR_UUID(uuid);
 8004f12:	231b      	movs	r3, #27
 8004f14:	703b      	strb	r3, [r7, #0]
 8004f16:	23c5      	movs	r3, #197	@ 0xc5
 8004f18:	707b      	strb	r3, [r7, #1]
 8004f1a:	23d5      	movs	r3, #213	@ 0xd5
 8004f1c:	70bb      	strb	r3, [r7, #2]
 8004f1e:	23a5      	movs	r3, #165	@ 0xa5
 8004f20:	70fb      	strb	r3, [r7, #3]
 8004f22:	2302      	movs	r3, #2
 8004f24:	713b      	strb	r3, [r7, #4]
 8004f26:	2300      	movs	r3, #0
 8004f28:	717b      	strb	r3, [r7, #5]
 8004f2a:	2336      	movs	r3, #54	@ 0x36
 8004f2c:	71bb      	strb	r3, [r7, #6]
 8004f2e:	23ac      	movs	r3, #172	@ 0xac
 8004f30:	71fb      	strb	r3, [r7, #7]
 8004f32:	23e1      	movs	r3, #225	@ 0xe1
 8004f34:	723b      	strb	r3, [r7, #8]
 8004f36:	2311      	movs	r3, #17
 8004f38:	727b      	strb	r3, [r7, #9]
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	72bb      	strb	r3, [r7, #10]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	72fb      	strb	r3, [r7, #11]
 8004f42:	2300      	movs	r3, #0
 8004f44:	733b      	strb	r3, [r7, #12]
 8004f46:	2300      	movs	r3, #0
 8004f48:	737b      	strb	r3, [r7, #13]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73bb      	strb	r3, [r7, #14]
 8004f4e:	2320      	movs	r3, #32
 8004f50:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+1,
 8004f52:	4b31      	ldr	r3, [pc, #196]	@ (8005018 <Add_HWServW2ST_Service+0x310>)
 8004f54:	8818      	ldrh	r0, [r3, #0]
 8004f56:	463a      	mov	r2, r7
 8004f58:	4b34      	ldr	r3, [pc, #208]	@ (800502c <Add_HWServW2ST_Service+0x324>)
 8004f5a:	9305      	str	r3, [sp, #20]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9304      	str	r3, [sp, #16]
 8004f60:	2310      	movs	r3, #16
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	2304      	movs	r3, #4
 8004f66:	9302      	str	r3, [sp, #8]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	2312      	movs	r3, #18
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2303      	movs	r3, #3
 8004f72:	2102      	movs	r1, #2
 8004f74:	f009 fbd2 	bl	800e71c <aci_gatt_add_char>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &ArmingCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d141      	bne.n	8005006 <Add_HWServW2ST_Service+0x2fe>
  }
#endif /* STM32_SENSORTILE */
	
	
	/* MAX charecteristic */
	COPY_MAX_W2ST_CHAR_UUID(uuid);
 8004f82:	231b      	movs	r3, #27
 8004f84:	703b      	strb	r3, [r7, #0]
 8004f86:	23c5      	movs	r3, #197	@ 0xc5
 8004f88:	707b      	strb	r3, [r7, #1]
 8004f8a:	23d5      	movs	r3, #213	@ 0xd5
 8004f8c:	70bb      	strb	r3, [r7, #2]
 8004f8e:	23a5      	movs	r3, #165	@ 0xa5
 8004f90:	70fb      	strb	r3, [r7, #3]
 8004f92:	2302      	movs	r3, #2
 8004f94:	713b      	strb	r3, [r7, #4]
 8004f96:	2300      	movs	r3, #0
 8004f98:	717b      	strb	r3, [r7, #5]
 8004f9a:	2336      	movs	r3, #54	@ 0x36
 8004f9c:	71bb      	strb	r3, [r7, #6]
 8004f9e:	23ac      	movs	r3, #172	@ 0xac
 8004fa0:	71fb      	strb	r3, [r7, #7]
 8004fa2:	23e1      	movs	r3, #225	@ 0xe1
 8004fa4:	723b      	strb	r3, [r7, #8]
 8004fa6:	2311      	movs	r3, #17
 8004fa8:	727b      	strb	r3, [r7, #9]
 8004faa:	2301      	movs	r3, #1
 8004fac:	72bb      	strb	r3, [r7, #10]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	72fb      	strb	r3, [r7, #11]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	733b      	strb	r3, [r7, #12]
 8004fb6:	2380      	movs	r3, #128	@ 0x80
 8004fb8:	737b      	strb	r3, [r7, #13]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73bb      	strb	r3, [r7, #14]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 7,
 8004fc2:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <Add_HWServW2ST_Service+0x310>)
 8004fc4:	8818      	ldrh	r0, [r3, #0]
 8004fc6:	463a      	mov	r2, r7
 8004fc8:	4b19      	ldr	r3, [pc, #100]	@ (8005030 <Add_HWServW2ST_Service+0x328>)
 8004fca:	9305      	str	r3, [sp, #20]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9304      	str	r3, [sp, #16]
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	9303      	str	r3, [sp, #12]
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	9302      	str	r3, [sp, #8]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	230c      	movs	r3, #12
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2307      	movs	r3, #7
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	f009 fb9a 	bl	800e71c <aci_gatt_add_char>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	74fb      	strb	r3, [r7, #19]
                          CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE,
                           16, 0, &MaxCharHandle);
	
  if (ret != BLE_STATUS_SUCCESS) {
 8004fec:	7cfb      	ldrb	r3, [r7, #19]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <Add_HWServW2ST_Service+0x302>
    goto fail;
  }
	

  return BLE_STATUS_SUCCESS;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e00b      	b.n	800500e <Add_HWServW2ST_Service+0x306>
    goto fail;
 8004ff6:	bf00      	nop
 8004ff8:	e008      	b.n	800500c <Add_HWServW2ST_Service+0x304>
    goto fail;
 8004ffa:	bf00      	nop
 8004ffc:	e006      	b.n	800500c <Add_HWServW2ST_Service+0x304>
    goto fail;
 8004ffe:	bf00      	nop
 8005000:	e004      	b.n	800500c <Add_HWServW2ST_Service+0x304>
    goto fail;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <Add_HWServW2ST_Service+0x304>
    goto fail;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <Add_HWServW2ST_Service+0x304>
    goto fail;
 800500a:	bf00      	nop

fail:
  //PRINTF("Error while adding HW's Characteristcs service.\n");
  return BLE_STATUS_ERROR;
 800500c:	2347      	movs	r3, #71	@ 0x47
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200009ac 	.word	0x200009ac
 800501c:	20000025 	.word	0x20000025
 8005020:	200009ae 	.word	0x200009ae
 8005024:	200009b0 	.word	0x200009b0
 8005028:	200009b2 	.word	0x200009b2
 800502c:	200009b4 	.word	0x200009b4
 8005030:	200009b6 	.word	0x200009b6

08005034 <AccGyroMag_Update>:
 * @param  SensorAxes_t Gyro Structure containing Gyroscope value
 * @param  SensorAxes_t Mag Structure containing magneto value
 * @retval tBleStatus      Status
 */
tBleStatus AccGyroMag_Update(AxesRaw_TypeDef *Acc,AxesRaw_TypeDef *Gyro,AxesRaw_TypeDef *Mag)
{  
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	@ 0x30
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  tBleStatus ret;

  uint8_t buff[2+3*3*2];

  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8005040:	f004 f9be 	bl	80093c0 <HAL_GetTick>
 8005044:	4603      	mov	r3, r0
 8005046:	08db      	lsrs	r3, r3, #3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	743b      	strb	r3, [r7, #16]
 800504c:	f004 f9b8 	bl	80093c0 <HAL_GetTick>
 8005050:	4603      	mov	r3, r0
 8005052:	0adb      	lsrs	r3, r3, #11
 8005054:	b2db      	uxtb	r3, r3
 8005056:	747b      	strb	r3, [r7, #17]
  
  STORE_LE_16(buff+2 ,Acc->AXIS_X);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	74bb      	strb	r3, [r7, #18]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	121b      	asrs	r3, r3, #8
 8005066:	b2db      	uxtb	r3, r3
 8005068:	74fb      	strb	r3, [r7, #19]
  STORE_LE_16(buff+4 ,Acc->AXIS_Y);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	753b      	strb	r3, [r7, #20]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	121b      	asrs	r3, r3, #8
 8005078:	b2db      	uxtb	r3, r3
 800507a:	757b      	strb	r3, [r7, #21]
  STORE_LE_16(buff+6 ,Acc->AXIS_Z);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	75bb      	strb	r3, [r7, #22]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	121b      	asrs	r3, r3, #8
 800508a:	b2db      	uxtb	r3, r3
 800508c:	75fb      	strb	r3, [r7, #23]
  
  Gyro->AXIS_X/=100;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a44      	ldr	r2, [pc, #272]	@ (80051a4 <AccGyroMag_Update+0x170>)
 8005094:	fb82 1203 	smull	r1, r2, r2, r3
 8005098:	1152      	asrs	r2, r2, #5
 800509a:	17db      	asrs	r3, r3, #31
 800509c:	1ad2      	subs	r2, r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	601a      	str	r2, [r3, #0]
  Gyro->AXIS_Y/=100;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4a3f      	ldr	r2, [pc, #252]	@ (80051a4 <AccGyroMag_Update+0x170>)
 80050a8:	fb82 1203 	smull	r1, r2, r2, r3
 80050ac:	1152      	asrs	r2, r2, #5
 80050ae:	17db      	asrs	r3, r3, #31
 80050b0:	1ad2      	subs	r2, r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	605a      	str	r2, [r3, #4]
  Gyro->AXIS_Z/=100;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	4a3a      	ldr	r2, [pc, #232]	@ (80051a4 <AccGyroMag_Update+0x170>)
 80050bc:	fb82 1203 	smull	r1, r2, r2, r3
 80050c0:	1152      	asrs	r2, r2, #5
 80050c2:	17db      	asrs	r3, r3, #31
 80050c4:	1ad2      	subs	r2, r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	609a      	str	r2, [r3, #8]

  STORE_LE_16(buff+8 ,Gyro->AXIS_X);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	763b      	strb	r3, [r7, #24]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	121b      	asrs	r3, r3, #8
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	767b      	strb	r3, [r7, #25]
  STORE_LE_16(buff+10,Gyro->AXIS_Y);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	76bb      	strb	r3, [r7, #26]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	121b      	asrs	r3, r3, #8
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	76fb      	strb	r3, [r7, #27]
  STORE_LE_16(buff+12,Gyro->AXIS_Z);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	773b      	strb	r3, [r7, #28]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	121b      	asrs	r3, r3, #8
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	777b      	strb	r3, [r7, #29]

  STORE_LE_16(buff+14,Mag->AXIS_X);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	77bb      	strb	r3, [r7, #30]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	121b      	asrs	r3, r3, #8
 800510e:	b2db      	uxtb	r3, r3
 8005110:	77fb      	strb	r3, [r7, #31]
  STORE_LE_16(buff+16,Mag->AXIS_Y);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f887 3020 	strb.w	r3, [r7, #32]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	121b      	asrs	r3, r3, #8
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  STORE_LE_16(buff+18,Mag->AXIS_Z);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	121b      	asrs	r3, r3, #8
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
  ret = ACI_GATT_UPDATE_CHAR_VALUE(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+3*3*2, buff);
 800513e:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <AccGyroMag_Update+0x174>)
 8005140:	8818      	ldrh	r0, [r3, #0]
 8005142:	4b1a      	ldr	r3, [pc, #104]	@ (80051ac <AccGyroMag_Update+0x178>)
 8005144:	8819      	ldrh	r1, [r3, #0]
 8005146:	f107 0310 	add.w	r3, r7, #16
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2314      	movs	r3, #20
 800514e:	2200      	movs	r2, #0
 8005150:	f7ff fb82 	bl	8004858 <safe_aci_gatt_update_char_value>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	
  if (ret != BLE_STATUS_SUCCESS){
 800515a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01b      	beq.n	800519a <AccGyroMag_Update+0x166>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR)){
 8005162:	4b13      	ldr	r3, [pc, #76]	@ (80051b0 <AccGyroMag_Update+0x17c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	0a5b      	lsrs	r3, r3, #9
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00e      	beq.n	8005190 <AccGyroMag_Update+0x15c>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Acc/Gyro/Mag Char\r\n");
 8005172:	4910      	ldr	r1, [pc, #64]	@ (80051b4 <AccGyroMag_Update+0x180>)
 8005174:	4810      	ldr	r0, [pc, #64]	@ (80051b8 <AccGyroMag_Update+0x184>)
 8005176:	f00a ffb5 	bl	80100e4 <siprintf>
 800517a:	4603      	mov	r3, r0
 800517c:	4a0f      	ldr	r2, [pc, #60]	@ (80051bc <AccGyroMag_Update+0x188>)
 800517e:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8005180:	4b0e      	ldr	r3, [pc, #56]	@ (80051bc <AccGyroMag_Update+0x188>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	4619      	mov	r1, r3
 8005188:	480b      	ldr	r0, [pc, #44]	@ (80051b8 <AccGyroMag_Update+0x184>)
 800518a:	f7ff fcc1 	bl	8004b10 <Stderr_Update>
 800518e:	e002      	b.n	8005196 <AccGyroMag_Update+0x162>
    } else {
      PRINTF("Error Updating Acc/Gyro/Mag Char\r\n");
 8005190:	4808      	ldr	r0, [pc, #32]	@ (80051b4 <AccGyroMag_Update+0x180>)
 8005192:	f7fc fae5 	bl	8001760 <myprintf>
    }
    return BLE_STATUS_ERROR;
 8005196:	2347      	movs	r3, #71	@ 0x47
 8005198:	e000      	b.n	800519c <AccGyroMag_Update+0x168>
  }
  return BLE_STATUS_SUCCESS;	
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3728      	adds	r7, #40	@ 0x28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	51eb851f 	.word	0x51eb851f
 80051a8:	200009ac 	.word	0x200009ac
 80051ac:	200009b0 	.word	0x200009b0
 80051b0:	20000808 	.word	0x20000808
 80051b4:	0801196c 	.word	0x0801196c
 80051b8:	2000080c 	.word	0x2000080c
 80051bc:	2000090c 	.word	0x2000090c

080051c0 <Batt_Env_RSSI_Update>:
 * @param  int16_t Temp Temperature in tenths of degree second sensor
 * @param  int16_t RSSI level in dB
 * @retval tBleStatus   Status
 */
tBleStatus Batt_Env_RSSI_Update(int32_t Press,uint16_t Batt,int16_t Temp,int16_t RSSI)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	@ 0x28
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	4608      	mov	r0, r1
 80051ca:	4611      	mov	r1, r2
 80051cc:	461a      	mov	r2, r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	817b      	strh	r3, [r7, #10]
 80051d2:	460b      	mov	r3, r1
 80051d4:	813b      	strh	r3, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;
  uint8_t BuffPos;
  
  uint8_t buff[2+4/*Press*/+2/*Batt*/+2/*Temp*/+2/*RSSI*/];

  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 80051da:	f004 f8f1 	bl	80093c0 <HAL_GetTick>
 80051de:	4603      	mov	r3, r0
 80051e0:	08db      	lsrs	r3, r3, #3
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	743b      	strb	r3, [r7, #16]
 80051e6:	f004 f8eb 	bl	80093c0 <HAL_GetTick>
 80051ea:	4603      	mov	r3, r0
 80051ec:	0adb      	lsrs	r3, r3, #11
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	747b      	strb	r3, [r7, #17]
  BuffPos=2;
 80051f2:	2302      	movs	r3, #2
 80051f4:	77fb      	strb	r3, [r7, #31]
  
  STORE_LE_32(buff+BuffPos,Press);
 80051f6:	7ffb      	ldrb	r3, [r7, #31]
 80051f8:	f107 0210 	add.w	r2, r7, #16
 80051fc:	4413      	add	r3, r2
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	1219      	asrs	r1, r3, #8
 8005208:	7ffb      	ldrb	r3, [r7, #31]
 800520a:	3301      	adds	r3, #1
 800520c:	f107 0210 	add.w	r2, r7, #16
 8005210:	4413      	add	r3, r2
 8005212:	b2ca      	uxtb	r2, r1
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1419      	asrs	r1, r3, #16
 800521a:	7ffb      	ldrb	r3, [r7, #31]
 800521c:	3302      	adds	r3, #2
 800521e:	f107 0210 	add.w	r2, r7, #16
 8005222:	4413      	add	r3, r2
 8005224:	b2ca      	uxtb	r2, r1
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1619      	asrs	r1, r3, #24
 800522c:	7ffb      	ldrb	r3, [r7, #31]
 800522e:	3303      	adds	r3, #3
 8005230:	f107 0210 	add.w	r2, r7, #16
 8005234:	4413      	add	r3, r2
 8005236:	b2ca      	uxtb	r2, r1
 8005238:	701a      	strb	r2, [r3, #0]
  BuffPos+=4;
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	3304      	adds	r3, #4
 800523e:	77fb      	strb	r3, [r7, #31]
  
  STORE_LE_16(buff+BuffPos,Batt);
 8005240:	7ffb      	ldrb	r3, [r7, #31]
 8005242:	f107 0210 	add.w	r2, r7, #16
 8005246:	4413      	add	r3, r2
 8005248:	897a      	ldrh	r2, [r7, #10]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	897b      	ldrh	r3, [r7, #10]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	b299      	uxth	r1, r3
 8005254:	7ffb      	ldrb	r3, [r7, #31]
 8005256:	3301      	adds	r3, #1
 8005258:	f107 0210 	add.w	r2, r7, #16
 800525c:	4413      	add	r3, r2
 800525e:	b2ca      	uxtb	r2, r1
 8005260:	701a      	strb	r2, [r3, #0]
  BuffPos+=2;
 8005262:	7ffb      	ldrb	r3, [r7, #31]
 8005264:	3302      	adds	r3, #2
 8005266:	77fb      	strb	r3, [r7, #31]
 
  STORE_LE_16(buff+BuffPos,Temp);
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	f107 0210 	add.w	r2, r7, #16
 800526e:	4413      	add	r3, r2
 8005270:	893a      	ldrh	r2, [r7, #8]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800527a:	121b      	asrs	r3, r3, #8
 800527c:	b219      	sxth	r1, r3
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	3301      	adds	r3, #1
 8005282:	f107 0210 	add.w	r2, r7, #16
 8005286:	4413      	add	r3, r2
 8005288:	b2ca      	uxtb	r2, r1
 800528a:	701a      	strb	r2, [r3, #0]
  BuffPos+=2;
 800528c:	7ffb      	ldrb	r3, [r7, #31]
 800528e:	3302      	adds	r3, #2
 8005290:	77fb      	strb	r3, [r7, #31]

  STORE_LE_16(buff+BuffPos,RSSI);
 8005292:	7ffb      	ldrb	r3, [r7, #31]
 8005294:	f107 0210 	add.w	r2, r7, #16
 8005298:	4413      	add	r3, r2
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a4:	121b      	asrs	r3, r3, #8
 80052a6:	b219      	sxth	r1, r3
 80052a8:	7ffb      	ldrb	r3, [r7, #31]
 80052aa:	3301      	adds	r3, #1
 80052ac:	f107 0210 	add.w	r2, r7, #16
 80052b0:	4413      	add	r3, r2
 80052b2:	b2ca      	uxtb	r2, r1
 80052b4:	701a      	strb	r2, [r3, #0]
  BuffPos+=2;
 80052b6:	7ffb      	ldrb	r3, [r7, #31]
 80052b8:	3302      	adds	r3, #2
 80052ba:	77fb      	strb	r3, [r7, #31]
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 0, 2+4+2+2+2,buff);
 80052bc:	4b18      	ldr	r3, [pc, #96]	@ (8005320 <Batt_Env_RSSI_Update+0x160>)
 80052be:	8818      	ldrh	r0, [r3, #0]
 80052c0:	4b18      	ldr	r3, [pc, #96]	@ (8005324 <Batt_Env_RSSI_Update+0x164>)
 80052c2:	8819      	ldrh	r1, [r3, #0]
 80052c4:	f107 0310 	add.w	r3, r7, #16
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	230c      	movs	r3, #12
 80052cc:	2200      	movs	r2, #0
 80052ce:	f009 faf3 	bl	800e8b8 <aci_gatt_update_char_value>
 80052d2:	4603      	mov	r3, r0
 80052d4:	77bb      	strb	r3, [r7, #30]

  if (ret != BLE_STATUS_SUCCESS){
 80052d6:	7fbb      	ldrb	r3, [r7, #30]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01b      	beq.n	8005314 <Batt_Env_RSSI_Update+0x154>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR)){
 80052dc:	4b12      	ldr	r3, [pc, #72]	@ (8005328 <Batt_Env_RSSI_Update+0x168>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	0a5b      	lsrs	r3, r3, #9
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <Batt_Env_RSSI_Update+0x14a>
      BytesToWrite =sprintf((char *)BufferToWrite, "Error Updating Environmental Char\r\n");
 80052ec:	490f      	ldr	r1, [pc, #60]	@ (800532c <Batt_Env_RSSI_Update+0x16c>)
 80052ee:	4810      	ldr	r0, [pc, #64]	@ (8005330 <Batt_Env_RSSI_Update+0x170>)
 80052f0:	f00a fef8 	bl	80100e4 <siprintf>
 80052f4:	4603      	mov	r3, r0
 80052f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005334 <Batt_Env_RSSI_Update+0x174>)
 80052f8:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <Batt_Env_RSSI_Update+0x174>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	4619      	mov	r1, r3
 8005302:	480b      	ldr	r0, [pc, #44]	@ (8005330 <Batt_Env_RSSI_Update+0x170>)
 8005304:	f7ff fc04 	bl	8004b10 <Stderr_Update>
 8005308:	e002      	b.n	8005310 <Batt_Env_RSSI_Update+0x150>
    } else {
      PRINTF("Error Updating Environmental Char\r\n");
 800530a:	4808      	ldr	r0, [pc, #32]	@ (800532c <Batt_Env_RSSI_Update+0x16c>)
 800530c:	f7fc fa28 	bl	8001760 <myprintf>
    }
    return BLE_STATUS_ERROR;
 8005310:	2347      	movs	r3, #71	@ 0x47
 8005312:	e000      	b.n	8005316 <Batt_Env_RSSI_Update+0x156>
  }
  return BLE_STATUS_SUCCESS;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	200009ac 	.word	0x200009ac
 8005324:	200009ae 	.word	0x200009ae
 8005328:	20000808 	.word	0x20000808
 800532c:	08011990 	.word	0x08011990
 8005330:	2000080c 	.word	0x2000080c
 8005334:	2000090c 	.word	0x2000090c

08005338 <ARMING_Update>:
 * @brief  Update ARMING characteristic value
 * @param  uint8_t ArmingStatus Arming status 0/1 (off/on)
 * @retval tBleStatus   Status
 */
tBleStatus ARMING_Update(uint8_t ArmingStatus)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af02      	add	r7, sp, #8
 800533e:	4603      	mov	r3, r0
 8005340:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret;

  uint8_t buff[2+1];

  STORE_LE_16(buff  ,(HAL_GetTick()>>3));
 8005342:	f004 f83d 	bl	80093c0 <HAL_GetTick>
 8005346:	4603      	mov	r3, r0
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	733b      	strb	r3, [r7, #12]
 800534e:	f004 f837 	bl	80093c0 <HAL_GetTick>
 8005352:	4603      	mov	r3, r0
 8005354:	0adb      	lsrs	r3, r3, #11
 8005356:	b2db      	uxtb	r3, r3
 8005358:	737b      	strb	r3, [r7, #13]
  buff[2] = ArmingStatus;
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	73bb      	strb	r3, [r7, #14]

  ret = aci_gatt_update_char_value(HWServW2STHandle, ArmingCharHandle, 0, 2+1,buff);
 800535e:	4b18      	ldr	r3, [pc, #96]	@ (80053c0 <ARMING_Update+0x88>)
 8005360:	8818      	ldrh	r0, [r3, #0]
 8005362:	4b18      	ldr	r3, [pc, #96]	@ (80053c4 <ARMING_Update+0x8c>)
 8005364:	8819      	ldrh	r1, [r3, #0]
 8005366:	f107 030c 	add.w	r3, r7, #12
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	2303      	movs	r3, #3
 800536e:	2200      	movs	r2, #0
 8005370:	f009 faa2 	bl	800e8b8 <aci_gatt_update_char_value>
 8005374:	4603      	mov	r3, r0
 8005376:	73fb      	strb	r3, [r7, #15]

  if (ret != BLE_STATUS_SUCCESS){
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01b      	beq.n	80053b6 <ARMING_Update+0x7e>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR)){
 800537e:	4b12      	ldr	r3, [pc, #72]	@ (80053c8 <ARMING_Update+0x90>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	0a5b      	lsrs	r3, r3, #9
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00e      	beq.n	80053ac <ARMING_Update+0x74>
      BytesToWrite = sprintf((char *)BufferToWrite, "Error Updating ARMING Char\r\n");
 800538e:	490f      	ldr	r1, [pc, #60]	@ (80053cc <ARMING_Update+0x94>)
 8005390:	480f      	ldr	r0, [pc, #60]	@ (80053d0 <ARMING_Update+0x98>)
 8005392:	f00a fea7 	bl	80100e4 <siprintf>
 8005396:	4603      	mov	r3, r0
 8005398:	4a0e      	ldr	r2, [pc, #56]	@ (80053d4 <ARMING_Update+0x9c>)
 800539a:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 800539c:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <ARMING_Update+0x9c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	4619      	mov	r1, r3
 80053a4:	480a      	ldr	r0, [pc, #40]	@ (80053d0 <ARMING_Update+0x98>)
 80053a6:	f7ff fbb3 	bl	8004b10 <Stderr_Update>
 80053aa:	e002      	b.n	80053b2 <ARMING_Update+0x7a>
    } else {
      PRINTF("Error Updating Temp Char\r\n");
 80053ac:	480a      	ldr	r0, [pc, #40]	@ (80053d8 <ARMING_Update+0xa0>)
 80053ae:	f7fc f9d7 	bl	8001760 <myprintf>
    }
    return BLE_STATUS_ERROR;
 80053b2:	2347      	movs	r3, #71	@ 0x47
 80053b4:	e000      	b.n	80053b8 <ARMING_Update+0x80>
  }
  return BLE_STATUS_SUCCESS;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	200009ac 	.word	0x200009ac
 80053c4:	200009b4 	.word	0x200009b4
 80053c8:	20000808 	.word	0x20000808
 80053cc:	080119b4 	.word	0x080119b4
 80053d0:	2000080c 	.word	0x2000080c
 80053d4:	2000090c 	.word	0x2000090c
 80053d8:	080119d4 	.word	0x080119d4

080053dc <setConnectable>:
 * @brief  Puts the device in connectable mode.
 * @param  None 
 * @retval None
 */
void setConnectable(void)
{  
 80053dc:	b5b0      	push	{r4, r5, r7, lr}
 80053de:	b092      	sub	sp, #72	@ 0x48
 80053e0:	af08      	add	r7, sp, #32
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NAME_DRN};
 80053e2:	4a2e      	ldr	r2, [pc, #184]	@ (800549c <setConnectable+0xc0>)
 80053e4:	f107 0320 	add.w	r3, r7, #32
 80053e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053ec:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t manuf_data[26] = {
 80053f0:	4b2b      	ldr	r3, [pc, #172]	@ (80054a0 <setConnectable+0xc4>)
 80053f2:	1d3c      	adds	r4, r7, #4
 80053f4:	461d      	mov	r5, r3
 80053f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053fe:	c403      	stmia	r4!, {r0, r1}
 8005400:	8022      	strh	r2, [r4, #0]
    0x00,
    0x00, /* BLE MAC stop */
  };

  /* BLE MAC */
  manuf_data[20] = bdaddr[5];
 8005402:	4b28      	ldr	r3, [pc, #160]	@ (80054a4 <setConnectable+0xc8>)
 8005404:	795b      	ldrb	r3, [r3, #5]
 8005406:	763b      	strb	r3, [r7, #24]
  manuf_data[21] = bdaddr[4];
 8005408:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <setConnectable+0xc8>)
 800540a:	791b      	ldrb	r3, [r3, #4]
 800540c:	767b      	strb	r3, [r7, #25]
  manuf_data[22] = bdaddr[3];
 800540e:	4b25      	ldr	r3, [pc, #148]	@ (80054a4 <setConnectable+0xc8>)
 8005410:	78db      	ldrb	r3, [r3, #3]
 8005412:	76bb      	strb	r3, [r7, #26]
  manuf_data[23] = bdaddr[2];
 8005414:	4b23      	ldr	r3, [pc, #140]	@ (80054a4 <setConnectable+0xc8>)
 8005416:	789b      	ldrb	r3, [r3, #2]
 8005418:	76fb      	strb	r3, [r7, #27]
  manuf_data[24] = bdaddr[1];
 800541a:	4b22      	ldr	r3, [pc, #136]	@ (80054a4 <setConnectable+0xc8>)
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	773b      	strb	r3, [r7, #28]
  manuf_data[25] = bdaddr[0];
 8005420:	4b20      	ldr	r3, [pc, #128]	@ (80054a4 <setConnectable+0xc8>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	777b      	strb	r3, [r7, #29]

  manuf_data[16] |= 0x20; /* Led */
 8005426:	7d3b      	ldrb	r3, [r7, #20]
 8005428:	f043 0320 	orr.w	r3, r3, #32
 800542c:	b2db      	uxtb	r3, r3
 800542e:	753b      	strb	r3, [r7, #20]
  manuf_data[17] |= 0x05; /* Temperature and RSSI values*/
 8005430:	7d7b      	ldrb	r3, [r7, #21]
 8005432:	f043 0305 	orr.w	r3, r3, #5
 8005436:	b2db      	uxtb	r3, r3
 8005438:	757b      	strb	r3, [r7, #21]
  manuf_data[17] |= 0x08; /* Battery level (percentage of full battery) */
 800543a:	7d7b      	ldrb	r3, [r7, #21]
 800543c:	f043 0308 	orr.w	r3, r3, #8
 8005440:	b2db      	uxtb	r3, r3
 8005442:	757b      	strb	r3, [r7, #21]
  manuf_data[17] |= 0x10; /* Pressure value*/
 8005444:	7d7b      	ldrb	r3, [r7, #21]
 8005446:	f043 0310 	orr.w	r3, r3, #16
 800544a:	b2db      	uxtb	r3, r3
 800544c:	757b      	strb	r3, [r7, #21]
    
  /* Max Char */
  manuf_data[18] |=0x80;
 800544e:	7dbb      	ldrb	r3, [r7, #22]
 8005450:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005454:	b2db      	uxtb	r3, r3
 8005456:	75bb      	strb	r3, [r7, #22]

  /* disable scan response */
  hci_le_set_scan_resp_data(0,NULL);
 8005458:	2100      	movs	r1, #0
 800545a:	2000      	movs	r0, #0
 800545c:	f009 fe80 	bl	800f160 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 8005460:	2300      	movs	r3, #0
 8005462:	9306      	str	r3, [sp, #24]
 8005464:	2300      	movs	r3, #0
 8005466:	9305      	str	r3, [sp, #20]
 8005468:	2300      	movs	r3, #0
 800546a:	9304      	str	r3, [sp, #16]
 800546c:	2300      	movs	r3, #0
 800546e:	9303      	str	r3, [sp, #12]
 8005470:	f107 0320 	add.w	r3, r7, #32
 8005474:	9302      	str	r3, [sp, #8]
 8005476:	2308      	movs	r3, #8
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	2301      	movs	r3, #1
 8005480:	2200      	movs	r2, #0
 8005482:	2100      	movs	r1, #0
 8005484:	2000      	movs	r0, #0
 8005486:	f008 ff05 	bl	800e294 <aci_gap_set_discoverable>
//#endif /* MAC_MOTENV */
                           NO_WHITE_LIST_USE,
                           sizeof(local_name), local_name, 0, NULL, 0, 0);

  /* Send Advertising data */
  aci_gap_update_adv_data(26, manuf_data);
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	4619      	mov	r1, r3
 800548e:	201a      	movs	r0, #26
 8005490:	f009 f847 	bl	800e522 <aci_gap_update_adv_data>
}
 8005494:	bf00      	nop
 8005496:	3728      	adds	r7, #40	@ 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	bdb0      	pop	{r4, r5, r7, pc}
 800549c:	080119f0 	.word	0x080119f0
 80054a0:	080119f8 	.word	0x080119f8
 80054a4:	20000448 	.word	0x20000448

080054a8 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t addr[6] Address of peer device
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af04      	add	r7, sp, #16
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 80054b4:	4b1d      	ldr	r3, [pc, #116]	@ (800552c <GAP_ConnectionComplete_CB+0x84>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80054ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005530 <GAP_ConnectionComplete_CB+0x88>)
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	8013      	strh	r3, [r2, #0]

#ifdef MOTENV_DEBUG_CONNECTION
  PRINTF(">>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3305      	adds	r3, #5
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	461c      	mov	r4, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3303      	adds	r3, #3
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	461d      	mov	r5, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3302      	adds	r3, #2
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3301      	adds	r3, #1
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	9302      	str	r3, [sp, #8]
 80054ee:	9101      	str	r1, [sp, #4]
 80054f0:	9200      	str	r2, [sp, #0]
 80054f2:	462b      	mov	r3, r5
 80054f4:	4622      	mov	r2, r4
 80054f6:	4601      	mov	r1, r0
 80054f8:	480e      	ldr	r0, [pc, #56]	@ (8005534 <GAP_ConnectionComplete_CB+0x8c>)
 80054fa:	f7fc f931 	bl	8001760 <myprintf>
#endif /* MOTENV_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 80054fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <GAP_ConnectionComplete_CB+0x90>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
  
  if(TargetBoardFeatures.HWAdvanceFeatures) {
 8005504:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <GAP_ConnectionComplete_CB+0x94>)
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <GAP_ConnectionComplete_CB+0x68>
    DisableHWFeatures();
 800550c:	f000 fc9c 	bl	8005e48 <DisableHWFeatures>
  }
  
aci_l2cap_connection_parameter_update_request(connection_handle,
 8005510:	4b07      	ldr	r3, [pc, #28]	@ (8005530 <GAP_ConnectionComplete_CB+0x88>)
 8005512:	8818      	ldrh	r0, [r3, #0]
 8005514:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	2300      	movs	r3, #0
 800551c:	220a      	movs	r2, #10
 800551e:	210a      	movs	r1, #10
 8005520:	f009 fabe 	bl	800eaa0 <aci_l2cap_connection_parameter_update_request>
                                                      10 /* interval_min*/,
                                                      10 /* interval_max */,
                                                      0   /* slave_latency */,
                                                      400 /*timeout_multiplier*/);
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bdb0      	pop	{r4, r5, r7, pc}
 800552c:	200009a8 	.word	0x200009a8
 8005530:	200009f2 	.word	0x200009f2
 8005534:	08011a14 	.word	0x08011a14
 8005538:	20000808 	.word	0x20000808
 800553c:	200009f8 	.word	0x200009f8

08005540 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
static void GAP_DisconnectionComplete_CB(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  connected = FALSE;
 8005544:	4b09      	ldr	r3, [pc, #36]	@ (800556c <GAP_DisconnectionComplete_CB+0x2c>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]

#ifdef MOTENV_DEBUG_CONNECTION  
  PRINTF("<<<<<<DISCONNECTED\r\n");
 800554a:	4809      	ldr	r0, [pc, #36]	@ (8005570 <GAP_DisconnectionComplete_CB+0x30>)
 800554c:	f7fc f908 	bl	8001760 <myprintf>
#endif /* MOTENV_DEBUG_CONNECTION */  

  /* Make the device connectable again. */
  set_connectable = TRUE;
 8005550:	4b08      	ldr	r3, [pc, #32]	@ (8005574 <GAP_DisconnectionComplete_CB+0x34>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]

  ConnectionBleStatus=0;
 8005556:	4b08      	ldr	r3, [pc, #32]	@ (8005578 <GAP_DisconnectionComplete_CB+0x38>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
  
  if(TargetBoardFeatures.HWAdvanceFeatures) {
 800555c:	4b07      	ldr	r3, [pc, #28]	@ (800557c <GAP_DisconnectionComplete_CB+0x3c>)
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <GAP_DisconnectionComplete_CB+0x28>
    DisableHWFeatures();
 8005564:	f000 fc70 	bl	8005e48 <DisableHWFeatures>
  }
  
}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200009a8 	.word	0x200009a8
 8005570:	08011a38 	.word	0x08011a38
 8005574:	20000024 	.word	0x20000024
 8005578:	20000808 	.word	0x20000808
 800557c:	200009f8 	.word	0x200009f8

08005580 <Read_Request_CB>:
 * @brief  This function is called when there is a Bluetooth Read request
 * @param  uint16_t handle Handle of the attribute
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	80fb      	strh	r3, [r7, #6]
  //uint8_t Status;
  if(handle == EnvironmentalCharHandle + 1){
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	4b36      	ldr	r3, [pc, #216]	@ (8005668 <Read_Request_CB+0xe8>)
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	429a      	cmp	r2, r3
 8005594:	d137      	bne.n	8005606 <Read_Request_CB+0x86>
    /* Read Request for Pressure,Battery, and Temperatures*/
    float SensorValue=0.0;
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
    int32_t PressToSend=0;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]
    uint16_t BattToSend=0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	82fb      	strh	r3, [r7, #22]
    int16_t TempToSend=0,RSSIToSend=0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	82bb      	strh	r3, [r7, #20]
 80055a8:	2300      	movs	r3, #0
 80055aa:	827b      	strh	r3, [r7, #18]
    int32_t decPart, intPart;
    if(TargetBoardFeatures.HandlePressSensor) {
 80055ac:	4b2f      	ldr	r3, [pc, #188]	@ (800566c <Read_Request_CB+0xec>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01f      	beq.n	80055f4 <Read_Request_CB+0x74>
    //  if((TargetBoardFeatures.SnsAltFunc ? BSP_PRESSURE_IsInitialized : BSP_PRESSURE_IsInitialized)(TargetBoardFeatures.HandlePressSensor,&Status)==COMPONENT_OK) {
     //   (TargetBoardFeatures.SnsAltFunc ? BSP_PRESSURE_Get_Press : BSP_PRESSURE_Get_Press)(TargetBoardFeatures.HandlePressSensor,(float *)&SensorValue);
        MCR_BLUEMS_F2I_2D(SensorValue, intPart, decPart);
 80055b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80055b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055bc:	ee17 3a90 	vmov	r3, s15
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80055d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005670 <Read_Request_CB+0xf0>
 80055d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055e0:	ee17 3a90 	vmov	r3, s15
 80055e4:	60bb      	str	r3, [r7, #8]
        PressToSend=intPart*100+decPart;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2264      	movs	r2, #100	@ 0x64
 80055ea:	fb02 f303 	mul.w	r3, r2, r3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	61fb      	str	r3, [r7, #28]
     // }
    }

    Batt_Env_RSSI_Update(PressToSend,BattToSend,TempToSend,RSSIToSend);
 80055f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055f8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80055fc:	8af9      	ldrh	r1, [r7, #22]
 80055fe:	69f8      	ldr	r0, [r7, #28]
 8005600:	f7ff fdde 	bl	80051c0 <Batt_Env_RSSI_Update>
 8005604:	e023      	b.n	800564e <Read_Request_CB+0xce>
  } else if(handle == ArmingCharHandle + 1){
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	4b1a      	ldr	r3, [pc, #104]	@ (8005674 <Read_Request_CB+0xf4>)
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	429a      	cmp	r2, r3
 8005610:	d106      	bne.n	8005620 <Read_Request_CB+0xa0>
    /* Read Request for Arming Status */
    ARMING_Update(TargetBoardFeatures.LedStatus);
 8005612:	4b16      	ldr	r3, [pc, #88]	@ (800566c <Read_Request_CB+0xec>)
 8005614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fe8d 	bl	8005338 <ARMING_Update>
 800561e:	e016      	b.n	800564e <Read_Request_CB+0xce>
  } else if(handle == AccEventCharHandle +1) {
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	4b15      	ldr	r3, [pc, #84]	@ (8005678 <Read_Request_CB+0xf8>)
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	429a      	cmp	r2, r3
 800562a:	d010      	beq.n	800564e <Read_Request_CB+0xce>
    
  }else if (handle == StdErrCharHandle + 1) {
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	4b13      	ldr	r3, [pc, #76]	@ (800567c <Read_Request_CB+0xfc>)
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	429a      	cmp	r2, r3
 8005636:	d102      	bne.n	800563e <Read_Request_CB+0xbe>
    /* Send again the last packet for StdError */
    Stderr_Update_AfterRead();
 8005638:	f7ff fb00 	bl	8004c3c <Stderr_Update_AfterRead>
 800563c:	e007      	b.n	800564e <Read_Request_CB+0xce>
  } else if (handle == TermCharHandle + 1) {
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	4b0f      	ldr	r3, [pc, #60]	@ (8005680 <Read_Request_CB+0x100>)
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	429a      	cmp	r2, r3
 8005648:	d101      	bne.n	800564e <Read_Request_CB+0xce>
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
 800564a:	f7ff fb19 	bl	8004c80 <Term_Update_AfterRead>
    GG_Update();
#endif /* STM32_SENSORTILE */
  }

  //EXIT:
  if(connection_handle != 0)
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <Read_Request_CB+0x104>)
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <Read_Request_CB+0xe0>
    aci_gatt_allow_read(connection_handle);
 8005656:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <Read_Request_CB+0x104>)
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f009 f9c2 	bl	800e9e4 <aci_gatt_allow_read>
}
 8005660:	bf00      	nop
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	200009ae 	.word	0x200009ae
 800566c:	200009f8 	.word	0x200009f8
 8005670:	42c80000 	.word	0x42c80000
 8005674:	200009b4 	.word	0x200009b4
 8005678:	200009b2 	.word	0x200009b2
 800567c:	200009c0 	.word	0x200009c0
 8005680:	200009be 	.word	0x200009be
 8005684:	200009f2 	.word	0x200009f2

08005688 <Attribute_Modified_CB>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t attr_handle, uint8_t * att_data, uint8_t data_length) 
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	6039      	str	r1, [r7, #0]
 8005692:	80fb      	strh	r3, [r7, #6]
 8005694:	4613      	mov	r3, r2
 8005696:	717b      	strb	r3, [r7, #5]
  if(attr_handle == ConfigCharHandle + 2) 
 8005698:	88fa      	ldrh	r2, [r7, #6]
 800569a:	4b7e      	ldr	r3, [pc, #504]	@ (8005894 <Attribute_Modified_CB+0x20c>)
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	3302      	adds	r3, #2
 80056a0:	429a      	cmp	r2, r3
 80056a2:	f000 80f3 	beq.w	800588c <Attribute_Modified_CB+0x204>
  {
    ;/* do nothing... only for removing the message "Notification UNKNOW handle" */
  } 
  else if(attr_handle == StdErrCharHandle + 2)
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	4b7b      	ldr	r3, [pc, #492]	@ (8005898 <Attribute_Modified_CB+0x210>)
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	3302      	adds	r3, #2
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d116      	bne.n	80056e0 <Attribute_Modified_CB+0x58>
  {
    if (att_data[0] == 01) 
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d106      	bne.n	80056c8 <Attribute_Modified_CB+0x40>
    {
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_ERR);
 80056ba:	4b78      	ldr	r3, [pc, #480]	@ (800589c <Attribute_Modified_CB+0x214>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056c2:	4a76      	ldr	r2, [pc, #472]	@ (800589c <Attribute_Modified_CB+0x214>)
 80056c4:	6013      	str	r3, [r2, #0]
    else 
    {
      PRINTF("Notification UNKNOW handle\r\n");
    }
  }
}
 80056c6:	e0e1      	b.n	800588c <Attribute_Modified_CB+0x204>
    } else if (att_data[0] == 0)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f040 80dd 	bne.w	800588c <Attribute_Modified_CB+0x204>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_ERR);
 80056d2:	4b72      	ldr	r3, [pc, #456]	@ (800589c <Attribute_Modified_CB+0x214>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056da:	4a70      	ldr	r2, [pc, #448]	@ (800589c <Attribute_Modified_CB+0x214>)
 80056dc:	6013      	str	r3, [r2, #0]
}
 80056de:	e0d5      	b.n	800588c <Attribute_Modified_CB+0x204>
  else if(attr_handle == TermCharHandle + 2)
 80056e0:	88fa      	ldrh	r2, [r7, #6]
 80056e2:	4b6f      	ldr	r3, [pc, #444]	@ (80058a0 <Attribute_Modified_CB+0x218>)
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	3302      	adds	r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d116      	bne.n	800571a <Attribute_Modified_CB+0x92>
    if (att_data[0] == 01) 
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d106      	bne.n	8005702 <Attribute_Modified_CB+0x7a>
      W2ST_ON_CONNECTION(W2ST_CONNECT_STD_TERM);
 80056f4:	4b69      	ldr	r3, [pc, #420]	@ (800589c <Attribute_Modified_CB+0x214>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056fc:	4a67      	ldr	r2, [pc, #412]	@ (800589c <Attribute_Modified_CB+0x214>)
 80056fe:	6013      	str	r3, [r2, #0]
}
 8005700:	e0c4      	b.n	800588c <Attribute_Modified_CB+0x204>
    else if (att_data[0] == 0)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 80c0 	bne.w	800588c <Attribute_Modified_CB+0x204>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_STD_TERM);
 800570c:	4b63      	ldr	r3, [pc, #396]	@ (800589c <Attribute_Modified_CB+0x214>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005714:	4a61      	ldr	r2, [pc, #388]	@ (800589c <Attribute_Modified_CB+0x214>)
 8005716:	6013      	str	r3, [r2, #0]
}
 8005718:	e0b8      	b.n	800588c <Attribute_Modified_CB+0x204>
  else if (attr_handle == TermCharHandle + 1)
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	4b60      	ldr	r3, [pc, #384]	@ (80058a0 <Attribute_Modified_CB+0x218>)
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	429a      	cmp	r2, r3
 8005724:	d111      	bne.n	800574a <Attribute_Modified_CB+0xc2>
    uint32_t SendBackData =1; /* By default Answer with the same message received */
 8005726:	2301      	movs	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
      SendBackData = DebugConsoleCommandParsing(att_data,data_length);
 800572a:	797b      	ldrb	r3, [r7, #5]
 800572c:	4619      	mov	r1, r3
 800572e:	6838      	ldr	r0, [r7, #0]
 8005730:	f000 f8cc 	bl	80058cc <DebugConsoleCommandParsing>
 8005734:	60f8      	str	r0, [r7, #12]
    if(SendBackData) 
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 80a7 	beq.w	800588c <Attribute_Modified_CB+0x204>
      Term_Update(att_data,data_length);
 800573e:	797b      	ldrb	r3, [r7, #5]
 8005740:	4619      	mov	r1, r3
 8005742:	6838      	ldr	r0, [r7, #0]
 8005744:	f7ff fa2c 	bl	8004ba0 <Term_Update>
}
 8005748:	e0a0      	b.n	800588c <Attribute_Modified_CB+0x204>
  else if(attr_handle == ArmingCharHandle + 2)
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	4b55      	ldr	r3, [pc, #340]	@ (80058a4 <Attribute_Modified_CB+0x21c>)
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	3302      	adds	r3, #2
 8005752:	429a      	cmp	r2, r3
 8005754:	d14d      	bne.n	80057f2 <Attribute_Modified_CB+0x16a>
    if (att_data[0] == 01) 
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10c      	bne.n	8005778 <Attribute_Modified_CB+0xf0>
      W2ST_ON_CONNECTION(W2ST_CONNECT_LED);
 800575e:	4b4f      	ldr	r3, [pc, #316]	@ (800589c <Attribute_Modified_CB+0x214>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f043 0302 	orr.w	r3, r3, #2
 8005766:	4a4d      	ldr	r2, [pc, #308]	@ (800589c <Attribute_Modified_CB+0x214>)
 8005768:	6013      	str	r3, [r2, #0]
      ARMING_Update(TargetBoardFeatures.LedStatus);
 800576a:	4b4f      	ldr	r3, [pc, #316]	@ (80058a8 <Attribute_Modified_CB+0x220>)
 800576c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fde1 	bl	8005338 <ARMING_Update>
 8005776:	e009      	b.n	800578c <Attribute_Modified_CB+0x104>
    else if (att_data[0] == 0)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <Attribute_Modified_CB+0x104>
      W2ST_OFF_CONNECTION(W2ST_CONNECT_LED);
 8005780:	4b46      	ldr	r3, [pc, #280]	@ (800589c <Attribute_Modified_CB+0x214>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f023 0302 	bic.w	r3, r3, #2
 8005788:	4a44      	ldr	r2, [pc, #272]	@ (800589c <Attribute_Modified_CB+0x214>)
 800578a:	6013      	str	r3, [r2, #0]
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_TERM)) 
 800578c:	4b43      	ldr	r3, [pc, #268]	@ (800589c <Attribute_Modified_CB+0x214>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01a      	beq.n	80057d2 <Attribute_Modified_CB+0x14a>
      BytesToWrite =sprintf((char *)BufferToWrite,"--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 800579c:	4b3f      	ldr	r3, [pc, #252]	@ (800589c <Attribute_Modified_CB+0x214>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <Attribute_Modified_CB+0x128>
 80057ac:	4b3f      	ldr	r3, [pc, #252]	@ (80058ac <Attribute_Modified_CB+0x224>)
 80057ae:	e000      	b.n	80057b2 <Attribute_Modified_CB+0x12a>
 80057b0:	4b3f      	ldr	r3, [pc, #252]	@ (80058b0 <Attribute_Modified_CB+0x228>)
 80057b2:	461a      	mov	r2, r3
 80057b4:	493f      	ldr	r1, [pc, #252]	@ (80058b4 <Attribute_Modified_CB+0x22c>)
 80057b6:	4840      	ldr	r0, [pc, #256]	@ (80058b8 <Attribute_Modified_CB+0x230>)
 80057b8:	f00a fc94 	bl	80100e4 <siprintf>
 80057bc:	4603      	mov	r3, r0
 80057be:	4a3f      	ldr	r2, [pc, #252]	@ (80058bc <Attribute_Modified_CB+0x234>)
 80057c0:	6013      	str	r3, [r2, #0]
     Term_Update(BufferToWrite,BytesToWrite);
 80057c2:	4b3e      	ldr	r3, [pc, #248]	@ (80058bc <Attribute_Modified_CB+0x234>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	483b      	ldr	r0, [pc, #236]	@ (80058b8 <Attribute_Modified_CB+0x230>)
 80057cc:	f7ff f9e8 	bl	8004ba0 <Term_Update>
}
 80057d0:	e05c      	b.n	800588c <Attribute_Modified_CB+0x204>
      PRINTF("--->Led=%s\r\n", W2ST_CHECK_CONNECTION(W2ST_CONNECT_LED) ? "ON" : "OFF");
 80057d2:	4b32      	ldr	r3, [pc, #200]	@ (800589c <Attribute_Modified_CB+0x214>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <Attribute_Modified_CB+0x15e>
 80057e2:	4b32      	ldr	r3, [pc, #200]	@ (80058ac <Attribute_Modified_CB+0x224>)
 80057e4:	e000      	b.n	80057e8 <Attribute_Modified_CB+0x160>
 80057e6:	4b32      	ldr	r3, [pc, #200]	@ (80058b0 <Attribute_Modified_CB+0x228>)
 80057e8:	4619      	mov	r1, r3
 80057ea:	4832      	ldr	r0, [pc, #200]	@ (80058b4 <Attribute_Modified_CB+0x22c>)
 80057ec:	f7fb ffb8 	bl	8001760 <myprintf>
}
 80057f0:	e04c      	b.n	800588c <Attribute_Modified_CB+0x204>
  else if (attr_handle == ConfigCharHandle + 1) 
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	4b27      	ldr	r3, [pc, #156]	@ (8005894 <Attribute_Modified_CB+0x20c>)
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d105      	bne.n	800580a <Attribute_Modified_CB+0x182>
    ConfigCommandParsing(att_data, data_length);		
 80057fe:	797b      	ldrb	r3, [r7, #5]
 8005800:	4619      	mov	r1, r3
 8005802:	6838      	ldr	r0, [r7, #0]
 8005804:	f000 fa9a 	bl	8005d3c <ConfigCommandParsing>
}
 8005808:	e040      	b.n	800588c <Attribute_Modified_CB+0x204>
  else if (attr_handle == MaxCharHandle+ 1)
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	4b2c      	ldr	r3, [pc, #176]	@ (80058c0 <Attribute_Modified_CB+0x238>)
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	429a      	cmp	r2, r3
 8005814:	d120      	bne.n	8005858 <Attribute_Modified_CB+0x1d0>
     joydata[0] = att_data[1];
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	785a      	ldrb	r2, [r3, #1]
 800581a:	4b2a      	ldr	r3, [pc, #168]	@ (80058c4 <Attribute_Modified_CB+0x23c>)
 800581c:	701a      	strb	r2, [r3, #0]
     joydata[1] = att_data[2];
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	789a      	ldrb	r2, [r3, #2]
 8005822:	4b28      	ldr	r3, [pc, #160]	@ (80058c4 <Attribute_Modified_CB+0x23c>)
 8005824:	705a      	strb	r2, [r3, #1]
     joydata[2] = att_data[3];
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	78da      	ldrb	r2, [r3, #3]
 800582a:	4b26      	ldr	r3, [pc, #152]	@ (80058c4 <Attribute_Modified_CB+0x23c>)
 800582c:	709a      	strb	r2, [r3, #2]
     joydata[3] = att_data[4];
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	791a      	ldrb	r2, [r3, #4]
 8005832:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <Attribute_Modified_CB+0x23c>)
 8005834:	70da      	strb	r2, [r3, #3]
     joydata[4] = att_data[5];
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	795a      	ldrb	r2, [r3, #5]
 800583a:	4b22      	ldr	r3, [pc, #136]	@ (80058c4 <Attribute_Modified_CB+0x23c>)
 800583c:	711a      	strb	r2, [r3, #4]
     joydata[5] = att_data[6];
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	799a      	ldrb	r2, [r3, #6]
 8005842:	4b20      	ldr	r3, [pc, #128]	@ (80058c4 <Attribute_Modified_CB+0x23c>)
 8005844:	715a      	strb	r2, [r3, #5]
     joydata[6] = att_data[7];
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	79da      	ldrb	r2, [r3, #7]
 800584a:	4b1e      	ldr	r3, [pc, #120]	@ (80058c4 <Attribute_Modified_CB+0x23c>)
 800584c:	719a      	strb	r2, [r3, #6]
     joydata[7] = att_data[8];
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	7a1a      	ldrb	r2, [r3, #8]
 8005852:	4b1c      	ldr	r3, [pc, #112]	@ (80058c4 <Attribute_Modified_CB+0x23c>)
 8005854:	71da      	strb	r2, [r3, #7]
}
 8005856:	e019      	b.n	800588c <Attribute_Modified_CB+0x204>
    if(W2ST_CHECK_CONNECTION(W2ST_CONNECT_STD_ERR))
 8005858:	4b10      	ldr	r3, [pc, #64]	@ (800589c <Attribute_Modified_CB+0x214>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	0a5b      	lsrs	r3, r3, #9
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <Attribute_Modified_CB+0x1fe>
      BytesToWrite =sprintf((char *)BufferToWrite, "Notification UNKNOW handle\r\n");
 8005868:	4917      	ldr	r1, [pc, #92]	@ (80058c8 <Attribute_Modified_CB+0x240>)
 800586a:	4813      	ldr	r0, [pc, #76]	@ (80058b8 <Attribute_Modified_CB+0x230>)
 800586c:	f00a fc3a 	bl	80100e4 <siprintf>
 8005870:	4603      	mov	r3, r0
 8005872:	4a12      	ldr	r2, [pc, #72]	@ (80058bc <Attribute_Modified_CB+0x234>)
 8005874:	6013      	str	r3, [r2, #0]
      Stderr_Update(BufferToWrite,BytesToWrite);
 8005876:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <Attribute_Modified_CB+0x234>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	4619      	mov	r1, r3
 800587e:	480e      	ldr	r0, [pc, #56]	@ (80058b8 <Attribute_Modified_CB+0x230>)
 8005880:	f7ff f946 	bl	8004b10 <Stderr_Update>
}
 8005884:	e002      	b.n	800588c <Attribute_Modified_CB+0x204>
      PRINTF("Notification UNKNOW handle\r\n");
 8005886:	4810      	ldr	r0, [pc, #64]	@ (80058c8 <Attribute_Modified_CB+0x240>)
 8005888:	f7fb ff6a 	bl	8001760 <myprintf>
}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200009ba 	.word	0x200009ba
 8005898:	200009c0 	.word	0x200009c0
 800589c:	20000808 	.word	0x20000808
 80058a0:	200009be 	.word	0x200009be
 80058a4:	200009b4 	.word	0x200009b4
 80058a8:	200009f8 	.word	0x200009f8
 80058ac:	08011a50 	.word	0x08011a50
 80058b0:	08011a54 	.word	0x08011a54
 80058b4:	08011a58 	.word	0x08011a58
 80058b8:	2000080c 	.word	0x2000080c
 80058bc:	2000090c 	.word	0x2000090c
 80058c0:	200009b6 	.word	0x200009b6
 80058c4:	20000418 	.word	0x20000418
 80058c8:	08011a68 	.word	0x08011a68

080058cc <DebugConsoleCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval uint32_t SendItBack true/false
 */
static uint32_t DebugConsoleCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 80058cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ce:	b09d      	sub	sp, #116	@ 0x74
 80058d0:	af0c      	add	r7, sp, #48	@ 0x30
 80058d2:	6178      	str	r0, [r7, #20]
 80058d4:	460b      	mov	r3, r1
 80058d6:	74fb      	strb	r3, [r7, #19]
  uint32_t SendBackData = 1;
 80058d8:	2301      	movs	r3, #1
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if((att_data[0]=='?') & (att_data[1]=='?')) {
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	3301      	adds	r3, #1
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80058f2:	bf0c      	ite	eq
 80058f4:	2301      	moveq	r3, #1
 80058f6:	2300      	movne	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4013      	ands	r3, r2
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d010      	beq.n	8005924 <DebugConsoleCommandParsing+0x58>
    /* Print Legend */
    SendBackData=0;
 8005902:	2300      	movs	r3, #0
 8005904:	63fb      	str	r3, [r7, #60]	@ 0x3c

    BytesToWrite =sprintf((char *)BufferToWrite,"Command:\r\n"
 8005906:	496a      	ldr	r1, [pc, #424]	@ (8005ab0 <DebugConsoleCommandParsing+0x1e4>)
 8005908:	486a      	ldr	r0, [pc, #424]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 800590a:	f00a fbeb 	bl	80100e4 <siprintf>
 800590e:	4603      	mov	r3, r0
 8005910:	4a69      	ldr	r2, [pc, #420]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 8005912:	6013      	str	r3, [r2, #0]
       "versionFw-> FW Version\r\n"
       "versionBle-> Ble Version\r\n");
#else /* USE_STM32L0XX_NUCLEO */
       );
#endif /* USE_STM32L0XX_NUCLEO */
    Term_Update(BufferToWrite,BytesToWrite);
 8005914:	4b68      	ldr	r3, [pc, #416]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	4619      	mov	r1, r3
 800591c:	4865      	ldr	r0, [pc, #404]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 800591e:	f7ff f93f 	bl	8004ba0 <Term_Update>
 8005922:	e15c      	b.n	8005bde <DebugConsoleCommandParsing+0x312>
  } else if((att_data[0]=='p') & (att_data[1]=='r')) {
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b70      	cmp	r3, #112	@ 0x70
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2da      	uxtb	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	3301      	adds	r3, #1
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b72      	cmp	r3, #114	@ 0x72
 800593a:	bf0c      	ite	eq
 800593c:	2301      	moveq	r3, #1
 800593e:	2300      	movne	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	4013      	ands	r3, r2
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <DebugConsoleCommandParsing+0x84>
    SendBackData=0;
 800594a:	2300      	movs	r3, #0
 800594c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800594e:	e146      	b.n	8005bde <DebugConsoleCommandParsing+0x312>
  }
#ifndef USE_STM32L0XX_NUCLEO
  else if(!strncmp("versionFw",(char *)(att_data),9)) {
 8005950:	2209      	movs	r2, #9
 8005952:	6979      	ldr	r1, [r7, #20]
 8005954:	4859      	ldr	r0, [pc, #356]	@ (8005abc <DebugConsoleCommandParsing+0x1f0>)
 8005956:	f00a fc2b 	bl	80101b0 <strncmp>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d118      	bne.n	8005992 <DebugConsoleCommandParsing+0xc6>
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%s_%c.%c.%c\r\n",
 8005960:	2330      	movs	r3, #48	@ 0x30
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	2330      	movs	r3, #48	@ 0x30
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	2331      	movs	r3, #49	@ 0x31
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	4b54      	ldr	r3, [pc, #336]	@ (8005ac0 <DebugConsoleCommandParsing+0x1f4>)
 800596e:	4a55      	ldr	r2, [pc, #340]	@ (8005ac4 <DebugConsoleCommandParsing+0x1f8>)
 8005970:	4955      	ldr	r1, [pc, #340]	@ (8005ac8 <DebugConsoleCommandParsing+0x1fc>)
 8005972:	4850      	ldr	r0, [pc, #320]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 8005974:	f00a fbb6 	bl	80100e4 <siprintf>
 8005978:	4603      	mov	r3, r0
 800597a:	4a4f      	ldr	r2, [pc, #316]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 800597c:	6013      	str	r3, [r2, #0]
#endif
                          ,DRN_PACKAGENAME,
                          DRN_VERSION_MAJOR,
                          DRN_VERSION_MINOR,
                          DRN_VERSION_PATCH);
    Term_Update(BufferToWrite,BytesToWrite);
 800597e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	4619      	mov	r1, r3
 8005986:	484b      	ldr	r0, [pc, #300]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 8005988:	f7ff f90a 	bl	8004ba0 <Term_Update>
    SendBackData=0;
 800598c:	2300      	movs	r3, #0
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005990:	e125      	b.n	8005bde <DebugConsoleCommandParsing+0x312>
  }
#endif /* USE_STM32L0XX_NUCLEO */
  else if(!strncmp("info",(char *)(att_data),4)) {
 8005992:	2204      	movs	r2, #4
 8005994:	6979      	ldr	r1, [r7, #20]
 8005996:	484d      	ldr	r0, [pc, #308]	@ (8005acc <DebugConsoleCommandParsing+0x200>)
 8005998:	f00a fc0a 	bl	80101b0 <strncmp>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d13e      	bne.n	8005a20 <DebugConsoleCommandParsing+0x154>
    SendBackData=0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    
    BytesToWrite =sprintf((char *)BufferToWrite,"\r\nSTMicroelectronics %s:\r\n"
 80059a6:	2330      	movs	r3, #48	@ 0x30
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	2330      	movs	r3, #48	@ 0x30
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	2331      	movs	r3, #49	@ 0x31
 80059b0:	4a43      	ldr	r2, [pc, #268]	@ (8005ac0 <DebugConsoleCommandParsing+0x1f4>)
 80059b2:	4947      	ldr	r1, [pc, #284]	@ (8005ad0 <DebugConsoleCommandParsing+0x204>)
 80059b4:	483f      	ldr	r0, [pc, #252]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 80059b6:	f00a fb95 	bl	80100e4 <siprintf>
 80059ba:	4603      	mov	r3, r0
 80059bc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 80059be:	6013      	str	r3, [r2, #0]
        "\tSTM32L053R8-Nucleo board"
#endif /* USE_STM32F4XX_NUCLEO */
        "\r\n",
        DRN_PACKAGENAME,
        DRN_VERSION_MAJOR,DRN_VERSION_MINOR,DRN_VERSION_PATCH);
    Term_Update(BufferToWrite,BytesToWrite);
 80059c0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	483a      	ldr	r0, [pc, #232]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 80059ca:	f7ff f8e9 	bl	8004ba0 <Term_Update>
#elif defined (__CC_ARM)
      " (KEIL)\r\n",
#elif defined (__GNUC__)
      " (openstm32)\r\n",
#endif
         HAL_GetHalVersion() >>24,
 80059ce:	f003 fd27 	bl	8009420 <HAL_GetHalVersion>
 80059d2:	4603      	mov	r3, r0
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80059d4:	0e1d      	lsrs	r5, r3, #24
        (HAL_GetHalVersion() >>16)&0xFF,
 80059d6:	f003 fd23 	bl	8009420 <HAL_GetHalVersion>
 80059da:	4603      	mov	r3, r0
 80059dc:	0c1b      	lsrs	r3, r3, #16
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80059de:	b2de      	uxtb	r6, r3
        (HAL_GetHalVersion() >> 8)&0xFF,
 80059e0:	f003 fd1e 	bl	8009420 <HAL_GetHalVersion>
 80059e4:	4603      	mov	r3, r0
 80059e6:	0a1b      	lsrs	r3, r3, #8
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80059e8:	b2dc      	uxtb	r4, r3
         HAL_GetHalVersion()      &0xFF,
 80059ea:	f003 fd19 	bl	8009420 <HAL_GetHalVersion>
 80059ee:	4603      	mov	r3, r0
    BytesToWrite =sprintf((char *)BufferToWrite,"\t(HAL %ld.%ld.%ld_%ld)\r\n"
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	4a38      	ldr	r2, [pc, #224]	@ (8005ad4 <DebugConsoleCommandParsing+0x208>)
 80059f4:	9203      	str	r2, [sp, #12]
 80059f6:	4a38      	ldr	r2, [pc, #224]	@ (8005ad8 <DebugConsoleCommandParsing+0x20c>)
 80059f8:	9202      	str	r2, [sp, #8]
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	9400      	str	r4, [sp, #0]
 80059fe:	4633      	mov	r3, r6
 8005a00:	462a      	mov	r2, r5
 8005a02:	4936      	ldr	r1, [pc, #216]	@ (8005adc <DebugConsoleCommandParsing+0x210>)
 8005a04:	482b      	ldr	r0, [pc, #172]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 8005a06:	f00a fb6d 	bl	80100e4 <siprintf>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 8005a0e:	6013      	str	r3, [r2, #0]
         __DATE__,__TIME__);
    Term_Update(BufferToWrite,BytesToWrite);
 8005a10:	4b29      	ldr	r3, [pc, #164]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	4619      	mov	r1, r3
 8005a18:	4826      	ldr	r0, [pc, #152]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 8005a1a:	f7ff f8c1 	bl	8004ba0 <Term_Update>
 8005a1e:	e0de      	b.n	8005bde <DebugConsoleCommandParsing+0x312>
  #endif /* USE_STM32L0XX_NUCLEO */
  Term_Update(BufferToWrite,BytesToWrite);
#endif /* STM32_NUCLEO */
  }
#ifndef USE_STM32L0XX_NUCLEO
  else if(!strncmp("upgradeFw",(char *)(att_data),9)) {
 8005a20:	2209      	movs	r2, #9
 8005a22:	6979      	ldr	r1, [r7, #20]
 8005a24:	482e      	ldr	r0, [pc, #184]	@ (8005ae0 <DebugConsoleCommandParsing+0x214>)
 8005a26:	f00a fbc3 	bl	80101b0 <strncmp>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80d6 	beq.w	8005bde <DebugConsoleCommandParsing+0x312>
    /* DO nothing, OTA function not integrated */
  } else if(!strncmp("versionBle",(char *)(att_data),10)) {
 8005a32:	220a      	movs	r2, #10
 8005a34:	6979      	ldr	r1, [r7, #20]
 8005a36:	482b      	ldr	r0, [pc, #172]	@ (8005ae4 <DebugConsoleCommandParsing+0x218>)
 8005a38:	f00a fbba 	bl	80101b0 <strncmp>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d158      	bne.n	8005af4 <DebugConsoleCommandParsing+0x228>
    uint8_t  hwVersion;
    uint16_t fwVersion;
    /* get the BlueNRG HW and FW versions */
    getBlueNRGVersion(&hwVersion, &fwVersion);
 8005a42:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 8005a46:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f009 f869 	bl	800eb24 <getBlueNRGVersion>
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
                          (hwVersion > 0x30) ? "BleMS" : "Ble",
 8005a52:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 8005a56:	2b30      	cmp	r3, #48	@ 0x30
 8005a58:	d901      	bls.n	8005a5e <DebugConsoleCommandParsing+0x192>
 8005a5a:	4923      	ldr	r1, [pc, #140]	@ (8005ae8 <DebugConsoleCommandParsing+0x21c>)
 8005a5c:	e000      	b.n	8005a60 <DebugConsoleCommandParsing+0x194>
 8005a5e:	4923      	ldr	r1, [pc, #140]	@ (8005aec <DebugConsoleCommandParsing+0x220>)
 8005a60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4618      	mov	r0, r3
 8005a68:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a6a:	091b      	lsrs	r3, r3, #4
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f003 020f 	and.w	r2, r3, #15
                          fwVersion>>8, 
                          (fwVersion>>4)&0xF,
                          (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a');
 8005a72:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 8005a76:	2b30      	cmp	r3, #48	@ 0x30
 8005a78:	d904      	bls.n	8005a84 <DebugConsoleCommandParsing+0x1b8>
                          (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a');
 8005a7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a7c:	f003 030f 	and.w	r3, r3, #15
    BytesToWrite =sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 8005a80:	3360      	adds	r3, #96	@ 0x60
 8005a82:	e000      	b.n	8005a86 <DebugConsoleCommandParsing+0x1ba>
 8005a84:	2361      	movs	r3, #97	@ 0x61
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	9200      	str	r2, [sp, #0]
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	460a      	mov	r2, r1
 8005a8e:	4918      	ldr	r1, [pc, #96]	@ (8005af0 <DebugConsoleCommandParsing+0x224>)
 8005a90:	4808      	ldr	r0, [pc, #32]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 8005a92:	f00a fb27 	bl	80100e4 <siprintf>
 8005a96:	4603      	mov	r3, r0
 8005a98:	4a07      	ldr	r2, [pc, #28]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 8005a9a:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <DebugConsoleCommandParsing+0x1ec>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4803      	ldr	r0, [pc, #12]	@ (8005ab4 <DebugConsoleCommandParsing+0x1e8>)
 8005aa6:	f7ff f87b 	bl	8004ba0 <Term_Update>
    SendBackData=0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aae:	e096      	b.n	8005bde <DebugConsoleCommandParsing+0x312>
 8005ab0:	08011a88 	.word	0x08011a88
 8005ab4:	2000080c 	.word	0x2000080c
 8005ab8:	2000090c 	.word	0x2000090c
 8005abc:	08011af4 	.word	0x08011af4
 8005ac0:	08011b00 	.word	0x08011b00
 8005ac4:	08011b08 	.word	0x08011b08
 8005ac8:	08011b10 	.word	0x08011b10
 8005acc:	08011b24 	.word	0x08011b24
 8005ad0:	08011b2c 	.word	0x08011b2c
 8005ad4:	08011b94 	.word	0x08011b94
 8005ad8:	08011ba0 	.word	0x08011ba0
 8005adc:	08011b5c 	.word	0x08011b5c
 8005ae0:	08011bac 	.word	0x08011bac
 8005ae4:	08011bb8 	.word	0x08011bb8
 8005ae8:	08011bc4 	.word	0x08011bc4
 8005aec:	08011bcc 	.word	0x08011bcc
 8005af0:	08011bd0 	.word	0x08011bd0
  }
#endif /* USE_STM32L0XX_NUCLEO */
  else if((att_data[0]=='u') & (att_data[1]=='i') & (att_data[2]=='d')) {
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b75      	cmp	r3, #117	@ 0x75
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	3301      	adds	r3, #1
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b69      	cmp	r3, #105	@ 0x69
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	4013      	ands	r3, r2
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b64      	cmp	r3, #100	@ 0x64
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d057      	beq.n	8005bde <DebugConsoleCommandParsing+0x312>
    /* Write back the STM32 UID */
    uint8_t *uid = (uint8_t *)STM32_UUID;
 8005b2e:	4b7e      	ldr	r3, [pc, #504]	@ (8005d28 <DebugConsoleCommandParsing+0x45c>)
 8005b30:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t MCU_ID = STM32_MCU_ID[0]&0xFFF;
 8005b32:	4b7e      	ldr	r3, [pc, #504]	@ (8005d2c <DebugConsoleCommandParsing+0x460>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
                          uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3e:	3303      	adds	r3, #3
 8005b40:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b42:	469c      	mov	ip, r3
                          uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	3302      	adds	r3, #2
 8005b48:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b4a:	469e      	mov	lr, r3
                          uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	3301      	adds	r3, #1
 8005b50:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b52:	461a      	mov	r2, r3
                          uid[ 3],uid[ 2],uid[ 1],uid[ 0],
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b58:	4619      	mov	r1, r3
                          uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	3307      	adds	r3, #7
 8005b5e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b60:	4618      	mov	r0, r3
                          uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	3306      	adds	r3, #6
 8005b66:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b68:	461c      	mov	r4, r3
                          uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	3305      	adds	r3, #5
 8005b6e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b70:	461d      	mov	r5, r3
                          uid[ 7],uid[ 6],uid[ 5],uid[ 4],
 8005b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b74:	3304      	adds	r3, #4
 8005b76:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b78:	461e      	mov	r6, r3
                          uid[11],uid[ 10],uid[9],uid[8],
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	330b      	adds	r3, #11
 8005b7e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b80:	60fb      	str	r3, [r7, #12]
                          uid[11],uid[ 10],uid[9],uid[8],
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	330a      	adds	r3, #10
 8005b86:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b88:	60bb      	str	r3, [r7, #8]
                          uid[11],uid[ 10],uid[9],uid[8],
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	3309      	adds	r3, #9
 8005b8e:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b90:	607b      	str	r3, [r7, #4]
                          uid[11],uid[ 10],uid[9],uid[8],
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	3308      	adds	r3, #8
 8005b96:	781b      	ldrb	r3, [r3, #0]
    BytesToWrite =sprintf((char *)BufferToWrite,"%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X_%.3lX\r\n",
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	9308      	str	r3, [sp, #32]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	9307      	str	r3, [sp, #28]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	9306      	str	r3, [sp, #24]
 8005bae:	9605      	str	r6, [sp, #20]
 8005bb0:	9504      	str	r5, [sp, #16]
 8005bb2:	9403      	str	r4, [sp, #12]
 8005bb4:	9002      	str	r0, [sp, #8]
 8005bb6:	9101      	str	r1, [sp, #4]
 8005bb8:	9200      	str	r2, [sp, #0]
 8005bba:	4673      	mov	r3, lr
 8005bbc:	4662      	mov	r2, ip
 8005bbe:	495c      	ldr	r1, [pc, #368]	@ (8005d30 <DebugConsoleCommandParsing+0x464>)
 8005bc0:	485c      	ldr	r0, [pc, #368]	@ (8005d34 <DebugConsoleCommandParsing+0x468>)
 8005bc2:	f00a fa8f 	bl	80100e4 <siprintf>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4a5b      	ldr	r2, [pc, #364]	@ (8005d38 <DebugConsoleCommandParsing+0x46c>)
 8005bca:	6013      	str	r3, [r2, #0]
                          MCU_ID);
    Term_Update(BufferToWrite,BytesToWrite);
 8005bcc:	4b5a      	ldr	r3, [pc, #360]	@ (8005d38 <DebugConsoleCommandParsing+0x46c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4857      	ldr	r0, [pc, #348]	@ (8005d34 <DebugConsoleCommandParsing+0x468>)
 8005bd6:	f7fe ffe3 	bl	8004ba0 <Term_Update>
    SendBackData=0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

#if 1
  /* If it's something not yet recognized... only for testing.. This must be removed */
  if(SendBackData) {
 8005bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 809c 	beq.w	8005d1e <DebugConsoleCommandParsing+0x452>
    if(att_data[0]=='@') {
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b40      	cmp	r3, #64	@ 0x40
 8005bec:	f040 8097 	bne.w	8005d1e <DebugConsoleCommandParsing+0x452>
      if(att_data[1]=='T') {
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b54      	cmp	r3, #84	@ 0x54
 8005bf8:	d148      	bne.n	8005c8c <DebugConsoleCommandParsing+0x3c0>
        uint8_t loc_att_data[8];
        uint8_t loc_data_length=8;
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32


        loc_att_data[0] = (FEATURE_MASK_TEMP1>>24)&0xFF;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        loc_att_data[1] = (FEATURE_MASK_TEMP1>>16)&0xFF;
 8005c06:	2304      	movs	r3, #4
 8005c08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        loc_att_data[2] = (FEATURE_MASK_TEMP1>>8 )&0xFF;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        loc_att_data[3] = (FEATURE_MASK_TEMP1    )&0xFF;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        loc_att_data[4] = 255;
 8005c18:	23ff      	movs	r3, #255	@ 0xff
 8005c1a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        switch(att_data[2]) {
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	3302      	adds	r3, #2
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	3b44      	subs	r3, #68	@ 0x44
 8005c26:	2b09      	cmp	r3, #9
 8005c28:	d826      	bhi.n	8005c78 <DebugConsoleCommandParsing+0x3ac>
 8005c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <DebugConsoleCommandParsing+0x364>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c71 	.word	0x08005c71
 8005c34:	08005c79 	.word	0x08005c79
 8005c38:	08005c79 	.word	0x08005c79
 8005c3c:	08005c79 	.word	0x08005c79
 8005c40:	08005c69 	.word	0x08005c69
 8005c44:	08005c79 	.word	0x08005c79
 8005c48:	08005c79 	.word	0x08005c79
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	08005c59 	.word	0x08005c59
 8005c54:	08005c61 	.word	0x08005c61
          case 'L':
            loc_att_data[5] = 50; /* @5S */
 8005c58:	2332      	movs	r3, #50	@ 0x32
 8005c5a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
          break;
 8005c5e:	e00b      	b.n	8005c78 <DebugConsoleCommandParsing+0x3ac>
          case 'M':
            loc_att_data[5] = 10; /* @1S */
 8005c60:	230a      	movs	r3, #10
 8005c62:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
          break;
 8005c66:	e007      	b.n	8005c78 <DebugConsoleCommandParsing+0x3ac>
          case 'H':
            loc_att_data[5] = 1; /* @100mS */
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
          break;
 8005c6e:	e003      	b.n	8005c78 <DebugConsoleCommandParsing+0x3ac>
          case 'D':
            loc_att_data[5] = 0; /* Default */
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
          break;
 8005c76:	bf00      	nop
        }
        SendBackData = ConfigCommandParsing(loc_att_data,loc_data_length);
 8005c78:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8005c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f85a 	bl	8005d3c <ConfigCommandParsing>
 8005c88:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8005c8a:	e048      	b.n	8005d1e <DebugConsoleCommandParsing+0x452>
      } else if(att_data[1]=='A') {
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b41      	cmp	r3, #65	@ 0x41
 8005c94:	d143      	bne.n	8005d1e <DebugConsoleCommandParsing+0x452>
        uint8_t loc_att_data[8];
        uint8_t loc_data_length=8;
 8005c96:	2308      	movs	r3, #8
 8005c98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        
        loc_att_data[0] = (FEATURE_MASK_ACC>>24)&0xFF;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	773b      	strb	r3, [r7, #28]
        loc_att_data[1] = (FEATURE_MASK_ACC>>16)&0xFF;
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	777b      	strb	r3, [r7, #29]
        loc_att_data[2] = (FEATURE_MASK_ACC>>8 )&0xFF;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	77bb      	strb	r3, [r7, #30]
        loc_att_data[3] = (FEATURE_MASK_ACC    )&0xFF;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	77fb      	strb	r3, [r7, #31]
        loc_att_data[4] = 255;
 8005cac:	23ff      	movs	r3, #255	@ 0xff
 8005cae:	f887 3020 	strb.w	r3, [r7, #32]

        switch(att_data[2]) {
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	3b44      	subs	r3, #68	@ 0x44
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d826      	bhi.n	8005d0c <DebugConsoleCommandParsing+0x440>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <DebugConsoleCommandParsing+0x3f8>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005d05 	.word	0x08005d05
 8005cc8:	08005d0d 	.word	0x08005d0d
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d0d 	.word	0x08005d0d
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005d0d 	.word	0x08005d0d
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	08005ced 	.word	0x08005ced
 8005ce8:	08005cf5 	.word	0x08005cf5
          case 'L':
            loc_att_data[5] = 50; /* @5S */
 8005cec:	2332      	movs	r3, #50	@ 0x32
 8005cee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
          break;
 8005cf2:	e00b      	b.n	8005d0c <DebugConsoleCommandParsing+0x440>
          case 'M':
            loc_att_data[5] = 10; /* @1S */
 8005cf4:	230a      	movs	r3, #10
 8005cf6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
          break;
 8005cfa:	e007      	b.n	8005d0c <DebugConsoleCommandParsing+0x440>
          case 'H':
            loc_att_data[5] = 1; /* @100mS */
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
          break;
 8005d02:	e003      	b.n	8005d0c <DebugConsoleCommandParsing+0x440>
          case 'D':
            loc_att_data[5] = 0; /* Default */
 8005d04:	2300      	movs	r3, #0
 8005d06:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
          break;
 8005d0a:	bf00      	nop
        }
        SendBackData = ConfigCommandParsing(loc_att_data,loc_data_length);
 8005d0c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005d10:	f107 031c 	add.w	r3, r7, #28
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f810 	bl	8005d3c <ConfigCommandParsing>
 8005d1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
      }
    }
  }
#endif
  return SendBackData;
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3744      	adds	r7, #68	@ 0x44
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d28:	1fff7a10 	.word	0x1fff7a10
 8005d2c:	e0042000 	.word	0xe0042000
 8005d30:	08011be0 	.word	0x08011be0
 8005d34:	2000080c 	.word	0x2000080c
 8005d38:	2000090c 	.word	0x2000090c

08005d3c <ConfigCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval uint32_t SendItBack true/false
 */
static uint32_t ConfigCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  uint32_t SendItBack = 1;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
  return SendItBack;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HCI_Event_CB>:
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	@ 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pckt;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	627b      	str	r3, [r7, #36]	@ 0x24
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	623b      	str	r3, [r7, #32]
  
  if(hci_pckt->type != HCI_EVENT_PKT) {
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d15d      	bne.n	8005e32 <HCI_Event_CB+0xd6>
    return;
  }
  
  switch(event_pckt->evt){
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2bff      	cmp	r3, #255	@ 0xff
 8005d7c:	d01f      	beq.n	8005dbe <HCI_Event_CB+0x62>
 8005d7e:	2bff      	cmp	r3, #255	@ 0xff
 8005d80:	dc5c      	bgt.n	8005e3c <HCI_Event_CB+0xe0>
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	d002      	beq.n	8005d8c <HCI_Event_CB+0x30>
 8005d86:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d88:	d003      	beq.n	8005d92 <HCI_Event_CB+0x36>
 8005d8a:	e057      	b.n	8005e3c <HCI_Event_CB+0xe0>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8005d8c:	f7ff fbd8 	bl	8005540 <GAP_DisconnectionComplete_CB>
    }
    break;
 8005d90:	e054      	b.n	8005e3c <HCI_Event_CB+0xe0>
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	3302      	adds	r3, #2
 8005d96:	60fb      	str	r3, [r7, #12]
      
      switch(evt->subevent){
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d14a      	bne.n	8005e36 <HCI_Event_CB+0xda>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	1d5a      	adds	r2, r3, #5
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f7ff fb77 	bl	80054a8 <GAP_ConnectionComplete_CB>
        }
        break;
 8005dba:	bf00      	nop
      }
    }
    break;
 8005dbc:	e03b      	b.n	8005e36 <HCI_Event_CB+0xda>
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f640 4201 	movw	r2, #3073	@ 0xc01
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00d      	beq.n	8005dee <HCI_Event_CB+0x92>
 8005dd2:	f640 4214 	movw	r2, #3092	@ 0xc14
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d12f      	bne.n	8005e3a <HCI_Event_CB+0xde>
      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data; 
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3302      	adds	r3, #2
 8005dde:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);                    
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	885b      	ldrh	r3, [r3, #2]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fbca 	bl	8005580 <Read_Request_CB>
        }
        break;
 8005dec:	e020      	b.n	8005e30 <HCI_Event_CB+0xd4>
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        if(TargetBoardFeatures.bnrg_expansion_board==IDB05A1) {
 8005dee:	4b15      	ldr	r3, [pc, #84]	@ (8005e44 <HCI_Event_CB+0xe8>)
 8005df0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d10d      	bne.n	8005e14 <HCI_Event_CB+0xb8>
              evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	613b      	str	r3, [r7, #16]
              Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	885b      	ldrh	r3, [r3, #2]
 8005e02:	b298      	uxth	r0, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1dd9      	adds	r1, r3, #7
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	791b      	ldrb	r3, [r3, #4]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f7ff fc3b 	bl	8005688 <Attribute_Modified_CB>
            } else {
              evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
              Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
            }
        break;
 8005e12:	e00c      	b.n	8005e2e <HCI_Event_CB+0xd2>
              evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	3302      	adds	r3, #2
 8005e18:	617b      	str	r3, [r7, #20]
              Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	885b      	ldrh	r3, [r3, #2]
 8005e1e:	b298      	uxth	r0, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	1d59      	adds	r1, r3, #5
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	791b      	ldrb	r3, [r3, #4]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f7ff fc2d 	bl	8005688 <Attribute_Modified_CB>
        break;
 8005e2e:	bf00      	nop
      }
    }
    break;
 8005e30:	e003      	b.n	8005e3a <HCI_Event_CB+0xde>
    return;
 8005e32:	bf00      	nop
 8005e34:	e002      	b.n	8005e3c <HCI_Event_CB+0xe0>
    break;
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HCI_Event_CB+0xe0>
    break;
 8005e3a:	bf00      	nop
  }
}
 8005e3c:	3728      	adds	r7, #40	@ 0x28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	200009f8 	.word	0x200009f8

08005e48 <DisableHWFeatures>:


static void DisableHWFeatures(void)
{  
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
}
 8005e4c:	bf00      	nop
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e5e:	2300      	movs	r3, #0
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	4b10      	ldr	r3, [pc, #64]	@ (8005ea4 <HAL_MspInit+0x4c>)
 8005e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e66:	4a0f      	ldr	r2, [pc, #60]	@ (8005ea4 <HAL_MspInit+0x4c>)
 8005e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea4 <HAL_MspInit+0x4c>)
 8005e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	603b      	str	r3, [r7, #0]
 8005e7e:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <HAL_MspInit+0x4c>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	4a08      	ldr	r2, [pc, #32]	@ (8005ea4 <HAL_MspInit+0x4c>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <HAL_MspInit+0x4c>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40023800 	.word	0x40023800

08005ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	@ 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a17      	ldr	r2, [pc, #92]	@ (8005f24 <HAL_ADC_MspInit+0x7c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d127      	bne.n	8005f1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	4b16      	ldr	r3, [pc, #88]	@ (8005f28 <HAL_ADC_MspInit+0x80>)
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	4a15      	ldr	r2, [pc, #84]	@ (8005f28 <HAL_ADC_MspInit+0x80>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005eda:	4b13      	ldr	r3, [pc, #76]	@ (8005f28 <HAL_ADC_MspInit+0x80>)
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	4b0f      	ldr	r3, [pc, #60]	@ (8005f28 <HAL_ADC_MspInit+0x80>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	4a0e      	ldr	r2, [pc, #56]	@ (8005f28 <HAL_ADC_MspInit+0x80>)
 8005ef0:	f043 0302 	orr.w	r3, r3, #2
 8005ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <HAL_ADC_MspInit+0x80>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBAT_SENSE_Pin;
 8005f02:	2302      	movs	r3, #2
 8005f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f06:	2303      	movs	r3, #3
 8005f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8005f0e:	f107 0314 	add.w	r3, r7, #20
 8005f12:	4619      	mov	r1, r3
 8005f14:	4805      	ldr	r0, [pc, #20]	@ (8005f2c <HAL_ADC_MspInit+0x84>)
 8005f16:	f004 f845 	bl	8009fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005f1a:	bf00      	nop
 8005f1c:	3728      	adds	r7, #40	@ 0x28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40012000 	.word	0x40012000
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	40020400 	.word	0x40020400

08005f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	@ 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	609a      	str	r2, [r3, #8]
 8005f44:	60da      	str	r2, [r3, #12]
 8005f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a21      	ldr	r2, [pc, #132]	@ (8005fd4 <HAL_I2C_MspInit+0xa4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d13c      	bne.n	8005fcc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f52:	2300      	movs	r3, #0
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	4b20      	ldr	r3, [pc, #128]	@ (8005fd8 <HAL_I2C_MspInit+0xa8>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd8 <HAL_I2C_MspInit+0xa8>)
 8005f5c:	f043 0302 	orr.w	r3, r3, #2
 8005f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f62:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd8 <HAL_I2C_MspInit+0xa8>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f74:	2312      	movs	r3, #18
 8005f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005f80:	2304      	movs	r3, #4
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f84:	f107 0314 	add.w	r3, r7, #20
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4814      	ldr	r0, [pc, #80]	@ (8005fdc <HAL_I2C_MspInit+0xac>)
 8005f8c:	f004 f80a 	bl	8009fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005f90:	2308      	movs	r3, #8
 8005f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f94:	2312      	movs	r3, #18
 8005f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005fa0:	2309      	movs	r3, #9
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fa4:	f107 0314 	add.w	r3, r7, #20
 8005fa8:	4619      	mov	r1, r3
 8005faa:	480c      	ldr	r0, [pc, #48]	@ (8005fdc <HAL_I2C_MspInit+0xac>)
 8005fac:	f003 fffa 	bl	8009fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	4b08      	ldr	r3, [pc, #32]	@ (8005fd8 <HAL_I2C_MspInit+0xa8>)
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	4a07      	ldr	r2, [pc, #28]	@ (8005fd8 <HAL_I2C_MspInit+0xa8>)
 8005fba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fc0:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <HAL_I2C_MspInit+0xa8>)
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005fcc:	bf00      	nop
 8005fce:	3728      	adds	r7, #40	@ 0x28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40005800 	.word	0x40005800
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	40020400 	.word	0x40020400

08005fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08c      	sub	sp, #48	@ 0x30
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe8:	f107 031c 	add.w	r3, r7, #28
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	605a      	str	r2, [r3, #4]
 8005ff2:	609a      	str	r2, [r3, #8]
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a42      	ldr	r2, [pc, #264]	@ (8006108 <HAL_SPI_MspInit+0x128>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d144      	bne.n	800608c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	4b41      	ldr	r3, [pc, #260]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 8006008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600a:	4a40      	ldr	r2, [pc, #256]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 800600c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006010:	6453      	str	r3, [r2, #68]	@ 0x44
 8006012:	4b3e      	ldr	r3, [pc, #248]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 8006014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	4b3a      	ldr	r3, [pc, #232]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006026:	4a39      	ldr	r2, [pc, #228]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	6313      	str	r3, [r2, #48]	@ 0x30
 800602e:	4b37      	ldr	r3, [pc, #220]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800603a:	2320      	movs	r3, #32
 800603c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603e:	2302      	movs	r3, #2
 8006040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006042:	2302      	movs	r3, #2
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006046:	2303      	movs	r3, #3
 8006048:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800604a:	2305      	movs	r3, #5
 800604c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800604e:	f107 031c 	add.w	r3, r7, #28
 8006052:	4619      	mov	r1, r3
 8006054:	482e      	ldr	r0, [pc, #184]	@ (8006110 <HAL_SPI_MspInit+0x130>)
 8006056:	f003 ffa5 	bl	8009fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800605a:	23c0      	movs	r3, #192	@ 0xc0
 800605c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800605e:	2302      	movs	r3, #2
 8006060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006062:	2300      	movs	r3, #0
 8006064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006066:	2303      	movs	r3, #3
 8006068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800606a:	2305      	movs	r3, #5
 800606c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800606e:	f107 031c 	add.w	r3, r7, #28
 8006072:	4619      	mov	r1, r3
 8006074:	4826      	ldr	r0, [pc, #152]	@ (8006110 <HAL_SPI_MspInit+0x130>)
 8006076:	f003 ff95 	bl	8009fa4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	2023      	movs	r0, #35	@ 0x23
 8006080:	f003 feb9 	bl	8009df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006084:	2023      	movs	r0, #35	@ 0x23
 8006086:	f003 fed2 	bl	8009e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800608a:	e039      	b.n	8006100 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI2)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a20      	ldr	r2, [pc, #128]	@ (8006114 <HAL_SPI_MspInit+0x134>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d134      	bne.n	8006100 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]
 800609a:	4b1c      	ldr	r3, [pc, #112]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 80060a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80060a6:	4b19      	ldr	r3, [pc, #100]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	4b15      	ldr	r3, [pc, #84]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	4a14      	ldr	r2, [pc, #80]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 80060bc:	f043 0302 	orr.w	r3, r3, #2
 80060c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80060c2:	4b12      	ldr	r3, [pc, #72]	@ (800610c <HAL_SPI_MspInit+0x12c>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80060ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80060d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d4:	2302      	movs	r3, #2
 80060d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060dc:	2303      	movs	r3, #3
 80060de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80060e0:	2305      	movs	r3, #5
 80060e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e4:	f107 031c 	add.w	r3, r7, #28
 80060e8:	4619      	mov	r1, r3
 80060ea:	480b      	ldr	r0, [pc, #44]	@ (8006118 <HAL_SPI_MspInit+0x138>)
 80060ec:	f003 ff5a 	bl	8009fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80060f0:	2200      	movs	r2, #0
 80060f2:	2100      	movs	r1, #0
 80060f4:	2024      	movs	r0, #36	@ 0x24
 80060f6:	f003 fe7e 	bl	8009df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80060fa:	2024      	movs	r0, #36	@ 0x24
 80060fc:	f003 fe97 	bl	8009e2e <HAL_NVIC_EnableIRQ>
}
 8006100:	bf00      	nop
 8006102:	3730      	adds	r7, #48	@ 0x30
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40013000 	.word	0x40013000
 800610c:	40023800 	.word	0x40023800
 8006110:	40020000 	.word	0x40020000
 8006114:	40003800 	.word	0x40003800
 8006118:	40020400 	.word	0x40020400

0800611c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a13      	ldr	r2, [pc, #76]	@ (8006178 <HAL_SPI_MspDeInit+0x5c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d10d      	bne.n	800614a <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800612e:	4b13      	ldr	r3, [pc, #76]	@ (800617c <HAL_SPI_MspDeInit+0x60>)
 8006130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006132:	4a12      	ldr	r2, [pc, #72]	@ (800617c <HAL_SPI_MspDeInit+0x60>)
 8006134:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006138:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800613a:	21e0      	movs	r1, #224	@ 0xe0
 800613c:	4810      	ldr	r0, [pc, #64]	@ (8006180 <HAL_SPI_MspDeInit+0x64>)
 800613e:	f004 f8b5 	bl	800a2ac <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8006142:	2023      	movs	r0, #35	@ 0x23
 8006144:	f003 fe81 	bl	8009e4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8006148:	e012      	b.n	8006170 <HAL_SPI_MspDeInit+0x54>
  else if(hspi->Instance==SPI2)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a0d      	ldr	r2, [pc, #52]	@ (8006184 <HAL_SPI_MspDeInit+0x68>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d10d      	bne.n	8006170 <HAL_SPI_MspDeInit+0x54>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8006154:	4b09      	ldr	r3, [pc, #36]	@ (800617c <HAL_SPI_MspDeInit+0x60>)
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	4a08      	ldr	r2, [pc, #32]	@ (800617c <HAL_SPI_MspDeInit+0x60>)
 800615a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800615e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8006160:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8006164:	4808      	ldr	r0, [pc, #32]	@ (8006188 <HAL_SPI_MspDeInit+0x6c>)
 8006166:	f004 f8a1 	bl	800a2ac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 800616a:	2024      	movs	r0, #36	@ 0x24
 800616c:	f003 fe6d 	bl	8009e4a <HAL_NVIC_DisableIRQ>
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40013000 	.word	0x40013000
 800617c:	40023800 	.word	0x40023800
 8006180:	40020000 	.word	0x40020000
 8006184:	40003800 	.word	0x40003800
 8006188:	40020400 	.word	0x40020400

0800618c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	@ 0x30
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006194:	f107 031c 	add.w	r3, r7, #28
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	609a      	str	r2, [r3, #8]
 80061a0:	60da      	str	r2, [r3, #12]
 80061a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ac:	d134      	bne.n	8006218 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80061ae:	2300      	movs	r3, #0
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	4b37      	ldr	r3, [pc, #220]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b6:	4a36      	ldr	r2, [pc, #216]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80061be:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	4b30      	ldr	r3, [pc, #192]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 80061d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d2:	4a2f      	ldr	r2, [pc, #188]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80061da:	4b2d      	ldr	r3, [pc, #180]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80061e6:	230f      	movs	r3, #15
 80061e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ea:	2302      	movs	r3, #2
 80061ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f2:	2300      	movs	r3, #0
 80061f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80061f6:	2301      	movs	r3, #1
 80061f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061fa:	f107 031c 	add.w	r3, r7, #28
 80061fe:	4619      	mov	r1, r3
 8006200:	4824      	ldr	r0, [pc, #144]	@ (8006294 <HAL_TIM_Base_MspInit+0x108>)
 8006202:	f003 fecf 	bl	8009fa4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006206:	2200      	movs	r2, #0
 8006208:	2100      	movs	r1, #0
 800620a:	201c      	movs	r0, #28
 800620c:	f003 fdf3 	bl	8009df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006210:	201c      	movs	r0, #28
 8006212:	f003 fe0c 	bl	8009e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8006216:	e036      	b.n	8006286 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1e      	ldr	r2, [pc, #120]	@ (8006298 <HAL_TIM_Base_MspInit+0x10c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d116      	bne.n	8006250 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006222:	2300      	movs	r3, #0
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	4b1a      	ldr	r3, [pc, #104]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	4a19      	ldr	r2, [pc, #100]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 800622c:	f043 0304 	orr.w	r3, r3, #4
 8006230:	6413      	str	r3, [r2, #64]	@ 0x40
 8006232:	4b17      	ldr	r3, [pc, #92]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800623e:	2200      	movs	r2, #0
 8006240:	2100      	movs	r1, #0
 8006242:	201e      	movs	r0, #30
 8006244:	f003 fdd7 	bl	8009df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006248:	201e      	movs	r0, #30
 800624a:	f003 fdf0 	bl	8009e2e <HAL_NVIC_EnableIRQ>
}
 800624e:	e01a      	b.n	8006286 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM9)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a11      	ldr	r2, [pc, #68]	@ (800629c <HAL_TIM_Base_MspInit+0x110>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d115      	bne.n	8006286 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 8006260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006262:	4a0b      	ldr	r2, [pc, #44]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006268:	6453      	str	r3, [r2, #68]	@ 0x44
 800626a:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <HAL_TIM_Base_MspInit+0x104>)
 800626c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8006276:	2200      	movs	r2, #0
 8006278:	2100      	movs	r1, #0
 800627a:	2018      	movs	r0, #24
 800627c:	f003 fdbb 	bl	8009df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006280:	2018      	movs	r0, #24
 8006282:	f003 fdd4 	bl	8009e2e <HAL_NVIC_EnableIRQ>
}
 8006286:	bf00      	nop
 8006288:	3730      	adds	r7, #48	@ 0x30
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40023800 	.word	0x40023800
 8006294:	40020000 	.word	0x40020000
 8006298:	40000800 	.word	0x40000800
 800629c:	40014000 	.word	0x40014000

080062a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a8:	f107 030c 	add.w	r3, r7, #12
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	609a      	str	r2, [r3, #8]
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a12      	ldr	r2, [pc, #72]	@ (8006308 <HAL_TIM_MspPostInit+0x68>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d11e      	bne.n	8006300 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	4b11      	ldr	r3, [pc, #68]	@ (800630c <HAL_TIM_MspPostInit+0x6c>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	4a10      	ldr	r2, [pc, #64]	@ (800630c <HAL_TIM_MspPostInit+0x6c>)
 80062cc:	f043 0302 	orr.w	r3, r3, #2
 80062d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80062d2:	4b0e      	ldr	r3, [pc, #56]	@ (800630c <HAL_TIM_MspPostInit+0x6c>)
 80062d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	60bb      	str	r3, [r7, #8]
 80062dc:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80062de:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80062e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e4:	2302      	movs	r3, #2
 80062e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062f0:	2302      	movs	r3, #2
 80062f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062f4:	f107 030c 	add.w	r3, r7, #12
 80062f8:	4619      	mov	r1, r3
 80062fa:	4805      	ldr	r0, [pc, #20]	@ (8006310 <HAL_TIM_MspPostInit+0x70>)
 80062fc:	f003 fe52 	bl	8009fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006300:	bf00      	nop
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40000800 	.word	0x40000800
 800630c:	40023800 	.word	0x40023800
 8006310:	40020400 	.word	0x40020400

08006314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	@ 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	609a      	str	r2, [r3, #8]
 8006328:	60da      	str	r2, [r3, #12]
 800632a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1d      	ldr	r2, [pc, #116]	@ (80063a8 <HAL_UART_MspInit+0x94>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d134      	bne.n	80063a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	4b1c      	ldr	r3, [pc, #112]	@ (80063ac <HAL_UART_MspInit+0x98>)
 800633c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633e:	4a1b      	ldr	r2, [pc, #108]	@ (80063ac <HAL_UART_MspInit+0x98>)
 8006340:	f043 0310 	orr.w	r3, r3, #16
 8006344:	6453      	str	r3, [r2, #68]	@ 0x44
 8006346:	4b19      	ldr	r3, [pc, #100]	@ (80063ac <HAL_UART_MspInit+0x98>)
 8006348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <HAL_UART_MspInit+0x98>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635a:	4a14      	ldr	r2, [pc, #80]	@ (80063ac <HAL_UART_MspInit+0x98>)
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	6313      	str	r3, [r2, #48]	@ 0x30
 8006362:	4b12      	ldr	r3, [pc, #72]	@ (80063ac <HAL_UART_MspInit+0x98>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800636e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006374:	2302      	movs	r3, #2
 8006376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800637c:	2303      	movs	r3, #3
 800637e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006380:	2307      	movs	r3, #7
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006384:	f107 0314 	add.w	r3, r7, #20
 8006388:	4619      	mov	r1, r3
 800638a:	4809      	ldr	r0, [pc, #36]	@ (80063b0 <HAL_UART_MspInit+0x9c>)
 800638c:	f003 fe0a 	bl	8009fa4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	2025      	movs	r0, #37	@ 0x25
 8006396:	f003 fd2e 	bl	8009df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800639a:	2025      	movs	r0, #37	@ 0x25
 800639c:	f003 fd47 	bl	8009e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80063a0:	bf00      	nop
 80063a2:	3728      	adds	r7, #40	@ 0x28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40011000 	.word	0x40011000
 80063ac:	40023800 	.word	0x40023800
 80063b0:	40020000 	.word	0x40020000

080063b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80063b8:	bf00      	nop
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063c2:	b480      	push	{r7}
 80063c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <HardFault_Handler+0x4>

080063ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <MemManage_Handler+0x4>

080063d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063d2:	b480      	push	{r7}
 80063d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <BusFault_Handler+0x4>

080063da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063da:	b480      	push	{r7}
 80063dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063de:	bf00      	nop
 80063e0:	e7fd      	b.n	80063de <UsageFault_Handler+0x4>

080063e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063e2:	b480      	push	{r7}
 80063e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063fe:	b480      	push	{r7}
 8006400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006410:	f002 ffc2 	bl	8009398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}

08006418 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800641c:	2010      	movs	r0, #16
 800641e:	f004 f875 	bl	800a50c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800642c:	4802      	ldr	r0, [pc, #8]	@ (8006438 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800642e:	f006 f885 	bl	800c53c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000388 	.word	0x20000388

0800643c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006440:	4802      	ldr	r0, [pc, #8]	@ (800644c <TIM2_IRQHandler+0x10>)
 8006442:	f006 f87b 	bl	800c53c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006446:	bf00      	nop
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200002f8 	.word	0x200002f8

08006450 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM4 global interrupt.
  */

void TIM4_IRQHandler(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
   HAL_TIM_IRQHandler(&htim4);
 8006454:	4802      	ldr	r0, [pc, #8]	@ (8006460 <TIM4_IRQHandler+0x10>)
 8006456:	f006 f871 	bl	800c53c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000340 	.word	0x20000340

08006464 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006468:	4802      	ldr	r0, [pc, #8]	@ (8006474 <SPI1_IRQHandler+0x10>)
 800646a:	f005 fae1 	bl	800ba30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000248 	.word	0x20000248

08006478 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800647c:	4802      	ldr	r0, [pc, #8]	@ (8006488 <SPI2_IRQHandler+0x10>)
 800647e:	f005 fad7 	bl	800ba30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	200002a0 	.word	0x200002a0

0800648c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006490:	4802      	ldr	r0, [pc, #8]	@ (800649c <USART1_IRQHandler+0x10>)
 8006492:	f007 f8db 	bl	800d64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006496:	bf00      	nop
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	200003d0 	.word	0x200003d0

080064a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80064a8:	4b11      	ldr	r3, [pc, #68]	@ (80064f0 <_sbrk+0x50>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <_sbrk+0x16>
		heap_end = &end;
 80064b0:	4b0f      	ldr	r3, [pc, #60]	@ (80064f0 <_sbrk+0x50>)
 80064b2:	4a10      	ldr	r2, [pc, #64]	@ (80064f4 <_sbrk+0x54>)
 80064b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80064b6:	4b0e      	ldr	r3, [pc, #56]	@ (80064f0 <_sbrk+0x50>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80064bc:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <_sbrk+0x50>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	466a      	mov	r2, sp
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d907      	bls.n	80064da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80064ca:	f009 fe83 	bl	80101d4 <__errno>
 80064ce:	4603      	mov	r3, r0
 80064d0:	220c      	movs	r2, #12
 80064d2:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80064d4:	f04f 33ff 	mov.w	r3, #4294967295
 80064d8:	e006      	b.n	80064e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80064da:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <_sbrk+0x50>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	4a03      	ldr	r2, [pc, #12]	@ (80064f0 <_sbrk+0x50>)
 80064e4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80064e6:	68fb      	ldr	r3, [r7, #12]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000a24 	.word	0x20000a24
 80064f4:	20000f38 	.word	0x20000f38

080064f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064fc:	4b08      	ldr	r3, [pc, #32]	@ (8006520 <SystemInit+0x28>)
 80064fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006502:	4a07      	ldr	r2, [pc, #28]	@ (8006520 <SystemInit+0x28>)
 8006504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800650c:	4b04      	ldr	r3, [pc, #16]	@ (8006520 <SystemInit+0x28>)
 800650e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006512:	609a      	str	r2, [r3, #8]
#endif
}
 8006514:	bf00      	nop
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	e000ed00 	.word	0xe000ed00

08006524 <SetupTimer>:


tUserTimer tim;

void SetupTimer(tUserTimer *t, uint32_t interval)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
    t->interval = interval;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	605a      	str	r2, [r3, #4]
    t->flag = 0;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]
    t->flag2 = 0;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	60da      	str	r2, [r3, #12]
    t->event_cnt = 0;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	611a      	str	r2, [r3, #16]
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <StartTimer>:

void StartTimer(tUserTimer *t)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b082      	sub	sp, #8
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
    t->target_tick = HAL_GetTick() + t->interval;
 800655a:	f002 ff31 	bl	80093c0 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
    t->flag = 1;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <ClearTimer>:
{
    t->flag = 0;
}

void ClearTimer(tUserTimer *t)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
    t->event_cnt = 0;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <isTimerEventExist>:

    }
}

uint32_t isTimerEventExist(tUserTimer *t)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
    return t->event_cnt;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80065ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80065e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80065b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065b2:	e003      	b.n	80065bc <LoopCopyDataInit>

080065b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065b4:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80065b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065ba:	3104      	adds	r1, #4

080065bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80065bc:	480b      	ldr	r0, [pc, #44]	@ (80065ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80065be:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80065c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065c4:	d3f6      	bcc.n	80065b4 <CopyDataInit>
  ldr  r2, =_sbss
 80065c6:	4a0b      	ldr	r2, [pc, #44]	@ (80065f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065c8:	e002      	b.n	80065d0 <LoopFillZerobss>

080065ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065cc:	f842 3b04 	str.w	r3, [r2], #4

080065d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065d0:	4b09      	ldr	r3, [pc, #36]	@ (80065f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80065d4:	d3f9      	bcc.n	80065ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065d6:	f7ff ff8f 	bl	80064f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065da:	f009 fe01 	bl	80101e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065de:	f7fb fd2f 	bl	8002040 <main>
  bx  lr    
 80065e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065e4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80065e8:	08011d00 	.word	0x08011d00
  ldr  r0, =_sdata
 80065ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80065f0:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 80065f4:	2000013c 	.word	0x2000013c
  ldr  r3, = _ebss
 80065f8:	20000f38 	.word	0x20000f38

080065fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065fc:	e7fe      	b.n	80065fc <ADC_IRQHandler>
	...

08006600 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	2b10      	cmp	r3, #16
 800660e:	d105      	bne.n	800661c <HAL_GPIO_EXTI_Callback+0x1c>
    case BNRG_SPI_EXTI_PIN:
      HCI_Isr();
 8006610:	f008 fb5a 	bl	800ecc8 <HCI_Isr>
      HCI_ProcessEvent=1;
 8006614:	4b03      	ldr	r3, [pc, #12]	@ (8006624 <HAL_GPIO_EXTI_Callback+0x24>)
 8006616:	2201      	movs	r2, #1
 8006618:	601a      	str	r2, [r3, #0]
    break;
 800661a:	bf00      	nop
  }
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000414 	.word	0x20000414

08006628 <Hal_Write_Serial>:
* @param  n_bytes2: number of bytes in 2nd buffer
* @retval None
*/
void Hal_Write_Serial(const void* data1, const void* data2, int32_t n_bytes1,
                      int32_t n_bytes2)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  struct timer t;
  
  Timer_Set(&t, CLOCK_SECOND/10);
 8006636:	f107 0310 	add.w	r3, r7, #16
 800663a:	2164      	movs	r1, #100	@ 0x64
 800663c:	4618      	mov	r0, r3
 800663e:	f008 ff5e 	bl	800f4fe <Timer_Set>
  }
  PRINT_CSV("\n");
#endif
  
  while(1){
    if(BlueNRG_SPI_Write(&SpiHandle, (uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	b2da      	uxtb	r2, r3
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4613      	mov	r3, r2
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	68f9      	ldr	r1, [r7, #12]
 8006652:	480b      	ldr	r0, [pc, #44]	@ (8006680 <Hal_Write_Serial+0x58>)
 8006654:	f000 f8e2 	bl	800681c <BlueNRG_SPI_Write>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <Hal_Write_Serial+0x48>
    if(Timer_Expired(&t)){
 800665e:	f107 0310 	add.w	r3, r7, #16
 8006662:	4618      	mov	r0, r3
 8006664:	f008 ff5c 	bl	800f520 <Timer_Expired>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <Hal_Write_Serial+0x4c>
    if(BlueNRG_SPI_Write(&SpiHandle, (uint8_t *)data1,(uint8_t *)data2, n_bytes1, n_bytes2)==0) break;
 800666e:	e7e8      	b.n	8006642 <Hal_Write_Serial+0x1a>
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <Hal_Write_Serial+0x4e>
      break;
 8006674:	bf00      	nop
    }
  }
}
 8006676:	bf00      	nop
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000a3c 	.word	0x20000a3c

08006684 <BNRG_SPI_Init>:
*         Expansion Board.
* @param  None
* @retval None
*/
void BNRG_SPI_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  SpiHandle.Instance = BNRG_SPI_INSTANCE;
 8006688:	4b15      	ldr	r3, [pc, #84]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 800668a:	4a16      	ldr	r2, [pc, #88]	@ (80066e4 <BNRG_SPI_Init+0x60>)
 800668c:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.Mode = BNRG_SPI_MODE;
 800668e:	4b14      	ldr	r3, [pc, #80]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 8006690:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006694:	605a      	str	r2, [r3, #4]
  SpiHandle.Init.Direction = BNRG_SPI_DIRECTION;
 8006696:	4b12      	ldr	r3, [pc, #72]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 8006698:	2200      	movs	r2, #0
 800669a:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.DataSize = BNRG_SPI_DATASIZE;
 800669c:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 800669e:	2200      	movs	r2, #0
 80066a0:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.CLKPolarity = BNRG_SPI_CLKPOLARITY;
 80066a2:	4b0f      	ldr	r3, [pc, #60]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CLKPhase = BNRG_SPI_CLKPHASE;
 80066a8:	4b0d      	ldr	r3, [pc, #52]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.NSS = BNRG_SPI_NSS;
 80066ae:	4b0c      	ldr	r3, [pc, #48]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066b4:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.FirstBit = BNRG_SPI_FIRSTBIT;
 80066b6:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.TIMode = BNRG_SPI_TIMODE;
 80066bc:	4b08      	ldr	r3, [pc, #32]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066be:	2200      	movs	r2, #0
 80066c0:	625a      	str	r2, [r3, #36]	@ 0x24
  SpiHandle.Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
 80066c2:	4b07      	ldr	r3, [pc, #28]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066c4:	2207      	movs	r2, #7
 80066c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
 80066c8:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066ca:	2218      	movs	r2, #24
 80066cc:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.CRCCalculation = BNRG_SPI_CRCCALCULATION;
 80066ce:	4b04      	ldr	r3, [pc, #16]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  HAL_SPI_Init(&SpiHandle);
 80066d4:	4802      	ldr	r0, [pc, #8]	@ (80066e0 <BNRG_SPI_Init+0x5c>)
 80066d6:	f004 fd0b 	bl	800b0f0 <HAL_SPI_Init>
}
 80066da:	bf00      	nop
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000a3c 	.word	0x20000a3c
 80066e4:	40013000 	.word	0x40013000

080066e8 <BlueNRG_RST>:
* @brief  Resets the BlueNRG.
* @param  None
* @retval None
*/
void BlueNRG_RST(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
 80066ec:	2200      	movs	r2, #0
 80066ee:	2104      	movs	r1, #4
 80066f0:	4807      	ldr	r0, [pc, #28]	@ (8006710 <BlueNRG_RST+0x28>)
 80066f2:	f003 fed7 	bl	800a4a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80066f6:	2005      	movs	r0, #5
 80066f8:	f002 fe6e 	bl	80093d8 <HAL_Delay>
  HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
 80066fc:	2201      	movs	r2, #1
 80066fe:	2104      	movs	r1, #4
 8006700:	4803      	ldr	r0, [pc, #12]	@ (8006710 <BlueNRG_RST+0x28>)
 8006702:	f003 fecf 	bl	800a4a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8006706:	2005      	movs	r0, #5
 8006708:	f002 fe66 	bl	80093d8 <HAL_Delay>
}
 800670c:	bf00      	nop
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40020400 	.word	0x40020400

08006714 <BlueNRG_DataPresent>:
* @param  None
* @retval 1 if data are present, 0 otherwise
*/
// FIXME: find a better way to handle this return value (bool type? TRUE and FALSE)
uint8_t BlueNRG_DataPresent(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(BNRG_SPI_EXTI_PORT, BNRG_SPI_EXTI_PIN) == GPIO_PIN_SET)
 8006718:	2110      	movs	r1, #16
 800671a:	4805      	ldr	r0, [pc, #20]	@ (8006730 <BlueNRG_DataPresent+0x1c>)
 800671c:	f003 feaa 	bl	800a474 <HAL_GPIO_ReadPin>
 8006720:	4603      	mov	r3, r0
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <BlueNRG_DataPresent+0x16>
    return 1;
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <BlueNRG_DataPresent+0x18>
  else  
    return 0;
 800672a:	2300      	movs	r3, #0
} /* end BlueNRG_DataPresent() */
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40020000 	.word	0x40020000

08006734 <BlueNRG_SPI_Read_All>:
* @param  buff_size: Buffer size
* @retval int32_t  : Number of read bytes
*/
int32_t BlueNRG_SPI_Read_All(SPI_HandleTypeDef *hspi, uint8_t *buffer,
                             uint8_t buff_size)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08c      	sub	sp, #48	@ 0x30
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	71fb      	strb	r3, [r7, #7]
  uint16_t byte_count;
  uint8_t len = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t char_ff = 0xff;
 8006748:	23ff      	movs	r3, #255	@ 0xff
 800674a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  volatile uint8_t read_char;
  
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800674e:	230b      	movs	r3, #11
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	2300      	movs	r3, #0
 8006754:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t header_slave[HEADER_SIZE];
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8006758:	2200      	movs	r2, #0
 800675a:	2101      	movs	r1, #1
 800675c:	482e      	ldr	r0, [pc, #184]	@ (8006818 <BlueNRG_SPI_Read_All+0xe4>)
 800675e:	f003 fea1 	bl	800a4a4 <HAL_GPIO_WritePin>
  
  /* Read the header */  
  HAL_SPI_TransmitReceive(hspi, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8006762:	f107 0214 	add.w	r2, r7, #20
 8006766:	f107 011c 	add.w	r1, r7, #28
 800676a:	230f      	movs	r3, #15
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2305      	movs	r3, #5
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f004 ffbb 	bl	800b6ec <HAL_SPI_TransmitReceive>
  
  if (header_slave[0] == 0x02) {
 8006776:	7d3b      	ldrb	r3, [r7, #20]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d137      	bne.n	80067ec <BlueNRG_SPI_Read_All+0xb8>
    /* device is ready */
    byte_count = (header_slave[4]<<8)|header_slave[3];
 800677c:	7e3b      	ldrb	r3, [r7, #24]
 800677e:	b21b      	sxth	r3, r3
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	b21a      	sxth	r2, r3
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	b21b      	sxth	r3, r3
 8006788:	4313      	orrs	r3, r2
 800678a:	b21b      	sxth	r3, r3
 800678c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (byte_count > 0) {
 800678e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006790:	2b00      	cmp	r3, #0
 8006792:	d02b      	beq.n	80067ec <BlueNRG_SPI_Read_All+0xb8>
      
      /* avoid to read more data that size of the buffer */
      if (byte_count > buff_size){
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	b29b      	uxth	r3, r3
 8006798:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800679a:	429a      	cmp	r2, r3
 800679c:	d901      	bls.n	80067a2 <BlueNRG_SPI_Read_All+0x6e>
        byte_count = buff_size;
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }
      
      for (len = 0; len < byte_count; len++){
 80067a2:	2300      	movs	r3, #0
 80067a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80067a8:	e01a      	b.n	80067e0 <BlueNRG_SPI_Read_All+0xac>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067aa:	b672      	cpsid	i
}
 80067ac:	bf00      	nop
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, &char_ff, (uint8_t*)&read_char, 1, TIMEOUT_DURATION);
 80067ae:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 80067b2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80067b6:	230f      	movs	r3, #15
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	2301      	movs	r3, #1
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f004 ff95 	bl	800b6ec <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80067c2:	b662      	cpsie	i
}
 80067c4:	bf00      	nop
        __enable_irq();
        buffer[len] = read_char;
 80067c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	4413      	add	r3, r2
 80067ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
      for (len = 0; len < byte_count; len++){
 80067d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067da:	3301      	adds	r3, #1
 80067dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80067e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d8de      	bhi.n	80067aa <BlueNRG_SPI_Read_All+0x76>
      }
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 80067ec:	2201      	movs	r2, #1
 80067ee:	2101      	movs	r1, #1
 80067f0:	4809      	ldr	r0, [pc, #36]	@ (8006818 <BlueNRG_SPI_Read_All+0xe4>)
 80067f2:	f003 fe57 	bl	800a4a4 <HAL_GPIO_WritePin>
  
  // Add a small delay to give time to the BlueNRG to set the IRQ pin low
  // to avoid a useless SPI read at the end of the transaction
  for(volatile int i = 0; i < 2; i++)__NOP();
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e003      	b.n	8006804 <BlueNRG_SPI_Read_All+0xd0>
 80067fc:	bf00      	nop
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3301      	adds	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b01      	cmp	r3, #1
 8006808:	ddf8      	ble.n	80067fc <BlueNRG_SPI_Read_All+0xc8>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;   
 800680a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 800680e:	4618      	mov	r0, r3
 8006810:	3728      	adds	r7, #40	@ 0x28
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40020400 	.word	0x40020400

0800681c <BlueNRG_SPI_Write>:
* @param  Nb_bytes2: Size of second data buffer to be written
* @retval Number of read bytes
*/
int32_t BlueNRG_SPI_Write(SPI_HandleTypeDef *hspi, uint8_t* data1,
                          uint8_t* data2, uint8_t Nb_bytes1, uint8_t Nb_bytes2)
{  
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b0cd      	sub	sp, #308	@ 0x134
 8006820:	af02      	add	r7, sp, #8
 8006822:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8006826:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800682a:	6020      	str	r0, [r4, #0]
 800682c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8006830:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8006834:	6001      	str	r1, [r0, #0]
 8006836:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800683a:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 800683e:	600a      	str	r2, [r1, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006846:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 800684a:	701a      	strb	r2, [r3, #0]
  int32_t result = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  
  int32_t spi_fix_enabled = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  
#ifdef ENABLE_SPI_FIX
  spi_fix_enabled = 1;
#endif //ENABLE_SPI_FIX
  
  unsigned char header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8006858:	230a      	movs	r3, #10
 800685a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800685e:	2300      	movs	r3, #0
 8006860:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
  unsigned char header_slave[HEADER_SIZE]  = {0xaa, 0x00, 0x00, 0x00, 0x00};
 8006864:	23aa      	movs	r3, #170	@ 0xaa
 8006866:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800686a:	2300      	movs	r3, #0
 800686c:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
  
  unsigned char read_char_buf[MAX_BUFFER_SIZE];
  
  Disable_SPI_IRQ(); 
 8006870:	f000 f8e6 	bl	8006a40 <Disable_SPI_IRQ>
  If the SPI_FIX is enabled the IRQ is set in Output mode, then it is pulled
  high and, after a delay of at least 112us, the CS line is asserted and the
  header transmit/receive operations are started.
  After these transmit/receive operations the IRQ is reset in input mode.
  */
  if (spi_fix_enabled) {
 8006874:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <BlueNRG_SPI_Write+0x68>
    set_irq_as_output();
 800687c:	f000 f886 	bl	800698c <set_irq_as_output>
    
    /* Assert CS line after at least 112us */
    us150Delay();
 8006880:	f000 f8c2 	bl	8006a08 <us150Delay>
  }
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8006884:	2200      	movs	r2, #0
 8006886:	2101      	movs	r1, #1
 8006888:	483f      	ldr	r0, [pc, #252]	@ (8006988 <BlueNRG_SPI_Write+0x16c>)
 800688a:	f003 fe0b 	bl	800a4a4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 800688e:	b672      	cpsid	i
}
 8006890:	bf00      	nop
  
  /* Exchange header */  
  __disable_irq();
  HAL_SPI_TransmitReceive(hspi, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8006892:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8006896:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800689a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800689e:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 80068a2:	230f      	movs	r3, #15
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	2305      	movs	r3, #5
 80068a8:	6800      	ldr	r0, [r0, #0]
 80068aa:	f004 ff1f 	bl	800b6ec <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 80068ae:	b662      	cpsie	i
}
 80068b0:	bf00      	nop
  __enable_irq();
  
  if (spi_fix_enabled) {
 80068b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <BlueNRG_SPI_Write+0xa2>
    set_irq_as_input();
 80068ba:	f000 f883 	bl	80069c4 <set_irq_as_input>
  }
  
  if (header_slave[0] == 0x02) {
 80068be:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d14d      	bne.n	8006962 <BlueNRG_SPI_Write+0x146>
    /* SPI is ready */
    if (header_slave[1] >= (Nb_bytes1+Nb_bytes2)) {
 80068c6:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 80068ca:	4619      	mov	r1, r3
 80068cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80068d0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80068d4:	781a      	ldrb	r2, [r3, #0]
 80068d6:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 80068da:	4413      	add	r3, r2
 80068dc:	4299      	cmp	r1, r3
 80068de:	db3b      	blt.n	8006958 <BlueNRG_SPI_Write+0x13c>
      
      /*  Buffer is big enough */
      if (Nb_bytes1 > 0) {
 80068e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80068e4:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d019      	beq.n	8006922 <BlueNRG_SPI_Write+0x106>
  __ASM volatile ("cpsid i" : : : "memory");
 80068ee:	b672      	cpsid	i
}
 80068f0:	bf00      	nop
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, data1, read_char_buf, Nb_bytes1, TIMEOUT_DURATION);
 80068f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80068f6:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f107 0210 	add.w	r2, r7, #16
 8006902:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8006906:	f5a1 7190 	sub.w	r1, r1, #288	@ 0x120
 800690a:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 800690e:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8006912:	240f      	movs	r4, #15
 8006914:	9400      	str	r4, [sp, #0]
 8006916:	6809      	ldr	r1, [r1, #0]
 8006918:	6800      	ldr	r0, [r0, #0]
 800691a:	f004 fee7 	bl	800b6ec <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 800691e:	b662      	cpsie	i
}
 8006920:	bf00      	nop
        __enable_irq();
        
      }
      if (Nb_bytes2 > 0) {
 8006922:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8006926:	2b00      	cmp	r3, #0
 8006928:	d01f      	beq.n	800696a <BlueNRG_SPI_Write+0x14e>
  __ASM volatile ("cpsid i" : : : "memory");
 800692a:	b672      	cpsid	i
}
 800692c:	bf00      	nop
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, data2, read_char_buf, Nb_bytes2, TIMEOUT_DURATION);
 800692e:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8006932:	b29b      	uxth	r3, r3
 8006934:	f107 0210 	add.w	r2, r7, #16
 8006938:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800693c:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 8006940:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8006944:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8006948:	240f      	movs	r4, #15
 800694a:	9400      	str	r4, [sp, #0]
 800694c:	6809      	ldr	r1, [r1, #0]
 800694e:	6800      	ldr	r0, [r0, #0]
 8006950:	f004 fecc 	bl	800b6ec <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8006954:	b662      	cpsie	i
}
 8006956:	e008      	b.n	800696a <BlueNRG_SPI_Write+0x14e>
        
      }
      
    } else {
      /* Buffer is too small */
      result = -2;
 8006958:	f06f 0301 	mvn.w	r3, #1
 800695c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006960:	e003      	b.n	800696a <BlueNRG_SPI_Write+0x14e>
    }
  } else {
    /* SPI is not ready */
    result = -1;
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
 8006966:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  }
  
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 800696a:	2201      	movs	r2, #1
 800696c:	2101      	movs	r1, #1
 800696e:	4806      	ldr	r0, [pc, #24]	@ (8006988 <BlueNRG_SPI_Write+0x16c>)
 8006970:	f003 fd98 	bl	800a4a4 <HAL_GPIO_WritePin>
  
  
  Enable_SPI_IRQ();
 8006974:	f000 f85d 	bl	8006a32 <Enable_SPI_IRQ>
  
  return result;
 8006978:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
}
 800697c:	4618      	mov	r0, r3
 800697e:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8006982:	46bd      	mov	sp, r7
 8006984:	bd90      	pop	{r4, r7, pc}
 8006986:	bf00      	nop
 8006988:	40020400 	.word	0x40020400

0800698c <set_irq_as_output>:
* @brief  Set in Output mode the IRQ.
* @param  None
* @retval None
*/
void set_irq_as_output(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Pull IRQ high */
  GPIO_InitStructure.Pin = BNRG_SPI_IRQ_PIN;
 8006992:	2310      	movs	r3, #16
 8006994:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8006996:	2301      	movs	r3, #1
 8006998:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = BNRG_SPI_IRQ_SPEED;
 800699a:	2303      	movs	r3, #3
 800699c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 80069a2:	1d3b      	adds	r3, r7, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4806      	ldr	r0, [pc, #24]	@ (80069c0 <set_irq_as_output+0x34>)
 80069a8:	f003 fafc 	bl	8009fa4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN, GPIO_PIN_SET);
 80069ac:	2201      	movs	r2, #1
 80069ae:	2110      	movs	r1, #16
 80069b0:	4803      	ldr	r0, [pc, #12]	@ (80069c0 <set_irq_as_output+0x34>)
 80069b2:	f003 fd77 	bl	800a4a4 <HAL_GPIO_WritePin>
}
 80069b6:	bf00      	nop
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40020000 	.word	0x40020000

080069c4 <set_irq_as_input>:
* @brief  Set the IRQ in input mode.
* @param  None
* @retval None
*/
void set_irq_as_input(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* IRQ input */  
  GPIO_InitStructure.Pin = BNRG_SPI_IRQ_PIN;
 80069ca:	2310      	movs	r3, #16
 80069cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = BNRG_SPI_IRQ_MODE;
 80069ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006a00 <set_irq_as_input+0x3c>)
 80069d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80069d2:	2302      	movs	r3, #2
 80069d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = BNRG_SPI_IRQ_SPEED;
 80069d6:	2303      	movs	r3, #3
 80069d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate = BNRG_SPI_IRQ_ALTERNATE;    
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 80069de:	1d3b      	adds	r3, r7, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4808      	ldr	r0, [pc, #32]	@ (8006a04 <set_irq_as_input+0x40>)
 80069e4:	f003 fade 	bl	8009fa4 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pull = BNRG_SPI_IRQ_PULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStructure);
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	4619      	mov	r1, r3
 80069f0:	4804      	ldr	r0, [pc, #16]	@ (8006a04 <set_irq_as_input+0x40>)
 80069f2:	f003 fad7 	bl	8009fa4 <HAL_GPIO_Init>
}
 80069f6:	bf00      	nop
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	10110000 	.word	0x10110000
 8006a04:	40020000 	.word	0x40020000

08006a08 <us150Delay>:
* @param  None
* @retval None
* NOTE: TODO: implement with clock-independent function.
*/
static void us150Delay(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
#if SYSCLK_FREQ == 4000000
  for(volatile int i = 0; i < 35; i++)__NOP();
#elif SYSCLK_FREQ == 32000000
  for(volatile int i = 0; i < 420; i++)__NOP();
#elif SYSCLK_FREQ == 80000000
  for(volatile int i = 0; i < 1072; i++)__NOP();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	e003      	b.n	8006a1c <us150Delay+0x14>
 8006a14:	bf00      	nop
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	607b      	str	r3, [r7, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8006a22:	dbf7      	blt.n	8006a14 <us150Delay+0xc>
#elif SYSCLK_FREQ == 168000000
  for(volatile int i = 0; i < 2250; i++)__NOP();
#else
#error Implement delay function.
#endif    
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <Enable_SPI_IRQ>:
* @brief  Enable SPI IRQ.
* @param  None
* @retval None
*/
void Enable_SPI_IRQ(void)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);  
 8006a36:	200a      	movs	r0, #10
 8006a38:	f003 f9f9 	bl	8009e2e <HAL_NVIC_EnableIRQ>
}
 8006a3c:	bf00      	nop
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <Disable_SPI_IRQ>:
* @brief  Disable SPI IRQ.
* @param  None
* @retval None
*/
void Disable_SPI_IRQ(void)
{ 
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
 8006a44:	200a      	movs	r0, #10
 8006a46:	f003 fa00 	bl	8009e4a <HAL_NVIC_DisableIRQ>
}
 8006a4a:	bf00      	nop
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <Clear_SPI_EXTI_Flag>:
* @brief  Clear EXTI (External Interrupt) line for SPI IRQ.
* @param  None
* @retval None
*/
void Clear_SPI_EXTI_Flag(void)
{  
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);  
 8006a54:	4b03      	ldr	r3, [pc, #12]	@ (8006a64 <Clear_SPI_EXTI_Flag+0x14>)
 8006a56:	2210      	movs	r2, #16
 8006a58:	615a      	str	r2, [r3, #20]
}
 8006a5a:	bf00      	nop
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40013c00 	.word	0x40013c00

08006a68 <LPS22HH_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8006a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e04d      	b.n	8006b20 <LPS22HH_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	7b1a      	ldrb	r2, [r3, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	695a      	ldr	r2, [r3, #20]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	699a      	ldr	r2, [r3, #24]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a1b      	ldr	r2, [pc, #108]	@ (8006b2c <LPS22HH_RegisterBusIO+0xc4>)
 8006ac0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b30 <LPS22HH_RegisterBusIO+0xc8>)
 8006ac6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 8006ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e020      	b.n	8006b20 <LPS22HH_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4798      	blx	r3
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <LPS22HH_RegisterBusIO+0x8a>
    {
      ret = LPS22HH_ERROR;
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e016      	b.n	8006b20 <LPS22HH_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d112      	bne.n	8006b20 <LPS22HH_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10d      	bne.n	8006b20 <LPS22HH_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8006b04:	2301      	movs	r3, #1
 8006b06:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	2110      	movs	r1, #16
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f9df 	bl	8006ed2 <LPS22HH_Write_Reg>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <LPS22HH_RegisterBusIO+0xb8>
          {
            ret = LPS22HH_ERROR;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006b20:	68fb      	ldr	r3, [r7, #12]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	080071fb 	.word	0x080071fb
 8006b30:	08007231 	.word	0x08007231

08006b34 <LPS22HH_Init>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d108      	bne.n	8006b58 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fb0e 	bl	8007168 <LPS22HH_Initialize>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8006b52:	f04f 33ff 	mov.w	r3, #4294967295
 8006b56:	e004      	b.n	8006b62 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return LPS22HH_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <LPS22HH_DeInit>:
 * @brief  Deinitialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d111      	bne.n	8006ba0 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f877 	bl	8006c70 <LPS22HH_PRESS_Disable>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8c:	e00d      	b.n	8006baa <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f918 	bl	8006dc4 <LPS22HH_TEMP_Disable>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8006b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9e:	e004      	b.n	8006baa <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return LPS22HH_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <LPS22HH_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	331c      	adds	r3, #28
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fd19 	bl	80075fa <lps22hh_device_id_get>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8006bce:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd2:	e000      	b.n	8006bd6 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <LPS22HH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2200      	movs	r2, #0
 8006bee:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	4a05      	ldr	r2, [pc, #20]	@ (8006c24 <LPS22HH_GetCapabilities+0x44>)
 8006c0e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4a04      	ldr	r2, [pc, #16]	@ (8006c24 <LPS22HH_GetCapabilities+0x44>)
 8006c14:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	43480000 	.word	0x43480000

08006c28 <LPS22HH_PRESS_Enable>:
 * @brief  Enable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e014      	b.n	8006c68 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f103 021c 	add.w	r2, r3, #28
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f000 fb93 	bl	8007378 <lps22hh_data_rate_set>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006c58:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5c:	e004      	b.n	8006c68 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return LPS22HH_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <LPS22HH_PRESS_Disable>:
 * @brief  Disable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e024      	b.n	8006cd0 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d11a      	bne.n	8006cc6 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f103 021c 	add.w	r2, r3, #28
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	332b      	adds	r3, #43	@ 0x2b
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f000 fbb9 	bl	8007414 <lps22hh_data_rate_get>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cac:	e010      	b.n	8006cd0 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	331c      	adds	r3, #28
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fb5f 	bl	8007378 <lps22hh_data_rate_set>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc4:	e004      	b.n	8006cd0 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return LPS22HH_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <LPS22HH_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f90f 	bl	8006f08 <LPS22HH_GetOutputDataRate>
 8006cea:	4603      	mov	r3, r0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <LPS22HH_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d106      	bne.n	8006d18 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006d0a:	ed97 0a00 	vldr	s0, [r7]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f95e 	bl	8006fd0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8006d14:	4603      	mov	r3, r0
 8006d16:	e005      	b.n	8006d24 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006d18:	ed97 0a00 	vldr	s0, [r7]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f9c9 	bl	80070b4 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006d22:	4603      	mov	r3, r0
  }
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <LPS22HH_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f009 fa2e 	bl	80101a0 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	331c      	adds	r3, #28
 8006d48:	f107 020c 	add.w	r2, r7, #12
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fc08 	bl	8007564 <lps22hh_pressure_raw_get>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8006d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5e:	e009      	b.n	8006d74 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fab0 	bl	80072c8 <lps22hh_from_lsb_to_hpa>
 8006d68:	eef0 7a40 	vmov.f32	s15, s0
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <LPS22HH_TEMP_Enable>:
 * @brief  Enable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e014      	b.n	8006dbc <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f103 021c 	add.w	r2, r3, #28
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f000 fae9 	bl	8007378 <lps22hh_data_rate_set>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295
 8006db0:	e004      	b.n	8006dbc <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return LPS22HH_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <LPS22HH_TEMP_Disable>:
 * @brief  Disable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e024      	b.n	8006e24 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d11a      	bne.n	8006e1a <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f103 021c 	add.w	r2, r3, #28
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	332b      	adds	r3, #43	@ 0x2b
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f000 fb0f 	bl	8007414 <lps22hh_data_rate_get>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006e00:	e010      	b.n	8006e24 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	331c      	adds	r3, #28
 8006e06:	2100      	movs	r1, #0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fab5 	bl	8007378 <lps22hh_data_rate_set>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8006e14:	f04f 33ff 	mov.w	r3, #4294967295
 8006e18:	e004      	b.n	8006e24 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return LPS22HH_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <LPS22HH_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f865 	bl	8006f08 <LPS22HH_GetOutputDataRate>
 8006e3e:	4603      	mov	r3, r0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <LPS22HH_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d106      	bne.n	8006e6c <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006e5e:	ed97 0a00 	vldr	s0, [r7]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f8b4 	bl	8006fd0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	e005      	b.n	8006e78 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006e6c:	ed97 0a00 	vldr	s0, [r7]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f91f 	bl	80070b4 <LPS22HH_SetOutputDataRate_When_Disabled>
 8006e76:	4603      	mov	r3, r0
  }
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <LPS22HH_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8006e8a:	f107 030c 	add.w	r3, r7, #12
 8006e8e:	2202      	movs	r2, #2
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f009 f984 	bl	80101a0 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	331c      	adds	r3, #28
 8006e9c:	f107 020c 	add.w	r2, r7, #12
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fb87 	bl	80075b6 <lps22hh_temperature_raw_get>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8006eae:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb2:	e00a      	b.n	8006eca <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8006eb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fa1d 	bl	80072f8 <lps22hh_from_lsb_to_celsius>
 8006ebe:	eef0 7a40 	vmov.f32	s15, s0
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <LPS22HH_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f103 001c 	add.w	r0, r3, #28
 8006ee8:	1cba      	adds	r2, r7, #2
 8006eea:	78f9      	ldrb	r1, [r7, #3]
 8006eec:	2301      	movs	r3, #1
 8006eee:	f000 f9d2 	bl	8007296 <lps22hh_write_reg>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8006efc:	e000      	b.n	8006f00 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <LPS22HH_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	331c      	adds	r3, #28
 8006f1a:	f107 020b 	add.w	r2, r7, #11
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fa77 	bl	8007414 <lps22hh_data_rate_get>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8006f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f30:	e03d      	b.n	8006fae <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	2b07      	cmp	r3, #7
 8006f36:	d835      	bhi.n	8006fa4 <LPS22HH_GetOutputDataRate+0x9c>
 8006f38:	a201      	add	r2, pc, #4	@ (adr r2, 8006f40 <LPS22HH_GetOutputDataRate+0x38>)
 8006f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3e:	bf00      	nop
 8006f40:	08006f61 	.word	0x08006f61
 8006f44:	08006f6b 	.word	0x08006f6b
 8006f48:	08006f75 	.word	0x08006f75
 8006f4c:	08006f7d 	.word	0x08006f7d
 8006f50:	08006f85 	.word	0x08006f85
 8006f54:	08006f8d 	.word	0x08006f8d
 8006f58:	08006f95 	.word	0x08006f95
 8006f5c:	08006f9d 	.word	0x08006f9d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
      break;
 8006f68:	e020      	b.n	8006fac <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006f70:	601a      	str	r2, [r3, #0]
      break;
 8006f72:	e01b      	b.n	8006fac <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	4a10      	ldr	r2, [pc, #64]	@ (8006fb8 <LPS22HH_GetOutputDataRate+0xb0>)
 8006f78:	601a      	str	r2, [r3, #0]
      break;
 8006f7a:	e017      	b.n	8006fac <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8006fbc <LPS22HH_GetOutputDataRate+0xb4>)
 8006f80:	601a      	str	r2, [r3, #0]
      break;
 8006f82:	e013      	b.n	8006fac <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	4a0e      	ldr	r2, [pc, #56]	@ (8006fc0 <LPS22HH_GetOutputDataRate+0xb8>)
 8006f88:	601a      	str	r2, [r3, #0]
      break;
 8006f8a:	e00f      	b.n	8006fac <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006fc4 <LPS22HH_GetOutputDataRate+0xbc>)
 8006f90:	601a      	str	r2, [r3, #0]
      break;
 8006f92:	e00b      	b.n	8006fac <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc8 <LPS22HH_GetOutputDataRate+0xc0>)
 8006f98:	601a      	str	r2, [r3, #0]
      break;
 8006f9a:	e007      	b.n	8006fac <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8006fcc <LPS22HH_GetOutputDataRate+0xc4>)
 8006fa0:	601a      	str	r2, [r3, #0]
      break;
 8006fa2:	e003      	b.n	8006fac <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8006fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa8:	60fb      	str	r3, [r7, #12]
      break;
 8006faa:	bf00      	nop
  }

  return ret;
 8006fac:	68fb      	ldr	r3, [r7, #12]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	41200000 	.word	0x41200000
 8006fbc:	41c80000 	.word	0x41c80000
 8006fc0:	42480000 	.word	0x42480000
 8006fc4:	42960000 	.word	0x42960000
 8006fc8:	42c80000 	.word	0x42c80000
 8006fcc:	43480000 	.word	0x43480000

08006fd0 <LPS22HH_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006fdc:	edd7 7a00 	vldr	s15, [r7]
 8006fe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fec:	d801      	bhi.n	8006ff2 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e037      	b.n	8007062 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8006ff2:	edd7 7a00 	vldr	s15, [r7]
 8006ff6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8006ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	d801      	bhi.n	8007008 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8007004:	2302      	movs	r3, #2
 8007006:	e02c      	b.n	8007062 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8007008:	edd7 7a00 	vldr	s15, [r7]
 800700c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8007010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007018:	d801      	bhi.n	800701e <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 800701a:	2303      	movs	r3, #3
 800701c:	e021      	b.n	8007062 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800701e:	edd7 7a00 	vldr	s15, [r7]
 8007022:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80070a8 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8007026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800702a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702e:	d801      	bhi.n	8007034 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8007030:	2304      	movs	r3, #4
 8007032:	e016      	b.n	8007062 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8007034:	edd7 7a00 	vldr	s15, [r7]
 8007038:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80070ac <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 800703c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007044:	d801      	bhi.n	800704a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8007046:	2305      	movs	r3, #5
 8007048:	e00b      	b.n	8007062 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800704a:	edd7 7a00 	vldr	s15, [r7]
 800704e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80070b0 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8007052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705a:	d801      	bhi.n	8007060 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 800705c:	2306      	movs	r3, #6
 800705e:	e000      	b.n	8007062 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8007060:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8007062:	73fb      	strb	r3, [r7, #15]
          : (Odr <=  50.0f) ? LPS22HH_50_Hz
          : (Odr <=  75.0f) ? LPS22HH_75_Hz
          : (Odr <= 100.0f) ? LPS22HH_100_Hz
          :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	331c      	adds	r3, #28
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	4611      	mov	r1, r2
 800706c:	4618      	mov	r0, r3
 800706e:	f000 f983 	bl	8007378 <lps22hh_data_rate_set>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8007078:	f04f 33ff 	mov.w	r3, #4294967295
 800707c:	e00f      	b.n	800709e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f103 021c 	add.w	r2, r3, #28
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	332b      	adds	r3, #43	@ 0x2b
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f000 f9c2 	bl	8007414 <lps22hh_data_rate_get>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8007096:	f04f 33ff 	mov.w	r3, #4294967295
 800709a:	e000      	b.n	800709e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	42480000 	.word	0x42480000
 80070ac:	42960000 	.word	0x42960000
 80070b0:	42c80000 	.word	0x42c80000

080070b4 <LPS22HH_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 80070c0:	edd7 7a00 	vldr	s15, [r7]
 80070c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d0:	d801      	bhi.n	80070d6 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e037      	b.n	8007146 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80070d6:	edd7 7a00 	vldr	s15, [r7]
 80070da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80070de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e6:	d801      	bhi.n	80070ec <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e02c      	b.n	8007146 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 80070ec:	edd7 7a00 	vldr	s15, [r7]
 80070f0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80070f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fc:	d801      	bhi.n	8007102 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 80070fe:	2303      	movs	r3, #3
 8007100:	e021      	b.n	8007146 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8007102:	edd7 7a00 	vldr	s15, [r7]
 8007106:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800715c <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 800710a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800710e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007112:	d801      	bhi.n	8007118 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8007114:	2304      	movs	r3, #4
 8007116:	e016      	b.n	8007146 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8007118:	edd7 7a00 	vldr	s15, [r7]
 800711c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8007160 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8007120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	d801      	bhi.n	800712e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800712a:	2305      	movs	r3, #5
 800712c:	e00b      	b.n	8007146 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800712e:	edd7 7a00 	vldr	s15, [r7]
 8007132:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007164 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8007136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800713a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713e:	d801      	bhi.n	8007144 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8007140:	2306      	movs	r3, #6
 8007142:	e000      	b.n	8007146 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8007144:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                 : (Odr <=  50.0f) ? LPS22HH_50_Hz
                 : (Odr <=  75.0f) ? LPS22HH_75_Hz
                 : (Odr <= 100.0f) ? LPS22HH_100_Hz
                 :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	42480000 	.word	0x42480000
 8007160:	42960000 	.word	0x42960000
 8007164:	42c80000 	.word	0x42c80000

08007168 <LPS22HH_Initialize>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	331c      	adds	r3, #28
 8007174:	2111      	movs	r1, #17
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fa9c 	bl	80076b4 <lps22hh_i3c_interface_set>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8007182:	f04f 33ff 	mov.w	r3, #4294967295
 8007186:	e034      	b.n	80071f2 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	331c      	adds	r3, #28
 800718c:	2110      	movs	r1, #16
 800718e:	4618      	mov	r0, r3
 8007190:	f000 f8f2 	bl	8007378 <lps22hh_data_rate_set>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	e028      	b.n	80071f2 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	331c      	adds	r3, #28
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fa5e 	bl	8007668 <lps22hh_lp_bandwidth_set>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 80071b2:	f04f 33ff 	mov.w	r3, #4294967295
 80071b6:	e01c      	b.n	80071f2 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	331c      	adds	r3, #28
 80071bc:	2101      	movs	r1, #1
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f8b4 	bl	800732c <lps22hh_block_data_update_set>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295
 80071ce:	e010      	b.n	80071f2 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	331c      	adds	r3, #28
 80071d4:	2101      	movs	r1, #1
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fa20 	bl	800761c <lps22hh_auto_increment_set>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	e004      	b.n	80071f2 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2203      	movs	r2, #3
 80071ec:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  return LPS22HH_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80071fa:	b590      	push	{r4, r7, lr}
 80071fc:	b087      	sub	sp, #28
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	461a      	mov	r2, r3
 8007206:	460b      	mov	r3, r1
 8007208:	72fb      	strb	r3, [r7, #11]
 800720a:	4613      	mov	r3, r2
 800720c:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	695c      	ldr	r4, [r3, #20]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	7b1b      	ldrb	r3, [r3, #12]
 800721a:	4618      	mov	r0, r3
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	b299      	uxth	r1, r3
 8007220:	893b      	ldrh	r3, [r7, #8]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	47a0      	blx	r4
 8007226:	4603      	mov	r3, r0
}
 8007228:	4618      	mov	r0, r3
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	bd90      	pop	{r4, r7, pc}

08007230 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007230:	b590      	push	{r4, r7, lr}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	461a      	mov	r2, r3
 800723c:	460b      	mov	r3, r1
 800723e:	72fb      	strb	r3, [r7, #11]
 8007240:	4613      	mov	r3, r2
 8007242:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	691c      	ldr	r4, [r3, #16]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	7b1b      	ldrb	r3, [r3, #12]
 8007250:	4618      	mov	r0, r3
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	b299      	uxth	r1, r3
 8007256:	893b      	ldrh	r3, [r7, #8]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	47a0      	blx	r4
 800725c:	4603      	mov	r3, r0
}
 800725e:	4618      	mov	r0, r3
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	bd90      	pop	{r4, r7, pc}

08007266 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007266:	b590      	push	{r4, r7, lr}
 8007268:	b087      	sub	sp, #28
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	461a      	mov	r2, r3
 8007272:	460b      	mov	r3, r1
 8007274:	72fb      	strb	r3, [r7, #11]
 8007276:	4613      	mov	r3, r2
 8007278:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685c      	ldr	r4, [r3, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6898      	ldr	r0, [r3, #8]
 8007282:	893b      	ldrh	r3, [r7, #8]
 8007284:	7af9      	ldrb	r1, [r7, #11]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	47a0      	blx	r4
 800728a:	6178      	str	r0, [r7, #20]
  return ret;
 800728c:	697b      	ldr	r3, [r7, #20]
}
 800728e:	4618      	mov	r0, r3
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd90      	pop	{r4, r7, pc}

08007296 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007296:	b590      	push	{r4, r7, lr}
 8007298:	b087      	sub	sp, #28
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	461a      	mov	r2, r3
 80072a2:	460b      	mov	r3, r1
 80072a4:	72fb      	strb	r3, [r7, #11]
 80072a6:	4613      	mov	r3, r2
 80072a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681c      	ldr	r4, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6898      	ldr	r0, [r3, #8]
 80072b2:	893b      	ldrh	r3, [r7, #8]
 80072b4:	7af9      	ldrb	r1, [r7, #11]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	47a0      	blx	r4
 80072ba:	6178      	str	r0, [r7, #20]
  return ret;
 80072bc:	697b      	ldr	r3, [r7, #20]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd90      	pop	{r4, r7, pc}
	...

080072c8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 1048576.0f );
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80072f4 <lps22hh_from_lsb_to_hpa+0x2c>
 80072de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80072e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80072e6:	eeb0 0a67 	vmov.f32	s0, s15
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	49800000 	.word	0x49800000

080072f8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	80fb      	strh	r3, [r7, #6]
  return ( (float_t) lsb / 100.0f );
 8007302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800730e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007328 <lps22hh_from_lsb_to_celsius+0x30>
 8007312:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007316:	eef0 7a66 	vmov.f32	s15, s13
}
 800731a:	eeb0 0a67 	vmov.f32	s0, s15
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	42c80000 	.word	0x42c80000

0800732c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8007338:	f107 0208 	add.w	r2, r7, #8
 800733c:	2301      	movs	r3, #1
 800733e:	2110      	movs	r1, #16
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ff90 	bl	8007266 <lps22hh_read_reg>
 8007346:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10f      	bne.n	800736e <lps22hh_block_data_update_set+0x42>
    reg.bdu = val;
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	b2da      	uxtb	r2, r3
 8007356:	7a3b      	ldrb	r3, [r7, #8]
 8007358:	f362 0341 	bfi	r3, r2, #1, #1
 800735c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800735e:	f107 0208 	add.w	r2, r7, #8
 8007362:	2301      	movs	r3, #1
 8007364:	2110      	movs	r1, #16
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ff95 	bl	8007296 <lps22hh_write_reg>
 800736c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800736e:	68fb      	ldr	r3, [r7, #12]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8007384:	f107 0210 	add.w	r2, r7, #16
 8007388:	2301      	movs	r3, #1
 800738a:	2110      	movs	r1, #16
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ff6a 	bl	8007266 <lps22hh_read_reg>
 8007392:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <lps22hh_data_rate_set+0x32>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800739a:	f107 020c 	add.w	r2, r7, #12
 800739e:	2301      	movs	r3, #1
 80073a0:	2111      	movs	r1, #17
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff ff5f 	bl	8007266 <lps22hh_read_reg>
 80073a8:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10f      	bne.n	80073d0 <lps22hh_data_rate_set+0x58>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	7c3b      	ldrb	r3, [r7, #16]
 80073ba:	f362 1306 	bfi	r3, r2, #4, #3
 80073be:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80073c0:	f107 0210 	add.w	r2, r7, #16
 80073c4:	2301      	movs	r3, #1
 80073c6:	2110      	movs	r1, #16
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ff64 	bl	8007296 <lps22hh_write_reg>
 80073ce:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d119      	bne.n	800740a <lps22hh_data_rate_set+0x92>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80073d6:	78fb      	ldrb	r3, [r7, #3]
 80073d8:	091b      	lsrs	r3, r3, #4
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	7b3b      	ldrb	r3, [r7, #12]
 80073e2:	f362 0341 	bfi	r3, r2, #1, #1
 80073e6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	08db      	lsrs	r3, r3, #3
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	7b3b      	ldrb	r3, [r7, #12]
 80073f4:	f362 0300 	bfi	r3, r2, #0, #1
 80073f8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 80073fa:	f107 020c 	add.w	r2, r7, #12
 80073fe:	2301      	movs	r3, #1
 8007400:	2111      	movs	r1, #17
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ff47 	bl	8007296 <lps22hh_write_reg>
 8007408:	6178      	str	r0, [r7, #20]
                            1);
  }

  return ret;
 800740a:	697b      	ldr	r3, [r7, #20]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800741e:	f107 0210 	add.w	r2, r7, #16
 8007422:	2301      	movs	r3, #1
 8007424:	2110      	movs	r1, #16
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff ff1d 	bl	8007266 <lps22hh_read_reg>
 800742c:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d107      	bne.n	8007444 <lps22hh_data_rate_get+0x30>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8007434:	f107 020c 	add.w	r2, r7, #12
 8007438:	2301      	movs	r3, #1
 800743a:	2111      	movs	r1, #17
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff ff12 	bl	8007266 <lps22hh_read_reg>
 8007442:	6178      	str	r0, [r7, #20]
                           1);
  }

  if (ret == 0) {
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f040 8086 	bne.w	8007558 <lps22hh_data_rate_get+0x144>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800744c:	f107 020c 	add.w	r2, r7, #12
 8007450:	2301      	movs	r3, #1
 8007452:	2111      	movs	r1, #17
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff ff06 	bl	8007266 <lps22hh_read_reg>
 800745a:	6178      	str	r0, [r7, #20]
                           1);

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800745c:	7b3b      	ldrb	r3, [r7, #12]
 800745e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	011a      	lsls	r2, r3, #4
 8007466:	7b3b      	ldrb	r3, [r7, #12]
 8007468:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800746c:	b2db      	uxtb	r3, r3
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	4413      	add	r3, r2
             ctrl_reg1.odr )) {
 8007472:	7c3a      	ldrb	r2, [r7, #16]
 8007474:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007478:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800747a:	4413      	add	r3, r2
 800747c:	2b15      	cmp	r3, #21
 800747e:	d867      	bhi.n	8007550 <lps22hh_data_rate_get+0x13c>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <lps22hh_data_rate_get+0x74>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074f1 	.word	0x080074f1
 8007490:	080074f9 	.word	0x080074f9
 8007494:	08007501 	.word	0x08007501
 8007498:	08007509 	.word	0x08007509
 800749c:	08007511 	.word	0x08007511
 80074a0:	08007541 	.word	0x08007541
 80074a4:	08007549 	.word	0x08007549
 80074a8:	080074e9 	.word	0x080074e9
 80074ac:	08007551 	.word	0x08007551
 80074b0:	08007551 	.word	0x08007551
 80074b4:	08007551 	.word	0x08007551
 80074b8:	08007551 	.word	0x08007551
 80074bc:	08007551 	.word	0x08007551
 80074c0:	08007551 	.word	0x08007551
 80074c4:	08007551 	.word	0x08007551
 80074c8:	08007551 	.word	0x08007551
 80074cc:	08007519 	.word	0x08007519
 80074d0:	08007521 	.word	0x08007521
 80074d4:	08007529 	.word	0x08007529
 80074d8:	08007531 	.word	0x08007531
 80074dc:	08007539 	.word	0x08007539
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
        break;
 80074e6:	e037      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2208      	movs	r2, #8
 80074ec:	701a      	strb	r2, [r3, #0]
        break;
 80074ee:	e033      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2201      	movs	r2, #1
 80074f4:	701a      	strb	r2, [r3, #0]
        break;
 80074f6:	e02f      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2202      	movs	r2, #2
 80074fc:	701a      	strb	r2, [r3, #0]
        break;
 80074fe:	e02b      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2203      	movs	r2, #3
 8007504:	701a      	strb	r2, [r3, #0]
        break;
 8007506:	e027      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2204      	movs	r2, #4
 800750c:	701a      	strb	r2, [r3, #0]
        break;
 800750e:	e023      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2205      	movs	r2, #5
 8007514:	701a      	strb	r2, [r3, #0]
        break;
 8007516:	e01f      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2211      	movs	r2, #17
 800751c:	701a      	strb	r2, [r3, #0]
        break;
 800751e:	e01b      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2212      	movs	r2, #18
 8007524:	701a      	strb	r2, [r3, #0]
        break;
 8007526:	e017      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2213      	movs	r2, #19
 800752c:	701a      	strb	r2, [r3, #0]
        break;
 800752e:	e013      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2214      	movs	r2, #20
 8007534:	701a      	strb	r2, [r3, #0]
        break;
 8007536:	e00f      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2215      	movs	r2, #21
 800753c:	701a      	strb	r2, [r3, #0]
        break;
 800753e:	e00b      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2206      	movs	r2, #6
 8007544:	701a      	strb	r2, [r3, #0]
        break;
 8007546:	e007      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2207      	movs	r2, #7
 800754c:	701a      	strb	r2, [r3, #0]
        break;
 800754e:	e003      	b.n	8007558 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
        break;
 8007556:	bf00      	nop
    }
  }

  return ret;
 8007558:	697b      	ldr	r3, [r7, #20]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800756e:	f107 0208 	add.w	r2, r7, #8
 8007572:	2303      	movs	r3, #3
 8007574:	2128      	movs	r1, #40	@ 0x28
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff fe75 	bl	8007266 <lps22hh_read_reg>
 800757c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800757e:	7abb      	ldrb	r3, [r7, #10]
 8007580:	461a      	mov	r2, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	7a7a      	ldrb	r2, [r7, #9]
 800758e:	441a      	add	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	7a3a      	ldrb	r2, [r7, #8]
 800759c:	441a      	add	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	021a      	lsls	r2, r3, #8
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]
  return ret;
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80075c0:	f107 0208 	add.w	r2, r7, #8
 80075c4:	2302      	movs	r3, #2
 80075c6:	212b      	movs	r1, #43	@ 0x2b
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fe4c 	bl	8007266 <lps22hh_read_reg>
 80075ce:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80075d0:	7a7b      	ldrb	r3, [r7, #9]
 80075d2:	b21a      	sxth	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	7a3a      	ldrb	r2, [r7, #8]
 80075e6:	4413      	add	r3, r2
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	b21a      	sxth	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	801a      	strh	r2, [r3, #0]
  return ret;
 80075f0:	68fb      	ldr	r3, [r7, #12]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8007604:	2301      	movs	r3, #1
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	210f      	movs	r1, #15
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fe2b 	bl	8007266 <lps22hh_read_reg>
 8007610:	60f8      	str	r0, [r7, #12]
  return ret;
 8007612:	68fb      	ldr	r3, [r7, #12]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8007628:	f107 0208 	add.w	r2, r7, #8
 800762c:	2301      	movs	r3, #1
 800762e:	2111      	movs	r1, #17
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff fe18 	bl	8007266 <lps22hh_read_reg>
 8007636:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10f      	bne.n	800765e <lps22hh_auto_increment_set+0x42>
    reg.if_add_inc = val;
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	b2da      	uxtb	r2, r3
 8007646:	7a3b      	ldrb	r3, [r7, #8]
 8007648:	f362 1304 	bfi	r3, r2, #4, #1
 800764c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800764e:	f107 0208 	add.w	r2, r7, #8
 8007652:	2301      	movs	r3, #1
 8007654:	2111      	movs	r1, #17
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7ff fe1d 	bl	8007296 <lps22hh_write_reg>
 800765c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8007674:	f107 0208 	add.w	r2, r7, #8
 8007678:	2301      	movs	r3, #1
 800767a:	2110      	movs	r1, #16
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fdf2 	bl	8007266 <lps22hh_read_reg>
 8007682:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10f      	bne.n	80076aa <lps22hh_lp_bandwidth_set+0x42>
    reg.lpfp_cfg = (uint8_t)val;
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	b2da      	uxtb	r2, r3
 8007692:	7a3b      	ldrb	r3, [r7, #8]
 8007694:	f362 0383 	bfi	r3, r2, #2, #2
 8007698:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800769a:	f107 0208 	add.w	r2, r7, #8
 800769e:	2301      	movs	r3, #1
 80076a0:	2110      	movs	r1, #16
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff fdf7 	bl	8007296 <lps22hh_write_reg>
 80076a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80076aa:	68fb      	ldr	r3, [r7, #12]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;
  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80076c0:	f107 0208 	add.w	r2, r7, #8
 80076c4:	2301      	movs	r3, #1
 80076c6:	210e      	movs	r1, #14
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff fdcc 	bl	8007266 <lps22hh_read_reg>
 80076ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d118      	bne.n	8007708 <lps22hh_i3c_interface_set+0x54>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	7a3b      	ldrb	r3, [r7, #8]
 80076e0:	f362 0341 	bfi	r3, r2, #1, #1
 80076e4:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	7a3b      	ldrb	r3, [r7, #8]
 80076f2:	f362 13c7 	bfi	r3, r2, #7, #1
 80076f6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80076f8:	f107 0208 	add.w	r2, r7, #8
 80076fc:	2301      	movs	r3, #1
 80076fe:	210e      	movs	r1, #14
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fdc8 	bl	8007296 <lps22hh_write_reg>
 8007706:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007708:	68fb      	ldr	r3, [r7, #12]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <LSM6DSR_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_RegisterBusIO(LSM6DSR_Object_t *pObj, LSM6DSR_IO_t *pIO)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <LSM6DSR_RegisterBusIO+0x1c>
  {
    ret = LSM6DSR_ERROR;
 8007728:	f04f 33ff 	mov.w	r3, #4294967295
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	e04d      	b.n	80077cc <LSM6DSR_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	7b1a      	ldrb	r2, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	699a      	ldr	r2, [r3, #24]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a1b      	ldr	r2, [pc, #108]	@ (80077d8 <LSM6DSR_RegisterBusIO+0xc4>)
 800776c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1a      	ldr	r2, [pc, #104]	@ (80077dc <LSM6DSR_RegisterBusIO+0xc8>)
 8007772:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <LSM6DSR_RegisterBusIO+0x76>
    {
      ret = LSM6DSR_ERROR;
 8007782:	f04f 33ff 	mov.w	r3, #4294967295
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e020      	b.n	80077cc <LSM6DSR_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSR_OK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4798      	blx	r3
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <LSM6DSR_RegisterBusIO+0x8a>
    {
      ret = LSM6DSR_ERROR;
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e016      	b.n	80077cc <LSM6DSR_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d112      	bne.n	80077cc <LSM6DSR_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10d      	bne.n	80077cc <LSM6DSR_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80077b0:	230c      	movs	r3, #12
 80077b2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSR_Write_Reg(pObj, LSM6DSR_CTRL3_C, data) != LSM6DSR_OK)
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	461a      	mov	r2, r3
 80077b8:	2112      	movs	r1, #18
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fd75 	bl	80082aa <LSM6DSR_Write_Reg>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <LSM6DSR_RegisterBusIO+0xb8>
          {
            ret = LSM6DSR_ERROR;
 80077c6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ca:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80077cc:	68fb      	ldr	r3, [r7, #12]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	08008719 	.word	0x08008719
 80077dc:	0800874f 	.word	0x0800874f

080077e0 <LSM6DSR_Init>:
 * @brief  Initialize the LSM6DSR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_Init(LSM6DSR_Object_t *pObj)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dsr_i3c_disable_set(&(pObj->Ctx), LSM6DSR_I3C_DISABLE) != LSM6DSR_OK)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	331c      	adds	r3, #28
 80077ec:	2180      	movs	r1, #128	@ 0x80
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 fc9f 	bl	8009132 <lsm6dsr_i3c_disable_set>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <LSM6DSR_Init+0x20>
  {
    return LSM6DSR_ERROR;
 80077fa:	f04f 33ff 	mov.w	r3, #4294967295
 80077fe:	e060      	b.n	80078c2 <LSM6DSR_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsr_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSR_OK)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	331c      	adds	r3, #28
 8007804:	2101      	movs	r1, #1
 8007806:	4618      	mov	r0, r3
 8007808:	f001 fc6d 	bl	80090e6 <lsm6dsr_auto_increment_set>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <LSM6DSR_Init+0x38>
  {
    return LSM6DSR_ERROR;
 8007812:	f04f 33ff 	mov.w	r3, #4294967295
 8007816:	e054      	b.n	80078c2 <LSM6DSR_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dsr_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSR_OK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	331c      	adds	r3, #28
 800781c:	2101      	movs	r1, #1
 800781e:	4618      	mov	r0, r3
 8007820:	f001 fb74 	bl	8008f0c <lsm6dsr_block_data_update_set>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <LSM6DSR_Init+0x50>
  {
    return LSM6DSR_ERROR;
 800782a:	f04f 33ff 	mov.w	r3, #4294967295
 800782e:	e048      	b.n	80078c2 <LSM6DSR_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dsr_fifo_mode_set(&(pObj->Ctx), LSM6DSR_BYPASS_MODE) != LSM6DSR_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	331c      	adds	r3, #28
 8007834:	2100      	movs	r1, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f001 fcc1 	bl	80091be <lsm6dsr_fifo_mode_set>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <LSM6DSR_Init+0x68>
  {
    return LSM6DSR_ERROR;
 8007842:	f04f 33ff 	mov.w	r3, #4294967295
 8007846:	e03c      	b.n	80078c2 <LSM6DSR_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSR_XL_ODR_104Hz;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2204      	movs	r2, #4
 800784c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), LSM6DSR_XL_ODR_OFF) != LSM6DSR_OK)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	331c      	adds	r3, #28
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f001 f822 	bl	80088a0 <lsm6dsr_xl_data_rate_set>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <LSM6DSR_Init+0x88>
  {
    return LSM6DSR_ERROR;
 8007862:	f04f 33ff 	mov.w	r3, #4294967295
 8007866:	e02c      	b.n	80078c2 <LSM6DSR_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsr_xl_full_scale_set(&(pObj->Ctx), LSM6DSR_2g) != LSM6DSR_OK)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	331c      	adds	r3, #28
 800786c:	2100      	movs	r1, #0
 800786e:	4618      	mov	r0, r3
 8007870:	f000 ffb8 	bl	80087e4 <lsm6dsr_xl_full_scale_set>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <LSM6DSR_Init+0xa0>
  {
    return LSM6DSR_ERROR;
 800787a:	f04f 33ff 	mov.w	r3, #4294967295
 800787e:	e020      	b.n	80078c2 <LSM6DSR_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSR_GY_ODR_104Hz;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2204      	movs	r2, #4
 8007884:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), LSM6DSR_GY_ODR_OFF) != LSM6DSR_OK)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	331c      	adds	r3, #28
 800788c:	2100      	movs	r1, #0
 800788e:	4618      	mov	r0, r3
 8007890:	f001 f9e0 	bl	8008c54 <lsm6dsr_gy_data_rate_set>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <LSM6DSR_Init+0xc0>
  {
    return LSM6DSR_ERROR;
 800789a:	f04f 33ff 	mov.w	r3, #4294967295
 800789e:	e010      	b.n	80078c2 <LSM6DSR_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsr_gy_full_scale_set(&(pObj->Ctx), LSM6DSR_2000dps) != LSM6DSR_OK)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	331c      	adds	r3, #28
 80078a4:	210c      	movs	r1, #12
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 f95c 	bl	8008b64 <lsm6dsr_gy_full_scale_set>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <LSM6DSR_Init+0xd8>
  {
    return LSM6DSR_ERROR;
 80078b2:	f04f 33ff 	mov.w	r3, #4294967295
 80078b6:	e004      	b.n	80078c2 <LSM6DSR_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return LSM6DSR_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <LSM6DSR_DeInit>:
 * @brief  Deinitialize the LSM6DSR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_DeInit(LSM6DSR_Object_t *pObj)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSR_ACC_Disable(pObj) != LSM6DSR_OK)
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f888 	bl	80079e8 <LSM6DSR_ACC_Disable>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <LSM6DSR_DeInit+0x1a>
  {
    return LSM6DSR_ERROR;
 80078de:	f04f 33ff 	mov.w	r3, #4294967295
 80078e2:	e015      	b.n	8007910 <LSM6DSR_DeInit+0x46>
  }

  if (LSM6DSR_GYRO_Disable(pObj) != LSM6DSR_OK)
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa92 	bl	8007e0e <LSM6DSR_GYRO_Disable>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <LSM6DSR_DeInit+0x2c>
  {
    return LSM6DSR_ERROR;
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
 80078f4:	e00c      	b.n	8007910 <LSM6DSR_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSR_XL_ODR_OFF;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  pObj->gyro_odr = LSM6DSR_GY_ODR_OFF;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  pObj->is_initialized = 0;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return LSM6DSR_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <LSM6DSR_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ReadID(LSM6DSR_Object_t *pObj, uint8_t *Id)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  if (lsm6dsr_device_id_get(&(pObj->Ctx), Id) != LSM6DSR_OK)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	331c      	adds	r3, #28
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	4618      	mov	r0, r3
 800792a:	f001 fbcb 	bl	80090c4 <lsm6dsr_device_id_get>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <LSM6DSR_ReadID+0x22>
  {
    return LSM6DSR_ERROR;
 8007934:	f04f 33ff 	mov.w	r3, #4294967295
 8007938:	e000      	b.n	800793c <LSM6DSR_ReadID+0x24>
  }

  return LSM6DSR_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <LSM6DSR_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSR sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GetCapabilities(LSM6DSR_Object_t *pObj, LSM6DSR_Capabilities_t *Capabilities)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2201      	movs	r2, #1
 8007958:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2200      	movs	r2, #0
 800795e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800796c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2210      	movs	r2, #16
 8007972:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2200      	movs	r2, #0
 8007978:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	4a07      	ldr	r2, [pc, #28]	@ (800799c <LSM6DSR_GetCapabilities+0x58>)
 800797e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	4a06      	ldr	r2, [pc, #24]	@ (800799c <LSM6DSR_GetCapabilities+0x58>)
 8007984:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	619a      	str	r2, [r3, #24]
  return LSM6DSR_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	45d02000 	.word	0x45d02000

080079a0 <LSM6DSR_ACC_Enable>:
 * @brief  Enable the LSM6DSR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_Enable(LSM6DSR_Object_t *pObj)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <LSM6DSR_ACC_Enable+0x16>
  {
    return LSM6DSR_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e014      	b.n	80079e0 <LSM6DSR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSR_OK)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f103 021c 	add.w	r2, r3, #28
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f000 ff6b 	bl	80088a0 <lsm6dsr_xl_data_rate_set>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <LSM6DSR_ACC_Enable+0x36>
  {
    return LSM6DSR_ERROR;
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295
 80079d4:	e004      	b.n	80079e0 <LSM6DSR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return LSM6DSR_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <LSM6DSR_ACC_Disable>:
 * @brief  Disable the LSM6DSR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_Disable(LSM6DSR_Object_t *pObj)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <LSM6DSR_ACC_Disable+0x16>
  {
    return LSM6DSR_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e01f      	b.n	8007a3e <LSM6DSR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSR_OK)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f103 021c 	add.w	r2, r3, #28
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	332b      	adds	r3, #43	@ 0x2b
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f001 f842 	bl	8008a94 <lsm6dsr_xl_data_rate_get>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <LSM6DSR_ACC_Disable+0x34>
  {
    return LSM6DSR_ERROR;
 8007a16:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1a:	e010      	b.n	8007a3e <LSM6DSR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), LSM6DSR_XL_ODR_OFF) != LSM6DSR_OK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	331c      	adds	r3, #28
 8007a20:	2100      	movs	r1, #0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 ff3c 	bl	80088a0 <lsm6dsr_xl_data_rate_set>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <LSM6DSR_ACC_Disable+0x4c>
  {
    return LSM6DSR_ERROR;
 8007a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a32:	e004      	b.n	8007a3e <LSM6DSR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return LSM6DSR_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <LSM6DSR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetSensitivity(LSM6DSR_Object_t *pObj, float *Sensitivity)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSR_OK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	331c      	adds	r3, #28
 8007a5a:	f107 020b 	add.w	r2, r7, #11
 8007a5e:	4611      	mov	r1, r2
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fee5 	bl	8008830 <lsm6dsr_xl_full_scale_get>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <LSM6DSR_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSR_ERROR;
 8007a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a70:	e023      	b.n	8007aba <LSM6DSR_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d81b      	bhi.n	8007ab0 <LSM6DSR_ACC_GetSensitivity+0x68>
 8007a78:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <LSM6DSR_ACC_GetSensitivity+0x38>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007a91 	.word	0x08007a91
 8007a84:	08007aa9 	.word	0x08007aa9
 8007a88:	08007a99 	.word	0x08007a99
 8007a8c:	08007aa1 	.word	0x08007aa1
  {
    case LSM6DSR_2g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_2G;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	4a0c      	ldr	r2, [pc, #48]	@ (8007ac4 <LSM6DSR_ACC_GetSensitivity+0x7c>)
 8007a94:	601a      	str	r2, [r3, #0]
      break;
 8007a96:	e00f      	b.n	8007ab8 <LSM6DSR_ACC_GetSensitivity+0x70>

    case LSM6DSR_4g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_4G;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8007ac8 <LSM6DSR_ACC_GetSensitivity+0x80>)
 8007a9c:	601a      	str	r2, [r3, #0]
      break;
 8007a9e:	e00b      	b.n	8007ab8 <LSM6DSR_ACC_GetSensitivity+0x70>

    case LSM6DSR_8g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_8G;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8007acc <LSM6DSR_ACC_GetSensitivity+0x84>)
 8007aa4:	601a      	str	r2, [r3, #0]
      break;
 8007aa6:	e007      	b.n	8007ab8 <LSM6DSR_ACC_GetSensitivity+0x70>

    case LSM6DSR_16g:
      *Sensitivity = LSM6DSR_ACC_SENSITIVITY_FS_16G;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	4a09      	ldr	r2, [pc, #36]	@ (8007ad0 <LSM6DSR_ACC_GetSensitivity+0x88>)
 8007aac:	601a      	str	r2, [r3, #0]
      break;
 8007aae:	e003      	b.n	8007ab8 <LSM6DSR_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSR_ERROR;
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	60fb      	str	r3, [r7, #12]
      break;
 8007ab6:	bf00      	nop
  }

  return ret;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	3d79db23 	.word	0x3d79db23
 8007ac8:	3df9db23 	.word	0x3df9db23
 8007acc:	3e79db23 	.word	0x3e79db23
 8007ad0:	3ef9db23 	.word	0x3ef9db23

08007ad4 <LSM6DSR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetOutputDataRate(LSM6DSR_Object_t *pObj, float *Odr)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  lsm6dsr_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSR_OK)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	331c      	adds	r3, #28
 8007ae6:	f107 020b 	add.w	r2, r7, #11
 8007aea:	4611      	mov	r1, r2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 ffd1 	bl	8008a94 <lsm6dsr_xl_data_rate_get>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <LSM6DSR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSR_ERROR;
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	e04e      	b.n	8007b9c <LSM6DSR_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	2b0a      	cmp	r3, #10
 8007b02:	d846      	bhi.n	8007b92 <LSM6DSR_ACC_GetOutputDataRate+0xbe>
 8007b04:	a201      	add	r2, pc, #4	@ (adr r2, 8007b0c <LSM6DSR_ACC_GetOutputDataRate+0x38>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	08007b43 	.word	0x08007b43
 8007b14:	08007b4b 	.word	0x08007b4b
 8007b18:	08007b53 	.word	0x08007b53
 8007b1c:	08007b5b 	.word	0x08007b5b
 8007b20:	08007b63 	.word	0x08007b63
 8007b24:	08007b6b 	.word	0x08007b6b
 8007b28:	08007b73 	.word	0x08007b73
 8007b2c:	08007b7b 	.word	0x08007b7b
 8007b30:	08007b83 	.word	0x08007b83
 8007b34:	08007b8b 	.word	0x08007b8b
  {
    case LSM6DSR_XL_ODR_OFF:
      *Odr = 0.0f;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
      break;
 8007b40:	e02b      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	4a17      	ldr	r2, [pc, #92]	@ (8007ba4 <LSM6DSR_ACC_GetOutputDataRate+0xd0>)
 8007b46:	601a      	str	r2, [r3, #0]
      break;
 8007b48:	e027      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_26Hz:
      *Odr = 26.0f;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	4a16      	ldr	r2, [pc, #88]	@ (8007ba8 <LSM6DSR_ACC_GetOutputDataRate+0xd4>)
 8007b4e:	601a      	str	r2, [r3, #0]
      break;
 8007b50:	e023      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_52Hz:
      *Odr = 52.0f;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	4a15      	ldr	r2, [pc, #84]	@ (8007bac <LSM6DSR_ACC_GetOutputDataRate+0xd8>)
 8007b56:	601a      	str	r2, [r3, #0]
      break;
 8007b58:	e01f      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_104Hz:
      *Odr = 104.0f;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	4a14      	ldr	r2, [pc, #80]	@ (8007bb0 <LSM6DSR_ACC_GetOutputDataRate+0xdc>)
 8007b5e:	601a      	str	r2, [r3, #0]
      break;
 8007b60:	e01b      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_208Hz:
      *Odr = 208.0f;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	4a13      	ldr	r2, [pc, #76]	@ (8007bb4 <LSM6DSR_ACC_GetOutputDataRate+0xe0>)
 8007b66:	601a      	str	r2, [r3, #0]
      break;
 8007b68:	e017      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_417Hz:
      *Odr = 417.0f;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	4a12      	ldr	r2, [pc, #72]	@ (8007bb8 <LSM6DSR_ACC_GetOutputDataRate+0xe4>)
 8007b6e:	601a      	str	r2, [r3, #0]
      break;
 8007b70:	e013      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_833Hz:
      *Odr = 833.0f;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	4a11      	ldr	r2, [pc, #68]	@ (8007bbc <LSM6DSR_ACC_GetOutputDataRate+0xe8>)
 8007b76:	601a      	str	r2, [r3, #0]
      break;
 8007b78:	e00f      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	4a10      	ldr	r2, [pc, #64]	@ (8007bc0 <LSM6DSR_ACC_GetOutputDataRate+0xec>)
 8007b7e:	601a      	str	r2, [r3, #0]
      break;
 8007b80:	e00b      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	4a0f      	ldr	r2, [pc, #60]	@ (8007bc4 <LSM6DSR_ACC_GetOutputDataRate+0xf0>)
 8007b86:	601a      	str	r2, [r3, #0]
      break;
 8007b88:	e007      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    case LSM6DSR_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8007bc8 <LSM6DSR_ACC_GetOutputDataRate+0xf4>)
 8007b8e:	601a      	str	r2, [r3, #0]
      break;
 8007b90:	e003      	b.n	8007b9a <LSM6DSR_ACC_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSR_ERROR;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	60fb      	str	r3, [r7, #12]
      break;
 8007b98:	bf00      	nop
  }

  return ret;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	41480000 	.word	0x41480000
 8007ba8:	41d00000 	.word	0x41d00000
 8007bac:	42500000 	.word	0x42500000
 8007bb0:	42d00000 	.word	0x42d00000
 8007bb4:	43500000 	.word	0x43500000
 8007bb8:	43d08000 	.word	0x43d08000
 8007bbc:	44504000 	.word	0x44504000
 8007bc0:	44d06000 	.word	0x44d06000
 8007bc4:	45505000 	.word	0x45505000
 8007bc8:	45d05800 	.word	0x45d05800

08007bcc <LSM6DSR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_SetOutputDataRate(LSM6DSR_Object_t *pObj, float Odr)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d106      	bne.n	8007bf0 <LSM6DSR_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007be2:	ed97 0a00 	vldr	s0, [r7]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fb7a 	bl	80082e0 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled>
 8007bec:	4603      	mov	r3, r0
 8007bee:	e005      	b.n	8007bfc <LSM6DSR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007bf0:	ed97 0a00 	vldr	s0, [r7]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fbff 	bl	80083f8 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled>
 8007bfa:	4603      	mov	r3, r0
  }
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <LSM6DSR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetFullScale(LSM6DSR_Object_t *pObj, int32_t *FullScale)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSR_OK)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	331c      	adds	r3, #28
 8007c16:	f107 020b 	add.w	r2, r7, #11
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fe07 	bl	8008830 <lsm6dsr_xl_full_scale_get>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <LSM6DSR_ACC_GetFullScale+0x2a>
  {
    return LSM6DSR_ERROR;
 8007c28:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2c:	e023      	b.n	8007c76 <LSM6DSR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d81b      	bhi.n	8007c6c <LSM6DSR_ACC_GetFullScale+0x68>
 8007c34:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <LSM6DSR_ACC_GetFullScale+0x38>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c65 	.word	0x08007c65
 8007c44:	08007c55 	.word	0x08007c55
 8007c48:	08007c5d 	.word	0x08007c5d
  {
    case LSM6DSR_2g:
      *FullScale =  2;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	601a      	str	r2, [r3, #0]
      break;
 8007c52:	e00f      	b.n	8007c74 <LSM6DSR_ACC_GetFullScale+0x70>

    case LSM6DSR_4g:
      *FullScale =  4;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2204      	movs	r2, #4
 8007c58:	601a      	str	r2, [r3, #0]
      break;
 8007c5a:	e00b      	b.n	8007c74 <LSM6DSR_ACC_GetFullScale+0x70>

    case LSM6DSR_8g:
      *FullScale =  8;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2208      	movs	r2, #8
 8007c60:	601a      	str	r2, [r3, #0]
      break;
 8007c62:	e007      	b.n	8007c74 <LSM6DSR_ACC_GetFullScale+0x70>

    case LSM6DSR_16g:
      *FullScale = 16;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2210      	movs	r2, #16
 8007c68:	601a      	str	r2, [r3, #0]
      break;
 8007c6a:	e003      	b.n	8007c74 <LSM6DSR_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSR_ERROR;
 8007c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c70:	60fb      	str	r3, [r7, #12]
      break;
 8007c72:	bf00      	nop
  }

  return ret;
 8007c74:	68fb      	ldr	r3, [r7, #12]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop

08007c80 <LSM6DSR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_SetFullScale(LSM6DSR_Object_t *pObj, int32_t FullScale)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  lsm6dsr_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSR_2g
           : (FullScale <= 4) ? LSM6DSR_4g
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	dd0b      	ble.n	8007ca8 <LSM6DSR_ACC_SetFullScale+0x28>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	dd06      	ble.n	8007ca4 <LSM6DSR_ACC_SetFullScale+0x24>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	dc01      	bgt.n	8007ca0 <LSM6DSR_ACC_SetFullScale+0x20>
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e004      	b.n	8007caa <LSM6DSR_ACC_SetFullScale+0x2a>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e002      	b.n	8007caa <LSM6DSR_ACC_SetFullScale+0x2a>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e000      	b.n	8007caa <LSM6DSR_ACC_SetFullScale+0x2a>
 8007ca8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSR_2g
 8007caa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSR_8g
           :                    LSM6DSR_16g;

  if (lsm6dsr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSR_OK)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	331c      	adds	r3, #28
 8007cb0:	7bfa      	ldrb	r2, [r7, #15]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fd95 	bl	80087e4 <lsm6dsr_xl_full_scale_set>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <LSM6DSR_ACC_SetFullScale+0x46>
  {
    return LSM6DSR_ERROR;
 8007cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc4:	e000      	b.n	8007cc8 <LSM6DSR_ACC_SetFullScale+0x48>
  }

  return LSM6DSR_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <LSM6DSR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetAxesRaw(LSM6DSR_Object_t *pObj, LSM6DSR_AxesRaw_t *Value)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	331c      	adds	r3, #28
 8007cde:	f107 0208 	add.w	r2, r7, #8
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f001 f97f 	bl	8008fe8 <lsm6dsr_acceleration_raw_get>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <LSM6DSR_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSR_ERROR;
 8007cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf4:	e00c      	b.n	8007d10 <LSM6DSR_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007cf6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007cfe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007d06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	809a      	strh	r2, [r3, #4]

  return LSM6DSR_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <LSM6DSR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_ACC_GetAxes(LSM6DSR_Object_t *pObj, LSM6DSR_Axes_t *Acceleration)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8007d22:	f04f 0300 	mov.w	r3, #0
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	331c      	adds	r3, #28
 8007d2c:	f107 0210 	add.w	r2, r7, #16
 8007d30:	4611      	mov	r1, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 f958 	bl	8008fe8 <lsm6dsr_acceleration_raw_get>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <LSM6DSR_ACC_GetAxes+0x2c>
  {
    return LSM6DSR_ERROR;
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	e03c      	b.n	8007dbe <LSM6DSR_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSR actual sensitivity. */
  if (LSM6DSR_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSR_OK)
 8007d44:	f107 030c 	add.w	r3, r7, #12
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fe7c 	bl	8007a48 <LSM6DSR_ACC_GetSensitivity>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <LSM6DSR_ACC_GetAxes+0x44>
  {
    return LSM6DSR_ERROR;
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5a:	e030      	b.n	8007dbe <LSM6DSR_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007d5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d74:	ee17 2a90 	vmov	r2, s15
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007d7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8007d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d94:	ee17 2a90 	vmov	r2, s15
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007d9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db4:	ee17 2a90 	vmov	r2, s15
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	609a      	str	r2, [r3, #8]

  return LSM6DSR_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <LSM6DSR_GYRO_Enable>:
 * @brief  Enable the LSM6DSR gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_Enable(LSM6DSR_Object_t *pObj)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <LSM6DSR_GYRO_Enable+0x16>
  {
    return LSM6DSR_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e014      	b.n	8007e06 <LSM6DSR_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSR_OK)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f103 021c 	add.w	r2, r3, #28
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f000 ff32 	bl	8008c54 <lsm6dsr_gy_data_rate_set>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <LSM6DSR_GYRO_Enable+0x36>
  {
    return LSM6DSR_ERROR;
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfa:	e004      	b.n	8007e06 <LSM6DSR_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return LSM6DSR_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <LSM6DSR_GYRO_Disable>:
 * @brief  Disable the LSM6DSR gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_Disable(LSM6DSR_Object_t *pObj)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <LSM6DSR_GYRO_Disable+0x16>
  {
    return LSM6DSR_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e01f      	b.n	8007e64 <LSM6DSR_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsr_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSR_OK)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f103 021c 	add.w	r2, r3, #28
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	332c      	adds	r3, #44	@ 0x2c
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f001 f809 	bl	8008e48 <lsm6dsr_gy_data_rate_get>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <LSM6DSR_GYRO_Disable+0x34>
  {
    return LSM6DSR_ERROR;
 8007e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e40:	e010      	b.n	8007e64 <LSM6DSR_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), LSM6DSR_GY_ODR_OFF) != LSM6DSR_OK)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	331c      	adds	r3, #28
 8007e46:	2100      	movs	r1, #0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 ff03 	bl	8008c54 <lsm6dsr_gy_data_rate_set>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <LSM6DSR_GYRO_Disable+0x4c>
  {
    return LSM6DSR_ERROR;
 8007e54:	f04f 33ff 	mov.w	r3, #4294967295
 8007e58:	e004      	b.n	8007e64 <LSM6DSR_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return LSM6DSR_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <LSM6DSR_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetSensitivity(LSM6DSR_Object_t *pObj, float *Sensitivity)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSR_OK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	331c      	adds	r3, #28
 8007e7e:	f107 020b 	add.w	r2, r7, #11
 8007e82:	4611      	mov	r1, r2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fe93 	bl	8008bb0 <lsm6dsr_gy_full_scale_get>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <LSM6DSR_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSR_ERROR;
 8007e90:	f04f 33ff 	mov.w	r3, #4294967295
 8007e94:	e03d      	b.n	8007f12 <LSM6DSR_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	2b0c      	cmp	r3, #12
 8007e9a:	d835      	bhi.n	8007f08 <LSM6DSR_GYRO_GetSensitivity+0x9c>
 8007e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea4 <LSM6DSR_GYRO_GetSensitivity+0x38>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007ee1 	.word	0x08007ee1
 8007ea8:	08007f01 	.word	0x08007f01
 8007eac:	08007ed9 	.word	0x08007ed9
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007ee9 	.word	0x08007ee9
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	08007f09 	.word	0x08007f09
 8007ec0:	08007f09 	.word	0x08007f09
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	08007f09 	.word	0x08007f09
 8007ecc:	08007f09 	.word	0x08007f09
 8007ed0:	08007f09 	.word	0x08007f09
 8007ed4:	08007ef9 	.word	0x08007ef9
  {
    case LSM6DSR_125dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_125DPS;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	4a10      	ldr	r2, [pc, #64]	@ (8007f1c <LSM6DSR_GYRO_GetSensitivity+0xb0>)
 8007edc:	601a      	str	r2, [r3, #0]
      break;
 8007ede:	e017      	b.n	8007f10 <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_250dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_250DPS;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8007f20 <LSM6DSR_GYRO_GetSensitivity+0xb4>)
 8007ee4:	601a      	str	r2, [r3, #0]
      break;
 8007ee6:	e013      	b.n	8007f10 <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_500dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_500DPS;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	4a0e      	ldr	r2, [pc, #56]	@ (8007f24 <LSM6DSR_GYRO_GetSensitivity+0xb8>)
 8007eec:	601a      	str	r2, [r3, #0]
      break;
 8007eee:	e00f      	b.n	8007f10 <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_1000dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_1000DPS;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8007f28 <LSM6DSR_GYRO_GetSensitivity+0xbc>)
 8007ef4:	601a      	str	r2, [r3, #0]
      break;
 8007ef6:	e00b      	b.n	8007f10 <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_2000dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_2000DPS;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	4a0c      	ldr	r2, [pc, #48]	@ (8007f2c <LSM6DSR_GYRO_GetSensitivity+0xc0>)
 8007efc:	601a      	str	r2, [r3, #0]
      break;
 8007efe:	e007      	b.n	8007f10 <LSM6DSR_GYRO_GetSensitivity+0xa4>

    case LSM6DSR_4000dps:
      *Sensitivity = LSM6DSR_GYRO_SENSITIVITY_FS_4000DPS;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	4a0b      	ldr	r2, [pc, #44]	@ (8007f30 <LSM6DSR_GYRO_GetSensitivity+0xc4>)
 8007f04:	601a      	str	r2, [r3, #0]
      break;
 8007f06:	e003      	b.n	8007f10 <LSM6DSR_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSR_ERROR;
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0c:	60fb      	str	r3, [r7, #12]
      break;
 8007f0e:	bf00      	nop
  }

  return ret;
 8007f10:	68fb      	ldr	r3, [r7, #12]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	408c0000 	.word	0x408c0000
 8007f20:	410c0000 	.word	0x410c0000
 8007f24:	418c0000 	.word	0x418c0000
 8007f28:	420c0000 	.word	0x420c0000
 8007f2c:	428c0000 	.word	0x428c0000
 8007f30:	430c0000 	.word	0x430c0000

08007f34 <LSM6DSR_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetOutputDataRate(LSM6DSR_Object_t *pObj, float *Odr)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  lsm6dsr_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsr_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSR_OK)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	331c      	adds	r3, #28
 8007f46:	f107 020b 	add.w	r2, r7, #11
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 ff7b 	bl	8008e48 <lsm6dsr_gy_data_rate_get>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <LSM6DSR_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSR_ERROR;
 8007f58:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5c:	e04e      	b.n	8007ffc <LSM6DSR_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	2b0a      	cmp	r3, #10
 8007f62:	d846      	bhi.n	8007ff2 <LSM6DSR_GYRO_GetOutputDataRate+0xbe>
 8007f64:	a201      	add	r2, pc, #4	@ (adr r2, 8007f6c <LSM6DSR_GYRO_GetOutputDataRate+0x38>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007f99 	.word	0x08007f99
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fab 	.word	0x08007fab
 8007f78:	08007fb3 	.word	0x08007fb3
 8007f7c:	08007fbb 	.word	0x08007fbb
 8007f80:	08007fc3 	.word	0x08007fc3
 8007f84:	08007fcb 	.word	0x08007fcb
 8007f88:	08007fd3 	.word	0x08007fd3
 8007f8c:	08007fdb 	.word	0x08007fdb
 8007f90:	08007fe3 	.word	0x08007fe3
 8007f94:	08007feb 	.word	0x08007feb
  {
    case LSM6DSR_GY_ODR_OFF:
      *Odr = 0.0f;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
      break;
 8007fa0:	e02b      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	4a17      	ldr	r2, [pc, #92]	@ (8008004 <LSM6DSR_GYRO_GetOutputDataRate+0xd0>)
 8007fa6:	601a      	str	r2, [r3, #0]
      break;
 8007fa8:	e027      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_26Hz:
      *Odr = 26.0f;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	4a16      	ldr	r2, [pc, #88]	@ (8008008 <LSM6DSR_GYRO_GetOutputDataRate+0xd4>)
 8007fae:	601a      	str	r2, [r3, #0]
      break;
 8007fb0:	e023      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_52Hz:
      *Odr = 52.0f;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	4a15      	ldr	r2, [pc, #84]	@ (800800c <LSM6DSR_GYRO_GetOutputDataRate+0xd8>)
 8007fb6:	601a      	str	r2, [r3, #0]
      break;
 8007fb8:	e01f      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_104Hz:
      *Odr = 104.0f;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	4a14      	ldr	r2, [pc, #80]	@ (8008010 <LSM6DSR_GYRO_GetOutputDataRate+0xdc>)
 8007fbe:	601a      	str	r2, [r3, #0]
      break;
 8007fc0:	e01b      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_208Hz:
      *Odr = 208.0f;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	4a13      	ldr	r2, [pc, #76]	@ (8008014 <LSM6DSR_GYRO_GetOutputDataRate+0xe0>)
 8007fc6:	601a      	str	r2, [r3, #0]
      break;
 8007fc8:	e017      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_417Hz:
      *Odr = 417.0f;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	4a12      	ldr	r2, [pc, #72]	@ (8008018 <LSM6DSR_GYRO_GetOutputDataRate+0xe4>)
 8007fce:	601a      	str	r2, [r3, #0]
      break;
 8007fd0:	e013      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_833Hz:
      *Odr = 833.0f;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	4a11      	ldr	r2, [pc, #68]	@ (800801c <LSM6DSR_GYRO_GetOutputDataRate+0xe8>)
 8007fd6:	601a      	str	r2, [r3, #0]
      break;
 8007fd8:	e00f      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	4a10      	ldr	r2, [pc, #64]	@ (8008020 <LSM6DSR_GYRO_GetOutputDataRate+0xec>)
 8007fde:	601a      	str	r2, [r3, #0]
      break;
 8007fe0:	e00b      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8008024 <LSM6DSR_GYRO_GetOutputDataRate+0xf0>)
 8007fe6:	601a      	str	r2, [r3, #0]
      break;
 8007fe8:	e007      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSR_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	4a0e      	ldr	r2, [pc, #56]	@ (8008028 <LSM6DSR_GYRO_GetOutputDataRate+0xf4>)
 8007fee:	601a      	str	r2, [r3, #0]
      break;
 8007ff0:	e003      	b.n	8007ffa <LSM6DSR_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSR_ERROR;
 8007ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff6:	60fb      	str	r3, [r7, #12]
      break;
 8007ff8:	bf00      	nop
  }

  return ret;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	41480000 	.word	0x41480000
 8008008:	41d00000 	.word	0x41d00000
 800800c:	42500000 	.word	0x42500000
 8008010:	42d00000 	.word	0x42d00000
 8008014:	43500000 	.word	0x43500000
 8008018:	43d08000 	.word	0x43d08000
 800801c:	44504000 	.word	0x44504000
 8008020:	44d06000 	.word	0x44d06000
 8008024:	45505000 	.word	0x45505000
 8008028:	45d05800 	.word	0x45d05800

0800802c <LSM6DSR_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_SetOutputDataRate(LSM6DSR_Object_t *pObj, float Odr)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800803e:	2b01      	cmp	r3, #1
 8008040:	d106      	bne.n	8008050 <LSM6DSR_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSR_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008042:	ed97 0a00 	vldr	s0, [r7]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fa58 	bl	80084fc <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled>
 800804c:	4603      	mov	r3, r0
 800804e:	e005      	b.n	800805c <LSM6DSR_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSR_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008050:	ed97 0a00 	vldr	s0, [r7]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fadd 	bl	8008614 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled>
 800805a:	4603      	mov	r3, r0
  }
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <LSM6DSR_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetFullScale(LSM6DSR_Object_t *pObj, int32_t  *FullScale)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSR_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
  lsm6dsr_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsr_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSR_OK)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	331c      	adds	r3, #28
 8008076:	f107 020b 	add.w	r2, r7, #11
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fd97 	bl	8008bb0 <lsm6dsr_gy_full_scale_get>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <LSM6DSR_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSR_ERROR;
 8008088:	f04f 33ff 	mov.w	r3, #4294967295
 800808c:	e041      	b.n	8008112 <LSM6DSR_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	2b0c      	cmp	r3, #12
 8008092:	d839      	bhi.n	8008108 <LSM6DSR_GYRO_GetFullScale+0xa4>
 8008094:	a201      	add	r2, pc, #4	@ (adr r2, 800809c <LSM6DSR_GYRO_GetFullScale+0x38>)
 8008096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809a:	bf00      	nop
 800809c:	080080d9 	.word	0x080080d9
 80080a0:	080080ff 	.word	0x080080ff
 80080a4:	080080d1 	.word	0x080080d1
 80080a8:	08008109 	.word	0x08008109
 80080ac:	080080e1 	.word	0x080080e1
 80080b0:	08008109 	.word	0x08008109
 80080b4:	08008109 	.word	0x08008109
 80080b8:	08008109 	.word	0x08008109
 80080bc:	080080eb 	.word	0x080080eb
 80080c0:	08008109 	.word	0x08008109
 80080c4:	08008109 	.word	0x08008109
 80080c8:	08008109 	.word	0x08008109
 80080cc:	080080f5 	.word	0x080080f5
  {
    case LSM6DSR_125dps:
      *FullScale =  125;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	227d      	movs	r2, #125	@ 0x7d
 80080d4:	601a      	str	r2, [r3, #0]
      break;
 80080d6:	e01b      	b.n	8008110 <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_250dps:
      *FullScale =  250;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	22fa      	movs	r2, #250	@ 0xfa
 80080dc:	601a      	str	r2, [r3, #0]
      break;
 80080de:	e017      	b.n	8008110 <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_500dps:
      *FullScale =  500;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80080e6:	601a      	str	r2, [r3, #0]
      break;
 80080e8:	e012      	b.n	8008110 <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_1000dps:
      *FullScale = 1000;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080f0:	601a      	str	r2, [r3, #0]
      break;
 80080f2:	e00d      	b.n	8008110 <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_2000dps:
      *FullScale = 2000;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80080fa:	601a      	str	r2, [r3, #0]
      break;
 80080fc:	e008      	b.n	8008110 <LSM6DSR_GYRO_GetFullScale+0xac>

    case LSM6DSR_4000dps:
      *FullScale = 4000;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008104:	601a      	str	r2, [r3, #0]
      break;
 8008106:	e003      	b.n	8008110 <LSM6DSR_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSR_ERROR;
 8008108:	f04f 33ff 	mov.w	r3, #4294967295
 800810c:	60fb      	str	r3, [r7, #12]
      break;
 800810e:	bf00      	nop
  }

  return ret;
 8008110:	68fb      	ldr	r3, [r7, #12]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop

0800811c <LSM6DSR_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_SetFullScale(LSM6DSR_Object_t *pObj, int32_t FullScale)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  lsm6dsr_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSR_125dps
           : (FullScale <= 250)  ? LSM6DSR_250dps
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b7d      	cmp	r3, #125	@ 0x7d
 800812a:	dd18      	ble.n	800815e <LSM6DSR_GYRO_SetFullScale+0x42>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2bfa      	cmp	r3, #250	@ 0xfa
 8008130:	dd13      	ble.n	800815a <LSM6DSR_GYRO_SetFullScale+0x3e>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008138:	dd0d      	ble.n	8008156 <LSM6DSR_GYRO_SetFullScale+0x3a>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008140:	dd07      	ble.n	8008152 <LSM6DSR_GYRO_SetFullScale+0x36>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008148:	dc01      	bgt.n	800814e <LSM6DSR_GYRO_SetFullScale+0x32>
 800814a:	230c      	movs	r3, #12
 800814c:	e008      	b.n	8008160 <LSM6DSR_GYRO_SetFullScale+0x44>
 800814e:	2301      	movs	r3, #1
 8008150:	e006      	b.n	8008160 <LSM6DSR_GYRO_SetFullScale+0x44>
 8008152:	2308      	movs	r3, #8
 8008154:	e004      	b.n	8008160 <LSM6DSR_GYRO_SetFullScale+0x44>
 8008156:	2304      	movs	r3, #4
 8008158:	e002      	b.n	8008160 <LSM6DSR_GYRO_SetFullScale+0x44>
 800815a:	2300      	movs	r3, #0
 800815c:	e000      	b.n	8008160 <LSM6DSR_GYRO_SetFullScale+0x44>
 800815e:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? LSM6DSR_125dps
 8008160:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSR_500dps
           : (FullScale <= 1000) ? LSM6DSR_1000dps
           : (FullScale <= 2000) ? LSM6DSR_2000dps
           :                       LSM6DSR_4000dps;

  if (lsm6dsr_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSR_OK)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	331c      	adds	r3, #28
 8008166:	7bfa      	ldrb	r2, [r7, #15]
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fcfa 	bl	8008b64 <lsm6dsr_gy_full_scale_set>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <LSM6DSR_GYRO_SetFullScale+0x60>
  {
    return LSM6DSR_ERROR;
 8008176:	f04f 33ff 	mov.w	r3, #4294967295
 800817a:	e000      	b.n	800817e <LSM6DSR_GYRO_SetFullScale+0x62>
  }

  return LSM6DSR_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <LSM6DSR_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetAxesRaw(LSM6DSR_Object_t *pObj, LSM6DSR_AxesRaw_t *Value)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsr_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	331c      	adds	r3, #28
 8008194:	f107 0208 	add.w	r2, r7, #8
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fedc 	bl	8008f58 <lsm6dsr_angular_rate_raw_get>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <LSM6DSR_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSR_ERROR;
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295
 80081aa:	e00c      	b.n	80081c6 <LSM6DSR_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80081ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80081b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80081bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	809a      	strh	r2, [r3, #4]

  return LSM6DSR_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <LSM6DSR_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_GYRO_GetAxes(LSM6DSR_Object_t *pObj, LSM6DSR_Axes_t *AngularRate)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  lsm6dsr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsr_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSR_OK)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	331c      	adds	r3, #28
 80081dc:	f107 0210 	add.w	r2, r7, #16
 80081e0:	4611      	mov	r1, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 feb8 	bl	8008f58 <lsm6dsr_angular_rate_raw_get>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <LSM6DSR_GYRO_GetAxes+0x26>
  {
    return LSM6DSR_ERROR;
 80081ee:	f04f 33ff 	mov.w	r3, #4294967295
 80081f2:	e03c      	b.n	800826e <LSM6DSR_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSR actual sensitivity. */
  if (LSM6DSR_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSR_OK)
 80081f4:	f107 030c 	add.w	r3, r7, #12
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff fe36 	bl	8007e6c <LSM6DSR_GYRO_GetSensitivity>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <LSM6DSR_GYRO_GetAxes+0x3e>
  {
    return LSM6DSR_ERROR;
 8008206:	f04f 33ff 	mov.w	r3, #4294967295
 800820a:	e030      	b.n	800826e <LSM6DSR_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800820c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008218:	edd7 7a03 	vldr	s15, [r7, #12]
 800821c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008224:	ee17 2a90 	vmov	r2, s15
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800822c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008238:	edd7 7a03 	vldr	s15, [r7, #12]
 800823c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008244:	ee17 2a90 	vmov	r2, s15
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800824c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008258:	edd7 7a03 	vldr	s15, [r7, #12]
 800825c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008264:	ee17 2a90 	vmov	r2, s15
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	609a      	str	r2, [r3, #8]

  return LSM6DSR_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <LSM6DSR_Read_Reg>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_Read_Reg(LSM6DSR_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	460b      	mov	r3, r1
 8008280:	607a      	str	r2, [r7, #4]
 8008282:	72fb      	strb	r3, [r7, #11]
  if (lsm6dsr_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSR_OK)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f103 001c 	add.w	r0, r3, #28
 800828a:	7af9      	ldrb	r1, [r7, #11]
 800828c:	2301      	movs	r3, #1
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	f000 fa78 	bl	8008784 <lsm6dsr_read_reg>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <LSM6DSR_Read_Reg+0x2a>
  {
    return LSM6DSR_ERROR;
 800829a:	f04f 33ff 	mov.w	r3, #4294967295
 800829e:	e000      	b.n	80082a2 <LSM6DSR_Read_Reg+0x2c>
  }

  return LSM6DSR_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <LSM6DSR_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSR_Write_Reg(LSM6DSR_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
 80082b6:	4613      	mov	r3, r2
 80082b8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSR_OK)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f103 001c 	add.w	r0, r3, #28
 80082c0:	1cba      	adds	r2, r7, #2
 80082c2:	78f9      	ldrb	r1, [r7, #3]
 80082c4:	2301      	movs	r3, #1
 80082c6:	f000 fa75 	bl	80087b4 <lsm6dsr_write_reg>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <LSM6DSR_Write_Reg+0x2c>
  {
    return LSM6DSR_ERROR;
 80082d0:	f04f 33ff 	mov.w	r3, #4294967295
 80082d4:	e000      	b.n	80082d8 <LSM6DSR_Write_Reg+0x2e>
  }

  return LSM6DSR_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSR_ACC_SetOutputDataRate_When_Enabled(LSM6DSR_Object_t *pObj, float Odr)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsr_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSR_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSR_XL_ODR_26Hz
 80082ec:	edd7 7a00 	vldr	s15, [r7]
 80082f0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80082f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fc:	d801      	bhi.n	8008302 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80082fe:	2301      	movs	r3, #1
 8008300:	e058      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8008302:	edd7 7a00 	vldr	s15, [r7]
 8008306:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800830a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800830e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008312:	d801      	bhi.n	8008318 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008314:	2302      	movs	r3, #2
 8008316:	e04d      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8008318:	edd7 7a00 	vldr	s15, [r7]
 800831c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80083dc <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8008320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008328:	d801      	bhi.n	800832e <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800832a:	2303      	movs	r3, #3
 800832c:	e042      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800832e:	edd7 7a00 	vldr	s15, [r7]
 8008332:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80083e0 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800833a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833e:	d801      	bhi.n	8008344 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008340:	2304      	movs	r3, #4
 8008342:	e037      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8008344:	edd7 7a00 	vldr	s15, [r7]
 8008348:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80083e4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x104>
 800834c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008354:	d801      	bhi.n	800835a <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008356:	2305      	movs	r3, #5
 8008358:	e02c      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800835a:	edd7 7a00 	vldr	s15, [r7]
 800835e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80083e8 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x108>
 8008362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800836a:	d801      	bhi.n	8008370 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x90>
 800836c:	2306      	movs	r3, #6
 800836e:	e021      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8008370:	edd7 7a00 	vldr	s15, [r7]
 8008374:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80083ec <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8008378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800837c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008380:	d801      	bhi.n	8008386 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8008382:	2307      	movs	r3, #7
 8008384:	e016      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8008386:	edd7 7a00 	vldr	s15, [r7]
 800838a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80083f0 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x110>
 800838e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008396:	d801      	bhi.n	800839c <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008398:	2308      	movs	r3, #8
 800839a:	e00b      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800839c:	edd7 7a00 	vldr	s15, [r7]
 80083a0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80083f4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0x114>
 80083a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ac:	d801      	bhi.n	80083b2 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80083ae:	2309      	movs	r3, #9
 80083b0:	e000      	b.n	80083b4 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80083b2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSR_XL_ODR_12Hz5
 80083b4:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSR_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSR_XL_ODR_3333Hz
          :                    LSM6DSR_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSR_OK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	331c      	adds	r3, #28
 80083ba:	7bfa      	ldrb	r2, [r7, #15]
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fa6e 	bl	80088a0 <lsm6dsr_xl_data_rate_set>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSR_ERROR;
 80083ca:	f04f 33ff 	mov.w	r3, #4294967295
 80083ce:	e000      	b.n	80083d2 <LSM6DSR_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSR_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	42500000 	.word	0x42500000
 80083e0:	42d00000 	.word	0x42d00000
 80083e4:	43500000 	.word	0x43500000
 80083e8:	43d08000 	.word	0x43d08000
 80083ec:	44504000 	.word	0x44504000
 80083f0:	44d06000 	.word	0x44d06000
 80083f4:	45505000 	.word	0x45505000

080083f8 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSR_ACC_SetOutputDataRate_When_Disabled(LSM6DSR_Object_t *pObj, float Odr)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSR_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSR_XL_ODR_26Hz
 8008404:	edd7 7a00 	vldr	s15, [r7]
 8008408:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800840c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008414:	d801      	bhi.n	800841a <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8008416:	2301      	movs	r3, #1
 8008418:	e058      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800841a:	edd7 7a00 	vldr	s15, [r7]
 800841e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8008422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800842a:	d801      	bhi.n	8008430 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x38>
 800842c:	2302      	movs	r3, #2
 800842e:	e04d      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8008430:	edd7 7a00 	vldr	s15, [r7]
 8008434:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80084e0 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8008438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800843c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008440:	d801      	bhi.n	8008446 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008442:	2303      	movs	r3, #3
 8008444:	e042      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8008446:	edd7 7a00 	vldr	s15, [r7]
 800844a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80084e4 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xec>
 800844e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008456:	d801      	bhi.n	800845c <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008458:	2304      	movs	r3, #4
 800845a:	e037      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800845c:	edd7 7a00 	vldr	s15, [r7]
 8008460:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80084e8 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8008464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	d801      	bhi.n	8008472 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800846e:	2305      	movs	r3, #5
 8008470:	e02c      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8008472:	edd7 7a00 	vldr	s15, [r7]
 8008476:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80084ec <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800847a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008482:	d801      	bhi.n	8008488 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008484:	2306      	movs	r3, #6
 8008486:	e021      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8008488:	edd7 7a00 	vldr	s15, [r7]
 800848c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80084f0 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8008490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008498:	d801      	bhi.n	800849e <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800849a:	2307      	movs	r3, #7
 800849c:	e016      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800849e:	edd7 7a00 	vldr	s15, [r7]
 80084a2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80084f4 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80084a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ae:	d801      	bhi.n	80084b4 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80084b0:	2308      	movs	r3, #8
 80084b2:	e00b      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80084b4:	edd7 7a00 	vldr	s15, [r7]
 80084b8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80084f8 <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0x100>
 80084bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c4:	d801      	bhi.n	80084ca <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80084c6:	2309      	movs	r3, #9
 80084c8:	e000      	b.n	80084cc <LSM6DSR_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80084ca:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSR_XL_ODR_12Hz5
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                : (Odr <=  833.0f) ? LSM6DSR_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSR_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSR_XL_ODR_3333Hz
                :                    LSM6DSR_XL_ODR_6667Hz;

  return LSM6DSR_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	42500000 	.word	0x42500000
 80084e4:	42d00000 	.word	0x42d00000
 80084e8:	43500000 	.word	0x43500000
 80084ec:	43d08000 	.word	0x43d08000
 80084f0:	44504000 	.word	0x44504000
 80084f4:	44d06000 	.word	0x44d06000
 80084f8:	45505000 	.word	0x45505000

080084fc <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSR_GYRO_SetOutputDataRate_When_Enabled(LSM6DSR_Object_t *pObj, float Odr)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsr_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSR_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSR_GY_ODR_26Hz
 8008508:	edd7 7a00 	vldr	s15, [r7]
 800850c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8008510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008518:	d801      	bhi.n	800851e <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800851a:	2301      	movs	r3, #1
 800851c:	e058      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800851e:	edd7 7a00 	vldr	s15, [r7]
 8008522:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8008526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852e:	d801      	bhi.n	8008534 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8008530:	2302      	movs	r3, #2
 8008532:	e04d      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008534:	edd7 7a00 	vldr	s15, [r7]
 8008538:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80085f8 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800853c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008544:	d801      	bhi.n	800854a <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8008546:	2303      	movs	r3, #3
 8008548:	e042      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800854a:	edd7 7a00 	vldr	s15, [r7]
 800854e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80085fc <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8008552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800855a:	d801      	bhi.n	8008560 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800855c:	2304      	movs	r3, #4
 800855e:	e037      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008560:	edd7 7a00 	vldr	s15, [r7]
 8008564:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008600 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8008568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800856c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008570:	d801      	bhi.n	8008576 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8008572:	2305      	movs	r3, #5
 8008574:	e02c      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8008576:	edd7 7a00 	vldr	s15, [r7]
 800857a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008604 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800857e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008586:	d801      	bhi.n	800858c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8008588:	2306      	movs	r3, #6
 800858a:	e021      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800858c:	edd7 7a00 	vldr	s15, [r7]
 8008590:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008608 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8008594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859c:	d801      	bhi.n	80085a2 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800859e:	2307      	movs	r3, #7
 80085a0:	e016      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80085a2:	edd7 7a00 	vldr	s15, [r7]
 80085a6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800860c <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80085aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b2:	d801      	bhi.n	80085b8 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80085b4:	2308      	movs	r3, #8
 80085b6:	e00b      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80085b8:	edd7 7a00 	vldr	s15, [r7]
 80085bc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008610 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80085c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c8:	d801      	bhi.n	80085ce <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80085ca:	2309      	movs	r3, #9
 80085cc:	e000      	b.n	80085d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80085ce:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSR_GY_ODR_12Hz5
 80085d0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSR_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSR_GY_ODR_3333Hz
          :                    LSM6DSR_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsr_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSR_OK)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	331c      	adds	r3, #28
 80085d6:	7bfa      	ldrb	r2, [r7, #15]
 80085d8:	4611      	mov	r1, r2
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fb3a 	bl	8008c54 <lsm6dsr_gy_data_rate_set>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSR_ERROR;
 80085e6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ea:	e000      	b.n	80085ee <LSM6DSR_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSR_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	42500000 	.word	0x42500000
 80085fc:	42d00000 	.word	0x42d00000
 8008600:	43500000 	.word	0x43500000
 8008604:	43d08000 	.word	0x43d08000
 8008608:	44504000 	.word	0x44504000
 800860c:	44d06000 	.word	0x44d06000
 8008610:	45505000 	.word	0x45505000

08008614 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSR_GYRO_SetOutputDataRate_When_Disabled(LSM6DSR_Object_t *pObj, float Odr)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSR_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSR_GY_ODR_26Hz
 8008620:	edd7 7a00 	vldr	s15, [r7]
 8008624:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8008628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	d801      	bhi.n	8008636 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8008632:	2301      	movs	r3, #1
 8008634:	e058      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008636:	edd7 7a00 	vldr	s15, [r7]
 800863a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800863e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008646:	d801      	bhi.n	800864c <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8008648:	2302      	movs	r3, #2
 800864a:	e04d      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800864c:	edd7 7a00 	vldr	s15, [r7]
 8008650:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80086fc <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8008654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865c:	d801      	bhi.n	8008662 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800865e:	2303      	movs	r3, #3
 8008660:	e042      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008662:	edd7 7a00 	vldr	s15, [r7]
 8008666:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008700 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800866a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800866e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008672:	d801      	bhi.n	8008678 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8008674:	2304      	movs	r3, #4
 8008676:	e037      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8008678:	edd7 7a00 	vldr	s15, [r7]
 800867c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008704 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8008680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008688:	d801      	bhi.n	800868e <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800868a:	2305      	movs	r3, #5
 800868c:	e02c      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800868e:	edd7 7a00 	vldr	s15, [r7]
 8008692:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008708 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8008696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800869a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869e:	d801      	bhi.n	80086a4 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80086a0:	2306      	movs	r3, #6
 80086a2:	e021      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80086a4:	edd7 7a00 	vldr	s15, [r7]
 80086a8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800870c <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80086ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b4:	d801      	bhi.n	80086ba <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80086b6:	2307      	movs	r3, #7
 80086b8:	e016      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80086ba:	edd7 7a00 	vldr	s15, [r7]
 80086be:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008710 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80086c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ca:	d801      	bhi.n	80086d0 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80086cc:	2308      	movs	r3, #8
 80086ce:	e00b      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80086d0:	edd7 7a00 	vldr	s15, [r7]
 80086d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8008714 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80086d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e0:	d801      	bhi.n	80086e6 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80086e2:	2309      	movs	r3, #9
 80086e4:	e000      	b.n	80086e8 <LSM6DSR_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80086e6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSR_GY_ODR_12Hz5
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                 : (Odr <=  833.0f) ? LSM6DSR_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSR_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSR_GY_ODR_3333Hz
                 :                    LSM6DSR_GY_ODR_6667Hz;

  return LSM6DSR_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	42500000 	.word	0x42500000
 8008700:	42d00000 	.word	0x42d00000
 8008704:	43500000 	.word	0x43500000
 8008708:	43d08000 	.word	0x43d08000
 800870c:	44504000 	.word	0x44504000
 8008710:	44d06000 	.word	0x44d06000
 8008714:	45505000 	.word	0x45505000

08008718 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008718:	b590      	push	{r4, r7, lr}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	461a      	mov	r2, r3
 8008724:	460b      	mov	r3, r1
 8008726:	72fb      	strb	r3, [r7, #11]
 8008728:	4613      	mov	r3, r2
 800872a:	813b      	strh	r3, [r7, #8]
  LSM6DSR_Object_t *pObj = (LSM6DSR_Object_t *)Handle;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	695c      	ldr	r4, [r3, #20]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	7b1b      	ldrb	r3, [r3, #12]
 8008738:	4618      	mov	r0, r3
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	b299      	uxth	r1, r3
 800873e:	893b      	ldrh	r3, [r7, #8]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	47a0      	blx	r4
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd90      	pop	{r4, r7, pc}

0800874e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800874e:	b590      	push	{r4, r7, lr}
 8008750:	b087      	sub	sp, #28
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	461a      	mov	r2, r3
 800875a:	460b      	mov	r3, r1
 800875c:	72fb      	strb	r3, [r7, #11]
 800875e:	4613      	mov	r3, r2
 8008760:	813b      	strh	r3, [r7, #8]
  LSM6DSR_Object_t *pObj = (LSM6DSR_Object_t *)Handle;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	691c      	ldr	r4, [r3, #16]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	7b1b      	ldrb	r3, [r3, #12]
 800876e:	4618      	mov	r0, r3
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	b299      	uxth	r1, r3
 8008774:	893b      	ldrh	r3, [r7, #8]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	47a0      	blx	r4
 800877a:	4603      	mov	r3, r0
}
 800877c:	4618      	mov	r0, r3
 800877e:	371c      	adds	r7, #28
 8008780:	46bd      	mov	sp, r7
 8008782:	bd90      	pop	{r4, r7, pc}

08008784 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008784:	b590      	push	{r4, r7, lr}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	607a      	str	r2, [r7, #4]
 800878e:	461a      	mov	r2, r3
 8008790:	460b      	mov	r3, r1
 8008792:	72fb      	strb	r3, [r7, #11]
 8008794:	4613      	mov	r3, r2
 8008796:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	685c      	ldr	r4, [r3, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6898      	ldr	r0, [r3, #8]
 80087a0:	893b      	ldrh	r3, [r7, #8]
 80087a2:	7af9      	ldrb	r1, [r7, #11]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	47a0      	blx	r4
 80087a8:	6178      	str	r0, [r7, #20]
  return ret;
 80087aa:	697b      	ldr	r3, [r7, #20]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd90      	pop	{r4, r7, pc}

080087b4 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80087b4:	b590      	push	{r4, r7, lr}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	607a      	str	r2, [r7, #4]
 80087be:	461a      	mov	r2, r3
 80087c0:	460b      	mov	r3, r1
 80087c2:	72fb      	strb	r3, [r7, #11]
 80087c4:	4613      	mov	r3, r2
 80087c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681c      	ldr	r4, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6898      	ldr	r0, [r3, #8]
 80087d0:	893b      	ldrh	r3, [r7, #8]
 80087d2:	7af9      	ldrb	r1, [r7, #11]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	47a0      	blx	r4
 80087d8:	6178      	str	r0, [r7, #20]
  return ret;
 80087da:	697b      	ldr	r3, [r7, #20]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd90      	pop	{r4, r7, pc}

080087e4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80087f0:	f107 0208 	add.w	r2, r7, #8
 80087f4:	2301      	movs	r3, #1
 80087f6:	2110      	movs	r1, #16
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff ffc3 	bl	8008784 <lsm6dsr_read_reg>
 80087fe:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10f      	bne.n	8008826 <lsm6dsr_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	b2da      	uxtb	r2, r3
 800880e:	7a3b      	ldrb	r3, [r7, #8]
 8008810:	f362 0383 	bfi	r3, r2, #2, #2
 8008814:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8008816:	f107 0208 	add.w	r2, r7, #8
 800881a:	2301      	movs	r3, #1
 800881c:	2110      	movs	r1, #16
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff ffc8 	bl	80087b4 <lsm6dsr_write_reg>
 8008824:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8008826:	68fb      	ldr	r3, [r7, #12]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <lsm6dsr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t *val)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800883a:	f107 0208 	add.w	r2, r7, #8
 800883e:	2301      	movs	r3, #1
 8008840:	2110      	movs	r1, #16
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff ff9e 	bl	8008784 <lsm6dsr_read_reg>
 8008848:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 800884a:	7a3b      	ldrb	r3, [r7, #8]
 800884c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b03      	cmp	r3, #3
 8008854:	d81a      	bhi.n	800888c <lsm6dsr_xl_full_scale_get+0x5c>
 8008856:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <lsm6dsr_xl_full_scale_get+0x2c>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	0800886d 	.word	0x0800886d
 8008860:	08008875 	.word	0x08008875
 8008864:	0800887d 	.word	0x0800887d
 8008868:	08008885 	.word	0x08008885
    case LSM6DSR_2g:
      *val = LSM6DSR_2g;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
      break;
 8008872:	e00f      	b.n	8008894 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_16g:
      *val = LSM6DSR_16g;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2201      	movs	r2, #1
 8008878:	701a      	strb	r2, [r3, #0]
      break;
 800887a:	e00b      	b.n	8008894 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_4g:
      *val = LSM6DSR_4g;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2202      	movs	r2, #2
 8008880:	701a      	strb	r2, [r3, #0]
      break;
 8008882:	e007      	b.n	8008894 <lsm6dsr_xl_full_scale_get+0x64>

    case LSM6DSR_8g:
      *val = LSM6DSR_8g;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2203      	movs	r2, #3
 8008888:	701a      	strb	r2, [r3, #0]
      break;
 800888a:	e003      	b.n	8008894 <lsm6dsr_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSR_2g;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2200      	movs	r2, #0
 8008890:	701a      	strb	r2, [r3, #0]
      break;
 8008892:	bf00      	nop
  }

  return ret;
 8008894:	68fb      	ldr	r3, [r7, #12]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop

080088a0 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80088b0:	f107 030c 	add.w	r3, r7, #12
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fca7 	bl	800920a <lsm6dsr_fsm_enable_get>
 80088bc:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 80c4 	bne.w	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80088c6:	7b3b      	ldrb	r3, [r7, #12]
 80088c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80088cc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80088ce:	7b3b      	ldrb	r3, [r7, #12]
 80088d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088d4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80088d6:	4313      	orrs	r3, r2
 80088d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80088da:	7b3b      	ldrb	r3, [r7, #12]
 80088dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80088e0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80088e2:	4313      	orrs	r3, r2
 80088e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80088e6:	7b3b      	ldrb	r3, [r7, #12]
 80088e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80088ee:	4313      	orrs	r3, r2
 80088f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80088f2:	7b3b      	ldrb	r3, [r7, #12]
 80088f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80088fa:	4313      	orrs	r3, r2
 80088fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80088fe:	7b3b      	ldrb	r3, [r7, #12]
 8008900:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008904:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8008906:	4313      	orrs	r3, r2
 8008908:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800890a:	7b3b      	ldrb	r3, [r7, #12]
 800890c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008910:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8008912:	4313      	orrs	r3, r2
 8008914:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8008916:	7b3b      	ldrb	r3, [r7, #12]
 8008918:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800891c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800891e:	4313      	orrs	r3, r2
 8008920:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8008922:	7b7b      	ldrb	r3, [r7, #13]
 8008924:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008928:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800892a:	4313      	orrs	r3, r2
 800892c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800892e:	7b7b      	ldrb	r3, [r7, #13]
 8008930:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008934:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8008936:	4313      	orrs	r3, r2
 8008938:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800893a:	7b7b      	ldrb	r3, [r7, #13]
 800893c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008940:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8008942:	4313      	orrs	r3, r2
 8008944:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8008946:	7b7b      	ldrb	r3, [r7, #13]
 8008948:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800894c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800894e:	4313      	orrs	r3, r2
 8008950:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8008952:	7b7b      	ldrb	r3, [r7, #13]
 8008954:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008958:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800895a:	4313      	orrs	r3, r2
 800895c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800895e:	7b7b      	ldrb	r3, [r7, #13]
 8008960:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008964:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8008966:	4313      	orrs	r3, r2
 8008968:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800896a:	7b7b      	ldrb	r3, [r7, #13]
 800896c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008970:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8008972:	4313      	orrs	r3, r2
 8008974:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8008976:	7b7b      	ldrb	r3, [r7, #13]
 8008978:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800897c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800897e:	4313      	orrs	r3, r2
 8008980:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008982:	2b01      	cmp	r3, #1
 8008984:	d163      	bne.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8008986:	f107 030b 	add.w	r3, r7, #11
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc69 	bl	8009264 <lsm6dsr_fsm_data_rate_get>
 8008992:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d159      	bne.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800899a:	7afb      	ldrb	r3, [r7, #11]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d853      	bhi.n	8008a48 <lsm6dsr_xl_data_rate_set+0x1a8>
 80089a0:	a201      	add	r2, pc, #4	@ (adr r2, 80089a8 <lsm6dsr_xl_data_rate_set+0x108>)
 80089a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a6:	bf00      	nop
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089cb 	.word	0x080089cb
 80089b0:	080089e9 	.word	0x080089e9
 80089b4:	08008a13 	.word	0x08008a13
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF) {
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d102      	bne.n	80089c4 <lsm6dsr_xl_data_rate_set+0x124>
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80089c2:	e044      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	75fb      	strb	r3, [r7, #23]
            break;
 80089c8:	e041      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 80089ca:	78fb      	ldrb	r3, [r7, #3]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <lsm6dsr_xl_data_rate_set+0x136>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80089d0:	2302      	movs	r3, #2
 80089d2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80089d4:	e03b      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d102      	bne.n	80089e2 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80089dc:	2302      	movs	r3, #2
 80089de:	75fb      	strb	r3, [r7, #23]
            break;
 80089e0:	e035      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	75fb      	strb	r3, [r7, #23]
            break;
 80089e6:	e032      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d102      	bne.n	80089f4 <lsm6dsr_xl_data_rate_set+0x154>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80089ee:	2303      	movs	r3, #3
 80089f0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80089f2:	e02c      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d102      	bne.n	8008a00 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80089fa:	2303      	movs	r3, #3
 80089fc:	75fb      	strb	r3, [r7, #23]
            break;
 80089fe:	e026      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d102      	bne.n	8008a0c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8008a06:	2303      	movs	r3, #3
 8008a08:	75fb      	strb	r3, [r7, #23]
            break;
 8008a0a:	e020      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	75fb      	strb	r3, [r7, #23]
            break;
 8008a10:	e01d      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF) {
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d102      	bne.n	8008a1e <lsm6dsr_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8008a18:	2304      	movs	r3, #4
 8008a1a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8008a1c:	e017      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5) {
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d102      	bne.n	8008a2a <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8008a24:	2304      	movs	r3, #4
 8008a26:	75fb      	strb	r3, [r7, #23]
            break;
 8008a28:	e011      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_26Hz) {
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d102      	bne.n	8008a36 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8008a30:	2304      	movs	r3, #4
 8008a32:	75fb      	strb	r3, [r7, #23]
            break;
 8008a34:	e00b      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_52Hz) {
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d102      	bne.n	8008a42 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8008a3c:	2304      	movs	r3, #4
 8008a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8008a40:	e005      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	75fb      	strb	r3, [r7, #23]
            break;
 8008a46:	e002      	b.n	8008a4e <lsm6dsr_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8008a4c:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d107      	bne.n	8008a64 <lsm6dsr_xl_data_rate_set+0x1c4>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8008a54:	f107 0208 	add.w	r2, r7, #8
 8008a58:	2301      	movs	r3, #1
 8008a5a:	2110      	movs	r1, #16
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff fe91 	bl	8008784 <lsm6dsr_read_reg>
 8008a62:	6138      	str	r0, [r7, #16]
                           1);
  }

  if (ret == 0) {
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10f      	bne.n	8008a8a <lsm6dsr_xl_data_rate_set+0x1ea>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	7a3b      	ldrb	r3, [r7, #8]
 8008a74:	f362 1307 	bfi	r3, r2, #4, #4
 8008a78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8008a7a:	f107 0208 	add.w	r2, r7, #8
 8008a7e:	2301      	movs	r3, #1
 8008a80:	2110      	movs	r1, #16
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff fe96 	bl	80087b4 <lsm6dsr_write_reg>
 8008a88:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8008a8a:	693b      	ldr	r3, [r7, #16]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <lsm6dsr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t *val)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8008a9e:	f107 0208 	add.w	r2, r7, #8
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	2110      	movs	r1, #16
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff fe6c 	bl	8008784 <lsm6dsr_read_reg>
 8008aac:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8008aae:	7a3b      	ldrb	r3, [r7, #8]
 8008ab0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b0b      	cmp	r3, #11
 8008ab8:	d84a      	bhi.n	8008b50 <lsm6dsr_xl_data_rate_get+0xbc>
 8008aba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac0 <lsm6dsr_xl_data_rate_get+0x2c>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008af1 	.word	0x08008af1
 8008ac4:	08008af9 	.word	0x08008af9
 8008ac8:	08008b01 	.word	0x08008b01
 8008acc:	08008b09 	.word	0x08008b09
 8008ad0:	08008b11 	.word	0x08008b11
 8008ad4:	08008b19 	.word	0x08008b19
 8008ad8:	08008b21 	.word	0x08008b21
 8008adc:	08008b29 	.word	0x08008b29
 8008ae0:	08008b31 	.word	0x08008b31
 8008ae4:	08008b39 	.word	0x08008b39
 8008ae8:	08008b41 	.word	0x08008b41
 8008aec:	08008b49 	.word	0x08008b49
    case LSM6DSR_XL_ODR_OFF:
      *val = LSM6DSR_XL_ODR_OFF;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
      break;
 8008af6:	e02f      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_12Hz5:
      *val = LSM6DSR_XL_ODR_12Hz5;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2201      	movs	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
      break;
 8008afe:	e02b      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_26Hz:
      *val = LSM6DSR_XL_ODR_26Hz;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2202      	movs	r2, #2
 8008b04:	701a      	strb	r2, [r3, #0]
      break;
 8008b06:	e027      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_52Hz:
      *val = LSM6DSR_XL_ODR_52Hz;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	701a      	strb	r2, [r3, #0]
      break;
 8008b0e:	e023      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_104Hz:
      *val = LSM6DSR_XL_ODR_104Hz;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2204      	movs	r2, #4
 8008b14:	701a      	strb	r2, [r3, #0]
      break;
 8008b16:	e01f      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_208Hz:
      *val = LSM6DSR_XL_ODR_208Hz;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2205      	movs	r2, #5
 8008b1c:	701a      	strb	r2, [r3, #0]
      break;
 8008b1e:	e01b      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_417Hz:
      *val = LSM6DSR_XL_ODR_417Hz;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2206      	movs	r2, #6
 8008b24:	701a      	strb	r2, [r3, #0]
      break;
 8008b26:	e017      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_833Hz:
      *val = LSM6DSR_XL_ODR_833Hz;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2207      	movs	r2, #7
 8008b2c:	701a      	strb	r2, [r3, #0]
      break;
 8008b2e:	e013      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_1667Hz:
      *val = LSM6DSR_XL_ODR_1667Hz;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2208      	movs	r2, #8
 8008b34:	701a      	strb	r2, [r3, #0]
      break;
 8008b36:	e00f      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_3333Hz:
      *val = LSM6DSR_XL_ODR_3333Hz;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2209      	movs	r2, #9
 8008b3c:	701a      	strb	r2, [r3, #0]
      break;
 8008b3e:	e00b      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_6667Hz:
      *val = LSM6DSR_XL_ODR_6667Hz;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	220a      	movs	r2, #10
 8008b44:	701a      	strb	r2, [r3, #0]
      break;
 8008b46:	e007      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    case LSM6DSR_XL_ODR_6Hz5:
      *val = LSM6DSR_XL_ODR_6Hz5;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	220b      	movs	r2, #11
 8008b4c:	701a      	strb	r2, [r3, #0]
      break;
 8008b4e:	e003      	b.n	8008b58 <lsm6dsr_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSR_XL_ODR_OFF;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2200      	movs	r2, #0
 8008b54:	701a      	strb	r2, [r3, #0]
      break;
 8008b56:	bf00      	nop
  }

  return ret;
 8008b58:	68fb      	ldr	r3, [r7, #12]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop

08008b64 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008b70:	f107 0208 	add.w	r2, r7, #8
 8008b74:	2301      	movs	r3, #1
 8008b76:	2111      	movs	r1, #17
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff fe03 	bl	8008784 <lsm6dsr_read_reg>
 8008b7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10f      	bne.n	8008ba6 <lsm6dsr_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	7a3b      	ldrb	r3, [r7, #8]
 8008b90:	f362 0303 	bfi	r3, r2, #0, #4
 8008b94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008b96:	f107 0208 	add.w	r2, r7, #8
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	2111      	movs	r1, #17
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff fe08 	bl	80087b4 <lsm6dsr_write_reg>
 8008ba4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <lsm6dsr_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t *val)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008bba:	f107 0208 	add.w	r2, r7, #8
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	2111      	movs	r1, #17
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7ff fdde 	bl	8008784 <lsm6dsr_read_reg>
 8008bc8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8008bca:	7a3b      	ldrb	r3, [r7, #8]
 8008bcc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b0c      	cmp	r3, #12
 8008bd4:	d834      	bhi.n	8008c40 <lsm6dsr_gy_full_scale_get+0x90>
 8008bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bdc <lsm6dsr_gy_full_scale_get+0x2c>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008c19 	.word	0x08008c19
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c11 	.word	0x08008c11
 8008be8:	08008c41 	.word	0x08008c41
 8008bec:	08008c21 	.word	0x08008c21
 8008bf0:	08008c41 	.word	0x08008c41
 8008bf4:	08008c41 	.word	0x08008c41
 8008bf8:	08008c41 	.word	0x08008c41
 8008bfc:	08008c29 	.word	0x08008c29
 8008c00:	08008c41 	.word	0x08008c41
 8008c04:	08008c41 	.word	0x08008c41
 8008c08:	08008c41 	.word	0x08008c41
 8008c0c:	08008c31 	.word	0x08008c31
    case LSM6DSR_125dps:
      *val = LSM6DSR_125dps;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2202      	movs	r2, #2
 8008c14:	701a      	strb	r2, [r3, #0]
      break;
 8008c16:	e017      	b.n	8008c48 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_250dps:
      *val = LSM6DSR_250dps;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	701a      	strb	r2, [r3, #0]
      break;
 8008c1e:	e013      	b.n	8008c48 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_500dps:
      *val = LSM6DSR_500dps;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2204      	movs	r2, #4
 8008c24:	701a      	strb	r2, [r3, #0]
      break;
 8008c26:	e00f      	b.n	8008c48 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_1000dps:
      *val = LSM6DSR_1000dps;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	701a      	strb	r2, [r3, #0]
      break;
 8008c2e:	e00b      	b.n	8008c48 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_2000dps:
      *val = LSM6DSR_2000dps;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	220c      	movs	r2, #12
 8008c34:	701a      	strb	r2, [r3, #0]
      break;
 8008c36:	e007      	b.n	8008c48 <lsm6dsr_gy_full_scale_get+0x98>

    case LSM6DSR_4000dps:
      *val = LSM6DSR_4000dps;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	701a      	strb	r2, [r3, #0]
      break;
 8008c3e:	e003      	b.n	8008c48 <lsm6dsr_gy_full_scale_get+0x98>

    default:
      *val = LSM6DSR_125dps;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2202      	movs	r2, #2
 8008c44:	701a      	strb	r2, [r3, #0]
      break;
 8008c46:	bf00      	nop
  }

  return ret;
 8008c48:	68fb      	ldr	r3, [r7, #12]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop

08008c54 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_emb_fsm_enable_t fsm_enable;
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8008c64:	f107 030c 	add.w	r3, r7, #12
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 facd 	bl	800920a <lsm6dsr_fsm_enable_get>
 8008c70:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 80c4 	bne.w	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008c7a:	7b3b      	ldrb	r3, [r7, #12]
 8008c7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c80:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8008c82:	7b3b      	ldrb	r3, [r7, #12]
 8008c84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008c88:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8008c8e:	7b3b      	ldrb	r3, [r7, #12]
 8008c90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008c94:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8008c96:	4313      	orrs	r3, r2
 8008c98:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8008c9a:	7b3b      	ldrb	r3, [r7, #12]
 8008c9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ca0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8008ca6:	7b3b      	ldrb	r3, [r7, #12]
 8008ca8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008cac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8008cb2:	7b3b      	ldrb	r3, [r7, #12]
 8008cb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008cb8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8008cbe:	7b3b      	ldrb	r3, [r7, #12]
 8008cc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008cc4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8008cca:	7b3b      	ldrb	r3, [r7, #12]
 8008ccc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008cd0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8008cd6:	7b7b      	ldrb	r3, [r7, #13]
 8008cd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cdc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8008ce2:	7b7b      	ldrb	r3, [r7, #13]
 8008ce4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008ce8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8008cea:	4313      	orrs	r3, r2
 8008cec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8008cee:	7b7b      	ldrb	r3, [r7, #13]
 8008cf0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008cf4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8008cfa:	7b7b      	ldrb	r3, [r7, #13]
 8008cfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d00:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8008d06:	7b7b      	ldrb	r3, [r7, #13]
 8008d08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008d0c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8008d12:	7b7b      	ldrb	r3, [r7, #13]
 8008d14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008d18:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8008d1e:	7b7b      	ldrb	r3, [r7, #13]
 8008d20:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008d24:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8008d26:	4313      	orrs	r3, r2
 8008d28:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8008d2a:	7b7b      	ldrb	r3, [r7, #13]
 8008d2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008d30:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8008d32:	4313      	orrs	r3, r2
 8008d34:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d163      	bne.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8008d3a:	f107 030b 	add.w	r3, r7, #11
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fa8f 	bl	8009264 <lsm6dsr_fsm_data_rate_get>
 8008d46:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d159      	bne.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d853      	bhi.n	8008dfc <lsm6dsr_gy_data_rate_set+0x1a8>
 8008d54:	a201      	add	r2, pc, #4	@ (adr r2, 8008d5c <lsm6dsr_gy_data_rate_set+0x108>)
 8008d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5a:	bf00      	nop
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008d7f 	.word	0x08008d7f
 8008d64:	08008d9d 	.word	0x08008d9d
 8008d68:	08008dc7 	.word	0x08008dc7
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d102      	bne.n	8008d78 <lsm6dsr_gy_data_rate_set+0x124>
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8008d72:	2301      	movs	r3, #1
 8008d74:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8008d76:	e044      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8008d7c:	e041      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <lsm6dsr_gy_data_rate_set+0x136>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8008d84:	2302      	movs	r3, #2
 8008d86:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8008d88:	e03b      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d102      	bne.n	8008d96 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8008d90:	2302      	movs	r3, #2
 8008d92:	75fb      	strb	r3, [r7, #23]
            break;
 8008d94:	e035      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	75fb      	strb	r3, [r7, #23]
            break;
 8008d9a:	e032      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d102      	bne.n	8008da8 <lsm6dsr_gy_data_rate_set+0x154>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8008da2:	2303      	movs	r3, #3
 8008da4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8008da6:	e02c      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d102      	bne.n	8008db4 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8008dae:	2303      	movs	r3, #3
 8008db0:	75fb      	strb	r3, [r7, #23]
            break;
 8008db2:	e026      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d102      	bne.n	8008dc0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	75fb      	strb	r3, [r7, #23]
            break;
 8008dbe:	e020      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8008dc0:	78fb      	ldrb	r3, [r7, #3]
 8008dc2:	75fb      	strb	r3, [r7, #23]
            break;
 8008dc4:	e01d      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF) {
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <lsm6dsr_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8008dcc:	2304      	movs	r3, #4
 8008dce:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8008dd0:	e017      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5) {
 8008dd2:	78fb      	ldrb	r3, [r7, #3]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d102      	bne.n	8008dde <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8008dd8:	2304      	movs	r3, #4
 8008dda:	75fb      	strb	r3, [r7, #23]
            break;
 8008ddc:	e011      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_26Hz) {
 8008dde:	78fb      	ldrb	r3, [r7, #3]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d102      	bne.n	8008dea <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8008de4:	2304      	movs	r3, #4
 8008de6:	75fb      	strb	r3, [r7, #23]
            break;
 8008de8:	e00b      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_52Hz) {
 8008dea:	78fb      	ldrb	r3, [r7, #3]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d102      	bne.n	8008df6 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8008df0:	2304      	movs	r3, #4
 8008df2:	75fb      	strb	r3, [r7, #23]
            break;
 8008df4:	e005      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8008df6:	78fb      	ldrb	r3, [r7, #3]
 8008df8:	75fb      	strb	r3, [r7, #23]
            break;
 8008dfa:	e002      	b.n	8008e02 <lsm6dsr_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	75fb      	strb	r3, [r7, #23]
            break;
 8008e00:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d107      	bne.n	8008e18 <lsm6dsr_gy_data_rate_set+0x1c4>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008e08:	f107 0208 	add.w	r2, r7, #8
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	2111      	movs	r1, #17
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff fcb7 	bl	8008784 <lsm6dsr_read_reg>
 8008e16:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10f      	bne.n	8008e3e <lsm6dsr_gy_data_rate_set+0x1ea>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	f003 030f 	and.w	r3, r3, #15
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	7a3b      	ldrb	r3, [r7, #8]
 8008e28:	f362 1307 	bfi	r3, r2, #4, #4
 8008e2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008e2e:	f107 0208 	add.w	r2, r7, #8
 8008e32:	2301      	movs	r3, #1
 8008e34:	2111      	movs	r1, #17
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff fcbc 	bl	80087b4 <lsm6dsr_write_reg>
 8008e3c:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8008e3e:	693b      	ldr	r3, [r7, #16]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <lsm6dsr_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t *val)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8008e52:	f107 0208 	add.w	r2, r7, #8
 8008e56:	2301      	movs	r3, #1
 8008e58:	2111      	movs	r1, #17
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff fc92 	bl	8008784 <lsm6dsr_read_reg>
 8008e60:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8008e62:	7a3b      	ldrb	r3, [r7, #8]
 8008e64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b0a      	cmp	r3, #10
 8008e6c:	d844      	bhi.n	8008ef8 <lsm6dsr_gy_data_rate_get+0xb0>
 8008e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <lsm6dsr_gy_data_rate_get+0x2c>)
 8008e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	08008ea9 	.word	0x08008ea9
 8008e7c:	08008eb1 	.word	0x08008eb1
 8008e80:	08008eb9 	.word	0x08008eb9
 8008e84:	08008ec1 	.word	0x08008ec1
 8008e88:	08008ec9 	.word	0x08008ec9
 8008e8c:	08008ed1 	.word	0x08008ed1
 8008e90:	08008ed9 	.word	0x08008ed9
 8008e94:	08008ee1 	.word	0x08008ee1
 8008e98:	08008ee9 	.word	0x08008ee9
 8008e9c:	08008ef1 	.word	0x08008ef1
    case LSM6DSR_GY_ODR_OFF:
      *val = LSM6DSR_GY_ODR_OFF;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	701a      	strb	r2, [r3, #0]
      break;
 8008ea6:	e02b      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_12Hz5:
      *val = LSM6DSR_GY_ODR_12Hz5;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	701a      	strb	r2, [r3, #0]
      break;
 8008eae:	e027      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_26Hz:
      *val = LSM6DSR_GY_ODR_26Hz;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	701a      	strb	r2, [r3, #0]
      break;
 8008eb6:	e023      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_52Hz:
      *val = LSM6DSR_GY_ODR_52Hz;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	701a      	strb	r2, [r3, #0]
      break;
 8008ebe:	e01f      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_104Hz:
      *val = LSM6DSR_GY_ODR_104Hz;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	701a      	strb	r2, [r3, #0]
      break;
 8008ec6:	e01b      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_208Hz:
      *val = LSM6DSR_GY_ODR_208Hz;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2205      	movs	r2, #5
 8008ecc:	701a      	strb	r2, [r3, #0]
      break;
 8008ece:	e017      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_417Hz:
      *val = LSM6DSR_GY_ODR_417Hz;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2206      	movs	r2, #6
 8008ed4:	701a      	strb	r2, [r3, #0]
      break;
 8008ed6:	e013      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_833Hz:
      *val = LSM6DSR_GY_ODR_833Hz;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2207      	movs	r2, #7
 8008edc:	701a      	strb	r2, [r3, #0]
      break;
 8008ede:	e00f      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_1667Hz:
      *val = LSM6DSR_GY_ODR_1667Hz;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	701a      	strb	r2, [r3, #0]
      break;
 8008ee6:	e00b      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_3333Hz:
      *val = LSM6DSR_GY_ODR_3333Hz;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2209      	movs	r2, #9
 8008eec:	701a      	strb	r2, [r3, #0]
      break;
 8008eee:	e007      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    case LSM6DSR_GY_ODR_6667Hz:
      *val = LSM6DSR_GY_ODR_6667Hz;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	220a      	movs	r2, #10
 8008ef4:	701a      	strb	r2, [r3, #0]
      break;
 8008ef6:	e003      	b.n	8008f00 <lsm6dsr_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSR_GY_ODR_OFF;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
      break;
 8008efe:	bf00      	nop
  }

  return ret;
 8008f00:	68fb      	ldr	r3, [r7, #12]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop

08008f0c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8008f18:	f107 0208 	add.w	r2, r7, #8
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	2112      	movs	r1, #18
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff fc2f 	bl	8008784 <lsm6dsr_read_reg>
 8008f26:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10f      	bne.n	8008f4e <lsm6dsr_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	7a3b      	ldrb	r3, [r7, #8]
 8008f38:	f362 1386 	bfi	r3, r2, #6, #1
 8008f3c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8008f3e:	f107 0208 	add.w	r2, r7, #8
 8008f42:	2301      	movs	r3, #1
 8008f44:	2112      	movs	r1, #18
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff fc34 	bl	80087b4 <lsm6dsr_write_reg>
 8008f4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8008f62:	f107 020c 	add.w	r2, r7, #12
 8008f66:	2306      	movs	r3, #6
 8008f68:	2122      	movs	r1, #34	@ 0x22
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff fc0a 	bl	8008784 <lsm6dsr_read_reg>
 8008f70:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008f72:	7b7b      	ldrb	r3, [r7, #13]
 8008f74:	b21a      	sxth	r2, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	021b      	lsls	r3, r3, #8
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	7b3a      	ldrb	r2, [r7, #12]
 8008f88:	4413      	add	r3, r2
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	b21a      	sxth	r2, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008f92:	7bfa      	ldrb	r2, [r7, #15]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	3302      	adds	r3, #2
 8008f98:	b212      	sxth	r2, r2
 8008f9a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	3302      	adds	r3, #2
 8008fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	021b      	lsls	r3, r3, #8
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	7bba      	ldrb	r2, [r7, #14]
 8008fac:	4413      	add	r3, r2
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	3302      	adds	r3, #2
 8008fb4:	b212      	sxth	r2, r2
 8008fb6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008fb8:	7c7a      	ldrb	r2, [r7, #17]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	b212      	sxth	r2, r2
 8008fc0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	7c3a      	ldrb	r2, [r7, #16]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	b212      	sxth	r2, r2
 8008fdc:	801a      	strh	r2, [r3, #0]
  return ret;
 8008fde:	697b      	ldr	r3, [r7, #20]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8008ff2:	f107 020c 	add.w	r2, r7, #12
 8008ff6:	2306      	movs	r3, #6
 8008ff8:	2128      	movs	r1, #40	@ 0x28
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff fbc2 	bl	8008784 <lsm6dsr_read_reg>
 8009000:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8009002:	7b7b      	ldrb	r3, [r7, #13]
 8009004:	b21a      	sxth	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009010:	b29b      	uxth	r3, r3
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	b29b      	uxth	r3, r3
 8009016:	7b3a      	ldrb	r2, [r7, #12]
 8009018:	4413      	add	r3, r2
 800901a:	b29b      	uxth	r3, r3
 800901c:	b21a      	sxth	r2, r3
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009022:	7bfa      	ldrb	r2, [r7, #15]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	3302      	adds	r3, #2
 8009028:	b212      	sxth	r2, r2
 800902a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	3302      	adds	r3, #2
 8009030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009034:	b29b      	uxth	r3, r3
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	b29b      	uxth	r3, r3
 800903a:	7bba      	ldrb	r2, [r7, #14]
 800903c:	4413      	add	r3, r2
 800903e:	b29a      	uxth	r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	3302      	adds	r3, #2
 8009044:	b212      	sxth	r2, r2
 8009046:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009048:	7c7a      	ldrb	r2, [r7, #17]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	3304      	adds	r3, #4
 800904e:	b212      	sxth	r2, r2
 8009050:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	3304      	adds	r3, #4
 8009056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800905a:	b29b      	uxth	r3, r3
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	b29b      	uxth	r3, r3
 8009060:	7c3a      	ldrb	r2, [r7, #16]
 8009062:	4413      	add	r3, r2
 8009064:	b29a      	uxth	r2, r3
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	3304      	adds	r3, #4
 800906a:	b212      	sxth	r2, r2
 800906c:	801a      	strh	r2, [r3, #0]
  return ret;
 800906e:	697b      	ldr	r3, [r7, #20]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8009084:	f107 0208 	add.w	r2, r7, #8
 8009088:	2301      	movs	r3, #1
 800908a:	2101      	movs	r1, #1
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff fb79 	bl	8008784 <lsm6dsr_read_reg>
 8009092:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10f      	bne.n	80090ba <lsm6dsr_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 800909a:	78fb      	ldrb	r3, [r7, #3]
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	7a3b      	ldrb	r3, [r7, #8]
 80090a4:	f362 1387 	bfi	r3, r2, #6, #2
 80090a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80090aa:	f107 0208 	add.w	r2, r7, #8
 80090ae:	2301      	movs	r3, #1
 80090b0:	2101      	movs	r1, #1
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fb7e 	bl	80087b4 <lsm6dsr_write_reg>
 80090b8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80090ba:	68fb      	ldr	r3, [r7, #12]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80090ce:	2301      	movs	r3, #1
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	210f      	movs	r1, #15
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff fb55 	bl	8008784 <lsm6dsr_read_reg>
 80090da:	60f8      	str	r0, [r7, #12]
  return ret;
 80090dc:	68fb      	ldr	r3, [r7, #12]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <lsm6dsr_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80090f2:	f107 0208 	add.w	r2, r7, #8
 80090f6:	2301      	movs	r3, #1
 80090f8:	2112      	movs	r1, #18
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fb42 	bl	8008784 <lsm6dsr_read_reg>
 8009100:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10f      	bne.n	8009128 <lsm6dsr_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	7a3b      	ldrb	r3, [r7, #8]
 8009112:	f362 0382 	bfi	r3, r2, #2, #1
 8009116:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8009118:	f107 0208 	add.w	r2, r7, #8
 800911c:	2301      	movs	r3, #1
 800911e:	2112      	movs	r1, #18
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff fb47 	bl	80087b4 <lsm6dsr_write_reg>
 8009126:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009128:	68fb      	ldr	r3, [r7, #12]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b086      	sub	sp, #24
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	460b      	mov	r3, r1
 800913c:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 800913e:	f107 0210 	add.w	r2, r7, #16
 8009142:	2301      	movs	r3, #1
 8009144:	2118      	movs	r1, #24
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff fb1c 	bl	8008784 <lsm6dsr_read_reg>
 800914c:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d111      	bne.n	8009178 <lsm6dsr_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	09db      	lsrs	r3, r3, #7
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	b2da      	uxtb	r2, r3
 8009160:	7c3b      	ldrb	r3, [r7, #16]
 8009162:	f362 0341 	bfi	r3, r2, #1, #1
 8009166:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8009168:	f107 0210 	add.w	r2, r7, #16
 800916c:	2301      	movs	r3, #1
 800916e:	2118      	movs	r1, #24
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff fb1f 	bl	80087b4 <lsm6dsr_write_reg>
 8009176:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0) {
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d107      	bne.n	800918e <lsm6dsr_i3c_disable_set+0x5c>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800917e:	f107 020c 	add.w	r2, r7, #12
 8009182:	2301      	movs	r3, #1
 8009184:	2162      	movs	r1, #98	@ 0x62
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fafc 	bl	8008784 <lsm6dsr_read_reg>
 800918c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10f      	bne.n	80091b4 <lsm6dsr_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	b2da      	uxtb	r2, r3
 800919c:	7b3b      	ldrb	r3, [r7, #12]
 800919e:	f362 03c4 	bfi	r3, r2, #3, #2
 80091a2:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80091a4:	f107 020c 	add.w	r2, r7, #12
 80091a8:	2301      	movs	r3, #1
 80091aa:	2162      	movs	r1, #98	@ 0x62
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff fb01 	bl	80087b4 <lsm6dsr_write_reg>
 80091b2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80091b4:	697b      	ldr	r3, [r7, #20]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <lsm6dsr_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsr_fifo_mode_t val)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	460b      	mov	r3, r1
 80091c8:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FIFO_CTRL4,
 80091ca:	f107 0208 	add.w	r2, r7, #8
 80091ce:	2301      	movs	r3, #1
 80091d0:	210a      	movs	r1, #10
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff fad6 	bl	8008784 <lsm6dsr_read_reg>
 80091d8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10f      	bne.n	8009200 <lsm6dsr_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	7a3b      	ldrb	r3, [r7, #8]
 80091ea:	f362 0302 	bfi	r3, r2, #0, #3
 80091ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FIFO_CTRL4,
 80091f0:	f107 0208 	add.w	r2, r7, #8
 80091f4:	2301      	movs	r3, #1
 80091f6:	210a      	movs	r1, #10
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff fadb 	bl	80087b4 <lsm6dsr_write_reg>
 80091fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8009200:	68fb      	ldr	r3, [r7, #12]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8009214:	2102      	movs	r1, #2
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff ff2e 	bl	8009078 <lsm6dsr_mem_bank_set>
 800921c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d106      	bne.n	8009232 <lsm6dsr_fsm_enable_get+0x28>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8009224:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8009226:	2301      	movs	r3, #1
 8009228:	2146      	movs	r1, #70	@ 0x46
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff faaa 	bl	8008784 <lsm6dsr_read_reg>
 8009230:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d107      	bne.n	8009248 <lsm6dsr_fsm_enable_get+0x3e>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800923c:	2301      	movs	r3, #1
 800923e:	2147      	movs	r1, #71	@ 0x47
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff fa9f 	bl	8008784 <lsm6dsr_read_reg>
 8009246:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <lsm6dsr_fsm_enable_get+0x4e>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800924e:	2100      	movs	r1, #0
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ff11 	bl	8009078 <lsm6dsr_mem_bank_set>
 8009256:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009258:	68fb      	ldr	r3, [r7, #12]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800926e:	2102      	movs	r1, #2
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff ff01 	bl	8009078 <lsm6dsr_mem_bank_set>
 8009276:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d107      	bne.n	800928e <lsm6dsr_fsm_data_rate_get+0x2a>
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800927e:	f107 0208 	add.w	r2, r7, #8
 8009282:	2301      	movs	r3, #1
 8009284:	215f      	movs	r1, #95	@ 0x5f
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff fa7c 	bl	8008784 <lsm6dsr_read_reg>
 800928c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d104      	bne.n	800929e <lsm6dsr_fsm_data_rate_get+0x3a>
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8009294:	2100      	movs	r1, #0
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff feee 	bl	8009078 <lsm6dsr_mem_bank_set>
 800929c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800929e:	7a3b      	ldrb	r3, [r7, #8]
 80092a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d81a      	bhi.n	80092e0 <lsm6dsr_fsm_data_rate_get+0x7c>
 80092aa:	a201      	add	r2, pc, #4	@ (adr r2, 80092b0 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80092ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b0:	080092c1 	.word	0x080092c1
 80092b4:	080092c9 	.word	0x080092c9
 80092b8:	080092d1 	.word	0x080092d1
 80092bc:	080092d9 	.word	0x080092d9
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2200      	movs	r2, #0
 80092c4:	701a      	strb	r2, [r3, #0]
      break;
 80092c6:	e00f      	b.n	80092e8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2201      	movs	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
      break;
 80092ce:	e00b      	b.n	80092e8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2202      	movs	r2, #2
 80092d4:	701a      	strb	r2, [r3, #0]
      break;
 80092d6:	e007      	b.n	80092e8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2203      	movs	r2, #3
 80092dc:	701a      	strb	r2, [r3, #0]
      break;
 80092de:	e003      	b.n	80092e8 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
      break;
 80092e6:	bf00      	nop
  }

  return ret;
 80092e8:	68fb      	ldr	r3, [r7, #12]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop

080092f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80092f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009334 <HAL_Init+0x40>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a0d      	ldr	r2, [pc, #52]	@ (8009334 <HAL_Init+0x40>)
 80092fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009304:	4b0b      	ldr	r3, [pc, #44]	@ (8009334 <HAL_Init+0x40>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a0a      	ldr	r2, [pc, #40]	@ (8009334 <HAL_Init+0x40>)
 800930a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800930e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009310:	4b08      	ldr	r3, [pc, #32]	@ (8009334 <HAL_Init+0x40>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a07      	ldr	r2, [pc, #28]	@ (8009334 <HAL_Init+0x40>)
 8009316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800931a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800931c:	2003      	movs	r0, #3
 800931e:	f000 fd5f 	bl	8009de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009322:	2000      	movs	r0, #0
 8009324:	f000 f808 	bl	8009338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009328:	f7fc fd96 	bl	8005e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	40023c00 	.word	0x40023c00

08009338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009340:	4b12      	ldr	r3, [pc, #72]	@ (800938c <HAL_InitTick+0x54>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b12      	ldr	r3, [pc, #72]	@ (8009390 <HAL_InitTick+0x58>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800934e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009352:	fbb2 f3f3 	udiv	r3, r2, r3
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fd85 	bl	8009e66 <HAL_SYSTICK_Config>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e00e      	b.n	8009384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b0f      	cmp	r3, #15
 800936a:	d80a      	bhi.n	8009382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800936c:	2200      	movs	r2, #0
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
 8009374:	f000 fd3f 	bl	8009df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009378:	4a06      	ldr	r2, [pc, #24]	@ (8009394 <HAL_InitTick+0x5c>)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	e000      	b.n	8009384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000028 	.word	0x20000028
 8009390:	200000c0 	.word	0x200000c0
 8009394:	200000bc 	.word	0x200000bc

08009398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800939c:	4b06      	ldr	r3, [pc, #24]	@ (80093b8 <HAL_IncTick+0x20>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	4b06      	ldr	r3, [pc, #24]	@ (80093bc <HAL_IncTick+0x24>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4413      	add	r3, r2
 80093a8:	4a04      	ldr	r2, [pc, #16]	@ (80093bc <HAL_IncTick+0x24>)
 80093aa:	6013      	str	r3, [r2, #0]
}
 80093ac:	bf00      	nop
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	200000c0 	.word	0x200000c0
 80093bc:	20000a94 	.word	0x20000a94

080093c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0
  return uwTick;
 80093c4:	4b03      	ldr	r3, [pc, #12]	@ (80093d4 <HAL_GetTick+0x14>)
 80093c6:	681b      	ldr	r3, [r3, #0]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000a94 	.word	0x20000a94

080093d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80093e0:	f7ff ffee 	bl	80093c0 <HAL_GetTick>
 80093e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f0:	d005      	beq.n	80093fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80093f2:	4b0a      	ldr	r3, [pc, #40]	@ (800941c <HAL_Delay+0x44>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4413      	add	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80093fe:	bf00      	nop
 8009400:	f7ff ffde 	bl	80093c0 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	429a      	cmp	r2, r3
 800940e:	d8f7      	bhi.n	8009400 <HAL_Delay+0x28>
  {
  }
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	200000c0 	.word	0x200000c0

08009420 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8009424:	4b02      	ldr	r3, [pc, #8]	@ (8009430 <HAL_GetHalVersion+0x10>)
}
 8009426:	4618      	mov	r0, r3
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	01070c00 	.word	0x01070c00

08009434 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e033      	b.n	80094b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	d109      	bne.n	8009466 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7fc fd28 	bl	8005ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946a:	f003 0310 	and.w	r3, r3, #16
 800946e:	2b00      	cmp	r3, #0
 8009470:	d118      	bne.n	80094a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009476:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800947a:	f023 0302 	bic.w	r3, r3, #2
 800947e:	f043 0202 	orr.w	r2, r3, #2
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 faba 	bl	8009a00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009496:	f023 0303 	bic.w	r3, r3, #3
 800949a:	f043 0201 	orr.w	r2, r3, #1
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80094a2:	e001      	b.n	80094a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d101      	bne.n	80094d6 <HAL_ADC_Start+0x1a>
 80094d2:	2302      	movs	r3, #2
 80094d4:	e097      	b.n	8009606 <HAL_ADC_Start+0x14a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d018      	beq.n	800951e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689a      	ldr	r2, [r3, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0201 	orr.w	r2, r2, #1
 80094fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80094fc:	4b45      	ldr	r3, [pc, #276]	@ (8009614 <HAL_ADC_Start+0x158>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a45      	ldr	r2, [pc, #276]	@ (8009618 <HAL_ADC_Start+0x15c>)
 8009502:	fba2 2303 	umull	r2, r3, r2, r3
 8009506:	0c9a      	lsrs	r2, r3, #18
 8009508:	4613      	mov	r3, r2
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	4413      	add	r3, r2
 800950e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8009510:	e002      	b.n	8009518 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	3b01      	subs	r3, #1
 8009516:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1f9      	bne.n	8009512 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b01      	cmp	r3, #1
 800952a:	d15f      	bne.n	80095ec <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009530:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009552:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009556:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800956a:	d106      	bne.n	800957a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009570:	f023 0206 	bic.w	r2, r3, #6
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	645a      	str	r2, [r3, #68]	@ 0x44
 8009578:	e002      	b.n	8009580 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009588:	4b24      	ldr	r3, [pc, #144]	@ (800961c <HAL_ADC_Start+0x160>)
 800958a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8009594:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f003 031f 	and.w	r3, r3, #31
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10f      	bne.n	80095c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d129      	bne.n	8009604 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689a      	ldr	r2, [r3, #8]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80095be:	609a      	str	r2, [r3, #8]
 80095c0:	e020      	b.n	8009604 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a16      	ldr	r2, [pc, #88]	@ (8009620 <HAL_ADC_Start+0x164>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d11b      	bne.n	8009604 <HAL_ADC_Start+0x148>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d114      	bne.n	8009604 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80095e8:	609a      	str	r2, [r3, #8]
 80095ea:	e00b      	b.n	8009604 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f0:	f043 0210 	orr.w	r2, r3, #16
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095fc:	f043 0201 	orr.w	r2, r3, #1
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20000028 	.word	0x20000028
 8009618:	431bde83 	.word	0x431bde83
 800961c:	40012300 	.word	0x40012300
 8009620:	40012000 	.word	0x40012000

08009624 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HAL_ADC_Stop+0x16>
 8009636:	2302      	movs	r3, #2
 8009638:	e021      	b.n	800967e <HAL_ADC_Stop+0x5a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d109      	bne.n	8009674 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009664:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	f043 0201 	orr.w	r2, r3, #1
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096a6:	d113      	bne.n	80096d0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80096b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b6:	d10b      	bne.n	80096d0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096bc:	f043 0220 	orr.w	r2, r3, #32
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e063      	b.n	8009798 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80096d0:	f7ff fe76 	bl	80093c0 <HAL_GetTick>
 80096d4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80096d6:	e021      	b.n	800971c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096de:	d01d      	beq.n	800971c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <HAL_ADC_PollForConversion+0x6c>
 80096e6:	f7ff fe6b 	bl	80093c0 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d212      	bcs.n	800971c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0302 	and.w	r3, r3, #2
 8009700:	2b02      	cmp	r3, #2
 8009702:	d00b      	beq.n	800971c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009708:	f043 0204 	orr.w	r2, r3, #4
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e03d      	b.n	8009798 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b02      	cmp	r3, #2
 8009728:	d1d6      	bne.n	80096d8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f06f 0212 	mvn.w	r2, #18
 8009732:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009738:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d123      	bne.n	8009796 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009752:	2b00      	cmp	r3, #0
 8009754:	d11f      	bne.n	8009796 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800975c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009760:	2b00      	cmp	r3, #0
 8009762:	d006      	beq.n	8009772 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800976e:	2b00      	cmp	r3, #0
 8009770:	d111      	bne.n	8009796 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009776:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d105      	bne.n	8009796 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978e:	f043 0201 	orr.w	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
	...

080097bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d101      	bne.n	80097d8 <HAL_ADC_ConfigChannel+0x1c>
 80097d4:	2302      	movs	r3, #2
 80097d6:	e105      	b.n	80099e4 <HAL_ADC_ConfigChannel+0x228>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b09      	cmp	r3, #9
 80097e6:	d925      	bls.n	8009834 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68d9      	ldr	r1, [r3, #12]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	461a      	mov	r2, r3
 80097f6:	4613      	mov	r3, r2
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	4413      	add	r3, r2
 80097fc:	3b1e      	subs	r3, #30
 80097fe:	2207      	movs	r2, #7
 8009800:	fa02 f303 	lsl.w	r3, r2, r3
 8009804:	43da      	mvns	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	400a      	ands	r2, r1
 800980c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68d9      	ldr	r1, [r3, #12]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	b29b      	uxth	r3, r3
 800981e:	4618      	mov	r0, r3
 8009820:	4603      	mov	r3, r0
 8009822:	005b      	lsls	r3, r3, #1
 8009824:	4403      	add	r3, r0
 8009826:	3b1e      	subs	r3, #30
 8009828:	409a      	lsls	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	60da      	str	r2, [r3, #12]
 8009832:	e022      	b.n	800987a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6919      	ldr	r1, [r3, #16]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	b29b      	uxth	r3, r3
 8009840:	461a      	mov	r2, r3
 8009842:	4613      	mov	r3, r2
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	4413      	add	r3, r2
 8009848:	2207      	movs	r2, #7
 800984a:	fa02 f303 	lsl.w	r3, r2, r3
 800984e:	43da      	mvns	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	400a      	ands	r2, r1
 8009856:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6919      	ldr	r1, [r3, #16]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	4618      	mov	r0, r3
 800986a:	4603      	mov	r3, r0
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	4403      	add	r3, r0
 8009870:	409a      	lsls	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	2b06      	cmp	r3, #6
 8009880:	d824      	bhi.n	80098cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	3b05      	subs	r3, #5
 8009894:	221f      	movs	r2, #31
 8009896:	fa02 f303 	lsl.w	r3, r2, r3
 800989a:	43da      	mvns	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	400a      	ands	r2, r1
 80098a2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	4618      	mov	r0, r3
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	3b05      	subs	r3, #5
 80098be:	fa00 f203 	lsl.w	r2, r0, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80098ca:	e04c      	b.n	8009966 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	2b0c      	cmp	r3, #12
 80098d2:	d824      	bhi.n	800991e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	4613      	mov	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	3b23      	subs	r3, #35	@ 0x23
 80098e6:	221f      	movs	r2, #31
 80098e8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ec:	43da      	mvns	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	400a      	ands	r2, r1
 80098f4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	b29b      	uxth	r3, r3
 8009902:	4618      	mov	r0, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	3b23      	subs	r3, #35	@ 0x23
 8009910:	fa00 f203 	lsl.w	r2, r0, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	430a      	orrs	r2, r1
 800991a:	631a      	str	r2, [r3, #48]	@ 0x30
 800991c:	e023      	b.n	8009966 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	4613      	mov	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	3b41      	subs	r3, #65	@ 0x41
 8009930:	221f      	movs	r2, #31
 8009932:	fa02 f303 	lsl.w	r3, r2, r3
 8009936:	43da      	mvns	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	400a      	ands	r2, r1
 800993e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	b29b      	uxth	r3, r3
 800994c:	4618      	mov	r0, r3
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	3b41      	subs	r3, #65	@ 0x41
 800995a:	fa00 f203 	lsl.w	r2, r0, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009966:	4b22      	ldr	r3, [pc, #136]	@ (80099f0 <HAL_ADC_ConfigChannel+0x234>)
 8009968:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a21      	ldr	r2, [pc, #132]	@ (80099f4 <HAL_ADC_ConfigChannel+0x238>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d109      	bne.n	8009988 <HAL_ADC_ConfigChannel+0x1cc>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b12      	cmp	r3, #18
 800997a:	d105      	bne.n	8009988 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a19      	ldr	r2, [pc, #100]	@ (80099f4 <HAL_ADC_ConfigChannel+0x238>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d123      	bne.n	80099da <HAL_ADC_ConfigChannel+0x21e>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b10      	cmp	r3, #16
 8009998:	d003      	beq.n	80099a2 <HAL_ADC_ConfigChannel+0x1e6>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b11      	cmp	r3, #17
 80099a0:	d11b      	bne.n	80099da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b10      	cmp	r3, #16
 80099b4:	d111      	bne.n	80099da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80099b6:	4b10      	ldr	r3, [pc, #64]	@ (80099f8 <HAL_ADC_ConfigChannel+0x23c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a10      	ldr	r2, [pc, #64]	@ (80099fc <HAL_ADC_ConfigChannel+0x240>)
 80099bc:	fba2 2303 	umull	r2, r3, r2, r3
 80099c0:	0c9a      	lsrs	r2, r3, #18
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80099cc:	e002      	b.n	80099d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1f9      	bne.n	80099ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	40012300 	.word	0x40012300
 80099f4:	40012000 	.word	0x40012000
 80099f8:	20000028 	.word	0x20000028
 80099fc:	431bde83 	.word	0x431bde83

08009a00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009a08:	4b79      	ldr	r3, [pc, #484]	@ (8009bf0 <ADC_Init+0x1f0>)
 8009a0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	431a      	orrs	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6859      	ldr	r1, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	021a      	lsls	r2, r3, #8
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8009a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6859      	ldr	r1, [r3, #4]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689a      	ldr	r2, [r3, #8]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6899      	ldr	r1, [r3, #8]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a92:	4a58      	ldr	r2, [pc, #352]	@ (8009bf4 <ADC_Init+0x1f4>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d022      	beq.n	8009ade <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009aa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6899      	ldr	r1, [r3, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6899      	ldr	r1, [r3, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	609a      	str	r2, [r3, #8]
 8009adc:	e00f      	b.n	8009afe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689a      	ldr	r2, [r3, #8]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009afc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689a      	ldr	r2, [r3, #8]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0202 	bic.w	r2, r2, #2
 8009b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6899      	ldr	r1, [r3, #8]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7e1b      	ldrb	r3, [r3, #24]
 8009b18:	005a      	lsls	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d01b      	beq.n	8009b64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8009b4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6859      	ldr	r1, [r3, #4]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b56:	3b01      	subs	r3, #1
 8009b58:	035a      	lsls	r2, r3, #13
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	605a      	str	r2, [r3, #4]
 8009b62:	e007      	b.n	8009b74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8009b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	051a      	lsls	r2, r3, #20
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	430a      	orrs	r2, r1
 8009b98:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009ba8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6899      	ldr	r1, [r3, #8]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009bb6:	025a      	lsls	r2, r3, #9
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6899      	ldr	r1, [r3, #8]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	029a      	lsls	r2, r3, #10
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	609a      	str	r2, [r3, #8]
}
 8009be4:	bf00      	nop
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	40012300 	.word	0x40012300
 8009bf4:	0f000001 	.word	0x0f000001

08009bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c08:	4b0c      	ldr	r3, [pc, #48]	@ (8009c3c <__NVIC_SetPriorityGrouping+0x44>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009c14:	4013      	ands	r3, r2
 8009c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009c2a:	4a04      	ldr	r2, [pc, #16]	@ (8009c3c <__NVIC_SetPriorityGrouping+0x44>)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	60d3      	str	r3, [r2, #12]
}
 8009c30:	bf00      	nop
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	e000ed00 	.word	0xe000ed00

08009c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c44:	4b04      	ldr	r3, [pc, #16]	@ (8009c58 <__NVIC_GetPriorityGrouping+0x18>)
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	0a1b      	lsrs	r3, r3, #8
 8009c4a:	f003 0307 	and.w	r3, r3, #7
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	e000ed00 	.word	0xe000ed00

08009c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	db0b      	blt.n	8009c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	f003 021f 	and.w	r2, r3, #31
 8009c74:	4907      	ldr	r1, [pc, #28]	@ (8009c94 <__NVIC_EnableIRQ+0x38>)
 8009c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8009c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009c86:	bf00      	nop
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	e000e100 	.word	0xe000e100

08009c98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	db12      	blt.n	8009cd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009caa:	79fb      	ldrb	r3, [r7, #7]
 8009cac:	f003 021f 	and.w	r2, r3, #31
 8009cb0:	490a      	ldr	r1, [pc, #40]	@ (8009cdc <__NVIC_DisableIRQ+0x44>)
 8009cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cb6:	095b      	lsrs	r3, r3, #5
 8009cb8:	2001      	movs	r0, #1
 8009cba:	fa00 f202 	lsl.w	r2, r0, r2
 8009cbe:	3320      	adds	r3, #32
 8009cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009cc4:	f3bf 8f4f 	dsb	sy
}
 8009cc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009cca:	f3bf 8f6f 	isb	sy
}
 8009cce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	e000e100 	.word	0xe000e100

08009ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	6039      	str	r1, [r7, #0]
 8009cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	db0a      	blt.n	8009d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	490c      	ldr	r1, [pc, #48]	@ (8009d2c <__NVIC_SetPriority+0x4c>)
 8009cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cfe:	0112      	lsls	r2, r2, #4
 8009d00:	b2d2      	uxtb	r2, r2
 8009d02:	440b      	add	r3, r1
 8009d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009d08:	e00a      	b.n	8009d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	4908      	ldr	r1, [pc, #32]	@ (8009d30 <__NVIC_SetPriority+0x50>)
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	f003 030f 	and.w	r3, r3, #15
 8009d16:	3b04      	subs	r3, #4
 8009d18:	0112      	lsls	r2, r2, #4
 8009d1a:	b2d2      	uxtb	r2, r2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	761a      	strb	r2, [r3, #24]
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	e000e100 	.word	0xe000e100
 8009d30:	e000ed00 	.word	0xe000ed00

08009d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b089      	sub	sp, #36	@ 0x24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	f1c3 0307 	rsb	r3, r3, #7
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	bf28      	it	cs
 8009d52:	2304      	movcs	r3, #4
 8009d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	3304      	adds	r3, #4
 8009d5a:	2b06      	cmp	r3, #6
 8009d5c:	d902      	bls.n	8009d64 <NVIC_EncodePriority+0x30>
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	3b03      	subs	r3, #3
 8009d62:	e000      	b.n	8009d66 <NVIC_EncodePriority+0x32>
 8009d64:	2300      	movs	r3, #0
 8009d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d68:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d72:	43da      	mvns	r2, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	401a      	ands	r2, r3
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	fa01 f303 	lsl.w	r3, r1, r3
 8009d86:	43d9      	mvns	r1, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d8c:	4313      	orrs	r3, r2
         );
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3724      	adds	r7, #36	@ 0x24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
	...

08009d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	3b01      	subs	r3, #1
 8009da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dac:	d301      	bcc.n	8009db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009dae:	2301      	movs	r3, #1
 8009db0:	e00f      	b.n	8009dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009db2:	4a0a      	ldr	r2, [pc, #40]	@ (8009ddc <SysTick_Config+0x40>)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009dba:	210f      	movs	r1, #15
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	f7ff ff8e 	bl	8009ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009dc4:	4b05      	ldr	r3, [pc, #20]	@ (8009ddc <SysTick_Config+0x40>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009dca:	4b04      	ldr	r3, [pc, #16]	@ (8009ddc <SysTick_Config+0x40>)
 8009dcc:	2207      	movs	r2, #7
 8009dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	e000e010 	.word	0xe000e010

08009de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff ff05 	bl	8009bf8 <__NVIC_SetPriorityGrouping>
}
 8009dee:	bf00      	nop
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b086      	sub	sp, #24
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	607a      	str	r2, [r7, #4]
 8009e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009e08:	f7ff ff1a 	bl	8009c40 <__NVIC_GetPriorityGrouping>
 8009e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	6978      	ldr	r0, [r7, #20]
 8009e14:	f7ff ff8e 	bl	8009d34 <NVIC_EncodePriority>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e1e:	4611      	mov	r1, r2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff ff5d 	bl	8009ce0 <__NVIC_SetPriority>
}
 8009e26:	bf00      	nop
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b082      	sub	sp, #8
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	4603      	mov	r3, r0
 8009e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff ff0d 	bl	8009c5c <__NVIC_EnableIRQ>
}
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	4603      	mov	r3, r0
 8009e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7ff ff1d 	bl	8009c98 <__NVIC_DisableIRQ>
}
 8009e5e:	bf00      	nop
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff ff94 	bl	8009d9c <SysTick_Config>
 8009e74:	4603      	mov	r3, r0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009e8c:	f7ff fa98 	bl	80093c0 <HAL_GetTick>
 8009e90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d008      	beq.n	8009eb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2280      	movs	r2, #128	@ 0x80
 8009ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e052      	b.n	8009f56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0216 	bic.w	r2, r2, #22
 8009ebe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	695a      	ldr	r2, [r3, #20]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ece:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d103      	bne.n	8009ee0 <HAL_DMA_Abort+0x62>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d007      	beq.n	8009ef0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 0208 	bic.w	r2, r2, #8
 8009eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0201 	bic.w	r2, r2, #1
 8009efe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f00:	e013      	b.n	8009f2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f02:	f7ff fa5d 	bl	80093c0 <HAL_GetTick>
 8009f06:	4602      	mov	r2, r0
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	2b05      	cmp	r3, #5
 8009f0e:	d90c      	bls.n	8009f2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2220      	movs	r2, #32
 8009f14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2203      	movs	r2, #3
 8009f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e015      	b.n	8009f56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e4      	bne.n	8009f02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f3c:	223f      	movs	r2, #63	@ 0x3f
 8009f3e:	409a      	lsls	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d004      	beq.n	8009f7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2280      	movs	r2, #128	@ 0x80
 8009f76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e00c      	b.n	8009f96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2205      	movs	r2, #5
 8009f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0201 	bic.w	r2, r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
	...

08009fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b089      	sub	sp, #36	@ 0x24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61fb      	str	r3, [r7, #28]
 8009fbe:	e159      	b.n	800a274 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	f040 8148 	bne.w	800a26e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d005      	beq.n	8009ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d130      	bne.n	800a058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	2203      	movs	r2, #3
 800a002:	fa02 f303 	lsl.w	r3, r2, r3
 800a006:	43db      	mvns	r3, r3
 800a008:	69ba      	ldr	r2, [r7, #24]
 800a00a:	4013      	ands	r3, r2
 800a00c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	005b      	lsls	r3, r3, #1
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a02c:	2201      	movs	r2, #1
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	fa02 f303 	lsl.w	r3, r2, r3
 800a034:	43db      	mvns	r3, r3
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	4013      	ands	r3, r2
 800a03a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	091b      	lsrs	r3, r3, #4
 800a042:	f003 0201 	and.w	r2, r3, #1
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	fa02 f303 	lsl.w	r3, r2, r3
 800a04c:	69ba      	ldr	r2, [r7, #24]
 800a04e:	4313      	orrs	r3, r2
 800a050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69ba      	ldr	r2, [r7, #24]
 800a056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	2b03      	cmp	r3, #3
 800a062:	d017      	beq.n	800a094 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	2203      	movs	r2, #3
 800a070:	fa02 f303 	lsl.w	r3, r2, r3
 800a074:	43db      	mvns	r3, r3
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	4013      	ands	r3, r2
 800a07a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	fa02 f303 	lsl.w	r3, r2, r3
 800a088:	69ba      	ldr	r2, [r7, #24]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f003 0303 	and.w	r3, r3, #3
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d123      	bne.n	800a0e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	08da      	lsrs	r2, r3, #3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3208      	adds	r2, #8
 800a0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	220f      	movs	r2, #15
 800a0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	691a      	ldr	r2, [r3, #16]
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	f003 0307 	and.w	r3, r3, #7
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	08da      	lsrs	r2, r3, #3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	3208      	adds	r2, #8
 800a0e2:	69b9      	ldr	r1, [r7, #24]
 800a0e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f8:	43db      	mvns	r3, r3
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f003 0203 	and.w	r2, r3, #3
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	fa02 f303 	lsl.w	r3, r2, r3
 800a110:	69ba      	ldr	r2, [r7, #24]
 800a112:	4313      	orrs	r3, r2
 800a114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 80a2 	beq.w	800a26e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	4b57      	ldr	r3, [pc, #348]	@ (800a28c <HAL_GPIO_Init+0x2e8>)
 800a130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a132:	4a56      	ldr	r2, [pc, #344]	@ (800a28c <HAL_GPIO_Init+0x2e8>)
 800a134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a138:	6453      	str	r3, [r2, #68]	@ 0x44
 800a13a:	4b54      	ldr	r3, [pc, #336]	@ (800a28c <HAL_GPIO_Init+0x2e8>)
 800a13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a13e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a146:	4a52      	ldr	r2, [pc, #328]	@ (800a290 <HAL_GPIO_Init+0x2ec>)
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	089b      	lsrs	r3, r3, #2
 800a14c:	3302      	adds	r3, #2
 800a14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	220f      	movs	r2, #15
 800a15e:	fa02 f303 	lsl.w	r3, r2, r3
 800a162:	43db      	mvns	r3, r3
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	4013      	ands	r3, r2
 800a168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a49      	ldr	r2, [pc, #292]	@ (800a294 <HAL_GPIO_Init+0x2f0>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d019      	beq.n	800a1a6 <HAL_GPIO_Init+0x202>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a48      	ldr	r2, [pc, #288]	@ (800a298 <HAL_GPIO_Init+0x2f4>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d013      	beq.n	800a1a2 <HAL_GPIO_Init+0x1fe>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a47      	ldr	r2, [pc, #284]	@ (800a29c <HAL_GPIO_Init+0x2f8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d00d      	beq.n	800a19e <HAL_GPIO_Init+0x1fa>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a46      	ldr	r2, [pc, #280]	@ (800a2a0 <HAL_GPIO_Init+0x2fc>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d007      	beq.n	800a19a <HAL_GPIO_Init+0x1f6>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a45      	ldr	r2, [pc, #276]	@ (800a2a4 <HAL_GPIO_Init+0x300>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d101      	bne.n	800a196 <HAL_GPIO_Init+0x1f2>
 800a192:	2304      	movs	r3, #4
 800a194:	e008      	b.n	800a1a8 <HAL_GPIO_Init+0x204>
 800a196:	2307      	movs	r3, #7
 800a198:	e006      	b.n	800a1a8 <HAL_GPIO_Init+0x204>
 800a19a:	2303      	movs	r3, #3
 800a19c:	e004      	b.n	800a1a8 <HAL_GPIO_Init+0x204>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	e002      	b.n	800a1a8 <HAL_GPIO_Init+0x204>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e000      	b.n	800a1a8 <HAL_GPIO_Init+0x204>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	f002 0203 	and.w	r2, r2, #3
 800a1ae:	0092      	lsls	r2, r2, #2
 800a1b0:	4093      	lsls	r3, r2
 800a1b2:	69ba      	ldr	r2, [r7, #24]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1b8:	4935      	ldr	r1, [pc, #212]	@ (800a290 <HAL_GPIO_Init+0x2ec>)
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	089b      	lsrs	r3, r3, #2
 800a1be:	3302      	adds	r3, #2
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a1c6:	4b38      	ldr	r3, [pc, #224]	@ (800a2a8 <HAL_GPIO_Init+0x304>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	43db      	mvns	r3, r3
 800a1d0:	69ba      	ldr	r2, [r7, #24]
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a1ea:	4a2f      	ldr	r2, [pc, #188]	@ (800a2a8 <HAL_GPIO_Init+0x304>)
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a1f0:	4b2d      	ldr	r3, [pc, #180]	@ (800a2a8 <HAL_GPIO_Init+0x304>)
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	43db      	mvns	r3, r3
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a20c:	69ba      	ldr	r2, [r7, #24]
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	4313      	orrs	r3, r2
 800a212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a214:	4a24      	ldr	r2, [pc, #144]	@ (800a2a8 <HAL_GPIO_Init+0x304>)
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a21a:	4b23      	ldr	r3, [pc, #140]	@ (800a2a8 <HAL_GPIO_Init+0x304>)
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	43db      	mvns	r3, r3
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	4013      	ands	r3, r2
 800a228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a23e:	4a1a      	ldr	r2, [pc, #104]	@ (800a2a8 <HAL_GPIO_Init+0x304>)
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a244:	4b18      	ldr	r3, [pc, #96]	@ (800a2a8 <HAL_GPIO_Init+0x304>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	43db      	mvns	r3, r3
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	4013      	ands	r3, r2
 800a252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a260:	69ba      	ldr	r2, [r7, #24]
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	4313      	orrs	r3, r2
 800a266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a268:	4a0f      	ldr	r2, [pc, #60]	@ (800a2a8 <HAL_GPIO_Init+0x304>)
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	3301      	adds	r3, #1
 800a272:	61fb      	str	r3, [r7, #28]
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	2b0f      	cmp	r3, #15
 800a278:	f67f aea2 	bls.w	8009fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a27c:	bf00      	nop
 800a27e:	bf00      	nop
 800a280:	3724      	adds	r7, #36	@ 0x24
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	40023800 	.word	0x40023800
 800a290:	40013800 	.word	0x40013800
 800a294:	40020000 	.word	0x40020000
 800a298:	40020400 	.word	0x40020400
 800a29c:	40020800 	.word	0x40020800
 800a2a0:	40020c00 	.word	0x40020c00
 800a2a4:	40021000 	.word	0x40021000
 800a2a8:	40013c00 	.word	0x40013c00

0800a2ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]
 800a2c6:	e0bb      	b.n	800a440 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	f040 80ab 	bne.w	800a43a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a2e4:	4a5c      	ldr	r2, [pc, #368]	@ (800a458 <HAL_GPIO_DeInit+0x1ac>)
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	089b      	lsrs	r3, r3, #2
 800a2ea:	3302      	adds	r3, #2
 800a2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f003 0303 	and.w	r3, r3, #3
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	220f      	movs	r2, #15
 800a2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	4013      	ands	r3, r2
 800a304:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a54      	ldr	r2, [pc, #336]	@ (800a45c <HAL_GPIO_DeInit+0x1b0>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d019      	beq.n	800a342 <HAL_GPIO_DeInit+0x96>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a53      	ldr	r2, [pc, #332]	@ (800a460 <HAL_GPIO_DeInit+0x1b4>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d013      	beq.n	800a33e <HAL_GPIO_DeInit+0x92>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a52      	ldr	r2, [pc, #328]	@ (800a464 <HAL_GPIO_DeInit+0x1b8>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00d      	beq.n	800a33a <HAL_GPIO_DeInit+0x8e>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a51      	ldr	r2, [pc, #324]	@ (800a468 <HAL_GPIO_DeInit+0x1bc>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d007      	beq.n	800a336 <HAL_GPIO_DeInit+0x8a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a50      	ldr	r2, [pc, #320]	@ (800a46c <HAL_GPIO_DeInit+0x1c0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d101      	bne.n	800a332 <HAL_GPIO_DeInit+0x86>
 800a32e:	2304      	movs	r3, #4
 800a330:	e008      	b.n	800a344 <HAL_GPIO_DeInit+0x98>
 800a332:	2307      	movs	r3, #7
 800a334:	e006      	b.n	800a344 <HAL_GPIO_DeInit+0x98>
 800a336:	2303      	movs	r3, #3
 800a338:	e004      	b.n	800a344 <HAL_GPIO_DeInit+0x98>
 800a33a:	2302      	movs	r3, #2
 800a33c:	e002      	b.n	800a344 <HAL_GPIO_DeInit+0x98>
 800a33e:	2301      	movs	r3, #1
 800a340:	e000      	b.n	800a344 <HAL_GPIO_DeInit+0x98>
 800a342:	2300      	movs	r3, #0
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	f002 0203 	and.w	r2, r2, #3
 800a34a:	0092      	lsls	r2, r2, #2
 800a34c:	4093      	lsls	r3, r2
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	429a      	cmp	r2, r3
 800a352:	d132      	bne.n	800a3ba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a354:	4b46      	ldr	r3, [pc, #280]	@ (800a470 <HAL_GPIO_DeInit+0x1c4>)
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	43db      	mvns	r3, r3
 800a35c:	4944      	ldr	r1, [pc, #272]	@ (800a470 <HAL_GPIO_DeInit+0x1c4>)
 800a35e:	4013      	ands	r3, r2
 800a360:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a362:	4b43      	ldr	r3, [pc, #268]	@ (800a470 <HAL_GPIO_DeInit+0x1c4>)
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	43db      	mvns	r3, r3
 800a36a:	4941      	ldr	r1, [pc, #260]	@ (800a470 <HAL_GPIO_DeInit+0x1c4>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a370:	4b3f      	ldr	r3, [pc, #252]	@ (800a470 <HAL_GPIO_DeInit+0x1c4>)
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	43db      	mvns	r3, r3
 800a378:	493d      	ldr	r1, [pc, #244]	@ (800a470 <HAL_GPIO_DeInit+0x1c4>)
 800a37a:	4013      	ands	r3, r2
 800a37c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a37e:	4b3c      	ldr	r3, [pc, #240]	@ (800a470 <HAL_GPIO_DeInit+0x1c4>)
 800a380:	68da      	ldr	r2, [r3, #12]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	43db      	mvns	r3, r3
 800a386:	493a      	ldr	r1, [pc, #232]	@ (800a470 <HAL_GPIO_DeInit+0x1c4>)
 800a388:	4013      	ands	r3, r2
 800a38a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f003 0303 	and.w	r3, r3, #3
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	220f      	movs	r2, #15
 800a396:	fa02 f303 	lsl.w	r3, r2, r3
 800a39a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a39c:	4a2e      	ldr	r2, [pc, #184]	@ (800a458 <HAL_GPIO_DeInit+0x1ac>)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	089b      	lsrs	r3, r3, #2
 800a3a2:	3302      	adds	r3, #2
 800a3a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	43da      	mvns	r2, r3
 800a3ac:	482a      	ldr	r0, [pc, #168]	@ (800a458 <HAL_GPIO_DeInit+0x1ac>)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	089b      	lsrs	r3, r3, #2
 800a3b2:	400a      	ands	r2, r1
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	2103      	movs	r1, #3
 800a3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	401a      	ands	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	08da      	lsrs	r2, r3, #3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3208      	adds	r2, #8
 800a3d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	220f      	movs	r2, #15
 800a3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ea:	43db      	mvns	r3, r3
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	08d2      	lsrs	r2, r2, #3
 800a3f0:	4019      	ands	r1, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3208      	adds	r2, #8
 800a3f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	2103      	movs	r1, #3
 800a404:	fa01 f303 	lsl.w	r3, r1, r3
 800a408:	43db      	mvns	r3, r3
 800a40a:	401a      	ands	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	2101      	movs	r1, #1
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	fa01 f303 	lsl.w	r3, r1, r3
 800a41c:	43db      	mvns	r3, r3
 800a41e:	401a      	ands	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	2103      	movs	r1, #3
 800a42e:	fa01 f303 	lsl.w	r3, r1, r3
 800a432:	43db      	mvns	r3, r3
 800a434:	401a      	ands	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	3301      	adds	r3, #1
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2b0f      	cmp	r3, #15
 800a444:	f67f af40 	bls.w	800a2c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	371c      	adds	r7, #28
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	40013800 	.word	0x40013800
 800a45c:	40020000 	.word	0x40020000
 800a460:	40020400 	.word	0x40020400
 800a464:	40020800 	.word	0x40020800
 800a468:	40020c00 	.word	0x40020c00
 800a46c:	40021000 	.word	0x40021000
 800a470:	40013c00 	.word	0x40013c00

0800a474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	691a      	ldr	r2, [r3, #16]
 800a484:	887b      	ldrh	r3, [r7, #2]
 800a486:	4013      	ands	r3, r2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a48c:	2301      	movs	r3, #1
 800a48e:	73fb      	strb	r3, [r7, #15]
 800a490:	e001      	b.n	800a496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a496:	7bfb      	ldrb	r3, [r7, #15]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	807b      	strh	r3, [r7, #2]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a4b4:	787b      	ldrb	r3, [r7, #1]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a4ba:	887a      	ldrh	r2, [r7, #2]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a4c0:	e003      	b.n	800a4ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a4c2:	887b      	ldrh	r3, [r7, #2]
 800a4c4:	041a      	lsls	r2, r3, #16
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	619a      	str	r2, [r3, #24]
}
 800a4ca:	bf00      	nop
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b085      	sub	sp, #20
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a4e8:	887a      	ldrh	r2, [r7, #2]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	041a      	lsls	r2, r3, #16
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	43d9      	mvns	r1, r3
 800a4f4:	887b      	ldrh	r3, [r7, #2]
 800a4f6:	400b      	ands	r3, r1
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	619a      	str	r2, [r3, #24]
}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
	...

0800a50c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a516:	4b08      	ldr	r3, [pc, #32]	@ (800a538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a518:	695a      	ldr	r2, [r3, #20]
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	4013      	ands	r3, r2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d006      	beq.n	800a530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a522:	4a05      	ldr	r2, [pc, #20]	@ (800a538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a524:	88fb      	ldrh	r3, [r7, #6]
 800a526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fc f868 	bl	8006600 <HAL_GPIO_EXTI_Callback>
  }
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	40013c00 	.word	0x40013c00

0800a53c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e12b      	b.n	800a7a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7fb fce4 	bl	8005f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2224      	movs	r2, #36	@ 0x24
 800a56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0201 	bic.w	r2, r2, #1
 800a57e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a58e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a59e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a5a0:	f000 fd7e 	bl	800b0a0 <HAL_RCC_GetPCLK1Freq>
 800a5a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	4a81      	ldr	r2, [pc, #516]	@ (800a7b0 <HAL_I2C_Init+0x274>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d807      	bhi.n	800a5c0 <HAL_I2C_Init+0x84>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4a80      	ldr	r2, [pc, #512]	@ (800a7b4 <HAL_I2C_Init+0x278>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	bf94      	ite	ls
 800a5b8:	2301      	movls	r3, #1
 800a5ba:	2300      	movhi	r3, #0
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	e006      	b.n	800a5ce <HAL_I2C_Init+0x92>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4a7d      	ldr	r2, [pc, #500]	@ (800a7b8 <HAL_I2C_Init+0x27c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	bf94      	ite	ls
 800a5c8:	2301      	movls	r3, #1
 800a5ca:	2300      	movhi	r3, #0
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e0e7      	b.n	800a7a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4a78      	ldr	r2, [pc, #480]	@ (800a7bc <HAL_I2C_Init+0x280>)
 800a5da:	fba2 2303 	umull	r2, r3, r2, r3
 800a5de:	0c9b      	lsrs	r3, r3, #18
 800a5e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6a1b      	ldr	r3, [r3, #32]
 800a5fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	4a6a      	ldr	r2, [pc, #424]	@ (800a7b0 <HAL_I2C_Init+0x274>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d802      	bhi.n	800a610 <HAL_I2C_Init+0xd4>
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	3301      	adds	r3, #1
 800a60e:	e009      	b.n	800a624 <HAL_I2C_Init+0xe8>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a616:	fb02 f303 	mul.w	r3, r2, r3
 800a61a:	4a69      	ldr	r2, [pc, #420]	@ (800a7c0 <HAL_I2C_Init+0x284>)
 800a61c:	fba2 2303 	umull	r2, r3, r2, r3
 800a620:	099b      	lsrs	r3, r3, #6
 800a622:	3301      	adds	r3, #1
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	6812      	ldr	r2, [r2, #0]
 800a628:	430b      	orrs	r3, r1
 800a62a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a636:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	495c      	ldr	r1, [pc, #368]	@ (800a7b0 <HAL_I2C_Init+0x274>)
 800a640:	428b      	cmp	r3, r1
 800a642:	d819      	bhi.n	800a678 <HAL_I2C_Init+0x13c>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	1e59      	subs	r1, r3, #1
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a652:	1c59      	adds	r1, r3, #1
 800a654:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a658:	400b      	ands	r3, r1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00a      	beq.n	800a674 <HAL_I2C_Init+0x138>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	1e59      	subs	r1, r3, #1
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	005b      	lsls	r3, r3, #1
 800a668:	fbb1 f3f3 	udiv	r3, r1, r3
 800a66c:	3301      	adds	r3, #1
 800a66e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a672:	e051      	b.n	800a718 <HAL_I2C_Init+0x1dc>
 800a674:	2304      	movs	r3, #4
 800a676:	e04f      	b.n	800a718 <HAL_I2C_Init+0x1dc>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d111      	bne.n	800a6a4 <HAL_I2C_Init+0x168>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	1e58      	subs	r0, r3, #1
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6859      	ldr	r1, [r3, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	440b      	add	r3, r1
 800a68e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a692:	3301      	adds	r3, #1
 800a694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bf0c      	ite	eq
 800a69c:	2301      	moveq	r3, #1
 800a69e:	2300      	movne	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	e012      	b.n	800a6ca <HAL_I2C_Init+0x18e>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	1e58      	subs	r0, r3, #1
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6859      	ldr	r1, [r3, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	0099      	lsls	r1, r3, #2
 800a6b4:	440b      	add	r3, r1
 800a6b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bf0c      	ite	eq
 800a6c4:	2301      	moveq	r3, #1
 800a6c6:	2300      	movne	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <HAL_I2C_Init+0x196>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e022      	b.n	800a718 <HAL_I2C_Init+0x1dc>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10e      	bne.n	800a6f8 <HAL_I2C_Init+0x1bc>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	1e58      	subs	r0, r3, #1
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6859      	ldr	r1, [r3, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	005b      	lsls	r3, r3, #1
 800a6e6:	440b      	add	r3, r1
 800a6e8:	fbb0 f3f3 	udiv	r3, r0, r3
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6f6:	e00f      	b.n	800a718 <HAL_I2C_Init+0x1dc>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	1e58      	subs	r0, r3, #1
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6859      	ldr	r1, [r3, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	440b      	add	r3, r1
 800a706:	0099      	lsls	r1, r3, #2
 800a708:	440b      	add	r3, r1
 800a70a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a70e:	3301      	adds	r3, #1
 800a710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a714:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	6809      	ldr	r1, [r1, #0]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69da      	ldr	r2, [r3, #28]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	431a      	orrs	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a746:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	6911      	ldr	r1, [r2, #16]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	68d2      	ldr	r2, [r2, #12]
 800a752:	4311      	orrs	r1, r2
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	6812      	ldr	r2, [r2, #0]
 800a758:	430b      	orrs	r3, r1
 800a75a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	695a      	ldr	r2, [r3, #20]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	431a      	orrs	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f042 0201 	orr.w	r2, r2, #1
 800a786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2220      	movs	r2, #32
 800a792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	000186a0 	.word	0x000186a0
 800a7b4:	001e847f 	.word	0x001e847f
 800a7b8:	003d08ff 	.word	0x003d08ff
 800a7bc:	431bde83 	.word	0x431bde83
 800a7c0:	10624dd3 	.word	0x10624dd3

0800a7c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e267      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d075      	beq.n	800a8ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a7e2:	4b88      	ldr	r3, [pc, #544]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f003 030c 	and.w	r3, r3, #12
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d00c      	beq.n	800a808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7ee:	4b85      	ldr	r3, [pc, #532]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a7f6:	2b08      	cmp	r3, #8
 800a7f8:	d112      	bne.n	800a820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a7fa:	4b82      	ldr	r3, [pc, #520]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a806:	d10b      	bne.n	800a820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a808:	4b7e      	ldr	r3, [pc, #504]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d05b      	beq.n	800a8cc <HAL_RCC_OscConfig+0x108>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d157      	bne.n	800a8cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e242      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a828:	d106      	bne.n	800a838 <HAL_RCC_OscConfig+0x74>
 800a82a:	4b76      	ldr	r3, [pc, #472]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a75      	ldr	r2, [pc, #468]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	e01d      	b.n	800a874 <HAL_RCC_OscConfig+0xb0>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a840:	d10c      	bne.n	800a85c <HAL_RCC_OscConfig+0x98>
 800a842:	4b70      	ldr	r3, [pc, #448]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a6f      	ldr	r2, [pc, #444]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	4b6d      	ldr	r3, [pc, #436]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a6c      	ldr	r2, [pc, #432]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	e00b      	b.n	800a874 <HAL_RCC_OscConfig+0xb0>
 800a85c:	4b69      	ldr	r3, [pc, #420]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a68      	ldr	r2, [pc, #416]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	4b66      	ldr	r3, [pc, #408]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a65      	ldr	r2, [pc, #404]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a86e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d013      	beq.n	800a8a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a87c:	f7fe fda0 	bl	80093c0 <HAL_GetTick>
 800a880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a882:	e008      	b.n	800a896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a884:	f7fe fd9c 	bl	80093c0 <HAL_GetTick>
 800a888:	4602      	mov	r2, r0
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	2b64      	cmp	r3, #100	@ 0x64
 800a890:	d901      	bls.n	800a896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	e207      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a896:	4b5b      	ldr	r3, [pc, #364]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0f0      	beq.n	800a884 <HAL_RCC_OscConfig+0xc0>
 800a8a2:	e014      	b.n	800a8ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8a4:	f7fe fd8c 	bl	80093c0 <HAL_GetTick>
 800a8a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8aa:	e008      	b.n	800a8be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8ac:	f7fe fd88 	bl	80093c0 <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	2b64      	cmp	r3, #100	@ 0x64
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e1f3      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8be:	4b51      	ldr	r3, [pc, #324]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1f0      	bne.n	800a8ac <HAL_RCC_OscConfig+0xe8>
 800a8ca:	e000      	b.n	800a8ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d063      	beq.n	800a9a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a8da:	4b4a      	ldr	r3, [pc, #296]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f003 030c 	and.w	r3, r3, #12
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00b      	beq.n	800a8fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8e6:	4b47      	ldr	r3, [pc, #284]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a8ee:	2b08      	cmp	r3, #8
 800a8f0:	d11c      	bne.n	800a92c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a8f2:	4b44      	ldr	r3, [pc, #272]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d116      	bne.n	800a92c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8fe:	4b41      	ldr	r3, [pc, #260]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0302 	and.w	r3, r3, #2
 800a906:	2b00      	cmp	r3, #0
 800a908:	d005      	beq.n	800a916 <HAL_RCC_OscConfig+0x152>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d001      	beq.n	800a916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e1c7      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a916:	4b3b      	ldr	r3, [pc, #236]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	4937      	ldr	r1, [pc, #220]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a926:	4313      	orrs	r3, r2
 800a928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a92a:	e03a      	b.n	800a9a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d020      	beq.n	800a976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a934:	4b34      	ldr	r3, [pc, #208]	@ (800aa08 <HAL_RCC_OscConfig+0x244>)
 800a936:	2201      	movs	r2, #1
 800a938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a93a:	f7fe fd41 	bl	80093c0 <HAL_GetTick>
 800a93e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a940:	e008      	b.n	800a954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a942:	f7fe fd3d 	bl	80093c0 <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d901      	bls.n	800a954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e1a8      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a954:	4b2b      	ldr	r3, [pc, #172]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d0f0      	beq.n	800a942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a960:	4b28      	ldr	r3, [pc, #160]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	4925      	ldr	r1, [pc, #148]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a970:	4313      	orrs	r3, r2
 800a972:	600b      	str	r3, [r1, #0]
 800a974:	e015      	b.n	800a9a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a976:	4b24      	ldr	r3, [pc, #144]	@ (800aa08 <HAL_RCC_OscConfig+0x244>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a97c:	f7fe fd20 	bl	80093c0 <HAL_GetTick>
 800a980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a982:	e008      	b.n	800a996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a984:	f7fe fd1c 	bl	80093c0 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d901      	bls.n	800a996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e187      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a996:	4b1b      	ldr	r3, [pc, #108]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 0302 	and.w	r3, r3, #2
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1f0      	bne.n	800a984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0308 	and.w	r3, r3, #8
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d036      	beq.n	800aa1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	695b      	ldr	r3, [r3, #20]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d016      	beq.n	800a9e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9b6:	4b15      	ldr	r3, [pc, #84]	@ (800aa0c <HAL_RCC_OscConfig+0x248>)
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9bc:	f7fe fd00 	bl	80093c0 <HAL_GetTick>
 800a9c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9c2:	e008      	b.n	800a9d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9c4:	f7fe fcfc 	bl	80093c0 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e167      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800aa04 <HAL_RCC_OscConfig+0x240>)
 800a9d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0f0      	beq.n	800a9c4 <HAL_RCC_OscConfig+0x200>
 800a9e2:	e01b      	b.n	800aa1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9e4:	4b09      	ldr	r3, [pc, #36]	@ (800aa0c <HAL_RCC_OscConfig+0x248>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9ea:	f7fe fce9 	bl	80093c0 <HAL_GetTick>
 800a9ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9f0:	e00e      	b.n	800aa10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a9f2:	f7fe fce5 	bl	80093c0 <HAL_GetTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d907      	bls.n	800aa10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e150      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
 800aa04:	40023800 	.word	0x40023800
 800aa08:	42470000 	.word	0x42470000
 800aa0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa10:	4b88      	ldr	r3, [pc, #544]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aa12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1ea      	bne.n	800a9f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 8097 	beq.w	800ab58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa2e:	4b81      	ldr	r3, [pc, #516]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aa30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10f      	bne.n	800aa5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60bb      	str	r3, [r7, #8]
 800aa3e:	4b7d      	ldr	r3, [pc, #500]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aa40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa42:	4a7c      	ldr	r2, [pc, #496]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aa44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa48:	6413      	str	r3, [r2, #64]	@ 0x40
 800aa4a:	4b7a      	ldr	r3, [pc, #488]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa52:	60bb      	str	r3, [r7, #8]
 800aa54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa56:	2301      	movs	r3, #1
 800aa58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa5a:	4b77      	ldr	r3, [pc, #476]	@ (800ac38 <HAL_RCC_OscConfig+0x474>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d118      	bne.n	800aa98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa66:	4b74      	ldr	r3, [pc, #464]	@ (800ac38 <HAL_RCC_OscConfig+0x474>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a73      	ldr	r2, [pc, #460]	@ (800ac38 <HAL_RCC_OscConfig+0x474>)
 800aa6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa72:	f7fe fca5 	bl	80093c0 <HAL_GetTick>
 800aa76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa78:	e008      	b.n	800aa8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa7a:	f7fe fca1 	bl	80093c0 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d901      	bls.n	800aa8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e10c      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa8c:	4b6a      	ldr	r3, [pc, #424]	@ (800ac38 <HAL_RCC_OscConfig+0x474>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d0f0      	beq.n	800aa7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d106      	bne.n	800aaae <HAL_RCC_OscConfig+0x2ea>
 800aaa0:	4b64      	ldr	r3, [pc, #400]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aaa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaa4:	4a63      	ldr	r2, [pc, #396]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	6713      	str	r3, [r2, #112]	@ 0x70
 800aaac:	e01c      	b.n	800aae8 <HAL_RCC_OscConfig+0x324>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	2b05      	cmp	r3, #5
 800aab4:	d10c      	bne.n	800aad0 <HAL_RCC_OscConfig+0x30c>
 800aab6:	4b5f      	ldr	r3, [pc, #380]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaba:	4a5e      	ldr	r2, [pc, #376]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aabc:	f043 0304 	orr.w	r3, r3, #4
 800aac0:	6713      	str	r3, [r2, #112]	@ 0x70
 800aac2:	4b5c      	ldr	r3, [pc, #368]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aac6:	4a5b      	ldr	r2, [pc, #364]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aac8:	f043 0301 	orr.w	r3, r3, #1
 800aacc:	6713      	str	r3, [r2, #112]	@ 0x70
 800aace:	e00b      	b.n	800aae8 <HAL_RCC_OscConfig+0x324>
 800aad0:	4b58      	ldr	r3, [pc, #352]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aad4:	4a57      	ldr	r2, [pc, #348]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aad6:	f023 0301 	bic.w	r3, r3, #1
 800aada:	6713      	str	r3, [r2, #112]	@ 0x70
 800aadc:	4b55      	ldr	r3, [pc, #340]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aae0:	4a54      	ldr	r2, [pc, #336]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800aae2:	f023 0304 	bic.w	r3, r3, #4
 800aae6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d015      	beq.n	800ab1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaf0:	f7fe fc66 	bl	80093c0 <HAL_GetTick>
 800aaf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaf6:	e00a      	b.n	800ab0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aaf8:	f7fe fc62 	bl	80093c0 <HAL_GetTick>
 800aafc:	4602      	mov	r2, r0
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d901      	bls.n	800ab0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e0cb      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab0e:	4b49      	ldr	r3, [pc, #292]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800ab10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0ee      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x334>
 800ab1a:	e014      	b.n	800ab46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab1c:	f7fe fc50 	bl	80093c0 <HAL_GetTick>
 800ab20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab22:	e00a      	b.n	800ab3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab24:	f7fe fc4c 	bl	80093c0 <HAL_GetTick>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d901      	bls.n	800ab3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e0b5      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab3a:	4b3e      	ldr	r3, [pc, #248]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800ab3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab3e:	f003 0302 	and.w	r3, r3, #2
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1ee      	bne.n	800ab24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d105      	bne.n	800ab58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab4c:	4b39      	ldr	r3, [pc, #228]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab50:	4a38      	ldr	r2, [pc, #224]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800ab52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 80a1 	beq.w	800aca4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ab62:	4b34      	ldr	r3, [pc, #208]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f003 030c 	and.w	r3, r3, #12
 800ab6a:	2b08      	cmp	r3, #8
 800ab6c:	d05c      	beq.n	800ac28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d141      	bne.n	800abfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab76:	4b31      	ldr	r3, [pc, #196]	@ (800ac3c <HAL_RCC_OscConfig+0x478>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab7c:	f7fe fc20 	bl	80093c0 <HAL_GetTick>
 800ab80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab82:	e008      	b.n	800ab96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab84:	f7fe fc1c 	bl	80093c0 <HAL_GetTick>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d901      	bls.n	800ab96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e087      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab96:	4b27      	ldr	r3, [pc, #156]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1f0      	bne.n	800ab84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	69da      	ldr	r2, [r3, #28]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	431a      	orrs	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb0:	019b      	lsls	r3, r3, #6
 800abb2:	431a      	orrs	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb8:	085b      	lsrs	r3, r3, #1
 800abba:	3b01      	subs	r3, #1
 800abbc:	041b      	lsls	r3, r3, #16
 800abbe:	431a      	orrs	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abc4:	061b      	lsls	r3, r3, #24
 800abc6:	491b      	ldr	r1, [pc, #108]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800abc8:	4313      	orrs	r3, r2
 800abca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800abcc:	4b1b      	ldr	r3, [pc, #108]	@ (800ac3c <HAL_RCC_OscConfig+0x478>)
 800abce:	2201      	movs	r2, #1
 800abd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abd2:	f7fe fbf5 	bl	80093c0 <HAL_GetTick>
 800abd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abd8:	e008      	b.n	800abec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abda:	f7fe fbf1 	bl	80093c0 <HAL_GetTick>
 800abde:	4602      	mov	r2, r0
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d901      	bls.n	800abec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e05c      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abec:	4b11      	ldr	r3, [pc, #68]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d0f0      	beq.n	800abda <HAL_RCC_OscConfig+0x416>
 800abf8:	e054      	b.n	800aca4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abfa:	4b10      	ldr	r3, [pc, #64]	@ (800ac3c <HAL_RCC_OscConfig+0x478>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac00:	f7fe fbde 	bl	80093c0 <HAL_GetTick>
 800ac04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac06:	e008      	b.n	800ac1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac08:	f7fe fbda 	bl	80093c0 <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d901      	bls.n	800ac1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e045      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac1a:	4b06      	ldr	r3, [pc, #24]	@ (800ac34 <HAL_RCC_OscConfig+0x470>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1f0      	bne.n	800ac08 <HAL_RCC_OscConfig+0x444>
 800ac26:	e03d      	b.n	800aca4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d107      	bne.n	800ac40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e038      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
 800ac34:	40023800 	.word	0x40023800
 800ac38:	40007000 	.word	0x40007000
 800ac3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ac40:	4b1b      	ldr	r3, [pc, #108]	@ (800acb0 <HAL_RCC_OscConfig+0x4ec>)
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d028      	beq.n	800aca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d121      	bne.n	800aca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d11a      	bne.n	800aca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ac70:	4013      	ands	r3, r2
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ac76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d111      	bne.n	800aca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac86:	085b      	lsrs	r3, r3, #1
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d107      	bne.n	800aca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d001      	beq.n	800aca4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e000      	b.n	800aca6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	40023800 	.word	0x40023800

0800acb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e0cc      	b.n	800ae62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800acc8:	4b68      	ldr	r3, [pc, #416]	@ (800ae6c <HAL_RCC_ClockConfig+0x1b8>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0307 	and.w	r3, r3, #7
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d90c      	bls.n	800acf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acd6:	4b65      	ldr	r3, [pc, #404]	@ (800ae6c <HAL_RCC_ClockConfig+0x1b8>)
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	b2d2      	uxtb	r2, r2
 800acdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acde:	4b63      	ldr	r3, [pc, #396]	@ (800ae6c <HAL_RCC_ClockConfig+0x1b8>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d001      	beq.n	800acf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e0b8      	b.n	800ae62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0302 	and.w	r3, r3, #2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d020      	beq.n	800ad3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d005      	beq.n	800ad14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad08:	4b59      	ldr	r3, [pc, #356]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	4a58      	ldr	r2, [pc, #352]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ad12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0308 	and.w	r3, r3, #8
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d005      	beq.n	800ad2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad20:	4b53      	ldr	r3, [pc, #332]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	4a52      	ldr	r2, [pc, #328]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ad2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad2c:	4b50      	ldr	r3, [pc, #320]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	494d      	ldr	r1, [pc, #308]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d044      	beq.n	800add4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d107      	bne.n	800ad62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad52:	4b47      	ldr	r3, [pc, #284]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d119      	bne.n	800ad92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e07f      	b.n	800ae62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d003      	beq.n	800ad72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad6e:	2b03      	cmp	r3, #3
 800ad70:	d107      	bne.n	800ad82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad72:	4b3f      	ldr	r3, [pc, #252]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d109      	bne.n	800ad92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e06f      	b.n	800ae62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad82:	4b3b      	ldr	r3, [pc, #236]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e067      	b.n	800ae62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad92:	4b37      	ldr	r3, [pc, #220]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f023 0203 	bic.w	r2, r3, #3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	4934      	ldr	r1, [pc, #208]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ada4:	f7fe fb0c 	bl	80093c0 <HAL_GetTick>
 800ada8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adaa:	e00a      	b.n	800adc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adac:	f7fe fb08 	bl	80093c0 <HAL_GetTick>
 800adb0:	4602      	mov	r2, r0
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adba:	4293      	cmp	r3, r2
 800adbc:	d901      	bls.n	800adc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800adbe:	2303      	movs	r3, #3
 800adc0:	e04f      	b.n	800ae62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f003 020c 	and.w	r2, r3, #12
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	429a      	cmp	r2, r3
 800add2:	d1eb      	bne.n	800adac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800add4:	4b25      	ldr	r3, [pc, #148]	@ (800ae6c <HAL_RCC_ClockConfig+0x1b8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d20c      	bcs.n	800adfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ade2:	4b22      	ldr	r3, [pc, #136]	@ (800ae6c <HAL_RCC_ClockConfig+0x1b8>)
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adea:	4b20      	ldr	r3, [pc, #128]	@ (800ae6c <HAL_RCC_ClockConfig+0x1b8>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 0307 	and.w	r3, r3, #7
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d001      	beq.n	800adfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e032      	b.n	800ae62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d008      	beq.n	800ae1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae08:	4b19      	ldr	r3, [pc, #100]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	4916      	ldr	r1, [pc, #88]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ae16:	4313      	orrs	r3, r2
 800ae18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0308 	and.w	r3, r3, #8
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae26:	4b12      	ldr	r3, [pc, #72]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	490e      	ldr	r1, [pc, #56]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae3a:	f000 f821 	bl	800ae80 <HAL_RCC_GetSysClockFreq>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	4b0b      	ldr	r3, [pc, #44]	@ (800ae70 <HAL_RCC_ClockConfig+0x1bc>)
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	091b      	lsrs	r3, r3, #4
 800ae46:	f003 030f 	and.w	r3, r3, #15
 800ae4a:	490a      	ldr	r1, [pc, #40]	@ (800ae74 <HAL_RCC_ClockConfig+0x1c0>)
 800ae4c:	5ccb      	ldrb	r3, [r1, r3]
 800ae4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae52:	4a09      	ldr	r2, [pc, #36]	@ (800ae78 <HAL_RCC_ClockConfig+0x1c4>)
 800ae54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae56:	4b09      	ldr	r3, [pc, #36]	@ (800ae7c <HAL_RCC_ClockConfig+0x1c8>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fa6c 	bl	8009338 <HAL_InitTick>

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	40023c00 	.word	0x40023c00
 800ae70:	40023800 	.word	0x40023800
 800ae74:	08011c24 	.word	0x08011c24
 800ae78:	20000028 	.word	0x20000028
 800ae7c:	200000bc 	.word	0x200000bc

0800ae80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae84:	b094      	sub	sp, #80	@ 0x50
 800ae86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae90:	2300      	movs	r3, #0
 800ae92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ae94:	2300      	movs	r3, #0
 800ae96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae98:	4b79      	ldr	r3, [pc, #484]	@ (800b080 <HAL_RCC_GetSysClockFreq+0x200>)
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	f003 030c 	and.w	r3, r3, #12
 800aea0:	2b08      	cmp	r3, #8
 800aea2:	d00d      	beq.n	800aec0 <HAL_RCC_GetSysClockFreq+0x40>
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	f200 80e1 	bhi.w	800b06c <HAL_RCC_GetSysClockFreq+0x1ec>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <HAL_RCC_GetSysClockFreq+0x34>
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d003      	beq.n	800aeba <HAL_RCC_GetSysClockFreq+0x3a>
 800aeb2:	e0db      	b.n	800b06c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aeb4:	4b73      	ldr	r3, [pc, #460]	@ (800b084 <HAL_RCC_GetSysClockFreq+0x204>)
 800aeb6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800aeb8:	e0db      	b.n	800b072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aeba:	4b72      	ldr	r3, [pc, #456]	@ (800b084 <HAL_RCC_GetSysClockFreq+0x204>)
 800aebc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aebe:	e0d8      	b.n	800b072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aec0:	4b6f      	ldr	r3, [pc, #444]	@ (800b080 <HAL_RCC_GetSysClockFreq+0x200>)
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aec8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aeca:	4b6d      	ldr	r3, [pc, #436]	@ (800b080 <HAL_RCC_GetSysClockFreq+0x200>)
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d063      	beq.n	800af9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aed6:	4b6a      	ldr	r3, [pc, #424]	@ (800b080 <HAL_RCC_GetSysClockFreq+0x200>)
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	099b      	lsrs	r3, r3, #6
 800aedc:	2200      	movs	r2, #0
 800aede:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aee0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800aee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee8:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeea:	2300      	movs	r3, #0
 800aeec:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800aef2:	4622      	mov	r2, r4
 800aef4:	462b      	mov	r3, r5
 800aef6:	f04f 0000 	mov.w	r0, #0
 800aefa:	f04f 0100 	mov.w	r1, #0
 800aefe:	0159      	lsls	r1, r3, #5
 800af00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af04:	0150      	lsls	r0, r2, #5
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	4621      	mov	r1, r4
 800af0c:	1a51      	subs	r1, r2, r1
 800af0e:	6139      	str	r1, [r7, #16]
 800af10:	4629      	mov	r1, r5
 800af12:	eb63 0301 	sbc.w	r3, r3, r1
 800af16:	617b      	str	r3, [r7, #20]
 800af18:	f04f 0200 	mov.w	r2, #0
 800af1c:	f04f 0300 	mov.w	r3, #0
 800af20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af24:	4659      	mov	r1, fp
 800af26:	018b      	lsls	r3, r1, #6
 800af28:	4651      	mov	r1, sl
 800af2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800af2e:	4651      	mov	r1, sl
 800af30:	018a      	lsls	r2, r1, #6
 800af32:	4651      	mov	r1, sl
 800af34:	ebb2 0801 	subs.w	r8, r2, r1
 800af38:	4659      	mov	r1, fp
 800af3a:	eb63 0901 	sbc.w	r9, r3, r1
 800af3e:	f04f 0200 	mov.w	r2, #0
 800af42:	f04f 0300 	mov.w	r3, #0
 800af46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af52:	4690      	mov	r8, r2
 800af54:	4699      	mov	r9, r3
 800af56:	4623      	mov	r3, r4
 800af58:	eb18 0303 	adds.w	r3, r8, r3
 800af5c:	60bb      	str	r3, [r7, #8]
 800af5e:	462b      	mov	r3, r5
 800af60:	eb49 0303 	adc.w	r3, r9, r3
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	f04f 0200 	mov.w	r2, #0
 800af6a:	f04f 0300 	mov.w	r3, #0
 800af6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800af72:	4629      	mov	r1, r5
 800af74:	028b      	lsls	r3, r1, #10
 800af76:	4621      	mov	r1, r4
 800af78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800af7c:	4621      	mov	r1, r4
 800af7e:	028a      	lsls	r2, r1, #10
 800af80:	4610      	mov	r0, r2
 800af82:	4619      	mov	r1, r3
 800af84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af86:	2200      	movs	r2, #0
 800af88:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800af90:	f7f5 fe32 	bl	8000bf8 <__aeabi_uldivmod>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	4613      	mov	r3, r2
 800af9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af9c:	e058      	b.n	800b050 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af9e:	4b38      	ldr	r3, [pc, #224]	@ (800b080 <HAL_RCC_GetSysClockFreq+0x200>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	099b      	lsrs	r3, r3, #6
 800afa4:	2200      	movs	r2, #0
 800afa6:	4618      	mov	r0, r3
 800afa8:	4611      	mov	r1, r2
 800afaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800afae:	623b      	str	r3, [r7, #32]
 800afb0:	2300      	movs	r3, #0
 800afb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800afb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800afb8:	4642      	mov	r2, r8
 800afba:	464b      	mov	r3, r9
 800afbc:	f04f 0000 	mov.w	r0, #0
 800afc0:	f04f 0100 	mov.w	r1, #0
 800afc4:	0159      	lsls	r1, r3, #5
 800afc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800afca:	0150      	lsls	r0, r2, #5
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	4641      	mov	r1, r8
 800afd2:	ebb2 0a01 	subs.w	sl, r2, r1
 800afd6:	4649      	mov	r1, r9
 800afd8:	eb63 0b01 	sbc.w	fp, r3, r1
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	f04f 0300 	mov.w	r3, #0
 800afe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800afe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800afec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800aff0:	ebb2 040a 	subs.w	r4, r2, sl
 800aff4:	eb63 050b 	sbc.w	r5, r3, fp
 800aff8:	f04f 0200 	mov.w	r2, #0
 800affc:	f04f 0300 	mov.w	r3, #0
 800b000:	00eb      	lsls	r3, r5, #3
 800b002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b006:	00e2      	lsls	r2, r4, #3
 800b008:	4614      	mov	r4, r2
 800b00a:	461d      	mov	r5, r3
 800b00c:	4643      	mov	r3, r8
 800b00e:	18e3      	adds	r3, r4, r3
 800b010:	603b      	str	r3, [r7, #0]
 800b012:	464b      	mov	r3, r9
 800b014:	eb45 0303 	adc.w	r3, r5, r3
 800b018:	607b      	str	r3, [r7, #4]
 800b01a:	f04f 0200 	mov.w	r2, #0
 800b01e:	f04f 0300 	mov.w	r3, #0
 800b022:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b026:	4629      	mov	r1, r5
 800b028:	028b      	lsls	r3, r1, #10
 800b02a:	4621      	mov	r1, r4
 800b02c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b030:	4621      	mov	r1, r4
 800b032:	028a      	lsls	r2, r1, #10
 800b034:	4610      	mov	r0, r2
 800b036:	4619      	mov	r1, r3
 800b038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b03a:	2200      	movs	r2, #0
 800b03c:	61bb      	str	r3, [r7, #24]
 800b03e:	61fa      	str	r2, [r7, #28]
 800b040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b044:	f7f5 fdd8 	bl	8000bf8 <__aeabi_uldivmod>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4613      	mov	r3, r2
 800b04e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b050:	4b0b      	ldr	r3, [pc, #44]	@ (800b080 <HAL_RCC_GetSysClockFreq+0x200>)
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	0c1b      	lsrs	r3, r3, #16
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	3301      	adds	r3, #1
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800b060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b064:	fbb2 f3f3 	udiv	r3, r2, r3
 800b068:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b06a:	e002      	b.n	800b072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b06c:	4b05      	ldr	r3, [pc, #20]	@ (800b084 <HAL_RCC_GetSysClockFreq+0x204>)
 800b06e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b070:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b074:	4618      	mov	r0, r3
 800b076:	3750      	adds	r7, #80	@ 0x50
 800b078:	46bd      	mov	sp, r7
 800b07a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b07e:	bf00      	nop
 800b080:	40023800 	.word	0x40023800
 800b084:	00f42400 	.word	0x00f42400

0800b088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b08c:	4b03      	ldr	r3, [pc, #12]	@ (800b09c <HAL_RCC_GetHCLKFreq+0x14>)
 800b08e:	681b      	ldr	r3, [r3, #0]
}
 800b090:	4618      	mov	r0, r3
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	20000028 	.word	0x20000028

0800b0a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b0a4:	f7ff fff0 	bl	800b088 <HAL_RCC_GetHCLKFreq>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	4b05      	ldr	r3, [pc, #20]	@ (800b0c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	0a9b      	lsrs	r3, r3, #10
 800b0b0:	f003 0307 	and.w	r3, r3, #7
 800b0b4:	4903      	ldr	r1, [pc, #12]	@ (800b0c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0b6:	5ccb      	ldrb	r3, [r1, r3]
 800b0b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	40023800 	.word	0x40023800
 800b0c4:	08011c34 	.word	0x08011c34

0800b0c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b0cc:	f7ff ffdc 	bl	800b088 <HAL_RCC_GetHCLKFreq>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	4b05      	ldr	r3, [pc, #20]	@ (800b0e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	0b5b      	lsrs	r3, r3, #13
 800b0d8:	f003 0307 	and.w	r3, r3, #7
 800b0dc:	4903      	ldr	r1, [pc, #12]	@ (800b0ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0de:	5ccb      	ldrb	r3, [r1, r3]
 800b0e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	40023800 	.word	0x40023800
 800b0ec:	08011c34 	.word	0x08011c34

0800b0f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e07b      	b.n	800b1fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b106:	2b00      	cmp	r3, #0
 800b108:	d108      	bne.n	800b11c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b112:	d009      	beq.n	800b128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	61da      	str	r2, [r3, #28]
 800b11a:	e005      	b.n	800b128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7fa ff4c 	bl	8005fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b15e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b170:	431a      	orrs	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b17a:	431a      	orrs	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	f003 0302 	and.w	r3, r3, #2
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	431a      	orrs	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a1b      	ldr	r3, [r3, #32]
 800b1a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1ac:	ea42 0103 	orr.w	r1, r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	0c1b      	lsrs	r3, r3, #16
 800b1c6:	f003 0104 	and.w	r1, r3, #4
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ce:	f003 0210 	and.w	r2, r3, #16
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	430a      	orrs	r2, r1
 800b1d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	69da      	ldr	r2, [r3, #28]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b1e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e01a      	b.n	800b24a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2202      	movs	r2, #2
 800b218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b22a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7fa ff75 	bl	800611c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b088      	sub	sp, #32
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	60b9      	str	r1, [r7, #8]
 800b25c:	603b      	str	r3, [r7, #0]
 800b25e:	4613      	mov	r3, r2
 800b260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d101      	bne.n	800b274 <HAL_SPI_Transmit+0x22>
 800b270:	2302      	movs	r3, #2
 800b272:	e126      	b.n	800b4c2 <HAL_SPI_Transmit+0x270>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b27c:	f7fe f8a0 	bl	80093c0 <HAL_GetTick>
 800b280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b282:	88fb      	ldrh	r3, [r7, #6]
 800b284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d002      	beq.n	800b298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b292:	2302      	movs	r3, #2
 800b294:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b296:	e10b      	b.n	800b4b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <HAL_SPI_Transmit+0x52>
 800b29e:	88fb      	ldrh	r3, [r7, #6]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d102      	bne.n	800b2aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b2a8:	e102      	b.n	800b4b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	88fa      	ldrh	r2, [r7, #6]
 800b2c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	88fa      	ldrh	r2, [r7, #6]
 800b2c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2f0:	d10f      	bne.n	800b312 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b310:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b31c:	2b40      	cmp	r3, #64	@ 0x40
 800b31e:	d007      	beq.n	800b330 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b32e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b338:	d14b      	bne.n	800b3d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <HAL_SPI_Transmit+0xf6>
 800b342:	8afb      	ldrh	r3, [r7, #22]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d13e      	bne.n	800b3c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b34c:	881a      	ldrh	r2, [r3, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b358:	1c9a      	adds	r2, r3, #2
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b362:	b29b      	uxth	r3, r3
 800b364:	3b01      	subs	r3, #1
 800b366:	b29a      	uxth	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b36c:	e02b      	b.n	800b3c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f003 0302 	and.w	r3, r3, #2
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d112      	bne.n	800b3a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b380:	881a      	ldrh	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b38c:	1c9a      	adds	r2, r3, #2
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b396:	b29b      	uxth	r3, r3
 800b398:	3b01      	subs	r3, #1
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b3a0:	e011      	b.n	800b3c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3a2:	f7fe f80d 	bl	80093c0 <HAL_GetTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d803      	bhi.n	800b3ba <HAL_SPI_Transmit+0x168>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b8:	d102      	bne.n	800b3c0 <HAL_SPI_Transmit+0x16e>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b3c4:	e074      	b.n	800b4b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1ce      	bne.n	800b36e <HAL_SPI_Transmit+0x11c>
 800b3d0:	e04c      	b.n	800b46c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <HAL_SPI_Transmit+0x18e>
 800b3da:	8afb      	ldrh	r3, [r7, #22]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d140      	bne.n	800b462 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	330c      	adds	r3, #12
 800b3ea:	7812      	ldrb	r2, [r2, #0]
 800b3ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	3b01      	subs	r3, #1
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b406:	e02c      	b.n	800b462 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b02      	cmp	r3, #2
 800b414:	d113      	bne.n	800b43e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	330c      	adds	r3, #12
 800b420:	7812      	ldrb	r2, [r2, #0]
 800b422:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b432:	b29b      	uxth	r3, r3
 800b434:	3b01      	subs	r3, #1
 800b436:	b29a      	uxth	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b43c:	e011      	b.n	800b462 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b43e:	f7fd ffbf 	bl	80093c0 <HAL_GetTick>
 800b442:	4602      	mov	r2, r0
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d803      	bhi.n	800b456 <HAL_SPI_Transmit+0x204>
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b454:	d102      	bne.n	800b45c <HAL_SPI_Transmit+0x20a>
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d102      	bne.n	800b462 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b45c:	2303      	movs	r3, #3
 800b45e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b460:	e026      	b.n	800b4b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b466:	b29b      	uxth	r3, r3
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1cd      	bne.n	800b408 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b46c:	69ba      	ldr	r2, [r7, #24]
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f000 fcf7 	bl	800be64 <SPI_EndRxTxTransaction>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2220      	movs	r2, #32
 800b480:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10a      	bne.n	800b4a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b48a:	2300      	movs	r3, #0
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	613b      	str	r3, [r7, #16]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	613b      	str	r3, [r7, #16]
 800b49e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	77fb      	strb	r3, [r7, #31]
 800b4ac:	e000      	b.n	800b4b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b4ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800b4c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b088      	sub	sp, #32
 800b4ce:	af02      	add	r7, sp, #8
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	603b      	str	r3, [r7, #0]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b4e6:	d112      	bne.n	800b50e <HAL_SPI_Receive+0x44>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10e      	bne.n	800b50e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2204      	movs	r2, #4
 800b4f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b4f8:	88fa      	ldrh	r2, [r7, #6]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	4613      	mov	r3, r2
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 f8f1 	bl	800b6ec <HAL_SPI_TransmitReceive>
 800b50a:	4603      	mov	r3, r0
 800b50c:	e0ea      	b.n	800b6e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b514:	2b01      	cmp	r3, #1
 800b516:	d101      	bne.n	800b51c <HAL_SPI_Receive+0x52>
 800b518:	2302      	movs	r3, #2
 800b51a:	e0e3      	b.n	800b6e4 <HAL_SPI_Receive+0x21a>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b524:	f7fd ff4c 	bl	80093c0 <HAL_GetTick>
 800b528:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b01      	cmp	r3, #1
 800b534:	d002      	beq.n	800b53c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b536:	2302      	movs	r3, #2
 800b538:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b53a:	e0ca      	b.n	800b6d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <HAL_SPI_Receive+0x7e>
 800b542:	88fb      	ldrh	r3, [r7, #6]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b54c:	e0c1      	b.n	800b6d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2204      	movs	r2, #4
 800b552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	88fa      	ldrh	r2, [r7, #6]
 800b566:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	88fa      	ldrh	r2, [r7, #6]
 800b56c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b594:	d10f      	bne.n	800b5b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b5a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b5b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5c0:	2b40      	cmp	r3, #64	@ 0x40
 800b5c2:	d007      	beq.n	800b5d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d162      	bne.n	800b6a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b5dc:	e02e      	b.n	800b63c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d115      	bne.n	800b618 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f103 020c 	add.w	r2, r3, #12
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f8:	7812      	ldrb	r2, [r2, #0]
 800b5fa:	b2d2      	uxtb	r2, r2
 800b5fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	3b01      	subs	r3, #1
 800b610:	b29a      	uxth	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b616:	e011      	b.n	800b63c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b618:	f7fd fed2 	bl	80093c0 <HAL_GetTick>
 800b61c:	4602      	mov	r2, r0
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	429a      	cmp	r2, r3
 800b626:	d803      	bhi.n	800b630 <HAL_SPI_Receive+0x166>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62e:	d102      	bne.n	800b636 <HAL_SPI_Receive+0x16c>
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d102      	bne.n	800b63c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b63a:	e04a      	b.n	800b6d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b640:	b29b      	uxth	r3, r3
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1cb      	bne.n	800b5de <HAL_SPI_Receive+0x114>
 800b646:	e031      	b.n	800b6ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b01      	cmp	r3, #1
 800b654:	d113      	bne.n	800b67e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68da      	ldr	r2, [r3, #12]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b660:	b292      	uxth	r2, r2
 800b662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b668:	1c9a      	adds	r2, r3, #2
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b672:	b29b      	uxth	r3, r3
 800b674:	3b01      	subs	r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b67c:	e011      	b.n	800b6a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b67e:	f7fd fe9f 	bl	80093c0 <HAL_GetTick>
 800b682:	4602      	mov	r2, r0
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d803      	bhi.n	800b696 <HAL_SPI_Receive+0x1cc>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b694:	d102      	bne.n	800b69c <HAL_SPI_Receive+0x1d2>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d102      	bne.n	800b6a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b6a0:	e017      	b.n	800b6d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1cd      	bne.n	800b648 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f000 fb71 	bl	800bd98 <SPI_EndRxTransaction>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2220      	movs	r2, #32
 800b6c0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	75fb      	strb	r3, [r7, #23]
 800b6ce:	e000      	b.n	800b6d2 <HAL_SPI_Receive+0x208>
  }

error :
 800b6d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08c      	sub	sp, #48	@ 0x30
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d101      	bne.n	800b712 <HAL_SPI_TransmitReceive+0x26>
 800b70e:	2302      	movs	r3, #2
 800b710:	e18a      	b.n	800ba28 <HAL_SPI_TransmitReceive+0x33c>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b71a:	f7fd fe51 	bl	80093c0 <HAL_GetTick>
 800b71e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b730:	887b      	ldrh	r3, [r7, #2]
 800b732:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b734:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d00f      	beq.n	800b75c <HAL_SPI_TransmitReceive+0x70>
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b742:	d107      	bne.n	800b754 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d103      	bne.n	800b754 <HAL_SPI_TransmitReceive+0x68>
 800b74c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b750:	2b04      	cmp	r3, #4
 800b752:	d003      	beq.n	800b75c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b754:	2302      	movs	r3, #2
 800b756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800b75a:	e15b      	b.n	800ba14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d005      	beq.n	800b76e <HAL_SPI_TransmitReceive+0x82>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <HAL_SPI_TransmitReceive+0x82>
 800b768:	887b      	ldrh	r3, [r7, #2]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d103      	bne.n	800b776 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800b774:	e14e      	b.n	800ba14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b04      	cmp	r3, #4
 800b780:	d003      	beq.n	800b78a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2205      	movs	r2, #5
 800b786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2200      	movs	r2, #0
 800b78e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	887a      	ldrh	r2, [r7, #2]
 800b79a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	887a      	ldrh	r2, [r7, #2]
 800b7a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	887a      	ldrh	r2, [r7, #2]
 800b7ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	887a      	ldrh	r2, [r7, #2]
 800b7b2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ca:	2b40      	cmp	r3, #64	@ 0x40
 800b7cc:	d007      	beq.n	800b7de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7e6:	d178      	bne.n	800b8da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <HAL_SPI_TransmitReceive+0x10a>
 800b7f0:	8b7b      	ldrh	r3, [r7, #26]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d166      	bne.n	800b8c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7fa:	881a      	ldrh	r2, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b806:	1c9a      	adds	r2, r3, #2
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b810:	b29b      	uxth	r3, r3
 800b812:	3b01      	subs	r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b81a:	e053      	b.n	800b8c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	f003 0302 	and.w	r3, r3, #2
 800b826:	2b02      	cmp	r3, #2
 800b828:	d11b      	bne.n	800b862 <HAL_SPI_TransmitReceive+0x176>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b82e:	b29b      	uxth	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d016      	beq.n	800b862 <HAL_SPI_TransmitReceive+0x176>
 800b834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b836:	2b01      	cmp	r3, #1
 800b838:	d113      	bne.n	800b862 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83e:	881a      	ldrh	r2, [r3, #0]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b84a:	1c9a      	adds	r2, r3, #2
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b854:	b29b      	uxth	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	b29a      	uxth	r2, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b85e:	2300      	movs	r3, #0
 800b860:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d119      	bne.n	800b8a4 <HAL_SPI_TransmitReceive+0x1b8>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b874:	b29b      	uxth	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d014      	beq.n	800b8a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68da      	ldr	r2, [r3, #12]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b884:	b292      	uxth	r2, r2
 800b886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b88c:	1c9a      	adds	r2, r3, #2
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b896:	b29b      	uxth	r3, r3
 800b898:	3b01      	subs	r3, #1
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b8a4:	f7fd fd8c 	bl	80093c0 <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d807      	bhi.n	800b8c4 <HAL_SPI_TransmitReceive+0x1d8>
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ba:	d003      	beq.n	800b8c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800b8c2:	e0a7      	b.n	800ba14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1a6      	bne.n	800b81c <HAL_SPI_TransmitReceive+0x130>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1a1      	bne.n	800b81c <HAL_SPI_TransmitReceive+0x130>
 800b8d8:	e07c      	b.n	800b9d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <HAL_SPI_TransmitReceive+0x1fc>
 800b8e2:	8b7b      	ldrh	r3, [r7, #26]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d16b      	bne.n	800b9c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	330c      	adds	r3, #12
 800b8f2:	7812      	ldrb	r2, [r2, #0]
 800b8f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b904:	b29b      	uxth	r3, r3
 800b906:	3b01      	subs	r3, #1
 800b908:	b29a      	uxth	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b90e:	e057      	b.n	800b9c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f003 0302 	and.w	r3, r3, #2
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d11c      	bne.n	800b958 <HAL_SPI_TransmitReceive+0x26c>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b922:	b29b      	uxth	r3, r3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d017      	beq.n	800b958 <HAL_SPI_TransmitReceive+0x26c>
 800b928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d114      	bne.n	800b958 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	330c      	adds	r3, #12
 800b938:	7812      	ldrb	r2, [r2, #0]
 800b93a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	3b01      	subs	r3, #1
 800b94e:	b29a      	uxth	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b954:	2300      	movs	r3, #0
 800b956:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	2b01      	cmp	r3, #1
 800b964:	d119      	bne.n	800b99a <HAL_SPI_TransmitReceive+0x2ae>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d014      	beq.n	800b99a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68da      	ldr	r2, [r3, #12]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b97a:	b2d2      	uxtb	r2, r2
 800b97c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	3b01      	subs	r3, #1
 800b990:	b29a      	uxth	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b996:	2301      	movs	r3, #1
 800b998:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b99a:	f7fd fd11 	bl	80093c0 <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d803      	bhi.n	800b9b2 <HAL_SPI_TransmitReceive+0x2c6>
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b0:	d102      	bne.n	800b9b8 <HAL_SPI_TransmitReceive+0x2cc>
 800b9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d103      	bne.n	800b9c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800b9be:	e029      	b.n	800ba14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1a2      	bne.n	800b910 <HAL_SPI_TransmitReceive+0x224>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d19d      	bne.n	800b910 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 fa43 	bl	800be64 <SPI_EndRxTxTransaction>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d006      	beq.n	800b9f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800b9f0:	e010      	b.n	800ba14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10b      	bne.n	800ba12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	617b      	str	r3, [r7, #20]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	e000      	b.n	800ba14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ba12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ba24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3730      	adds	r7, #48	@ 0x30
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	099b      	lsrs	r3, r3, #6
 800ba4c:	f003 0301 	and.w	r3, r3, #1
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10f      	bne.n	800ba74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	099b      	lsrs	r3, r3, #6
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d004      	beq.n	800ba74 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	4798      	blx	r3
    return;
 800ba72:	e0d7      	b.n	800bc24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	085b      	lsrs	r3, r3, #1
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00a      	beq.n	800ba96 <HAL_SPI_IRQHandler+0x66>
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	09db      	lsrs	r3, r3, #7
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d004      	beq.n	800ba96 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	4798      	blx	r3
    return;
 800ba94:	e0c6      	b.n	800bc24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	095b      	lsrs	r3, r3, #5
 800ba9a:	f003 0301 	and.w	r3, r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10c      	bne.n	800babc <HAL_SPI_IRQHandler+0x8c>
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	099b      	lsrs	r3, r3, #6
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d106      	bne.n	800babc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	0a1b      	lsrs	r3, r3, #8
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 80b4 	beq.w	800bc24 <HAL_SPI_IRQHandler+0x1f4>
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	095b      	lsrs	r3, r3, #5
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f000 80ad 	beq.w	800bc24 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	099b      	lsrs	r3, r3, #6
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d023      	beq.n	800bb1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d011      	beq.n	800bb06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bae6:	f043 0204 	orr.w	r2, r3, #4
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800baee:	2300      	movs	r3, #0
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	e00b      	b.n	800bb1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb06:	2300      	movs	r3, #0
 800bb08:	613b      	str	r3, [r7, #16]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	613b      	str	r3, [r7, #16]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	693b      	ldr	r3, [r7, #16]
        return;
 800bb1c:	e082      	b.n	800bc24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	095b      	lsrs	r3, r3, #5
 800bb22:	f003 0301 	and.w	r3, r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d014      	beq.n	800bb54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb2e:	f043 0201 	orr.w	r2, r3, #1
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bb36:	2300      	movs	r3, #0
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	60fb      	str	r3, [r7, #12]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	0a1b      	lsrs	r3, r3, #8
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00c      	beq.n	800bb7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb64:	f043 0208 	orr.w	r2, r3, #8
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60bb      	str	r3, [r7, #8]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	60bb      	str	r3, [r7, #8]
 800bb78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d04f      	beq.n	800bc22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	685a      	ldr	r2, [r3, #4]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bb90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d104      	bne.n	800bbae <HAL_SPI_IRQHandler+0x17e>
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d034      	beq.n	800bc18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f022 0203 	bic.w	r2, r2, #3
 800bbbc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d011      	beq.n	800bbea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbca:	4a18      	ldr	r2, [pc, #96]	@ (800bc2c <HAL_SPI_IRQHandler+0x1fc>)
 800bbcc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe f9c3 	bl	8009f5e <HAL_DMA_Abort_IT>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d005      	beq.n	800bbea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbe2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d016      	beq.n	800bc20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbf6:	4a0d      	ldr	r2, [pc, #52]	@ (800bc2c <HAL_SPI_IRQHandler+0x1fc>)
 800bbf8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe f9ad 	bl	8009f5e <HAL_DMA_Abort_IT>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00a      	beq.n	800bc20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800bc16:	e003      	b.n	800bc20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 f809 	bl	800bc30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bc1e:	e000      	b.n	800bc22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bc20:	bf00      	nop
    return;
 800bc22:	bf00      	nop
  }
}
 800bc24:	3720      	adds	r7, #32
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	0800bc61 	.word	0x0800bc61

0800bc30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bc52:	b2db      	uxtb	r3, r3
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7ff ffd8 	bl	800bc30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc80:	bf00      	nop
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b088      	sub	sp, #32
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	4613      	mov	r3, r2
 800bc96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bc98:	f7fd fb92 	bl	80093c0 <HAL_GetTick>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	4413      	add	r3, r2
 800bca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bca8:	f7fd fb8a 	bl	80093c0 <HAL_GetTick>
 800bcac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bcae:	4b39      	ldr	r3, [pc, #228]	@ (800bd94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	015b      	lsls	r3, r3, #5
 800bcb4:	0d1b      	lsrs	r3, r3, #20
 800bcb6:	69fa      	ldr	r2, [r7, #28]
 800bcb8:	fb02 f303 	mul.w	r3, r2, r3
 800bcbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcbe:	e054      	b.n	800bd6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc6:	d050      	beq.n	800bd6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bcc8:	f7fd fb7a 	bl	80093c0 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	69fa      	ldr	r2, [r7, #28]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d902      	bls.n	800bcde <SPI_WaitFlagStateUntilTimeout+0x56>
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d13d      	bne.n	800bd5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	685a      	ldr	r2, [r3, #4]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bcec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bcf6:	d111      	bne.n	800bd1c <SPI_WaitFlagStateUntilTimeout+0x94>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd00:	d004      	beq.n	800bd0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd0a:	d107      	bne.n	800bd1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd24:	d10f      	bne.n	800bd46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bd44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e017      	b.n	800bd8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bd60:	2300      	movs	r3, #0
 800bd62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	689a      	ldr	r2, [r3, #8]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	4013      	ands	r3, r2
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	bf0c      	ite	eq
 800bd7a:	2301      	moveq	r3, #1
 800bd7c:	2300      	movne	r3, #0
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	461a      	mov	r2, r3
 800bd82:	79fb      	ldrb	r3, [r7, #7]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d19b      	bne.n	800bcc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3720      	adds	r7, #32
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000028 	.word	0x20000028

0800bd98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af02      	add	r7, sp, #8
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bdac:	d111      	bne.n	800bdd2 <SPI_EndRxTransaction+0x3a>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdb6:	d004      	beq.n	800bdc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdc0:	d107      	bne.n	800bdd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bdd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bdda:	d12a      	bne.n	800be32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bde4:	d012      	beq.n	800be0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	2200      	movs	r2, #0
 800bdee:	2180      	movs	r1, #128	@ 0x80
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f7ff ff49 	bl	800bc88 <SPI_WaitFlagStateUntilTimeout>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d02d      	beq.n	800be58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be00:	f043 0220 	orr.w	r2, r3, #32
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800be08:	2303      	movs	r3, #3
 800be0a:	e026      	b.n	800be5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	2200      	movs	r2, #0
 800be14:	2101      	movs	r1, #1
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff ff36 	bl	800bc88 <SPI_WaitFlagStateUntilTimeout>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d01a      	beq.n	800be58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be26:	f043 0220 	orr.w	r2, r3, #32
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	e013      	b.n	800be5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2200      	movs	r2, #0
 800be3a:	2101      	movs	r1, #1
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff ff23 	bl	800bc88 <SPI_WaitFlagStateUntilTimeout>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d007      	beq.n	800be58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be4c:	f043 0220 	orr.w	r2, r3, #32
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800be54:	2303      	movs	r3, #3
 800be56:	e000      	b.n	800be5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b088      	sub	sp, #32
 800be68:	af02      	add	r7, sp, #8
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800be70:	4b1b      	ldr	r3, [pc, #108]	@ (800bee0 <SPI_EndRxTxTransaction+0x7c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a1b      	ldr	r2, [pc, #108]	@ (800bee4 <SPI_EndRxTxTransaction+0x80>)
 800be76:	fba2 2303 	umull	r2, r3, r2, r3
 800be7a:	0d5b      	lsrs	r3, r3, #21
 800be7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800be80:	fb02 f303 	mul.w	r3, r2, r3
 800be84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800be8e:	d112      	bne.n	800beb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2200      	movs	r2, #0
 800be98:	2180      	movs	r1, #128	@ 0x80
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff fef4 	bl	800bc88 <SPI_WaitFlagStateUntilTimeout>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d016      	beq.n	800bed4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beaa:	f043 0220 	orr.w	r2, r3, #32
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e00f      	b.n	800bed6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800becc:	2b80      	cmp	r3, #128	@ 0x80
 800bece:	d0f2      	beq.n	800beb6 <SPI_EndRxTxTransaction+0x52>
 800bed0:	e000      	b.n	800bed4 <SPI_EndRxTxTransaction+0x70>
        break;
 800bed2:	bf00      	nop
  }

  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	20000028 	.word	0x20000028
 800bee4:	165e9f81 	.word	0x165e9f81

0800bee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e041      	b.n	800bf7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7fa f93c 	bl	800618c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3304      	adds	r3, #4
 800bf24:	4619      	mov	r1, r3
 800bf26:	4610      	mov	r0, r2
 800bf28:	f000 fe44 	bl	800cbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d001      	beq.n	800bfa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e044      	b.n	800c02a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f042 0201 	orr.w	r2, r2, #1
 800bfb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a1e      	ldr	r2, [pc, #120]	@ (800c038 <HAL_TIM_Base_Start_IT+0xb0>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d018      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x6c>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfca:	d013      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x6c>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4a1a      	ldr	r2, [pc, #104]	@ (800c03c <HAL_TIM_Base_Start_IT+0xb4>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d00e      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x6c>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a19      	ldr	r2, [pc, #100]	@ (800c040 <HAL_TIM_Base_Start_IT+0xb8>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d009      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x6c>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a17      	ldr	r2, [pc, #92]	@ (800c044 <HAL_TIM_Base_Start_IT+0xbc>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d004      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x6c>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a16      	ldr	r2, [pc, #88]	@ (800c048 <HAL_TIM_Base_Start_IT+0xc0>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d111      	bne.n	800c018 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	f003 0307 	and.w	r3, r3, #7
 800bffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b06      	cmp	r3, #6
 800c004:	d010      	beq.n	800c028 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f042 0201 	orr.w	r2, r2, #1
 800c014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c016:	e007      	b.n	800c028 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f042 0201 	orr.w	r2, r2, #1
 800c026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	40010000 	.word	0x40010000
 800c03c:	40000400 	.word	0x40000400
 800c040:	40000800 	.word	0x40000800
 800c044:	40000c00 	.word	0x40000c00
 800c048:	40014000 	.word	0x40014000

0800c04c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e041      	b.n	800c0e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d106      	bne.n	800c078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f839 	bl	800c0ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2202      	movs	r2, #2
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3304      	adds	r3, #4
 800c088:	4619      	mov	r1, r3
 800c08a:	4610      	mov	r0, r2
 800c08c:	f000 fd92 	bl	800cbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c0ea:	b480      	push	{r7}
 800c0ec:	b083      	sub	sp, #12
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c0f2:	bf00      	nop
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
	...

0800c100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d109      	bne.n	800c124 <HAL_TIM_PWM_Start+0x24>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c116:	b2db      	uxtb	r3, r3
 800c118:	2b01      	cmp	r3, #1
 800c11a:	bf14      	ite	ne
 800c11c:	2301      	movne	r3, #1
 800c11e:	2300      	moveq	r3, #0
 800c120:	b2db      	uxtb	r3, r3
 800c122:	e022      	b.n	800c16a <HAL_TIM_PWM_Start+0x6a>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2b04      	cmp	r3, #4
 800c128:	d109      	bne.n	800c13e <HAL_TIM_PWM_Start+0x3e>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b01      	cmp	r3, #1
 800c134:	bf14      	ite	ne
 800c136:	2301      	movne	r3, #1
 800c138:	2300      	moveq	r3, #0
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	e015      	b.n	800c16a <HAL_TIM_PWM_Start+0x6a>
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	2b08      	cmp	r3, #8
 800c142:	d109      	bne.n	800c158 <HAL_TIM_PWM_Start+0x58>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	bf14      	ite	ne
 800c150:	2301      	movne	r3, #1
 800c152:	2300      	moveq	r3, #0
 800c154:	b2db      	uxtb	r3, r3
 800c156:	e008      	b.n	800c16a <HAL_TIM_PWM_Start+0x6a>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b01      	cmp	r3, #1
 800c162:	bf14      	ite	ne
 800c164:	2301      	movne	r3, #1
 800c166:	2300      	moveq	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e068      	b.n	800c244 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d104      	bne.n	800c182 <HAL_TIM_PWM_Start+0x82>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2202      	movs	r2, #2
 800c17c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c180:	e013      	b.n	800c1aa <HAL_TIM_PWM_Start+0xaa>
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2b04      	cmp	r3, #4
 800c186:	d104      	bne.n	800c192 <HAL_TIM_PWM_Start+0x92>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2202      	movs	r2, #2
 800c18c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c190:	e00b      	b.n	800c1aa <HAL_TIM_PWM_Start+0xaa>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b08      	cmp	r3, #8
 800c196:	d104      	bne.n	800c1a2 <HAL_TIM_PWM_Start+0xa2>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1a0:	e003      	b.n	800c1aa <HAL_TIM_PWM_Start+0xaa>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f001 f8c2 	bl	800d33c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a23      	ldr	r2, [pc, #140]	@ (800c24c <HAL_TIM_PWM_Start+0x14c>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d107      	bne.n	800c1d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c1d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a1d      	ldr	r2, [pc, #116]	@ (800c24c <HAL_TIM_PWM_Start+0x14c>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d018      	beq.n	800c20e <HAL_TIM_PWM_Start+0x10e>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1e4:	d013      	beq.n	800c20e <HAL_TIM_PWM_Start+0x10e>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a19      	ldr	r2, [pc, #100]	@ (800c250 <HAL_TIM_PWM_Start+0x150>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d00e      	beq.n	800c20e <HAL_TIM_PWM_Start+0x10e>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a17      	ldr	r2, [pc, #92]	@ (800c254 <HAL_TIM_PWM_Start+0x154>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d009      	beq.n	800c20e <HAL_TIM_PWM_Start+0x10e>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a16      	ldr	r2, [pc, #88]	@ (800c258 <HAL_TIM_PWM_Start+0x158>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d004      	beq.n	800c20e <HAL_TIM_PWM_Start+0x10e>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a14      	ldr	r2, [pc, #80]	@ (800c25c <HAL_TIM_PWM_Start+0x15c>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d111      	bne.n	800c232 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	f003 0307 	and.w	r3, r3, #7
 800c218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2b06      	cmp	r3, #6
 800c21e:	d010      	beq.n	800c242 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f042 0201 	orr.w	r2, r2, #1
 800c22e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c230:	e007      	b.n	800c242 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f042 0201 	orr.w	r2, r2, #1
 800c240:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	40010000 	.word	0x40010000
 800c250:	40000400 	.word	0x40000400
 800c254:	40000800 	.word	0x40000800
 800c258:	40000c00 	.word	0x40000c00
 800c25c:	40014000 	.word	0x40014000

0800c260 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e041      	b.n	800c2f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d106      	bne.n	800c28c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f839 	bl	800c2fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2202      	movs	r2, #2
 800c290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3304      	adds	r3, #4
 800c29c:	4619      	mov	r1, r3
 800c29e:	4610      	mov	r0, r2
 800c2a0:	f000 fc88 	bl	800cbb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800c2fe:	b480      	push	{r7}
 800c300:	b083      	sub	sp, #12
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800c306:	bf00      	nop
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
	...

0800c314 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d104      	bne.n	800c32e <HAL_TIM_IC_Start_IT+0x1a>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	e013      	b.n	800c356 <HAL_TIM_IC_Start_IT+0x42>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b04      	cmp	r3, #4
 800c332:	d104      	bne.n	800c33e <HAL_TIM_IC_Start_IT+0x2a>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	e00b      	b.n	800c356 <HAL_TIM_IC_Start_IT+0x42>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b08      	cmp	r3, #8
 800c342:	d104      	bne.n	800c34e <HAL_TIM_IC_Start_IT+0x3a>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	e003      	b.n	800c356 <HAL_TIM_IC_Start_IT+0x42>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c354:	b2db      	uxtb	r3, r3
 800c356:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d104      	bne.n	800c368 <HAL_TIM_IC_Start_IT+0x54>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c364:	b2db      	uxtb	r3, r3
 800c366:	e013      	b.n	800c390 <HAL_TIM_IC_Start_IT+0x7c>
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	d104      	bne.n	800c378 <HAL_TIM_IC_Start_IT+0x64>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c374:	b2db      	uxtb	r3, r3
 800c376:	e00b      	b.n	800c390 <HAL_TIM_IC_Start_IT+0x7c>
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b08      	cmp	r3, #8
 800c37c:	d104      	bne.n	800c388 <HAL_TIM_IC_Start_IT+0x74>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c384:	b2db      	uxtb	r3, r3
 800c386:	e003      	b.n	800c390 <HAL_TIM_IC_Start_IT+0x7c>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d102      	bne.n	800c39e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800c398:	7bbb      	ldrb	r3, [r7, #14]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d001      	beq.n	800c3a2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e0bd      	b.n	800c51e <HAL_TIM_IC_Start_IT+0x20a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d104      	bne.n	800c3b2 <HAL_TIM_IC_Start_IT+0x9e>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3b0:	e013      	b.n	800c3da <HAL_TIM_IC_Start_IT+0xc6>
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b04      	cmp	r3, #4
 800c3b6:	d104      	bne.n	800c3c2 <HAL_TIM_IC_Start_IT+0xae>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3c0:	e00b      	b.n	800c3da <HAL_TIM_IC_Start_IT+0xc6>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b08      	cmp	r3, #8
 800c3c6:	d104      	bne.n	800c3d2 <HAL_TIM_IC_Start_IT+0xbe>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3d0:	e003      	b.n	800c3da <HAL_TIM_IC_Start_IT+0xc6>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d104      	bne.n	800c3ea <HAL_TIM_IC_Start_IT+0xd6>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3e8:	e013      	b.n	800c412 <HAL_TIM_IC_Start_IT+0xfe>
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	d104      	bne.n	800c3fa <HAL_TIM_IC_Start_IT+0xe6>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c3f8:	e00b      	b.n	800c412 <HAL_TIM_IC_Start_IT+0xfe>
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	2b08      	cmp	r3, #8
 800c3fe:	d104      	bne.n	800c40a <HAL_TIM_IC_Start_IT+0xf6>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2202      	movs	r2, #2
 800c404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c408:	e003      	b.n	800c412 <HAL_TIM_IC_Start_IT+0xfe>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2202      	movs	r2, #2
 800c40e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	2b0c      	cmp	r3, #12
 800c416:	d841      	bhi.n	800c49c <HAL_TIM_IC_Start_IT+0x188>
 800c418:	a201      	add	r2, pc, #4	@ (adr r2, 800c420 <HAL_TIM_IC_Start_IT+0x10c>)
 800c41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41e:	bf00      	nop
 800c420:	0800c455 	.word	0x0800c455
 800c424:	0800c49d 	.word	0x0800c49d
 800c428:	0800c49d 	.word	0x0800c49d
 800c42c:	0800c49d 	.word	0x0800c49d
 800c430:	0800c467 	.word	0x0800c467
 800c434:	0800c49d 	.word	0x0800c49d
 800c438:	0800c49d 	.word	0x0800c49d
 800c43c:	0800c49d 	.word	0x0800c49d
 800c440:	0800c479 	.word	0x0800c479
 800c444:	0800c49d 	.word	0x0800c49d
 800c448:	0800c49d 	.word	0x0800c49d
 800c44c:	0800c49d 	.word	0x0800c49d
 800c450:	0800c48b 	.word	0x0800c48b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68da      	ldr	r2, [r3, #12]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f042 0202 	orr.w	r2, r2, #2
 800c462:	60da      	str	r2, [r3, #12]
      break;
 800c464:	e01b      	b.n	800c49e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68da      	ldr	r2, [r3, #12]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f042 0204 	orr.w	r2, r2, #4
 800c474:	60da      	str	r2, [r3, #12]
      break;
 800c476:	e012      	b.n	800c49e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68da      	ldr	r2, [r3, #12]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0208 	orr.w	r2, r2, #8
 800c486:	60da      	str	r2, [r3, #12]
      break;
 800c488:	e009      	b.n	800c49e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68da      	ldr	r2, [r3, #12]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f042 0210 	orr.w	r2, r2, #16
 800c498:	60da      	str	r2, [r3, #12]
      break;
 800c49a:	e000      	b.n	800c49e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800c49c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 ff48 	bl	800d33c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c528 <HAL_TIM_IC_Start_IT+0x214>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d018      	beq.n	800c4e8 <HAL_TIM_IC_Start_IT+0x1d4>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4be:	d013      	beq.n	800c4e8 <HAL_TIM_IC_Start_IT+0x1d4>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a19      	ldr	r2, [pc, #100]	@ (800c52c <HAL_TIM_IC_Start_IT+0x218>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d00e      	beq.n	800c4e8 <HAL_TIM_IC_Start_IT+0x1d4>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a18      	ldr	r2, [pc, #96]	@ (800c530 <HAL_TIM_IC_Start_IT+0x21c>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d009      	beq.n	800c4e8 <HAL_TIM_IC_Start_IT+0x1d4>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a16      	ldr	r2, [pc, #88]	@ (800c534 <HAL_TIM_IC_Start_IT+0x220>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d004      	beq.n	800c4e8 <HAL_TIM_IC_Start_IT+0x1d4>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a15      	ldr	r2, [pc, #84]	@ (800c538 <HAL_TIM_IC_Start_IT+0x224>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d111      	bne.n	800c50c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	f003 0307 	and.w	r3, r3, #7
 800c4f2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	2b06      	cmp	r3, #6
 800c4f8:	d010      	beq.n	800c51c <HAL_TIM_IC_Start_IT+0x208>
    {
      __HAL_TIM_ENABLE(htim);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f042 0201 	orr.w	r2, r2, #1
 800c508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50a:	e007      	b.n	800c51c <HAL_TIM_IC_Start_IT+0x208>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f042 0201 	orr.w	r2, r2, #1
 800c51a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	40010000 	.word	0x40010000
 800c52c:	40000400 	.word	0x40000400
 800c530:	40000800 	.word	0x40000800
 800c534:	40000c00 	.word	0x40000c00
 800c538:	40014000 	.word	0x40014000

0800c53c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	f003 0302 	and.w	r3, r3, #2
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d122      	bne.n	800c598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	f003 0302 	and.w	r3, r3, #2
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d11b      	bne.n	800c598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f06f 0202 	mvn.w	r2, #2
 800c568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	f003 0303 	and.w	r3, r3, #3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7f8 f81a 	bl	80045b8 <HAL_TIM_IC_CaptureCallback>
 800c584:	e005      	b.n	800c592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 faf6 	bl	800cb78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fafd 	bl	800cb8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	f003 0304 	and.w	r3, r3, #4
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	d122      	bne.n	800c5ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	f003 0304 	and.w	r3, r3, #4
 800c5b0:	2b04      	cmp	r3, #4
 800c5b2:	d11b      	bne.n	800c5ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f06f 0204 	mvn.w	r2, #4
 800c5bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	699b      	ldr	r3, [r3, #24]
 800c5ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d003      	beq.n	800c5da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7f7 fff0 	bl	80045b8 <HAL_TIM_IC_CaptureCallback>
 800c5d8:	e005      	b.n	800c5e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 facc 	bl	800cb78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fad3 	bl	800cb8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	f003 0308 	and.w	r3, r3, #8
 800c5f6:	2b08      	cmp	r3, #8
 800c5f8:	d122      	bne.n	800c640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	f003 0308 	and.w	r3, r3, #8
 800c604:	2b08      	cmp	r3, #8
 800c606:	d11b      	bne.n	800c640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f06f 0208 	mvn.w	r2, #8
 800c610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2204      	movs	r2, #4
 800c616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	69db      	ldr	r3, [r3, #28]
 800c61e:	f003 0303 	and.w	r3, r3, #3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7f7 ffc6 	bl	80045b8 <HAL_TIM_IC_CaptureCallback>
 800c62c:	e005      	b.n	800c63a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 faa2 	bl	800cb78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 faa9 	bl	800cb8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	f003 0310 	and.w	r3, r3, #16
 800c64a:	2b10      	cmp	r3, #16
 800c64c:	d122      	bne.n	800c694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	f003 0310 	and.w	r3, r3, #16
 800c658:	2b10      	cmp	r3, #16
 800c65a:	d11b      	bne.n	800c694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f06f 0210 	mvn.w	r2, #16
 800c664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2208      	movs	r2, #8
 800c66a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c676:	2b00      	cmp	r3, #0
 800c678:	d003      	beq.n	800c682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7f7 ff9c 	bl	80045b8 <HAL_TIM_IC_CaptureCallback>
 800c680:	e005      	b.n	800c68e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fa78 	bl	800cb78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fa7f 	bl	800cb8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d10e      	bne.n	800c6c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d107      	bne.n	800c6c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f06f 0201 	mvn.w	r2, #1
 800c6b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7f6 fdaa 	bl	8003214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6ca:	2b80      	cmp	r3, #128	@ 0x80
 800c6cc:	d10e      	bne.n	800c6ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6d8:	2b80      	cmp	r3, #128	@ 0x80
 800c6da:	d107      	bne.n	800c6ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c6e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fec6 	bl	800d478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f6:	2b40      	cmp	r3, #64	@ 0x40
 800c6f8:	d10e      	bne.n	800c718 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c704:	2b40      	cmp	r3, #64	@ 0x40
 800c706:	d107      	bne.n	800c718 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fa44 	bl	800cba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	f003 0320 	and.w	r3, r3, #32
 800c722:	2b20      	cmp	r3, #32
 800c724:	d10e      	bne.n	800c744 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f003 0320 	and.w	r3, r3, #32
 800c730:	2b20      	cmp	r3, #32
 800c732:	d107      	bne.n	800c744 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f06f 0220 	mvn.w	r2, #32
 800c73c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fe90 	bl	800d464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d101      	bne.n	800c766 <HAL_TIM_IC_ConfigChannel+0x1a>
 800c762:	2302      	movs	r3, #2
 800c764:	e082      	b.n	800c86c <HAL_TIM_IC_ConfigChannel+0x120>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2201      	movs	r2, #1
 800c76a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11b      	bne.n	800c7ac <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6818      	ldr	r0, [r3, #0]
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	6819      	ldr	r1, [r3, #0]
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	f000 fc22 	bl	800cfcc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	699a      	ldr	r2, [r3, #24]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f022 020c 	bic.w	r2, r2, #12
 800c796:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6999      	ldr	r1, [r3, #24]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	430a      	orrs	r2, r1
 800c7a8:	619a      	str	r2, [r3, #24]
 800c7aa:	e05a      	b.n	800c862 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	d11c      	bne.n	800c7ec <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6818      	ldr	r0, [r3, #0]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	6819      	ldr	r1, [r3, #0]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	f000 fc9a 	bl	800d0fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	699a      	ldr	r2, [r3, #24]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c7d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6999      	ldr	r1, [r3, #24]
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	021a      	lsls	r2, r3, #8
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	619a      	str	r2, [r3, #24]
 800c7ea:	e03a      	b.n	800c862 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b08      	cmp	r3, #8
 800c7f0:	d11b      	bne.n	800c82a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	6819      	ldr	r1, [r3, #0]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f000 fce7 	bl	800d1d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	69da      	ldr	r2, [r3, #28]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f022 020c 	bic.w	r2, r2, #12
 800c814:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	69d9      	ldr	r1, [r3, #28]
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	689a      	ldr	r2, [r3, #8]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	430a      	orrs	r2, r1
 800c826:	61da      	str	r2, [r3, #28]
 800c828:	e01b      	b.n	800c862 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6818      	ldr	r0, [r3, #0]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	6819      	ldr	r1, [r3, #0]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f000 fd07 	bl	800d24c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	69da      	ldr	r2, [r3, #28]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c84c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	69d9      	ldr	r1, [r3, #28]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	021a      	lsls	r2, r3, #8
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	430a      	orrs	r2, r1
 800c860:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c886:	2b01      	cmp	r3, #1
 800c888:	d101      	bne.n	800c88e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c88a:	2302      	movs	r3, #2
 800c88c:	e0ac      	b.n	800c9e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b0c      	cmp	r3, #12
 800c89a:	f200 809f 	bhi.w	800c9dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800c89e:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c8d9 	.word	0x0800c8d9
 800c8a8:	0800c9dd 	.word	0x0800c9dd
 800c8ac:	0800c9dd 	.word	0x0800c9dd
 800c8b0:	0800c9dd 	.word	0x0800c9dd
 800c8b4:	0800c919 	.word	0x0800c919
 800c8b8:	0800c9dd 	.word	0x0800c9dd
 800c8bc:	0800c9dd 	.word	0x0800c9dd
 800c8c0:	0800c9dd 	.word	0x0800c9dd
 800c8c4:	0800c95b 	.word	0x0800c95b
 800c8c8:	0800c9dd 	.word	0x0800c9dd
 800c8cc:	0800c9dd 	.word	0x0800c9dd
 800c8d0:	0800c9dd 	.word	0x0800c9dd
 800c8d4:	0800c99b 	.word	0x0800c99b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 f9e8 	bl	800ccb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	699a      	ldr	r2, [r3, #24]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f042 0208 	orr.w	r2, r2, #8
 800c8f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	699a      	ldr	r2, [r3, #24]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f022 0204 	bic.w	r2, r2, #4
 800c902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6999      	ldr	r1, [r3, #24]
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	691a      	ldr	r2, [r3, #16]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	430a      	orrs	r2, r1
 800c914:	619a      	str	r2, [r3, #24]
      break;
 800c916:	e062      	b.n	800c9de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68b9      	ldr	r1, [r7, #8]
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 fa2e 	bl	800cd80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	699a      	ldr	r2, [r3, #24]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	699a      	ldr	r2, [r3, #24]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	6999      	ldr	r1, [r3, #24]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	021a      	lsls	r2, r3, #8
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	430a      	orrs	r2, r1
 800c956:	619a      	str	r2, [r3, #24]
      break;
 800c958:	e041      	b.n	800c9de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68b9      	ldr	r1, [r7, #8]
 800c960:	4618      	mov	r0, r3
 800c962:	f000 fa79 	bl	800ce58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	69da      	ldr	r2, [r3, #28]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f042 0208 	orr.w	r2, r2, #8
 800c974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	69da      	ldr	r2, [r3, #28]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f022 0204 	bic.w	r2, r2, #4
 800c984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	69d9      	ldr	r1, [r3, #28]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	691a      	ldr	r2, [r3, #16]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	430a      	orrs	r2, r1
 800c996:	61da      	str	r2, [r3, #28]
      break;
 800c998:	e021      	b.n	800c9de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	68b9      	ldr	r1, [r7, #8]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fac3 	bl	800cf2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	69da      	ldr	r2, [r3, #28]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	69da      	ldr	r2, [r3, #28]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c9c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	69d9      	ldr	r1, [r3, #28]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	021a      	lsls	r2, r3, #8
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	61da      	str	r2, [r3, #28]
      break;
 800c9da:	e000      	b.n	800c9de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800c9dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d101      	bne.n	800ca08 <HAL_TIM_ConfigClockSource+0x18>
 800ca04:	2302      	movs	r3, #2
 800ca06:	e0b3      	b.n	800cb70 <HAL_TIM_ConfigClockSource+0x180>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ca26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca40:	d03e      	beq.n	800cac0 <HAL_TIM_ConfigClockSource+0xd0>
 800ca42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca46:	f200 8087 	bhi.w	800cb58 <HAL_TIM_ConfigClockSource+0x168>
 800ca4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca4e:	f000 8085 	beq.w	800cb5c <HAL_TIM_ConfigClockSource+0x16c>
 800ca52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca56:	d87f      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x168>
 800ca58:	2b70      	cmp	r3, #112	@ 0x70
 800ca5a:	d01a      	beq.n	800ca92 <HAL_TIM_ConfigClockSource+0xa2>
 800ca5c:	2b70      	cmp	r3, #112	@ 0x70
 800ca5e:	d87b      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x168>
 800ca60:	2b60      	cmp	r3, #96	@ 0x60
 800ca62:	d050      	beq.n	800cb06 <HAL_TIM_ConfigClockSource+0x116>
 800ca64:	2b60      	cmp	r3, #96	@ 0x60
 800ca66:	d877      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x168>
 800ca68:	2b50      	cmp	r3, #80	@ 0x50
 800ca6a:	d03c      	beq.n	800cae6 <HAL_TIM_ConfigClockSource+0xf6>
 800ca6c:	2b50      	cmp	r3, #80	@ 0x50
 800ca6e:	d873      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x168>
 800ca70:	2b40      	cmp	r3, #64	@ 0x40
 800ca72:	d058      	beq.n	800cb26 <HAL_TIM_ConfigClockSource+0x136>
 800ca74:	2b40      	cmp	r3, #64	@ 0x40
 800ca76:	d86f      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x168>
 800ca78:	2b30      	cmp	r3, #48	@ 0x30
 800ca7a:	d064      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0x156>
 800ca7c:	2b30      	cmp	r3, #48	@ 0x30
 800ca7e:	d86b      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x168>
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d060      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0x156>
 800ca84:	2b20      	cmp	r3, #32
 800ca86:	d867      	bhi.n	800cb58 <HAL_TIM_ConfigClockSource+0x168>
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d05c      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0x156>
 800ca8c:	2b10      	cmp	r3, #16
 800ca8e:	d05a      	beq.n	800cb46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ca90:	e062      	b.n	800cb58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	6899      	ldr	r1, [r3, #8]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	f000 fc2b 	bl	800d2fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cab4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	609a      	str	r2, [r3, #8]
      break;
 800cabe:	e04e      	b.n	800cb5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6818      	ldr	r0, [r3, #0]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	6899      	ldr	r1, [r3, #8]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	f000 fc14 	bl	800d2fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	689a      	ldr	r2, [r3, #8]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cae2:	609a      	str	r2, [r3, #8]
      break;
 800cae4:	e03b      	b.n	800cb5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6859      	ldr	r1, [r3, #4]
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f000 fad2 	bl	800d09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2150      	movs	r1, #80	@ 0x50
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 fbe1 	bl	800d2c6 <TIM_ITRx_SetConfig>
      break;
 800cb04:	e02b      	b.n	800cb5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6818      	ldr	r0, [r3, #0]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	6859      	ldr	r1, [r3, #4]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	461a      	mov	r2, r3
 800cb14:	f000 fb2e 	bl	800d174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2160      	movs	r1, #96	@ 0x60
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 fbd1 	bl	800d2c6 <TIM_ITRx_SetConfig>
      break;
 800cb24:	e01b      	b.n	800cb5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6818      	ldr	r0, [r3, #0]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	6859      	ldr	r1, [r3, #4]
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	461a      	mov	r2, r3
 800cb34:	f000 fab2 	bl	800d09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2140      	movs	r1, #64	@ 0x40
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f000 fbc1 	bl	800d2c6 <TIM_ITRx_SetConfig>
      break;
 800cb44:	e00b      	b.n	800cb5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4610      	mov	r0, r2
 800cb52:	f000 fbb8 	bl	800d2c6 <TIM_ITRx_SetConfig>
        break;
 800cb56:	e002      	b.n	800cb5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cb58:	bf00      	nop
 800cb5a:	e000      	b.n	800cb5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cb5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2201      	movs	r2, #1
 800cb62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a34      	ldr	r2, [pc, #208]	@ (800cc98 <TIM_Base_SetConfig+0xe4>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d00f      	beq.n	800cbec <TIM_Base_SetConfig+0x38>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbd2:	d00b      	beq.n	800cbec <TIM_Base_SetConfig+0x38>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4a31      	ldr	r2, [pc, #196]	@ (800cc9c <TIM_Base_SetConfig+0xe8>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d007      	beq.n	800cbec <TIM_Base_SetConfig+0x38>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a30      	ldr	r2, [pc, #192]	@ (800cca0 <TIM_Base_SetConfig+0xec>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d003      	beq.n	800cbec <TIM_Base_SetConfig+0x38>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a2f      	ldr	r2, [pc, #188]	@ (800cca4 <TIM_Base_SetConfig+0xf0>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d108      	bne.n	800cbfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4a25      	ldr	r2, [pc, #148]	@ (800cc98 <TIM_Base_SetConfig+0xe4>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d01b      	beq.n	800cc3e <TIM_Base_SetConfig+0x8a>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc0c:	d017      	beq.n	800cc3e <TIM_Base_SetConfig+0x8a>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4a22      	ldr	r2, [pc, #136]	@ (800cc9c <TIM_Base_SetConfig+0xe8>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d013      	beq.n	800cc3e <TIM_Base_SetConfig+0x8a>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a21      	ldr	r2, [pc, #132]	@ (800cca0 <TIM_Base_SetConfig+0xec>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d00f      	beq.n	800cc3e <TIM_Base_SetConfig+0x8a>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4a20      	ldr	r2, [pc, #128]	@ (800cca4 <TIM_Base_SetConfig+0xf0>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d00b      	beq.n	800cc3e <TIM_Base_SetConfig+0x8a>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a1f      	ldr	r2, [pc, #124]	@ (800cca8 <TIM_Base_SetConfig+0xf4>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d007      	beq.n	800cc3e <TIM_Base_SetConfig+0x8a>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a1e      	ldr	r2, [pc, #120]	@ (800ccac <TIM_Base_SetConfig+0xf8>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d003      	beq.n	800cc3e <TIM_Base_SetConfig+0x8a>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4a1d      	ldr	r2, [pc, #116]	@ (800ccb0 <TIM_Base_SetConfig+0xfc>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d108      	bne.n	800cc50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	689a      	ldr	r2, [r3, #8]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a08      	ldr	r2, [pc, #32]	@ (800cc98 <TIM_Base_SetConfig+0xe4>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d103      	bne.n	800cc84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	691a      	ldr	r2, [r3, #16]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	615a      	str	r2, [r3, #20]
}
 800cc8a:	bf00      	nop
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	40010000 	.word	0x40010000
 800cc9c:	40000400 	.word	0x40000400
 800cca0:	40000800 	.word	0x40000800
 800cca4:	40000c00 	.word	0x40000c00
 800cca8:	40014000 	.word	0x40014000
 800ccac:	40014400 	.word	0x40014400
 800ccb0:	40014800 	.word	0x40014800

0800ccb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b087      	sub	sp, #28
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a1b      	ldr	r3, [r3, #32]
 800ccc2:	f023 0201 	bic.w	r2, r3, #1
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a1b      	ldr	r3, [r3, #32]
 800ccce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f023 0303 	bic.w	r3, r3, #3
 800ccea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	f023 0302 	bic.w	r3, r3, #2
 800ccfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a1c      	ldr	r2, [pc, #112]	@ (800cd7c <TIM_OC1_SetConfig+0xc8>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d10c      	bne.n	800cd2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	f023 0308 	bic.w	r3, r3, #8
 800cd16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f023 0304 	bic.w	r3, r3, #4
 800cd28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a13      	ldr	r2, [pc, #76]	@ (800cd7c <TIM_OC1_SetConfig+0xc8>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d111      	bne.n	800cd56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cd40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	693a      	ldr	r2, [r7, #16]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	685a      	ldr	r2, [r3, #4]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	697a      	ldr	r2, [r7, #20]
 800cd6e:	621a      	str	r2, [r3, #32]
}
 800cd70:	bf00      	nop
 800cd72:	371c      	adds	r7, #28
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr
 800cd7c:	40010000 	.word	0x40010000

0800cd80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b087      	sub	sp, #28
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a1b      	ldr	r3, [r3, #32]
 800cd8e:	f023 0210 	bic.w	r2, r3, #16
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	021b      	lsls	r3, r3, #8
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	f023 0320 	bic.w	r3, r3, #32
 800cdca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	011b      	lsls	r3, r3, #4
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4a1e      	ldr	r2, [pc, #120]	@ (800ce54 <TIM_OC2_SetConfig+0xd4>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d10d      	bne.n	800cdfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cde6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a15      	ldr	r2, [pc, #84]	@ (800ce54 <TIM_OC2_SetConfig+0xd4>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d113      	bne.n	800ce2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ce0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ce12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	697a      	ldr	r2, [r7, #20]
 800ce44:	621a      	str	r2, [r3, #32]
}
 800ce46:	bf00      	nop
 800ce48:	371c      	adds	r7, #28
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	40010000 	.word	0x40010000

0800ce58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a1b      	ldr	r3, [r3, #32]
 800ce72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	69db      	ldr	r3, [r3, #28]
 800ce7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 0303 	bic.w	r3, r3, #3
 800ce8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	021b      	lsls	r3, r3, #8
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a1d      	ldr	r2, [pc, #116]	@ (800cf28 <TIM_OC3_SetConfig+0xd0>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d10d      	bne.n	800ced2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	021b      	lsls	r3, r3, #8
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ced0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a14      	ldr	r2, [pc, #80]	@ (800cf28 <TIM_OC3_SetConfig+0xd0>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d113      	bne.n	800cf02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	695b      	ldr	r3, [r3, #20]
 800ceee:	011b      	lsls	r3, r3, #4
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	699b      	ldr	r3, [r3, #24]
 800cefa:	011b      	lsls	r3, r3, #4
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	4313      	orrs	r3, r2
 800cf00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	685a      	ldr	r2, [r3, #4]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	621a      	str	r2, [r3, #32]
}
 800cf1c:	bf00      	nop
 800cf1e:	371c      	adds	r7, #28
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr
 800cf28:	40010000 	.word	0x40010000

0800cf2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b087      	sub	sp, #28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6a1b      	ldr	r3, [r3, #32]
 800cf46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	69db      	ldr	r3, [r3, #28]
 800cf52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	021b      	lsls	r3, r3, #8
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cf76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	031b      	lsls	r3, r3, #12
 800cf7e:	693a      	ldr	r2, [r7, #16]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a10      	ldr	r2, [pc, #64]	@ (800cfc8 <TIM_OC4_SetConfig+0x9c>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d109      	bne.n	800cfa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	695b      	ldr	r3, [r3, #20]
 800cf98:	019b      	lsls	r3, r3, #6
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	697a      	ldr	r2, [r7, #20]
 800cfa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	685a      	ldr	r2, [r3, #4]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	693a      	ldr	r2, [r7, #16]
 800cfb8:	621a      	str	r2, [r3, #32]
}
 800cfba:	bf00      	nop
 800cfbc:	371c      	adds	r7, #28
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	40010000 	.word	0x40010000

0800cfcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	f023 0201 	bic.w	r2, r3, #1
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	699b      	ldr	r3, [r3, #24]
 800cfea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6a1b      	ldr	r3, [r3, #32]
 800cff0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	4a24      	ldr	r2, [pc, #144]	@ (800d088 <TIM_TI1_SetConfig+0xbc>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d013      	beq.n	800d022 <TIM_TI1_SetConfig+0x56>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d000:	d00f      	beq.n	800d022 <TIM_TI1_SetConfig+0x56>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	4a21      	ldr	r2, [pc, #132]	@ (800d08c <TIM_TI1_SetConfig+0xc0>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d00b      	beq.n	800d022 <TIM_TI1_SetConfig+0x56>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	4a20      	ldr	r2, [pc, #128]	@ (800d090 <TIM_TI1_SetConfig+0xc4>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d007      	beq.n	800d022 <TIM_TI1_SetConfig+0x56>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	4a1f      	ldr	r2, [pc, #124]	@ (800d094 <TIM_TI1_SetConfig+0xc8>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d003      	beq.n	800d022 <TIM_TI1_SetConfig+0x56>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	4a1e      	ldr	r2, [pc, #120]	@ (800d098 <TIM_TI1_SetConfig+0xcc>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d101      	bne.n	800d026 <TIM_TI1_SetConfig+0x5a>
 800d022:	2301      	movs	r3, #1
 800d024:	e000      	b.n	800d028 <TIM_TI1_SetConfig+0x5c>
 800d026:	2300      	movs	r3, #0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d008      	beq.n	800d03e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f023 0303 	bic.w	r3, r3, #3
 800d032:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d034:	697a      	ldr	r2, [r7, #20]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4313      	orrs	r3, r2
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	e003      	b.n	800d046 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f043 0301 	orr.w	r3, r3, #1
 800d044:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d04c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	011b      	lsls	r3, r3, #4
 800d052:	b2db      	uxtb	r3, r3
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	4313      	orrs	r3, r2
 800d058:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	f023 030a 	bic.w	r3, r3, #10
 800d060:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	f003 030a 	and.w	r3, r3, #10
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	4313      	orrs	r3, r2
 800d06c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	697a      	ldr	r2, [r7, #20]
 800d072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	693a      	ldr	r2, [r7, #16]
 800d078:	621a      	str	r2, [r3, #32]
}
 800d07a:	bf00      	nop
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	40010000 	.word	0x40010000
 800d08c:	40000400 	.word	0x40000400
 800d090:	40000800 	.word	0x40000800
 800d094:	40000c00 	.word	0x40000c00
 800d098:	40014000 	.word	0x40014000

0800d09c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b087      	sub	sp, #28
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6a1b      	ldr	r3, [r3, #32]
 800d0ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	f023 0201 	bic.w	r2, r3, #1
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	693a      	ldr	r2, [r7, #16]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f023 030a 	bic.w	r3, r3, #10
 800d0d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	621a      	str	r2, [r3, #32]
}
 800d0ee:	bf00      	nop
 800d0f0:	371c      	adds	r7, #28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr

0800d0fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d0fa:	b480      	push	{r7}
 800d0fc:	b087      	sub	sp, #28
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	60f8      	str	r0, [r7, #12]
 800d102:	60b9      	str	r1, [r7, #8]
 800d104:	607a      	str	r2, [r7, #4]
 800d106:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6a1b      	ldr	r3, [r3, #32]
 800d10c:	f023 0210 	bic.w	r2, r3, #16
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	699b      	ldr	r3, [r3, #24]
 800d118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	697a      	ldr	r2, [r7, #20]
 800d12e:	4313      	orrs	r3, r2
 800d130:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	031b      	lsls	r3, r3, #12
 800d13e:	b29b      	uxth	r3, r3
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	4313      	orrs	r3, r2
 800d144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d14c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	011b      	lsls	r3, r3, #4
 800d152:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d156:	693a      	ldr	r2, [r7, #16]
 800d158:	4313      	orrs	r3, r2
 800d15a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	693a      	ldr	r2, [r7, #16]
 800d166:	621a      	str	r2, [r3, #32]
}
 800d168:	bf00      	nop
 800d16a:	371c      	adds	r7, #28
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d174:	b480      	push	{r7}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6a1b      	ldr	r3, [r3, #32]
 800d184:	f023 0210 	bic.w	r2, r3, #16
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6a1b      	ldr	r3, [r3, #32]
 800d196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d19e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	031b      	lsls	r3, r3, #12
 800d1a4:	697a      	ldr	r2, [r7, #20]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d1b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	011b      	lsls	r3, r3, #4
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	697a      	ldr	r2, [r7, #20]
 800d1c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	621a      	str	r2, [r3, #32]
}
 800d1c8:	bf00      	nop
 800d1ca:	371c      	adds	r7, #28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b087      	sub	sp, #28
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6a1b      	ldr	r3, [r3, #32]
 800d1e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	69db      	ldr	r3, [r3, #28]
 800d1f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f023 0303 	bic.w	r3, r3, #3
 800d200:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4313      	orrs	r3, r2
 800d208:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d210:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	011b      	lsls	r3, r3, #4
 800d216:	b2db      	uxtb	r3, r3
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800d224:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	021b      	lsls	r3, r3, #8
 800d22a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800d22e:	693a      	ldr	r2, [r7, #16]
 800d230:	4313      	orrs	r3, r2
 800d232:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	693a      	ldr	r2, [r7, #16]
 800d23e:	621a      	str	r2, [r3, #32]
}
 800d240:	bf00      	nop
 800d242:	371c      	adds	r7, #28
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b087      	sub	sp, #28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	69db      	ldr	r3, [r3, #28]
 800d26a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d278:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	021b      	lsls	r3, r3, #8
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	4313      	orrs	r3, r2
 800d282:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d28a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	031b      	lsls	r3, r3, #12
 800d290:	b29b      	uxth	r3, r3
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	4313      	orrs	r3, r2
 800d296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800d29e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	031b      	lsls	r3, r3, #12
 800d2a4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	621a      	str	r2, [r3, #32]
}
 800d2ba:	bf00      	nop
 800d2bc:	371c      	adds	r7, #28
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	b085      	sub	sp, #20
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	f043 0307 	orr.w	r3, r3, #7
 800d2e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	609a      	str	r2, [r3, #8]
}
 800d2f0:	bf00      	nop
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	021a      	lsls	r2, r3, #8
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	431a      	orrs	r2, r3
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	4313      	orrs	r3, r2
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	4313      	orrs	r3, r2
 800d328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	697a      	ldr	r2, [r7, #20]
 800d32e:	609a      	str	r2, [r3, #8]
}
 800d330:	bf00      	nop
 800d332:	371c      	adds	r7, #28
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b087      	sub	sp, #28
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f003 031f 	and.w	r3, r3, #31
 800d34e:	2201      	movs	r2, #1
 800d350:	fa02 f303 	lsl.w	r3, r2, r3
 800d354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6a1a      	ldr	r2, [r3, #32]
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	43db      	mvns	r3, r3
 800d35e:	401a      	ands	r2, r3
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6a1a      	ldr	r2, [r3, #32]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f003 031f 	and.w	r3, r3, #31
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	fa01 f303 	lsl.w	r3, r1, r3
 800d374:	431a      	orrs	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	621a      	str	r2, [r3, #32]
}
 800d37a:	bf00      	nop
 800d37c:	371c      	adds	r7, #28
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d101      	bne.n	800d3a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d39c:	2302      	movs	r3, #2
 800d39e:	e050      	b.n	800d442 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a1c      	ldr	r2, [pc, #112]	@ (800d450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d018      	beq.n	800d416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3ec:	d013      	beq.n	800d416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a18      	ldr	r2, [pc, #96]	@ (800d454 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d00e      	beq.n	800d416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a16      	ldr	r2, [pc, #88]	@ (800d458 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d009      	beq.n	800d416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a15      	ldr	r2, [pc, #84]	@ (800d45c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d004      	beq.n	800d416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a13      	ldr	r2, [pc, #76]	@ (800d460 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d10c      	bne.n	800d430 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d41c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	4313      	orrs	r3, r2
 800d426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3714      	adds	r7, #20
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	40010000 	.word	0x40010000
 800d454:	40000400 	.word	0x40000400
 800d458:	40000800 	.word	0x40000800
 800d45c:	40000c00 	.word	0x40000c00
 800d460:	40014000 	.word	0x40014000

0800d464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d46c:	bf00      	nop
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d480:	bf00      	nop
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d49a:	2301      	movs	r3, #1
 800d49c:	e03f      	b.n	800d51e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7f8 ff2e 	bl	8006314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2224      	movs	r2, #36	@ 0x24
 800d4bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	68da      	ldr	r2, [r3, #12]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d4ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fc1b 	bl	800dd0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	691a      	ldr	r2, [r3, #16]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d4e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	695a      	ldr	r2, [r3, #20]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d4f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2220      	movs	r2, #32
 800d510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2220      	movs	r2, #32
 800d518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b08a      	sub	sp, #40	@ 0x28
 800d52a:	af02      	add	r7, sp, #8
 800d52c:	60f8      	str	r0, [r7, #12]
 800d52e:	60b9      	str	r1, [r7, #8]
 800d530:	603b      	str	r3, [r7, #0]
 800d532:	4613      	mov	r3, r2
 800d534:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d536:	2300      	movs	r3, #0
 800d538:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d540:	b2db      	uxtb	r3, r3
 800d542:	2b20      	cmp	r3, #32
 800d544:	d17c      	bne.n	800d640 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <HAL_UART_Transmit+0x2c>
 800d54c:	88fb      	ldrh	r3, [r7, #6]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e075      	b.n	800d642 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d101      	bne.n	800d564 <HAL_UART_Transmit+0x3e>
 800d560:	2302      	movs	r3, #2
 800d562:	e06e      	b.n	800d642 <HAL_UART_Transmit+0x11c>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2200      	movs	r2, #0
 800d570:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2221      	movs	r2, #33	@ 0x21
 800d576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d57a:	f7fb ff21 	bl	80093c0 <HAL_GetTick>
 800d57e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	88fa      	ldrh	r2, [r7, #6]
 800d584:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	88fa      	ldrh	r2, [r7, #6]
 800d58a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d594:	d108      	bne.n	800d5a8 <HAL_UART_Transmit+0x82>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d104      	bne.n	800d5a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	61bb      	str	r3, [r7, #24]
 800d5a6:	e003      	b.n	800d5b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800d5b8:	e02a      	b.n	800d610 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	9300      	str	r3, [sp, #0]
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	2180      	movs	r1, #128	@ 0x80
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f000 fa17 	bl	800d9f8 <UART_WaitOnFlagUntilTimeout>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d001      	beq.n	800d5d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	e036      	b.n	800d642 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10b      	bne.n	800d5f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	3302      	adds	r3, #2
 800d5ee:	61bb      	str	r3, [r7, #24]
 800d5f0:	e007      	b.n	800d602 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	781a      	ldrb	r2, [r3, #0]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	3301      	adds	r3, #1
 800d600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d606:	b29b      	uxth	r3, r3
 800d608:	3b01      	subs	r3, #1
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d614:	b29b      	uxth	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1cf      	bne.n	800d5ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2200      	movs	r2, #0
 800d622:	2140      	movs	r1, #64	@ 0x40
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f000 f9e7 	bl	800d9f8 <UART_WaitOnFlagUntilTimeout>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d630:	2303      	movs	r3, #3
 800d632:	e006      	b.n	800d642 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2220      	movs	r2, #32
 800d638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	e000      	b.n	800d642 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d640:	2302      	movs	r3, #2
  }
}
 800d642:	4618      	mov	r0, r3
 800d644:	3720      	adds	r7, #32
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
	...

0800d64c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b08a      	sub	sp, #40	@ 0x28
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800d66c:	2300      	movs	r3, #0
 800d66e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800d670:	2300      	movs	r3, #0
 800d672:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d676:	f003 030f 	and.w	r3, r3, #15
 800d67a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10d      	bne.n	800d69e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d684:	f003 0320 	and.w	r3, r3, #32
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d008      	beq.n	800d69e <HAL_UART_IRQHandler+0x52>
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	f003 0320 	and.w	r3, r3, #32
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 faa1 	bl	800dbde <UART_Receive_IT>
      return;
 800d69c:	e17c      	b.n	800d998 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 80b1 	beq.w	800d808 <HAL_UART_IRQHandler+0x1bc>
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d105      	bne.n	800d6bc <HAL_UART_IRQHandler+0x70>
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 80a6 	beq.w	800d808 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <HAL_UART_IRQHandler+0x90>
 800d6c6:	6a3b      	ldr	r3, [r7, #32]
 800d6c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d005      	beq.n	800d6dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d4:	f043 0201 	orr.w	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	f003 0304 	and.w	r3, r3, #4
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <HAL_UART_IRQHandler+0xb0>
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	f003 0301 	and.w	r3, r3, #1
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d005      	beq.n	800d6fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6f4:	f043 0202 	orr.w	r2, r3, #2
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fe:	f003 0302 	and.w	r3, r3, #2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00a      	beq.n	800d71c <HAL_UART_IRQHandler+0xd0>
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d005      	beq.n	800d71c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d714:	f043 0204 	orr.w	r2, r3, #4
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800d71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71e:	f003 0308 	and.w	r3, r3, #8
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00f      	beq.n	800d746 <HAL_UART_IRQHandler+0xfa>
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	f003 0320 	and.w	r3, r3, #32
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d104      	bne.n	800d73a <HAL_UART_IRQHandler+0xee>
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	2b00      	cmp	r3, #0
 800d738:	d005      	beq.n	800d746 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d73e:	f043 0208 	orr.w	r2, r3, #8
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 811f 	beq.w	800d98e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d752:	f003 0320 	and.w	r3, r3, #32
 800d756:	2b00      	cmp	r3, #0
 800d758:	d007      	beq.n	800d76a <HAL_UART_IRQHandler+0x11e>
 800d75a:	6a3b      	ldr	r3, [r7, #32]
 800d75c:	f003 0320 	and.w	r3, r3, #32
 800d760:	2b00      	cmp	r3, #0
 800d762:	d002      	beq.n	800d76a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 fa3a 	bl	800dbde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d774:	2b40      	cmp	r3, #64	@ 0x40
 800d776:	bf0c      	ite	eq
 800d778:	2301      	moveq	r3, #1
 800d77a:	2300      	movne	r3, #0
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d784:	f003 0308 	and.w	r3, r3, #8
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d102      	bne.n	800d792 <HAL_UART_IRQHandler+0x146>
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d031      	beq.n	800d7f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f97a 	bl	800da8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	695b      	ldr	r3, [r3, #20]
 800d79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7a2:	2b40      	cmp	r3, #64	@ 0x40
 800d7a4:	d123      	bne.n	800d7ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	695a      	ldr	r2, [r3, #20]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d7b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d013      	beq.n	800d7e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7c2:	4a77      	ldr	r2, [pc, #476]	@ (800d9a0 <HAL_UART_IRQHandler+0x354>)
 800d7c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fc fbc7 	bl	8009f5e <HAL_DMA_Abort_IT>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d016      	beq.n	800d804 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7e4:	e00e      	b.n	800d804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f8f0 	bl	800d9cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7ec:	e00a      	b.n	800d804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f8ec 	bl	800d9cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7f4:	e006      	b.n	800d804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f8e8 	bl	800d9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800d802:	e0c4      	b.n	800d98e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d804:	bf00      	nop
    return;
 800d806:	e0c2      	b.n	800d98e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	f040 80a2 	bne.w	800d956 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800d812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d814:	f003 0310 	and.w	r3, r3, #16
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 809c 	beq.w	800d956 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800d81e:	6a3b      	ldr	r3, [r7, #32]
 800d820:	f003 0310 	and.w	r3, r3, #16
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 8096 	beq.w	800d956 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d82a:	2300      	movs	r3, #0
 800d82c:	60fb      	str	r3, [r7, #12]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	60fb      	str	r3, [r7, #12]
 800d83e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d84a:	2b40      	cmp	r3, #64	@ 0x40
 800d84c:	d14f      	bne.n	800d8ee <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800d858:	8a3b      	ldrh	r3, [r7, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f000 8099 	beq.w	800d992 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d864:	8a3a      	ldrh	r2, [r7, #16]
 800d866:	429a      	cmp	r2, r3
 800d868:	f080 8093 	bcs.w	800d992 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	8a3a      	ldrh	r2, [r7, #16]
 800d870:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d876:	69db      	ldr	r3, [r3, #28]
 800d878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d87c:	d02b      	beq.n	800d8d6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d88c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	695a      	ldr	r2, [r3, #20]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f022 0201 	bic.w	r2, r2, #1
 800d89c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	695a      	ldr	r2, [r3, #20]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d8ac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2220      	movs	r2, #32
 800d8b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68da      	ldr	r2, [r3, #12]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f022 0210 	bic.w	r2, r2, #16
 800d8ca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fc fad4 	bl	8009e7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f87a 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800d8ec:	e051      	b.n	800d992 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d900:	b29b      	uxth	r3, r3
 800d902:	2b00      	cmp	r3, #0
 800d904:	d047      	beq.n	800d996 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800d906:	8a7b      	ldrh	r3, [r7, #18]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d044      	beq.n	800d996 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	68da      	ldr	r2, [r3, #12]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800d91a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	695a      	ldr	r2, [r3, #20]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f022 0201 	bic.w	r2, r2, #1
 800d92a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2220      	movs	r2, #32
 800d930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	68da      	ldr	r2, [r3, #12]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f022 0210 	bic.w	r2, r2, #16
 800d948:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d94a:	8a7b      	ldrh	r3, [r7, #18]
 800d94c:	4619      	mov	r1, r3
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f846 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800d954:	e01f      	b.n	800d996 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d008      	beq.n	800d972 <HAL_UART_IRQHandler+0x326>
 800d960:	6a3b      	ldr	r3, [r7, #32]
 800d962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d966:	2b00      	cmp	r3, #0
 800d968:	d003      	beq.n	800d972 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f8cf 	bl	800db0e <UART_Transmit_IT>
    return;
 800d970:	e012      	b.n	800d998 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00d      	beq.n	800d998 <HAL_UART_IRQHandler+0x34c>
 800d97c:	6a3b      	ldr	r3, [r7, #32]
 800d97e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d982:	2b00      	cmp	r3, #0
 800d984:	d008      	beq.n	800d998 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f911 	bl	800dbae <UART_EndTransmit_IT>
    return;
 800d98c:	e004      	b.n	800d998 <HAL_UART_IRQHandler+0x34c>
    return;
 800d98e:	bf00      	nop
 800d990:	e002      	b.n	800d998 <HAL_UART_IRQHandler+0x34c>
      return;
 800d992:	bf00      	nop
 800d994:	e000      	b.n	800d998 <HAL_UART_IRQHandler+0x34c>
      return;
 800d996:	bf00      	nop
  }
}
 800d998:	3728      	adds	r7, #40	@ 0x28
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	0800dae7 	.word	0x0800dae7

0800d9a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9ec:	bf00      	nop
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	603b      	str	r3, [r7, #0]
 800da04:	4613      	mov	r3, r2
 800da06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da08:	e02c      	b.n	800da64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da10:	d028      	beq.n	800da64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d007      	beq.n	800da28 <UART_WaitOnFlagUntilTimeout+0x30>
 800da18:	f7fb fcd2 	bl	80093c0 <HAL_GetTick>
 800da1c:	4602      	mov	r2, r0
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	69ba      	ldr	r2, [r7, #24]
 800da24:	429a      	cmp	r2, r3
 800da26:	d21d      	bcs.n	800da64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68da      	ldr	r2, [r3, #12]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800da36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	695a      	ldr	r2, [r3, #20]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f022 0201 	bic.w	r2, r2, #1
 800da46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2220      	movs	r2, #32
 800da4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2220      	movs	r2, #32
 800da54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2200      	movs	r2, #0
 800da5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	e00f      	b.n	800da84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	4013      	ands	r3, r2
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	429a      	cmp	r2, r3
 800da72:	bf0c      	ite	eq
 800da74:	2301      	moveq	r3, #1
 800da76:	2300      	movne	r3, #0
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	461a      	mov	r2, r3
 800da7c:	79fb      	ldrb	r3, [r7, #7]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d0c3      	beq.n	800da0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800daa2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	695a      	ldr	r2, [r3, #20]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f022 0201 	bic.w	r2, r2, #1
 800dab2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d107      	bne.n	800dacc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68da      	ldr	r2, [r3, #12]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f022 0210 	bic.w	r2, r2, #16
 800daca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2220      	movs	r2, #32
 800dad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dada:	bf00      	nop
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2200      	movs	r2, #0
 800dafe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7ff ff63 	bl	800d9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db06:	bf00      	nop
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800db0e:	b480      	push	{r7}
 800db10:	b085      	sub	sp, #20
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2b21      	cmp	r3, #33	@ 0x21
 800db20:	d13e      	bne.n	800dba0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db2a:	d114      	bne.n	800db56 <UART_Transmit_IT+0x48>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d110      	bne.n	800db56 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6a1b      	ldr	r3, [r3, #32]
 800db38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	461a      	mov	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	1c9a      	adds	r2, r3, #2
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	621a      	str	r2, [r3, #32]
 800db54:	e008      	b.n	800db68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	1c59      	adds	r1, r3, #1
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	6211      	str	r1, [r2, #32]
 800db60:	781a      	ldrb	r2, [r3, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	3b01      	subs	r3, #1
 800db70:	b29b      	uxth	r3, r3
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	4619      	mov	r1, r3
 800db76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10f      	bne.n	800db9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68da      	ldr	r2, [r3, #12]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800db8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68da      	ldr	r2, [r3, #12]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	e000      	b.n	800dba2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dba0:	2302      	movs	r3, #2
  }
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b082      	sub	sp, #8
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68da      	ldr	r2, [r3, #12]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dbc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2220      	movs	r2, #32
 800dbca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff fee8 	bl	800d9a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b084      	sub	sp, #16
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	2b22      	cmp	r3, #34	@ 0x22
 800dbf0:	f040 8087 	bne.w	800dd02 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbfc:	d117      	bne.n	800dc2e <UART_Receive_IT+0x50>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d113      	bne.n	800dc2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dc06:	2300      	movs	r3, #0
 800dc08:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc26:	1c9a      	adds	r2, r3, #2
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	629a      	str	r2, [r3, #40]	@ 0x28
 800dc2c:	e026      	b.n	800dc7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc32:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800dc34:	2300      	movs	r3, #0
 800dc36:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc40:	d007      	beq.n	800dc52 <UART_Receive_IT+0x74>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10a      	bne.n	800dc60 <UART_Receive_IT+0x82>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	691b      	ldr	r3, [r3, #16]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d106      	bne.n	800dc60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	701a      	strb	r2, [r3, #0]
 800dc5e:	e008      	b.n	800dc72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc6c:	b2da      	uxtb	r2, r3
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc76:	1c5a      	adds	r2, r3, #1
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	3b01      	subs	r3, #1
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d136      	bne.n	800dcfe <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68da      	ldr	r2, [r3, #12]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f022 0220 	bic.w	r2, r2, #32
 800dc9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	68da      	ldr	r2, [r3, #12]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dcae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	695a      	ldr	r2, [r3, #20]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f022 0201 	bic.w	r2, r2, #1
 800dcbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2220      	movs	r2, #32
 800dcc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d10e      	bne.n	800dcee <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68da      	ldr	r2, [r3, #12]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f022 0210 	bic.w	r2, r2, #16
 800dcde:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dce4:	4619      	mov	r1, r3
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff fe7a 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
 800dcec:	e002      	b.n	800dcf4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff fe62 	bl	800d9b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e002      	b.n	800dd04 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	e000      	b.n	800dd04 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800dd02:	2302      	movs	r3, #2
  }
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3710      	adds	r7, #16
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd10:	b0c0      	sub	sp, #256	@ 0x100
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800dd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd28:	68d9      	ldr	r1, [r3, #12]
 800dd2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	ea40 0301 	orr.w	r3, r0, r1
 800dd34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dd36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd3a:	689a      	ldr	r2, [r3, #8]
 800dd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	431a      	orrs	r2, r3
 800dd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd48:	695b      	ldr	r3, [r3, #20]
 800dd4a:	431a      	orrs	r2, r3
 800dd4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd50:	69db      	ldr	r3, [r3, #28]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dd58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800dd64:	f021 010c 	bic.w	r1, r1, #12
 800dd68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800dd72:	430b      	orrs	r3, r1
 800dd74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dd76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800dd82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd86:	6999      	ldr	r1, [r3, #24]
 800dd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	ea40 0301 	orr.w	r3, r0, r1
 800dd92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dd94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	4b8f      	ldr	r3, [pc, #572]	@ (800dfd8 <UART_SetConfig+0x2cc>)
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d005      	beq.n	800ddac <UART_SetConfig+0xa0>
 800dda0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	4b8d      	ldr	r3, [pc, #564]	@ (800dfdc <UART_SetConfig+0x2d0>)
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d104      	bne.n	800ddb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ddac:	f7fd f98c 	bl	800b0c8 <HAL_RCC_GetPCLK2Freq>
 800ddb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ddb4:	e003      	b.n	800ddbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ddb6:	f7fd f973 	bl	800b0a0 <HAL_RCC_GetPCLK1Freq>
 800ddba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ddbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddc2:	69db      	ldr	r3, [r3, #28]
 800ddc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ddc8:	f040 810c 	bne.w	800dfe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ddcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ddd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ddda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ddde:	4622      	mov	r2, r4
 800dde0:	462b      	mov	r3, r5
 800dde2:	1891      	adds	r1, r2, r2
 800dde4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800dde6:	415b      	adcs	r3, r3
 800dde8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ddea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ddee:	4621      	mov	r1, r4
 800ddf0:	eb12 0801 	adds.w	r8, r2, r1
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	eb43 0901 	adc.w	r9, r3, r1
 800ddfa:	f04f 0200 	mov.w	r2, #0
 800ddfe:	f04f 0300 	mov.w	r3, #0
 800de02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800de06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800de0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800de0e:	4690      	mov	r8, r2
 800de10:	4699      	mov	r9, r3
 800de12:	4623      	mov	r3, r4
 800de14:	eb18 0303 	adds.w	r3, r8, r3
 800de18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de1c:	462b      	mov	r3, r5
 800de1e:	eb49 0303 	adc.w	r3, r9, r3
 800de22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800de26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800de32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800de36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800de3a:	460b      	mov	r3, r1
 800de3c:	18db      	adds	r3, r3, r3
 800de3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800de40:	4613      	mov	r3, r2
 800de42:	eb42 0303 	adc.w	r3, r2, r3
 800de46:	657b      	str	r3, [r7, #84]	@ 0x54
 800de48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800de4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800de50:	f7f2 fed2 	bl	8000bf8 <__aeabi_uldivmod>
 800de54:	4602      	mov	r2, r0
 800de56:	460b      	mov	r3, r1
 800de58:	4b61      	ldr	r3, [pc, #388]	@ (800dfe0 <UART_SetConfig+0x2d4>)
 800de5a:	fba3 2302 	umull	r2, r3, r3, r2
 800de5e:	095b      	lsrs	r3, r3, #5
 800de60:	011c      	lsls	r4, r3, #4
 800de62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de66:	2200      	movs	r2, #0
 800de68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800de6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800de70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800de74:	4642      	mov	r2, r8
 800de76:	464b      	mov	r3, r9
 800de78:	1891      	adds	r1, r2, r2
 800de7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800de7c:	415b      	adcs	r3, r3
 800de7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800de84:	4641      	mov	r1, r8
 800de86:	eb12 0a01 	adds.w	sl, r2, r1
 800de8a:	4649      	mov	r1, r9
 800de8c:	eb43 0b01 	adc.w	fp, r3, r1
 800de90:	f04f 0200 	mov.w	r2, #0
 800de94:	f04f 0300 	mov.w	r3, #0
 800de98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800de9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dea4:	4692      	mov	sl, r2
 800dea6:	469b      	mov	fp, r3
 800dea8:	4643      	mov	r3, r8
 800deaa:	eb1a 0303 	adds.w	r3, sl, r3
 800deae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800deb2:	464b      	mov	r3, r9
 800deb4:	eb4b 0303 	adc.w	r3, fp, r3
 800deb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800debc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dec8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800decc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ded0:	460b      	mov	r3, r1
 800ded2:	18db      	adds	r3, r3, r3
 800ded4:	643b      	str	r3, [r7, #64]	@ 0x40
 800ded6:	4613      	mov	r3, r2
 800ded8:	eb42 0303 	adc.w	r3, r2, r3
 800dedc:	647b      	str	r3, [r7, #68]	@ 0x44
 800dede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800dee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800dee6:	f7f2 fe87 	bl	8000bf8 <__aeabi_uldivmod>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4611      	mov	r1, r2
 800def0:	4b3b      	ldr	r3, [pc, #236]	@ (800dfe0 <UART_SetConfig+0x2d4>)
 800def2:	fba3 2301 	umull	r2, r3, r3, r1
 800def6:	095b      	lsrs	r3, r3, #5
 800def8:	2264      	movs	r2, #100	@ 0x64
 800defa:	fb02 f303 	mul.w	r3, r2, r3
 800defe:	1acb      	subs	r3, r1, r3
 800df00:	00db      	lsls	r3, r3, #3
 800df02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800df06:	4b36      	ldr	r3, [pc, #216]	@ (800dfe0 <UART_SetConfig+0x2d4>)
 800df08:	fba3 2302 	umull	r2, r3, r3, r2
 800df0c:	095b      	lsrs	r3, r3, #5
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800df14:	441c      	add	r4, r3
 800df16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800df1a:	2200      	movs	r2, #0
 800df1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800df20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800df24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800df28:	4642      	mov	r2, r8
 800df2a:	464b      	mov	r3, r9
 800df2c:	1891      	adds	r1, r2, r2
 800df2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800df30:	415b      	adcs	r3, r3
 800df32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800df38:	4641      	mov	r1, r8
 800df3a:	1851      	adds	r1, r2, r1
 800df3c:	6339      	str	r1, [r7, #48]	@ 0x30
 800df3e:	4649      	mov	r1, r9
 800df40:	414b      	adcs	r3, r1
 800df42:	637b      	str	r3, [r7, #52]	@ 0x34
 800df44:	f04f 0200 	mov.w	r2, #0
 800df48:	f04f 0300 	mov.w	r3, #0
 800df4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800df50:	4659      	mov	r1, fp
 800df52:	00cb      	lsls	r3, r1, #3
 800df54:	4651      	mov	r1, sl
 800df56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800df5a:	4651      	mov	r1, sl
 800df5c:	00ca      	lsls	r2, r1, #3
 800df5e:	4610      	mov	r0, r2
 800df60:	4619      	mov	r1, r3
 800df62:	4603      	mov	r3, r0
 800df64:	4642      	mov	r2, r8
 800df66:	189b      	adds	r3, r3, r2
 800df68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800df6c:	464b      	mov	r3, r9
 800df6e:	460a      	mov	r2, r1
 800df70:	eb42 0303 	adc.w	r3, r2, r3
 800df74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800df78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800df88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800df8c:	460b      	mov	r3, r1
 800df8e:	18db      	adds	r3, r3, r3
 800df90:	62bb      	str	r3, [r7, #40]	@ 0x28
 800df92:	4613      	mov	r3, r2
 800df94:	eb42 0303 	adc.w	r3, r2, r3
 800df98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800df9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800dfa2:	f7f2 fe29 	bl	8000bf8 <__aeabi_uldivmod>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe0 <UART_SetConfig+0x2d4>)
 800dfac:	fba3 1302 	umull	r1, r3, r3, r2
 800dfb0:	095b      	lsrs	r3, r3, #5
 800dfb2:	2164      	movs	r1, #100	@ 0x64
 800dfb4:	fb01 f303 	mul.w	r3, r1, r3
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	3332      	adds	r3, #50	@ 0x32
 800dfbe:	4a08      	ldr	r2, [pc, #32]	@ (800dfe0 <UART_SetConfig+0x2d4>)
 800dfc0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfc4:	095b      	lsrs	r3, r3, #5
 800dfc6:	f003 0207 	and.w	r2, r3, #7
 800dfca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4422      	add	r2, r4
 800dfd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dfd4:	e106      	b.n	800e1e4 <UART_SetConfig+0x4d8>
 800dfd6:	bf00      	nop
 800dfd8:	40011000 	.word	0x40011000
 800dfdc:	40011400 	.word	0x40011400
 800dfe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dfe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dfee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800dff6:	4642      	mov	r2, r8
 800dff8:	464b      	mov	r3, r9
 800dffa:	1891      	adds	r1, r2, r2
 800dffc:	6239      	str	r1, [r7, #32]
 800dffe:	415b      	adcs	r3, r3
 800e000:	627b      	str	r3, [r7, #36]	@ 0x24
 800e002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e006:	4641      	mov	r1, r8
 800e008:	1854      	adds	r4, r2, r1
 800e00a:	4649      	mov	r1, r9
 800e00c:	eb43 0501 	adc.w	r5, r3, r1
 800e010:	f04f 0200 	mov.w	r2, #0
 800e014:	f04f 0300 	mov.w	r3, #0
 800e018:	00eb      	lsls	r3, r5, #3
 800e01a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e01e:	00e2      	lsls	r2, r4, #3
 800e020:	4614      	mov	r4, r2
 800e022:	461d      	mov	r5, r3
 800e024:	4643      	mov	r3, r8
 800e026:	18e3      	adds	r3, r4, r3
 800e028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e02c:	464b      	mov	r3, r9
 800e02e:	eb45 0303 	adc.w	r3, r5, r3
 800e032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e042:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e046:	f04f 0200 	mov.w	r2, #0
 800e04a:	f04f 0300 	mov.w	r3, #0
 800e04e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e052:	4629      	mov	r1, r5
 800e054:	008b      	lsls	r3, r1, #2
 800e056:	4621      	mov	r1, r4
 800e058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e05c:	4621      	mov	r1, r4
 800e05e:	008a      	lsls	r2, r1, #2
 800e060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e064:	f7f2 fdc8 	bl	8000bf8 <__aeabi_uldivmod>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4b60      	ldr	r3, [pc, #384]	@ (800e1f0 <UART_SetConfig+0x4e4>)
 800e06e:	fba3 2302 	umull	r2, r3, r3, r2
 800e072:	095b      	lsrs	r3, r3, #5
 800e074:	011c      	lsls	r4, r3, #4
 800e076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e07a:	2200      	movs	r2, #0
 800e07c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e080:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e088:	4642      	mov	r2, r8
 800e08a:	464b      	mov	r3, r9
 800e08c:	1891      	adds	r1, r2, r2
 800e08e:	61b9      	str	r1, [r7, #24]
 800e090:	415b      	adcs	r3, r3
 800e092:	61fb      	str	r3, [r7, #28]
 800e094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e098:	4641      	mov	r1, r8
 800e09a:	1851      	adds	r1, r2, r1
 800e09c:	6139      	str	r1, [r7, #16]
 800e09e:	4649      	mov	r1, r9
 800e0a0:	414b      	adcs	r3, r1
 800e0a2:	617b      	str	r3, [r7, #20]
 800e0a4:	f04f 0200 	mov.w	r2, #0
 800e0a8:	f04f 0300 	mov.w	r3, #0
 800e0ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e0b0:	4659      	mov	r1, fp
 800e0b2:	00cb      	lsls	r3, r1, #3
 800e0b4:	4651      	mov	r1, sl
 800e0b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e0ba:	4651      	mov	r1, sl
 800e0bc:	00ca      	lsls	r2, r1, #3
 800e0be:	4610      	mov	r0, r2
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	4642      	mov	r2, r8
 800e0c6:	189b      	adds	r3, r3, r2
 800e0c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e0cc:	464b      	mov	r3, r9
 800e0ce:	460a      	mov	r2, r1
 800e0d0:	eb42 0303 	adc.w	r3, r2, r3
 800e0d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e0e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e0e4:	f04f 0200 	mov.w	r2, #0
 800e0e8:	f04f 0300 	mov.w	r3, #0
 800e0ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e0f0:	4649      	mov	r1, r9
 800e0f2:	008b      	lsls	r3, r1, #2
 800e0f4:	4641      	mov	r1, r8
 800e0f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e0fa:	4641      	mov	r1, r8
 800e0fc:	008a      	lsls	r2, r1, #2
 800e0fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e102:	f7f2 fd79 	bl	8000bf8 <__aeabi_uldivmod>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4611      	mov	r1, r2
 800e10c:	4b38      	ldr	r3, [pc, #224]	@ (800e1f0 <UART_SetConfig+0x4e4>)
 800e10e:	fba3 2301 	umull	r2, r3, r3, r1
 800e112:	095b      	lsrs	r3, r3, #5
 800e114:	2264      	movs	r2, #100	@ 0x64
 800e116:	fb02 f303 	mul.w	r3, r2, r3
 800e11a:	1acb      	subs	r3, r1, r3
 800e11c:	011b      	lsls	r3, r3, #4
 800e11e:	3332      	adds	r3, #50	@ 0x32
 800e120:	4a33      	ldr	r2, [pc, #204]	@ (800e1f0 <UART_SetConfig+0x4e4>)
 800e122:	fba2 2303 	umull	r2, r3, r2, r3
 800e126:	095b      	lsrs	r3, r3, #5
 800e128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e12c:	441c      	add	r4, r3
 800e12e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e132:	2200      	movs	r2, #0
 800e134:	673b      	str	r3, [r7, #112]	@ 0x70
 800e136:	677a      	str	r2, [r7, #116]	@ 0x74
 800e138:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e13c:	4642      	mov	r2, r8
 800e13e:	464b      	mov	r3, r9
 800e140:	1891      	adds	r1, r2, r2
 800e142:	60b9      	str	r1, [r7, #8]
 800e144:	415b      	adcs	r3, r3
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e14c:	4641      	mov	r1, r8
 800e14e:	1851      	adds	r1, r2, r1
 800e150:	6039      	str	r1, [r7, #0]
 800e152:	4649      	mov	r1, r9
 800e154:	414b      	adcs	r3, r1
 800e156:	607b      	str	r3, [r7, #4]
 800e158:	f04f 0200 	mov.w	r2, #0
 800e15c:	f04f 0300 	mov.w	r3, #0
 800e160:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e164:	4659      	mov	r1, fp
 800e166:	00cb      	lsls	r3, r1, #3
 800e168:	4651      	mov	r1, sl
 800e16a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e16e:	4651      	mov	r1, sl
 800e170:	00ca      	lsls	r2, r1, #3
 800e172:	4610      	mov	r0, r2
 800e174:	4619      	mov	r1, r3
 800e176:	4603      	mov	r3, r0
 800e178:	4642      	mov	r2, r8
 800e17a:	189b      	adds	r3, r3, r2
 800e17c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e17e:	464b      	mov	r3, r9
 800e180:	460a      	mov	r2, r1
 800e182:	eb42 0303 	adc.w	r3, r2, r3
 800e186:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	663b      	str	r3, [r7, #96]	@ 0x60
 800e192:	667a      	str	r2, [r7, #100]	@ 0x64
 800e194:	f04f 0200 	mov.w	r2, #0
 800e198:	f04f 0300 	mov.w	r3, #0
 800e19c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e1a0:	4649      	mov	r1, r9
 800e1a2:	008b      	lsls	r3, r1, #2
 800e1a4:	4641      	mov	r1, r8
 800e1a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e1aa:	4641      	mov	r1, r8
 800e1ac:	008a      	lsls	r2, r1, #2
 800e1ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e1b2:	f7f2 fd21 	bl	8000bf8 <__aeabi_uldivmod>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e1f0 <UART_SetConfig+0x4e4>)
 800e1bc:	fba3 1302 	umull	r1, r3, r3, r2
 800e1c0:	095b      	lsrs	r3, r3, #5
 800e1c2:	2164      	movs	r1, #100	@ 0x64
 800e1c4:	fb01 f303 	mul.w	r3, r1, r3
 800e1c8:	1ad3      	subs	r3, r2, r3
 800e1ca:	011b      	lsls	r3, r3, #4
 800e1cc:	3332      	adds	r3, #50	@ 0x32
 800e1ce:	4a08      	ldr	r2, [pc, #32]	@ (800e1f0 <UART_SetConfig+0x4e4>)
 800e1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800e1d4:	095b      	lsrs	r3, r3, #5
 800e1d6:	f003 020f 	and.w	r2, r3, #15
 800e1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4422      	add	r2, r4
 800e1e2:	609a      	str	r2, [r3, #8]
}
 800e1e4:	bf00      	nop
 800e1e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1f0:	51eb851f 	.word	0x51eb851f

0800e1f4 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b08c      	sub	sp, #48	@ 0x30
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	603b      	str	r3, [r7, #0]
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	71fb      	strb	r3, [r7, #7]
 800e200:	460b      	mov	r3, r1
 800e202:	71bb      	strb	r3, [r7, #6]
 800e204:	4613      	mov	r3, r2
 800e206:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800e20c:	79bb      	ldrb	r3, [r7, #6]
 800e20e:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800e210:	797b      	ldrb	r3, [r7, #5]
 800e212:	75bb      	strb	r3, [r7, #22]
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800e214:	f107 030c 	add.w	r3, r7, #12
 800e218:	2207      	movs	r2, #7
 800e21a:	2100      	movs	r1, #0
 800e21c:	4618      	mov	r0, r3
 800e21e:	f001 f9a7 	bl	800f570 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800e222:	f107 0318 	add.w	r3, r7, #24
 800e226:	2218      	movs	r2, #24
 800e228:	2100      	movs	r1, #0
 800e22a:	4618      	mov	r0, r3
 800e22c:	f001 f9a0 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e230:	233f      	movs	r3, #63	@ 0x3f
 800e232:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800e234:	238a      	movs	r3, #138	@ 0x8a
 800e236:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800e238:	f107 0314 	add.w	r3, r7, #20
 800e23c:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800e23e:	2303      	movs	r3, #3
 800e240:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 800e242:	f107 030c 	add.w	r3, r7, #12
 800e246:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800e248:	2307      	movs	r3, #7
 800e24a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800e24c:	f107 0318 	add.w	r3, r7, #24
 800e250:	2100      	movs	r1, #0
 800e252:	4618      	mov	r0, r3
 800e254:	f000 fe0a 	bl	800ee6c <hci_send_req>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	da01      	bge.n	800e262 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800e25e:	23ff      	movs	r3, #255	@ 0xff
 800e260:	e014      	b.n	800e28c <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800e262:	7b3b      	ldrb	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800e268:	7b3b      	ldrb	r3, [r7, #12]
 800e26a:	e00f      	b.n	800e28c <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800e26c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800e270:	b29a      	uxth	r2, r3
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800e276:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800e280:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800e284:	b29a      	uxth	r2, r3
 800e286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e288:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3730      	adds	r7, #48	@ 0x30
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800e294:	b590      	push	{r4, r7, lr}
 800e296:	b095      	sub	sp, #84	@ 0x54
 800e298:	af00      	add	r7, sp, #0
 800e29a:	4604      	mov	r4, r0
 800e29c:	4608      	mov	r0, r1
 800e29e:	4611      	mov	r1, r2
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4623      	mov	r3, r4
 800e2a4:	71fb      	strb	r3, [r7, #7]
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	80bb      	strh	r3, [r7, #4]
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	807b      	strh	r3, [r7, #2]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800e2b8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e2bc:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800e2c0:	4413      	add	r3, r2
 800e2c2:	330e      	adds	r3, #14
 800e2c4:	2b28      	cmp	r3, #40	@ 0x28
 800e2c6:	d901      	bls.n	800e2cc <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800e2c8:	2342      	movs	r3, #66	@ 0x42
 800e2ca:	e0d5      	b.n	800e478 <aci_gap_set_discoverable+0x1e4>

  buffer[indx] = AdvType;
 800e2cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e2d0:	3350      	adds	r3, #80	@ 0x50
 800e2d2:	443b      	add	r3, r7
 800e2d4:	79fa      	ldrb	r2, [r7, #7]
 800e2d6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e2da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e2de:	3301      	adds	r3, #1
 800e2e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800e2e4:	88bb      	ldrh	r3, [r7, #4]
 800e2e6:	80bb      	strh	r3, [r7, #4]
  Osal_MemCpy(buffer + indx, &AdvIntervMin, 2);
 800e2e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e2ec:	f107 0208 	add.w	r2, r7, #8
 800e2f0:	4413      	add	r3, r2
 800e2f2:	1d39      	adds	r1, r7, #4
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f001 f92a 	bl	800f550 <Osal_MemCpy>
  indx +=  2;
 800e2fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e300:	3302      	adds	r3, #2
 800e302:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800e306:	887b      	ldrh	r3, [r7, #2]
 800e308:	807b      	strh	r3, [r7, #2]
  Osal_MemCpy(buffer + indx, &AdvIntervMax, 2);
 800e30a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e30e:	f107 0208 	add.w	r2, r7, #8
 800e312:	4413      	add	r3, r2
 800e314:	1cb9      	adds	r1, r7, #2
 800e316:	2202      	movs	r2, #2
 800e318:	4618      	mov	r0, r3
 800e31a:	f001 f919 	bl	800f550 <Osal_MemCpy>
  indx +=  2;
 800e31e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e322:	3302      	adds	r3, #2
 800e324:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 800e328:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e32c:	3350      	adds	r3, #80	@ 0x50
 800e32e:	443b      	add	r3, r7
 800e330:	79ba      	ldrb	r2, [r7, #6]
 800e332:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e336:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e33a:	3301      	adds	r3, #1
 800e33c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800e340:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e344:	3350      	adds	r3, #80	@ 0x50
 800e346:	443b      	add	r3, r7
 800e348:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800e34c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e350:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e354:	3301      	adds	r3, #1
 800e356:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 800e35a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e35e:	3350      	adds	r3, #80	@ 0x50
 800e360:	443b      	add	r3, r7
 800e362:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e366:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e36a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e36e:	3301      	adds	r3, #1
 800e370:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  Osal_MemCpy(buffer + indx, LocalName, LocalNameLen);
 800e374:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e378:	f107 0208 	add.w	r2, r7, #8
 800e37c:	4413      	add	r3, r2
 800e37e:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e382:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e384:	4618      	mov	r0, r3
 800e386:	f001 f8e3 	bl	800f550 <Osal_MemCpy>
  indx +=  LocalNameLen;
 800e38a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800e38e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800e392:	4413      	add	r3, r2
 800e394:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800e398:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e39c:	3350      	adds	r3, #80	@ 0x50
 800e39e:	443b      	add	r3, r7
 800e3a0:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800e3a4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800e3a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  Osal_MemCpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800e3b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e3b6:	f107 0208 	add.w	r2, r7, #8
 800e3ba:	4413      	add	r3, r2
 800e3bc:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800e3c0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f001 f8c4 	bl	800f550 <Osal_MemCpy>
  indx +=  ServiceUUIDLen;  
 800e3c8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800e3cc:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800e3d0:	4413      	add	r3, r2
 800e3d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800e3d6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800e3da:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMin, 2);
 800e3de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e3e2:	f107 0208 	add.w	r2, r7, #8
 800e3e6:	4413      	add	r3, r2
 800e3e8:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 800e3ec:	2202      	movs	r2, #2
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f001 f8ae 	bl	800f550 <Osal_MemCpy>
  indx +=  2;
 800e3f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e3f8:	3302      	adds	r3, #2
 800e3fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800e3fe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800e402:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  Osal_MemCpy(buffer + indx, &SlaveConnIntervMax, 2);
 800e406:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e40a:	f107 0208 	add.w	r2, r7, #8
 800e40e:	4413      	add	r3, r2
 800e410:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800e414:	2202      	movs	r2, #2
 800e416:	4618      	mov	r0, r3
 800e418:	f001 f89a 	bl	800f550 <Osal_MemCpy>
  indx +=  2;    
 800e41c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e420:	3302      	adds	r3, #2
 800e422:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e426:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e42a:	2218      	movs	r2, #24
 800e42c:	2100      	movs	r1, #0
 800e42e:	4618      	mov	r0, r3
 800e430:	f001 f89e 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e434:	233f      	movs	r3, #63	@ 0x3f
 800e436:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800e438:	2383      	movs	r3, #131	@ 0x83
 800e43a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 800e43c:	f107 0308 	add.w	r3, r7, #8
 800e440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 800e442:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e446:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 800e448:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800e44c:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 800e44e:	2301      	movs	r3, #1
 800e450:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800e452:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e456:	2100      	movs	r1, #0
 800e458:	4618      	mov	r0, r3
 800e45a:	f000 fd07 	bl	800ee6c <hci_send_req>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	da01      	bge.n	800e468 <aci_gap_set_discoverable+0x1d4>
    return BLE_STATUS_TIMEOUT;
 800e464:	23ff      	movs	r3, #255	@ 0xff
 800e466:	e007      	b.n	800e478 <aci_gap_set_discoverable+0x1e4>

  if (status) {
 800e468:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <aci_gap_set_discoverable+0x1e2>
    return status;
 800e470:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e474:	e000      	b.n	800e478 <aci_gap_set_discoverable+0x1e4>
  }

  return 0;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3754      	adds	r7, #84	@ 0x54
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd90      	pop	{r4, r7, pc}

0800e480 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b090      	sub	sp, #64	@ 0x40
 800e484:	af00      	add	r7, sp, #0
 800e486:	603a      	str	r2, [r7, #0]
 800e488:	461a      	mov	r2, r3
 800e48a:	4603      	mov	r3, r0
 800e48c:	71fb      	strb	r3, [r7, #7]
 800e48e:	460b      	mov	r3, r1
 800e490:	71bb      	strb	r3, [r7, #6]
 800e492:	4613      	mov	r3, r2
 800e494:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800e496:	79fb      	ldrb	r3, [r7, #7]
 800e498:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800e49a:	79bb      	ldrb	r3, [r7, #6]
 800e49c:	737b      	strb	r3, [r7, #13]
  Osal_MemCpy(cp.oob_data, oob_data, 16);
 800e49e:	f107 030c 	add.w	r3, r7, #12
 800e4a2:	3302      	adds	r3, #2
 800e4a4:	2210      	movs	r2, #16
 800e4a6:	6839      	ldr	r1, [r7, #0]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f001 f851 	bl	800f550 <Osal_MemCpy>
  cp.min_encryption_key_size = min_encryption_key_size;
 800e4ae:	797b      	ldrb	r3, [r7, #5]
 800e4b0:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 800e4b2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e4b6:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800e4b8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800e4bc:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800e4c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4c2:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 800e4c6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e4ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e4ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4d2:	2218      	movs	r2, #24
 800e4d4:	2100      	movs	r1, #0
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f001 f84a 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e4dc:	233f      	movs	r3, #63	@ 0x3f
 800e4de:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800e4e0:	2386      	movs	r3, #134	@ 0x86
 800e4e2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 800e4e4:	f107 030c 	add.w	r3, r7, #12
 800e4e8:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 800e4ea:	231a      	movs	r3, #26
 800e4ec:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 800e4ee:	f107 030b 	add.w	r3, r7, #11
 800e4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800e4f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 fcb4 	bl	800ee6c <hci_send_req>
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	da01      	bge.n	800e50e <aci_gap_set_auth_requirement+0x8e>
    return BLE_STATUS_TIMEOUT;
 800e50a:	23ff      	movs	r3, #255	@ 0xff
 800e50c:	e005      	b.n	800e51a <aci_gap_set_auth_requirement+0x9a>

  if (status) {
 800e50e:	7afb      	ldrb	r3, [r7, #11]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <aci_gap_set_auth_requirement+0x98>
    return status;
 800e514:	7afb      	ldrb	r3, [r7, #11]
 800e516:	e000      	b.n	800e51a <aci_gap_set_auth_requirement+0x9a>
  }
    
  return 0;
 800e518:	2300      	movs	r3, #0
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3740      	adds	r7, #64	@ 0x40
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b092      	sub	sp, #72	@ 0x48
 800e526:	af00      	add	r7, sp, #0
 800e528:	4603      	mov	r3, r0
 800e52a:	6039      	str	r1, [r7, #0]
 800e52c:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800e534:	79fb      	ldrb	r3, [r7, #7]
 800e536:	2b1f      	cmp	r3, #31
 800e538:	d901      	bls.n	800e53e <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800e53a:	2342      	movs	r3, #66	@ 0x42
 800e53c:	e03e      	b.n	800e5bc <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 800e53e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e542:	3348      	adds	r3, #72	@ 0x48
 800e544:	443b      	add	r3, r7
 800e546:	79fa      	ldrb	r2, [r7, #7]
 800e548:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800e54c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e550:	3301      	adds	r3, #1
 800e552:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  Osal_MemCpy(buffer + indx, AdvData, AdvLen);
 800e556:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e55a:	f107 0208 	add.w	r2, r7, #8
 800e55e:	4413      	add	r3, r2
 800e560:	79fa      	ldrb	r2, [r7, #7]
 800e562:	6839      	ldr	r1, [r7, #0]
 800e564:	4618      	mov	r0, r3
 800e566:	f000 fff3 	bl	800f550 <Osal_MemCpy>
  indx +=  AdvLen;
 800e56a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800e56e:	79fb      	ldrb	r3, [r7, #7]
 800e570:	4413      	add	r3, r2
 800e572:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  Osal_MemSet(&rq, 0, sizeof(rq));
 800e576:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e57a:	2218      	movs	r2, #24
 800e57c:	2100      	movs	r1, #0
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 fff6 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e584:	233f      	movs	r3, #63	@ 0x3f
 800e586:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800e588:	238e      	movs	r3, #142	@ 0x8e
 800e58a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800e58c:	f107 0308 	add.w	r3, r7, #8
 800e590:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800e592:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e596:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 800e598:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800e59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 800e5a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f000 fc5f 	bl	800ee6c <hci_send_req>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	da01      	bge.n	800e5b8 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 800e5b4:	23ff      	movs	r3, #255	@ 0xff
 800e5b6:	e001      	b.n	800e5bc <aci_gap_update_adv_data+0x9a>
    
  return status;
 800e5b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3748      	adds	r7, #72	@ 0x48
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b088      	sub	sp, #32
 800e5c8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e5ca:	f107 0308 	add.w	r3, r7, #8
 800e5ce:	2218      	movs	r2, #24
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 ffcc 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e5d8:	233f      	movs	r3, #63	@ 0x3f
 800e5da:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800e5dc:	f240 1301 	movw	r3, #257	@ 0x101
 800e5e0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e5e2:	1dfb      	adds	r3, r7, #7
 800e5e4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800e5ea:	f107 0308 	add.w	r3, r7, #8
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 fc3b 	bl	800ee6c <hci_send_req>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	da01      	bge.n	800e600 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800e5fc:	23ff      	movs	r3, #255	@ 0xff
 800e5fe:	e000      	b.n	800e602 <aci_gatt_init+0x3e>

  return status;
 800e600:	79fb      	ldrb	r3, [r7, #7]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3720      	adds	r7, #32
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b090      	sub	sp, #64	@ 0x40
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6039      	str	r1, [r7, #0]
 800e612:	4611      	mov	r1, r2
 800e614:	461a      	mov	r2, r3
 800e616:	4603      	mov	r3, r0
 800e618:	71fb      	strb	r3, [r7, #7]
 800e61a:	460b      	mov	r3, r1
 800e61c:	71bb      	strb	r3, [r7, #6]
 800e61e:	4613      	mov	r3, r2
 800e620:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e622:	2300      	movs	r3, #0
 800e624:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 800e628:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e62c:	3340      	adds	r3, #64	@ 0x40
 800e62e:	443b      	add	r3, r7
 800e630:	79fa      	ldrb	r2, [r7, #7]
 800e632:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e636:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e63a:	3301      	adds	r3, #1
 800e63c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	2b01      	cmp	r3, #1
 800e644:	d103      	bne.n	800e64e <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800e646:	2302      	movs	r3, #2
 800e648:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e64c:	e002      	b.n	800e654 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800e64e:	2310      	movs	r3, #16
 800e650:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  Osal_MemCpy(buffer + indx, service_uuid, uuid_len);
 800e654:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e658:	f107 020c 	add.w	r2, r7, #12
 800e65c:	4413      	add	r3, r2
 800e65e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e662:	6839      	ldr	r1, [r7, #0]
 800e664:	4618      	mov	r0, r3
 800e666:	f000 ff73 	bl	800f550 <Osal_MemCpy>
  indx +=  uuid_len;
 800e66a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800e66e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e672:	4413      	add	r3, r2
 800e674:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 800e678:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e67c:	3340      	adds	r3, #64	@ 0x40
 800e67e:	443b      	add	r3, r7
 800e680:	79ba      	ldrb	r2, [r7, #6]
 800e682:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e686:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e68a:	3301      	adds	r3, #1
 800e68c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 800e690:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e694:	3340      	adds	r3, #64	@ 0x40
 800e696:	443b      	add	r3, r7
 800e698:	797a      	ldrb	r2, [r7, #5]
 800e69a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800e69e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800e6a8:	f107 0320 	add.w	r3, r7, #32
 800e6ac:	2203      	movs	r2, #3
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f000 ff5d 	bl	800f570 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e6b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6ba:	2218      	movs	r2, #24
 800e6bc:	2100      	movs	r1, #0
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f000 ff56 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e6c4:	233f      	movs	r3, #63	@ 0x3f
 800e6c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800e6c8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800e6cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 800e6ce:	f107 030c 	add.w	r3, r7, #12
 800e6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 800e6d4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e6d8:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 800e6da:	f107 0320 	add.w	r3, r7, #32
 800e6de:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800e6e0:	2303      	movs	r3, #3
 800e6e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800e6e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 fbbe 	bl	800ee6c <hci_send_req>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	da01      	bge.n	800e6fa <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800e6f6:	23ff      	movs	r3, #255	@ 0xff
 800e6f8:	e00c      	b.n	800e714 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800e6fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d002      	beq.n	800e708 <aci_gatt_add_serv+0xfe>
    return resp.status;
 800e702:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e706:	e005      	b.n	800e714 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800e708:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e710:	801a      	strh	r2, [r3, #0]

  return 0;
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3740      	adds	r7, #64	@ 0x40
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b092      	sub	sp, #72	@ 0x48
 800e720:	af00      	add	r7, sp, #0
 800e722:	603a      	str	r2, [r7, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	4603      	mov	r3, r0
 800e728:	80fb      	strh	r3, [r7, #6]
 800e72a:	460b      	mov	r3, r1
 800e72c:	717b      	strb	r3, [r7, #5]
 800e72e:	4613      	mov	r3, r2
 800e730:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800e732:	2300      	movs	r3, #0
 800e734:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800e738:	88fb      	ldrh	r3, [r7, #6]
 800e73a:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &serviceHandle, 2);
 800e73c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e740:	f107 020c 	add.w	r2, r7, #12
 800e744:	4413      	add	r3, r2
 800e746:	1db9      	adds	r1, r7, #6
 800e748:	2202      	movs	r2, #2
 800e74a:	4618      	mov	r0, r3
 800e74c:	f000 ff00 	bl	800f550 <Osal_MemCpy>
  indx += 2;
 800e750:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e754:	3302      	adds	r3, #2
 800e756:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 800e75a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e75e:	3348      	adds	r3, #72	@ 0x48
 800e760:	443b      	add	r3, r7
 800e762:	797a      	ldrb	r2, [r7, #5]
 800e764:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e768:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e76c:	3301      	adds	r3, #1
 800e76e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800e772:	797b      	ldrb	r3, [r7, #5]
 800e774:	2b01      	cmp	r3, #1
 800e776:	d103      	bne.n	800e780 <aci_gatt_add_char+0x64>
    uuid_len = 2;
 800e778:	2302      	movs	r3, #2
 800e77a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e77e:	e002      	b.n	800e786 <aci_gatt_add_char+0x6a>
  }
  else {
    uuid_len = 16;
 800e780:	2310      	movs	r3, #16
 800e782:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  Osal_MemCpy(buffer + indx, charUuid, uuid_len);
 800e786:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e78a:	f107 020c 	add.w	r2, r7, #12
 800e78e:	4413      	add	r3, r2
 800e790:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800e794:	6839      	ldr	r1, [r7, #0]
 800e796:	4618      	mov	r0, r3
 800e798:	f000 feda 	bl	800f550 <Osal_MemCpy>
  indx +=  uuid_len;
 800e79c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800e7a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e7a4:	4413      	add	r3, r2
 800e7a6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 800e7aa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e7ae:	3348      	adds	r3, #72	@ 0x48
 800e7b0:	443b      	add	r3, r7
 800e7b2:	793a      	ldrb	r2, [r7, #4]
 800e7b4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e7b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e7bc:	3301      	adds	r3, #1
 800e7be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800e7c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e7c6:	3348      	adds	r3, #72	@ 0x48
 800e7c8:	443b      	add	r3, r7
 800e7ca:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800e7ce:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e7d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 800e7dc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e7e0:	3348      	adds	r3, #72	@ 0x48
 800e7e2:	443b      	add	r3, r7
 800e7e4:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e7e8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e7ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 800e7f6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e7fa:	3348      	adds	r3, #72	@ 0x48
 800e7fc:	443b      	add	r3, r7
 800e7fe:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800e802:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e806:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e80a:	3301      	adds	r3, #1
 800e80c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 800e810:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e814:	3348      	adds	r3, #72	@ 0x48
 800e816:	443b      	add	r3, r7
 800e818:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e81c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e820:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e824:	3301      	adds	r3, #1
 800e826:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 800e82a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e82e:	3348      	adds	r3, #72	@ 0x48
 800e830:	443b      	add	r3, r7
 800e832:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800e836:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800e83a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e83e:	3301      	adds	r3, #1
 800e840:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  Osal_MemSet(&resp, 0, sizeof(resp));
 800e844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e848:	2203      	movs	r2, #3
 800e84a:	2100      	movs	r1, #0
 800e84c:	4618      	mov	r0, r3
 800e84e:	f000 fe8f 	bl	800f570 <Osal_MemSet>

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e856:	2218      	movs	r2, #24
 800e858:	2100      	movs	r1, #0
 800e85a:	4618      	mov	r0, r3
 800e85c:	f000 fe88 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e860:	233f      	movs	r3, #63	@ 0x3f
 800e862:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800e864:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800e868:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800e86a:	f107 030c 	add.w	r3, r7, #12
 800e86e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800e870:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e874:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 800e876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800e87c:	2303      	movs	r3, #3
 800e87e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800e880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e884:	2100      	movs	r1, #0
 800e886:	4618      	mov	r0, r3
 800e888:	f000 faf0 	bl	800ee6c <hci_send_req>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	da01      	bge.n	800e896 <aci_gatt_add_char+0x17a>
    return BLE_STATUS_TIMEOUT;
 800e892:	23ff      	movs	r3, #255	@ 0xff
 800e894:	e00c      	b.n	800e8b0 <aci_gatt_add_char+0x194>

  if (resp.status) {
 800e896:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d002      	beq.n	800e8a4 <aci_gatt_add_char+0x188>
    return resp.status;
 800e89e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e8a2:	e005      	b.n	800e8b0 <aci_gatt_add_char+0x194>
  }
    
  *charHandle = btohs(resp.handle);
 800e8a4:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 800e8a8:	b29a      	uxth	r2, r3
 800e8aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8ac:	801a      	strh	r2, [r3, #0]

  return 0;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3748      	adds	r7, #72	@ 0x48
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800e8b8:	b590      	push	{r4, r7, lr}
 800e8ba:	b0ab      	sub	sp, #172	@ 0xac
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4604      	mov	r4, r0
 800e8c0:	4608      	mov	r0, r1
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	4623      	mov	r3, r4
 800e8c8:	80fb      	strh	r3, [r7, #6]
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	80bb      	strh	r3, [r7, #4]
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	70fb      	strb	r3, [r7, #3]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800e8dc:	78bb      	ldrb	r3, [r7, #2]
 800e8de:	2b7a      	cmp	r3, #122	@ 0x7a
 800e8e0:	d901      	bls.n	800e8e6 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800e8e2:	2342      	movs	r3, #66	@ 0x42
 800e8e4:	e07a      	b.n	800e9dc <aci_gatt_update_char_value+0x124>

  servHandle = htobs(servHandle);
 800e8e6:	88fb      	ldrh	r3, [r7, #6]
 800e8e8:	80fb      	strh	r3, [r7, #6]
  Osal_MemCpy(buffer + indx, &servHandle, 2);
 800e8ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e8ee:	f107 0208 	add.w	r2, r7, #8
 800e8f2:	4413      	add	r3, r2
 800e8f4:	1db9      	adds	r1, r7, #6
 800e8f6:	2202      	movs	r2, #2
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f000 fe29 	bl	800f550 <Osal_MemCpy>
  indx += 2;
 800e8fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e902:	3302      	adds	r3, #2
 800e904:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 800e908:	88bb      	ldrh	r3, [r7, #4]
 800e90a:	80bb      	strh	r3, [r7, #4]
  Osal_MemCpy(buffer + indx, &charHandle, 2);
 800e90c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e910:	f107 0208 	add.w	r2, r7, #8
 800e914:	4413      	add	r3, r2
 800e916:	1d39      	adds	r1, r7, #4
 800e918:	2202      	movs	r2, #2
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 fe18 	bl	800f550 <Osal_MemCpy>
  indx += 2;
 800e920:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e924:	3302      	adds	r3, #2
 800e926:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 800e92a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e92e:	33a8      	adds	r3, #168	@ 0xa8
 800e930:	443b      	add	r3, r7
 800e932:	78fa      	ldrb	r2, [r7, #3]
 800e934:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e938:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e93c:	3301      	adds	r3, #1
 800e93e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 800e942:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e946:	33a8      	adds	r3, #168	@ 0xa8
 800e948:	443b      	add	r3, r7
 800e94a:	78ba      	ldrb	r2, [r7, #2]
 800e94c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800e950:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e954:	3301      	adds	r3, #1
 800e956:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  Osal_MemCpy(buffer + indx, charValue, charValueLen);
 800e95a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e95e:	f107 0208 	add.w	r2, r7, #8
 800e962:	4413      	add	r3, r2
 800e964:	78ba      	ldrb	r2, [r7, #2]
 800e966:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 fdf0 	bl	800f550 <Osal_MemCpy>
  indx +=  charValueLen;
 800e970:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800e974:	78bb      	ldrb	r3, [r7, #2]
 800e976:	4413      	add	r3, r2
 800e978:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  Osal_MemSet(&rq, 0, sizeof(rq));
 800e97c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800e980:	2218      	movs	r2, #24
 800e982:	2100      	movs	r1, #0
 800e984:	4618      	mov	r0, r3
 800e986:	f000 fdf3 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800e98a:	233f      	movs	r3, #63	@ 0x3f
 800e98c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800e990:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800e994:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 800e998:	f107 0308 	add.w	r3, r7, #8
 800e99c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 800e9a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800e9a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 800e9a8:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800e9ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800e9b6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 fa55 	bl	800ee6c <hci_send_req>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	da01      	bge.n	800e9cc <aci_gatt_update_char_value+0x114>
    return BLE_STATUS_TIMEOUT;
 800e9c8:	23ff      	movs	r3, #255	@ 0xff
 800e9ca:	e007      	b.n	800e9dc <aci_gatt_update_char_value+0x124>

  if (status) {
 800e9cc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d002      	beq.n	800e9da <aci_gatt_update_char_value+0x122>
    return status;
 800e9d4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e9d8:	e000      	b.n	800e9dc <aci_gatt_update_char_value+0x124>
  }

  return 0;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	37ac      	adds	r7, #172	@ 0xac
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd90      	pop	{r4, r7, pc}

0800e9e4 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b08a      	sub	sp, #40	@ 0x28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800e9ee:	88fb      	ldrh	r3, [r7, #6]
 800e9f0:	81bb      	strh	r3, [r7, #12]

    Osal_MemSet(&rq, 0, sizeof(rq));
 800e9f2:	f107 0310 	add.w	r3, r7, #16
 800e9f6:	2218      	movs	r2, #24
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 fdb8 	bl	800f570 <Osal_MemSet>
    rq.ogf = OGF_VENDOR_CMD;
 800ea00:	233f      	movs	r3, #63	@ 0x3f
 800ea02:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800ea04:	f240 1327 	movw	r3, #295	@ 0x127
 800ea08:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 800ea0a:	f107 030c 	add.w	r3, r7, #12
 800ea0e:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800ea10:	2302      	movs	r3, #2
 800ea12:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 800ea14:	f107 030b 	add.w	r3, r7, #11
 800ea18:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 800ea1e:	f107 0310 	add.w	r3, r7, #16
 800ea22:	2100      	movs	r1, #0
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 fa21 	bl	800ee6c <hci_send_req>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	da01      	bge.n	800ea34 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 800ea30:	23ff      	movs	r3, #255	@ 0xff
 800ea32:	e000      	b.n	800ea36 <aci_gatt_allow_read+0x52>

    return status;
 800ea34:	7afb      	ldrb	r3, [r7, #11]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3728      	adds	r7, #40	@ 0x28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b08a      	sub	sp, #40	@ 0x28
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	4603      	mov	r3, r0
 800ea46:	460a      	mov	r2, r1
 800ea48:	71fb      	strb	r3, [r7, #7]
 800ea4a:	4613      	mov	r3, r2
 800ea4c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800ea4e:	79fb      	ldrb	r3, [r7, #7]
 800ea50:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800ea52:	79bb      	ldrb	r3, [r7, #6]
 800ea54:	737b      	strb	r3, [r7, #13]

  Osal_MemSet(&rq, 0, sizeof(rq));
 800ea56:	f107 0310 	add.w	r3, r7, #16
 800ea5a:	2218      	movs	r2, #24
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f000 fd86 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800ea64:	233f      	movs	r3, #63	@ 0x3f
 800ea66:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800ea68:	230f      	movs	r3, #15
 800ea6a:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800ea6c:	f107 030c 	add.w	r3, r7, #12
 800ea70:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800ea72:	2302      	movs	r3, #2
 800ea74:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800ea76:	f107 030b 	add.w	r3, r7, #11
 800ea7a:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800ea80:	f107 0310 	add.w	r3, r7, #16
 800ea84:	2100      	movs	r1, #0
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 f9f0 	bl	800ee6c <hci_send_req>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	da01      	bge.n	800ea96 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800ea92:	23ff      	movs	r3, #255	@ 0xff
 800ea94:	e000      	b.n	800ea98 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800ea96:	7afb      	ldrb	r3, [r7, #11]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3728      	adds	r7, #40	@ 0x28
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <aci_l2cap_connection_parameter_update_request>:
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_l2cap_connection_parameter_update_request(uint16_t conn_handle, uint16_t interval_min,
							 uint16_t interval_max, uint16_t slave_latency,
							 uint16_t timeout_multiplier)
{
 800eaa0:	b590      	push	{r4, r7, lr}
 800eaa2:	b08d      	sub	sp, #52	@ 0x34
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	4611      	mov	r1, r2
 800eaac:	461a      	mov	r2, r3
 800eaae:	4623      	mov	r3, r4
 800eab0:	80fb      	strh	r3, [r7, #6]
 800eab2:	4603      	mov	r3, r0
 800eab4:	80bb      	strh	r3, [r7, #4]
 800eab6:	460b      	mov	r3, r1
 800eab8:	807b      	strh	r3, [r7, #2]
 800eaba:	4613      	mov	r3, r2
 800eabc:	803b      	strh	r3, [r7, #0]
  struct hci_request rq;
  uint8_t status;
  l2cap_conn_param_update_req_cp cp;

  cp.conn_handle = htobs(conn_handle);
 800eabe:	88fb      	ldrh	r3, [r7, #6]
 800eac0:	81bb      	strh	r3, [r7, #12]
  cp.interval_min = htobs(interval_min);
 800eac2:	88bb      	ldrh	r3, [r7, #4]
 800eac4:	81fb      	strh	r3, [r7, #14]
  cp.interval_max = htobs(interval_max);
 800eac6:	887b      	ldrh	r3, [r7, #2]
 800eac8:	823b      	strh	r3, [r7, #16]
  cp.slave_latency = htobs(slave_latency);
 800eaca:	883b      	ldrh	r3, [r7, #0]
 800eacc:	827b      	strh	r3, [r7, #18]
  cp.timeout_multiplier = htobs(timeout_multiplier);
 800eace:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ead2:	82bb      	strh	r3, [r7, #20]

  Osal_MemSet(&rq, 0, sizeof(rq));
 800ead4:	f107 0318 	add.w	r3, r7, #24
 800ead8:	2218      	movs	r2, #24
 800eada:	2100      	movs	r1, #0
 800eadc:	4618      	mov	r0, r3
 800eade:	f000 fd47 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_VENDOR_CMD;
 800eae2:	233f      	movs	r3, #63	@ 0x3f
 800eae4:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_L2CAP_CONN_PARAM_UPDATE_REQ;
 800eae6:	f240 1381 	movw	r3, #385	@ 0x181
 800eaea:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800eaec:	f107 030c 	add.w	r3, r7, #12
 800eaf0:	623b      	str	r3, [r7, #32]
  rq.clen = L2CAP_CONN_PARAM_UPDATE_REQ_CP_SIZE;
 800eaf2:	230a      	movs	r3, #10
 800eaf4:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.event = EVT_CMD_STATUS;
 800eaf6:	230f      	movs	r3, #15
 800eaf8:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800eafa:	f107 0317 	add.w	r3, r7, #23
 800eafe:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = 1;
 800eb00:	2301      	movs	r3, #1
 800eb02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 800eb04:	f107 0318 	add.w	r3, r7, #24
 800eb08:	2100      	movs	r1, #0
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f000 f9ae 	bl	800ee6c <hci_send_req>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	da01      	bge.n	800eb1a <aci_l2cap_connection_parameter_update_request+0x7a>
    return BLE_STATUS_TIMEOUT;
 800eb16:	23ff      	movs	r3, #255	@ 0xff
 800eb18:	e000      	b.n	800eb1c <aci_l2cap_connection_parameter_update_request+0x7c>
  
  return status;  
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3734      	adds	r7, #52	@ 0x34
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd90      	pop	{r4, r7, pc}

0800eb24 <getBlueNRGVersion>:
  
  return ret;
}

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b089      	sub	sp, #36	@ 0x24
 800eb28:	af02      	add	r7, sp, #8
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version = 0 ;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	75bb      	strb	r3, [r7, #22]
  uint8_t lmp_pal_version = 0;
 800eb32:	2300      	movs	r3, #0
 800eb34:	757b      	strb	r3, [r7, #21]
  uint16_t hci_revision=0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	827b      	strh	r3, [r7, #18]
  uint16_t manufacturer_name=0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	823b      	strh	r3, [r7, #16]
  uint16_t lmp_pal_subversion=0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	81fb      	strh	r3, [r7, #14]

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800eb42:	f107 0410 	add.w	r4, r7, #16
 800eb46:	f107 0215 	add.w	r2, r7, #21
 800eb4a:	f107 0112 	add.w	r1, r7, #18
 800eb4e:	f107 0016 	add.w	r0, r7, #22
 800eb52:	f107 030e 	add.w	r3, r7, #14
 800eb56:	9300      	str	r3, [sp, #0]
 800eb58:	4623      	mov	r3, r4
 800eb5a:	f000 fab7 	bl	800f0cc <hci_le_read_local_version>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

    
  if (status == BLE_STATUS_SUCCESS) {
 800eb62:	7dfb      	ldrb	r3, [r7, #23]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d124      	bne.n	800ebb2 <getBlueNRGVersion+0x8e>
    *hwVersion = hci_revision >> 8;
 800eb68:	8a7b      	ldrh	r3, [r7, #18]
 800eb6a:	0a1b      	lsrs	r3, r3, #8
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	b2da      	uxtb	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800eb74:	8a7b      	ldrh	r3, [r7, #18]
 800eb76:	021b      	lsls	r3, r3, #8
 800eb78:	b29a      	uxth	r2, r3
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	881b      	ldrh	r3, [r3, #0]
 800eb82:	b21a      	sxth	r2, r3
 800eb84:	89fb      	ldrh	r3, [r7, #14]
 800eb86:	b21b      	sxth	r3, r3
 800eb88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eb8c:	b21b      	sxth	r3, r3
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	b21b      	sxth	r3, r3
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	881b      	ldrh	r3, [r3, #0]
 800eb9c:	b21a      	sxth	r2, r3
 800eb9e:	89fb      	ldrh	r3, [r7, #14]
 800eba0:	b21b      	sxth	r3, r3
 800eba2:	f003 030f 	and.w	r3, r3, #15
 800eba6:	b21b      	sxth	r3, r3
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	b21b      	sxth	r3, r3
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	801a      	strh	r2, [r3, #0]
  }

  return status;
 800ebb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	371c      	adds	r7, #28
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd90      	pop	{r4, r7, pc}

0800ebbc <HCI_Init>:
  hci_timeout = 1;
  return;
}

void HCI_Init(void)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
  uint8_t index;
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head (&hciReadPktPool);
 800ebc2:	480f      	ldr	r0, [pc, #60]	@ (800ec00 <HCI_Init+0x44>)
 800ebc4:	f000 fb86 	bl	800f2d4 <list_init_head>
  list_init_head (&hciReadPktRxQueue);
 800ebc8:	480e      	ldr	r0, [pc, #56]	@ (800ec04 <HCI_Init+0x48>)
 800ebca:	f000 fb83 	bl	800f2d4 <list_init_head>
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ebce:	2300      	movs	r3, #0
 800ebd0:	71fb      	strb	r3, [r7, #7]
 800ebd2:	e00c      	b.n	800ebee <HCI_Init+0x32>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	228c      	movs	r2, #140	@ 0x8c
 800ebd8:	fb02 f303 	mul.w	r3, r2, r3
 800ebdc:	4a0a      	ldr	r2, [pc, #40]	@ (800ec08 <HCI_Init+0x4c>)
 800ebde:	4413      	add	r3, r2
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	4807      	ldr	r0, [pc, #28]	@ (800ec00 <HCI_Init+0x44>)
 800ebe4:	f000 fbce 	bl	800f384 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800ebe8:	79fb      	ldrb	r3, [r7, #7]
 800ebea:	3301      	adds	r3, #1
 800ebec:	71fb      	strb	r3, [r7, #7]
 800ebee:	79fb      	ldrb	r3, [r7, #7]
 800ebf0:	2b04      	cmp	r3, #4
 800ebf2:	d9ef      	bls.n	800ebd4 <HCI_Init+0x18>
  }
}
 800ebf4:	bf00      	nop
 800ebf6:	bf00      	nop
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20000a98 	.word	0x20000a98
 800ec04:	20000aa0 	.word	0x20000aa0
 800ec08:	20000aa8 	.word	0x20000aa8

0800ec0c <HCI_verify>:
 *
 * @param[in] hciReadPacket    The packet that is received from HCI interface.
 * @return 0 if HCI packet is as expected
 */
int HCI_verify(const tHciDataPacket * hciReadPacket)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	3308      	adds	r3, #8
 800ec18:	60fb      	str	r3, [r7, #12]
  
  if(hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	2b04      	cmp	r3, #4
 800ec20:	d001      	beq.n	800ec26 <HCI_verify+0x1a>
    return 1;  /* Incorrect type. */
 800ec22:	2301      	movs	r3, #1
 800ec24:	e00c      	b.n	800ec40 <HCI_verify+0x34>
  
  if(hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	3302      	adds	r3, #2
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ec34:	3b03      	subs	r3, #3
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d001      	beq.n	800ec3e <HCI_verify+0x32>
    return 2; /* Wrong length (packet truncated or too long). */
 800ec3a:	2302      	movs	r3, #2
 800ec3c:	e000      	b.n	800ec40 <HCI_verify+0x34>
  
  return 0;      
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <HCI_Process>:
////  }
////}


void HCI_Process(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800ec52:	2300      	movs	r3, #0
 800ec54:	603b      	str	r3, [r7, #0]
  
  Disable_SPI_IRQ();
 800ec56:	f7f7 fef3 	bl	8006a40 <Disable_SPI_IRQ>
  uint8_t list_empty = list_is_empty(&hciReadPktRxQueue);        
 800ec5a:	4814      	ldr	r0, [pc, #80]	@ (800ecac <HCI_Process+0x60>)
 800ec5c:	f000 fb4a 	bl	800f2f4 <list_is_empty>
 800ec60:	4603      	mov	r3, r0
 800ec62:	71fb      	strb	r3, [r7, #7]
  /* process any pending events read */
  while(list_empty == FALSE)
 800ec64:	e017      	b.n	800ec96 <HCI_Process+0x4a>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800ec66:	463b      	mov	r3, r7
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4810      	ldr	r0, [pc, #64]	@ (800ecac <HCI_Process+0x60>)
 800ec6c:	f000 fbd1 	bl	800f412 <list_remove_head>
    Enable_SPI_IRQ();
 800ec70:	f7f7 fedf 	bl	8006a32 <Enable_SPI_IRQ>
    HCI_Event_CB(hciReadPacket->dataBuff);
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	3308      	adds	r3, #8
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7f7 f86f 	bl	8005d5c <HCI_Event_CB>
    Disable_SPI_IRQ();
 800ec7e:	f7f7 fedf 	bl	8006a40 <Disable_SPI_IRQ>
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	4619      	mov	r1, r3
 800ec86:	480a      	ldr	r0, [pc, #40]	@ (800ecb0 <HCI_Process+0x64>)
 800ec88:	f000 fb7c 	bl	800f384 <list_insert_tail>
    list_empty = list_is_empty(&hciReadPktRxQueue);
 800ec8c:	4807      	ldr	r0, [pc, #28]	@ (800ecac <HCI_Process+0x60>)
 800ec8e:	f000 fb31 	bl	800f2f4 <list_is_empty>
 800ec92:	4603      	mov	r3, r0
 800ec94:	71fb      	strb	r3, [r7, #7]
  while(list_empty == FALSE)
 800ec96:	79fb      	ldrb	r3, [r7, #7]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d0e4      	beq.n	800ec66 <HCI_Process+0x1a>
  }
  /* Explicit call to HCI_Isr(), since it cannot be called by ISR if IRQ is kept high by
  BlueNRG. */
  HCI_Isr();
 800ec9c:	f000 f814 	bl	800ecc8 <HCI_Isr>
  Enable_SPI_IRQ();    
 800eca0:	f7f7 fec7 	bl	8006a32 <Enable_SPI_IRQ>
}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	20000aa0 	.word	0x20000aa0
 800ecb0:	20000a98 	.word	0x20000a98

0800ecb4 <HCI_Queue_Empty>:

BOOL HCI_Queue_Empty(void)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	af00      	add	r7, sp, #0
  return list_is_empty(&hciReadPktRxQueue);
 800ecb8:	4802      	ldr	r0, [pc, #8]	@ (800ecc4 <HCI_Queue_Empty+0x10>)
 800ecba:	f000 fb1b 	bl	800f2f4 <list_is_empty>
 800ecbe:	4603      	mov	r3, r0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	20000aa0 	.word	0x20000aa0

0800ecc8 <HCI_Isr>:

void HCI_Isr(void)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	603b      	str	r3, [r7, #0]
  uint8_t data_len;
  
  Clear_SPI_EXTI_Flag();
 800ecd2:	f7f7 febd 	bl	8006a50 <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 800ecd6:	e038      	b.n	800ed4a <HCI_Isr+0x82>
    if (list_is_empty (&hciReadPktPool) == FALSE){
 800ecd8:	4820      	ldr	r0, [pc, #128]	@ (800ed5c <HCI_Isr+0x94>)
 800ecda:	f000 fb0b 	bl	800f2f4 <list_is_empty>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d12d      	bne.n	800ed40 <HCI_Isr+0x78>
      
      /* enqueueing a packet for read */
      list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800ece4:	463b      	mov	r3, r7
 800ece6:	4619      	mov	r1, r3
 800ece8:	481c      	ldr	r0, [pc, #112]	@ (800ed5c <HCI_Isr+0x94>)
 800ecea:	f000 fb92 	bl	800f412 <list_remove_head>
      
      data_len = BlueNRG_SPI_Read_All(&SpiHandle, hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	3308      	adds	r3, #8
 800ecf2:	2280      	movs	r2, #128	@ 0x80
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	481a      	ldr	r0, [pc, #104]	@ (800ed60 <HCI_Isr+0x98>)
 800ecf8:	f7f7 fd1c 	bl	8006734 <BlueNRG_SPI_Read_All>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	71fb      	strb	r3, [r7, #7]
      if(data_len > 0){                    
 800ed00:	79fb      	ldrb	r3, [r7, #7]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d016      	beq.n	800ed34 <HCI_Isr+0x6c>
        hciReadPacket->data_len = data_len;
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	79fa      	ldrb	r2, [r7, #7]
 800ed0a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if(HCI_verify(hciReadPacket) == 0)
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff ff7b 	bl	800ec0c <HCI_verify>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d105      	bne.n	800ed28 <HCI_Isr+0x60>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4810      	ldr	r0, [pc, #64]	@ (800ed64 <HCI_Isr+0x9c>)
 800ed22:	f000 fb2f 	bl	800f384 <list_insert_tail>
 800ed26:	e00e      	b.n	800ed46 <HCI_Isr+0x7e>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	480b      	ldr	r0, [pc, #44]	@ (800ed5c <HCI_Isr+0x94>)
 800ed2e:	f000 fb03 	bl	800f338 <list_insert_head>
 800ed32:	e008      	b.n	800ed46 <HCI_Isr+0x7e>
      }
      else {
        // Insert the packet back into the pool.
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	4619      	mov	r1, r3
 800ed38:	4808      	ldr	r0, [pc, #32]	@ (800ed5c <HCI_Isr+0x94>)
 800ed3a:	f000 fafd 	bl	800f338 <list_insert_head>
 800ed3e:	e002      	b.n	800ed46 <HCI_Isr+0x7e>
      }
      
    }
    else{
      // HCI Read Packet Pool is empty, wait for a free packet.
      Clear_SPI_EXTI_Flag();
 800ed40:	f7f7 fe86 	bl	8006a50 <Clear_SPI_EXTI_Flag>
 800ed44:	e006      	b.n	800ed54 <HCI_Isr+0x8c>
      return;
    }
    
    Clear_SPI_EXTI_Flag();
 800ed46:	f7f7 fe83 	bl	8006a50 <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 800ed4a:	f7f7 fce3 	bl	8006714 <BlueNRG_DataPresent>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1c1      	bne.n	800ecd8 <HCI_Isr+0x10>
  }
}
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20000a98 	.word	0x20000a98
 800ed60:	20000a3c 	.word	0x20000a3c
 800ed64:	20000aa0 	.word	0x20000aa0

0800ed68 <hci_write>:

void hci_write(const void* data1, const void* data2, uint8_t n_bytes1, uint8_t n_bytes2){
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	4611      	mov	r1, r2
 800ed74:	461a      	mov	r2, r3
 800ed76:	460b      	mov	r3, r1
 800ed78:	71fb      	strb	r3, [r7, #7]
 800ed7a:	4613      	mov	r3, r2
 800ed7c:	71bb      	strb	r3, [r7, #6]
  for(int i=0; i < n_bytes2; i++)
    PRINTF("%02X ", *((uint8_t*)data2 + i));
  PRINTF("\r\n");    
#endif
  
  Hal_Write_Serial(data1, data2, n_bytes1, n_bytes2);
 800ed7e:	79fa      	ldrb	r2, [r7, #7]
 800ed80:	79bb      	ldrb	r3, [r7, #6]
 800ed82:	68b9      	ldr	r1, [r7, #8]
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f7f7 fc4f 	bl	8006628 <Hal_Write_Serial>
}
 800ed8a:	bf00      	nop
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <hci_send_cmd>:

void hci_send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b086      	sub	sp, #24
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	607b      	str	r3, [r7, #4]
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	81fb      	strh	r3, [r7, #14]
 800ed9e:	460b      	mov	r3, r1
 800eda0:	81bb      	strh	r3, [r7, #12]
 800eda2:	4613      	mov	r3, r2
 800eda4:	72fb      	strb	r3, [r7, #11]
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800eda6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800edaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800edae:	b21a      	sxth	r2, r3
 800edb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800edb4:	029b      	lsls	r3, r3, #10
 800edb6:	b21b      	sxth	r3, r3
 800edb8:	4313      	orrs	r3, r2
 800edba:	b21b      	sxth	r3, r3
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	82bb      	strh	r3, [r7, #20]
  hc.plen= plen;
 800edc0:	7afb      	ldrb	r3, [r7, #11]
 800edc2:	75bb      	strb	r3, [r7, #22]
  
  uint8_t header[HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE];
  header[0] = HCI_COMMAND_PKT;
 800edc4:	2301      	movs	r3, #1
 800edc6:	743b      	strb	r3, [r7, #16]
  Osal_MemCpy(header+1, &hc, sizeof(hc));
 800edc8:	f107 0310 	add.w	r3, r7, #16
 800edcc:	3301      	adds	r3, #1
 800edce:	f107 0114 	add.w	r1, r7, #20
 800edd2:	2203      	movs	r2, #3
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 fbbb 	bl	800f550 <Osal_MemCpy>
  
  hci_write(header, param, sizeof(header), plen);
 800edda:	7afb      	ldrb	r3, [r7, #11]
 800eddc:	f107 0010 	add.w	r0, r7, #16
 800ede0:	2204      	movs	r2, #4
 800ede2:	6879      	ldr	r1, [r7, #4]
 800ede4:	f7ff ffc0 	bl	800ed68 <hci_write>
}
 800ede8:	bf00      	nop
 800edea:	3718      	adds	r7, #24
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <move_list>:

static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while(!list_is_empty(src_list)){
 800edfa:	e00a      	b.n	800ee12 <move_list+0x22>
    list_remove_tail(src_list, &tmp_node);
 800edfc:	f107 030c 	add.w	r3, r7, #12
 800ee00:	4619      	mov	r1, r3
 800ee02:	6838      	ldr	r0, [r7, #0]
 800ee04:	f000 fb2c 	bl	800f460 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f000 fa93 	bl	800f338 <list_insert_head>
  while(!list_is_empty(src_list)){
 800ee12:	6838      	ldr	r0, [r7, #0]
 800ee14:	f000 fa6e 	bl	800f2f4 <list_is_empty>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d0ee      	beq.n	800edfc <move_list+0xc>
  }
}
 800ee1e:	bf00      	nop
 800ee20:	bf00      	nop
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <free_event_list>:

 /* It ensures that we have at least half of the free buffers in the pool. */
static void free_event_list(void)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;
    
  Disable_SPI_IRQ();
 800ee2e:	f7f7 fe07 	bl	8006a40 <Disable_SPI_IRQ>
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ee32:	e00b      	b.n	800ee4c <free_event_list+0x24>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800ee34:	1d3b      	adds	r3, r7, #4
 800ee36:	4619      	mov	r1, r3
 800ee38:	480a      	ldr	r0, [pc, #40]	@ (800ee64 <free_event_list+0x3c>)
 800ee3a:	f000 faea 	bl	800f412 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4619      	mov	r1, r3
 800ee42:	4809      	ldr	r0, [pc, #36]	@ (800ee68 <free_event_list+0x40>)
 800ee44:	f000 fa9e 	bl	800f384 <list_insert_tail>
    /* Explicit call to HCI_Isr(), since it cannot be called by ISR if IRQ is kept high by
    BlueNRG */
    HCI_Isr();
 800ee48:	f7ff ff3e 	bl	800ecc8 <HCI_Isr>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800ee4c:	4806      	ldr	r0, [pc, #24]	@ (800ee68 <free_event_list+0x40>)
 800ee4e:	f000 fb2e 	bl	800f4ae <list_get_size>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	dded      	ble.n	800ee34 <free_event_list+0xc>
  }
  
  Enable_SPI_IRQ();
 800ee58:	f7f7 fdeb 	bl	8006a32 <Enable_SPI_IRQ>
}
 800ee5c:	bf00      	nop
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	20000aa0 	.word	0x20000aa0
 800ee68:	20000a98 	.word	0x20000a98

0800ee6c <hci_send_req>:

int hci_send_req(struct hci_request *r, BOOL async)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b090      	sub	sp, #64	@ 0x40
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	460b      	mov	r3, r1
 800ee76:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	885b      	ldrh	r3, [r3, #2]
 800ee7c:	b21b      	sxth	r3, r3
 800ee7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee82:	b21a      	sxth	r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	b21b      	sxth	r3, r3
 800ee8a:	029b      	lsls	r3, r3, #10
 800ee8c:	b21b      	sxth	r3, r3
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	b21b      	sxth	r3, r3
 800ee92:	877b      	strh	r3, [r7, #58]	@ 0x3a
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;
  int to = DEFAULT_TIMEOUT;
 800ee94:	2364      	movs	r3, #100	@ 0x64
 800ee96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct timer t;
  tHciDataPacket * hciReadPacket = NULL;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800ee9c:	f107 0308 	add.w	r3, r7, #8
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 fa17 	bl	800f2d4 <list_init_head>

  free_event_list();
 800eea6:	f7ff ffbf 	bl	800ee28 <free_event_list>
  
  hci_send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8818      	ldrh	r0, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	8859      	ldrh	r1, [r3, #2]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	b2da      	uxtb	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	f7ff ff69 	bl	800ed92 <hci_send_cmd>
  
  if(async){
 800eec0:	78fb      	ldrb	r3, [r7, #3]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d001      	beq.n	800eeca <hci_send_req+0x5e>
    return 0;
 800eec6:	2300      	movs	r3, #0
 800eec8:	e0f7      	b.n	800f0ba <hci_send_req+0x24e>
  }
  
  /* Minimum timeout is 1. */
  if(to == 0)
 800eeca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d101      	bne.n	800eed4 <hci_send_req+0x68>
    to = 1;
 800eed0:	2301      	movs	r3, #1
 800eed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  Timer_Set(&t, to);
 800eed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eed6:	f107 0314 	add.w	r3, r7, #20
 800eeda:	4611      	mov	r1, r2
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 fb0e 	bl	800f4fe <Timer_Set>
 800eee2:	e000      	b.n	800eee6 <hci_send_req+0x7a>
      Enter_Sleep_Mode();
      ATOMIC_SECTION_END();
    }
#else
    while(1){
      if(Timer_Expired(&t)){
 800eee4:	bf00      	nop
 800eee6:	f107 0314 	add.w	r3, r7, #20
 800eeea:	4618      	mov	r0, r3
 800eeec:	f000 fb18 	bl	800f520 <Timer_Expired>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f040 80b9 	bne.w	800f06a <hci_send_req+0x1fe>
        goto failed;
      }
      if(!HCI_Queue_Empty()){
 800eef8:	f7ff fedc 	bl	800ecb4 <HCI_Queue_Empty>
 800eefc:	4603      	mov	r3, r0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1f0      	bne.n	800eee4 <hci_send_req+0x78>
        break;
 800ef02:	bf00      	nop
      }
    }
#endif
    
    /* Extract packet from HCI event queue. */
    Disable_SPI_IRQ();
 800ef04:	f7f7 fd9c 	bl	8006a40 <Disable_SPI_IRQ>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800ef08:	f107 0310 	add.w	r3, r7, #16
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	486d      	ldr	r0, [pc, #436]	@ (800f0c4 <hci_send_req+0x258>)
 800ef10:	f000 fa7f 	bl	800f412 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	3308      	adds	r3, #8
 800ef18:	637b      	str	r3, [r7, #52]	@ 0x34

    if(hci_hdr->type == HCI_EVENT_PKT){
 800ef1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	2b04      	cmp	r3, #4
 800ef20:	f040 8081 	bne.w	800f026 <hci_send_req+0x1ba>
    
    event_pckt = (void *) (hci_hdr->data);
 800ef24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef26:	3301      	adds	r3, #1
 800ef28:	633b      	str	r3, [r7, #48]	@ 0x30
    
    ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	3308      	adds	r3, #8
 800ef2e:	3303      	adds	r3, #3
 800ef30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ef38:	3b03      	subs	r3, #3
 800ef3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    switch (event_pckt->evt) {
 800ef3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef42:	d04d      	beq.n	800efe0 <hci_send_req+0x174>
 800ef44:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef46:	dc69      	bgt.n	800f01c <hci_send_req+0x1b0>
 800ef48:	2b10      	cmp	r3, #16
 800ef4a:	f000 8090 	beq.w	800f06e <hci_send_req+0x202>
 800ef4e:	2b10      	cmp	r3, #16
 800ef50:	dc64      	bgt.n	800f01c <hci_send_req+0x1b0>
 800ef52:	2b0e      	cmp	r3, #14
 800ef54:	d024      	beq.n	800efa0 <hci_send_req+0x134>
 800ef56:	2b0f      	cmp	r3, #15
 800ef58:	d160      	bne.n	800f01c <hci_send_req+0x1b0>
      
    case EVT_CMD_STATUS:
      cs = (void *) ptr;
 800ef5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5c:	623b      	str	r3, [r7, #32]
      
      if (cs->opcode != opcode)
 800ef5e:	6a3b      	ldr	r3, [r7, #32]
 800ef60:	885b      	ldrh	r3, [r3, #2]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ef66:	429a      	cmp	r2, r3
 800ef68:	f040 8083 	bne.w	800f072 <hci_send_req+0x206>
        goto failed;
      
      if (r->event != EVT_CMD_STATUS) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	2b0f      	cmp	r3, #15
 800ef72:	d004      	beq.n	800ef7e <hci_send_req+0x112>
        if (cs->status) {
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d051      	beq.n	800f020 <hci_send_req+0x1b4>
          goto failed;
 800ef7c:	e07c      	b.n	800f078 <hci_send_req+0x20c>
        }
        break;
      }
      
      r->rlen = MIN(len, r->rlen);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	695a      	ldr	r2, [r3, #20]
 800ef82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef84:	429a      	cmp	r2, r3
 800ef86:	bfa8      	it	ge
 800ef88:	461a      	movge	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6918      	ldr	r0, [r3, #16]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	695b      	ldr	r3, [r3, #20]
 800ef96:	461a      	mov	r2, r3
 800ef98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef9a:	f000 fad9 	bl	800f550 <Osal_MemCpy>
      goto done;
 800ef9e:	e07e      	b.n	800f09e <hci_send_req+0x232>
      
    case EVT_CMD_COMPLETE:
      cc = (void *) ptr;
 800efa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efa2:	61fb      	str	r3, [r7, #28]
      
      if (cc->opcode != opcode)
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800efaa:	b29b      	uxth	r3, r3
 800efac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800efae:	429a      	cmp	r2, r3
 800efb0:	d161      	bne.n	800f076 <hci_send_req+0x20a>
        goto failed;
      
      ptr += EVT_CMD_COMPLETE_SIZE;
 800efb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb4:	3303      	adds	r3, #3
 800efb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      len -= EVT_CMD_COMPLETE_SIZE;
 800efb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efba:	3b03      	subs	r3, #3
 800efbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      
      r->rlen = MIN(len, r->rlen);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	695a      	ldr	r2, [r3, #20]
 800efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc4:	429a      	cmp	r2, r3
 800efc6:	bfa8      	it	ge
 800efc8:	461a      	movge	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, ptr, r->rlen);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6918      	ldr	r0, [r3, #16]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	695b      	ldr	r3, [r3, #20]
 800efd6:	461a      	mov	r2, r3
 800efd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800efda:	f000 fab9 	bl	800f550 <Osal_MemCpy>
      goto done;
 800efde:	e05e      	b.n	800f09e <hci_send_req+0x232>
      
    case EVT_LE_META_EVENT:
      me = (void *) ptr;
 800efe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efe2:	627b      	str	r3, [r7, #36]	@ 0x24
      
      if (me->subevent != r->event)
 800efe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d118      	bne.n	800f024 <hci_send_req+0x1b8>
        break;
      
      len -= 1;
 800eff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff4:	3b01      	subs	r3, #1
 800eff6:	62bb      	str	r3, [r7, #40]	@ 0x28
      r->rlen = MIN(len, r->rlen);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	695a      	ldr	r2, [r3, #20]
 800effc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800effe:	429a      	cmp	r2, r3
 800f000:	bfa8      	it	ge
 800f002:	461a      	movge	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	615a      	str	r2, [r3, #20]
      Osal_MemCpy(r->rparam, me->data, r->rlen);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6918      	ldr	r0, [r3, #16]
 800f00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f00e:	1c59      	adds	r1, r3, #1
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	695b      	ldr	r3, [r3, #20]
 800f014:	461a      	mov	r2, r3
 800f016:	f000 fa9b 	bl	800f550 <Osal_MemCpy>
      goto done;
 800f01a:	e040      	b.n	800f09e <hci_send_req+0x232>
      
    case EVT_HARDWARE_ERROR:            
      goto failed;
      
    default:      
      break;
 800f01c:	bf00      	nop
 800f01e:	e002      	b.n	800f026 <hci_send_req+0x1ba>
        break;
 800f020:	bf00      	nop
 800f022:	e000      	b.n	800f026 <hci_send_req+0x1ba>
        break;
 800f024:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if(list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)){
 800f026:	4828      	ldr	r0, [pc, #160]	@ (800f0c8 <hci_send_req+0x25c>)
 800f028:	f000 f964 	bl	800f2f4 <list_is_empty>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00d      	beq.n	800f04e <hci_send_req+0x1e2>
 800f032:	4824      	ldr	r0, [pc, #144]	@ (800f0c4 <hci_send_req+0x258>)
 800f034:	f000 f95e 	bl	800f2f4 <list_is_empty>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d007      	beq.n	800f04e <hci_send_req+0x1e2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	4619      	mov	r1, r3
 800f042:	4821      	ldr	r0, [pc, #132]	@ (800f0c8 <hci_send_req+0x25c>)
 800f044:	f000 f99e 	bl	800f384 <list_insert_tail>
      hciReadPacket=NULL;
 800f048:	2300      	movs	r3, #0
 800f04a:	613b      	str	r3, [r7, #16]
 800f04c:	e008      	b.n	800f060 <hci_send_req+0x1f4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800f04e:	693a      	ldr	r2, [r7, #16]
 800f050:	f107 0308 	add.w	r3, r7, #8
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f000 f994 	bl	800f384 <list_insert_tail>
      hciReadPacket=NULL;
 800f05c:	2300      	movs	r3, #0
 800f05e:	613b      	str	r3, [r7, #16]
    }

    HCI_Isr();
 800f060:	f7ff fe32 	bl	800ecc8 <HCI_Isr>
    
    Enable_SPI_IRQ();
 800f064:	f7f7 fce5 	bl	8006a32 <Enable_SPI_IRQ>
  while(1) {
 800f068:	e73d      	b.n	800eee6 <hci_send_req+0x7a>
        goto failed;
 800f06a:	bf00      	nop
 800f06c:	e004      	b.n	800f078 <hci_send_req+0x20c>
      goto failed;
 800f06e:	bf00      	nop
 800f070:	e002      	b.n	800f078 <hci_send_req+0x20c>
        goto failed;
 800f072:	bf00      	nop
 800f074:	e000      	b.n	800f078 <hci_send_req+0x20c>
        goto failed;
 800f076:	bf00      	nop
    
  }
  
failed: 
  if(hciReadPacket!=NULL){
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d004      	beq.n	800f088 <hci_send_req+0x21c>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	4619      	mov	r1, r3
 800f082:	4811      	ldr	r0, [pc, #68]	@ (800f0c8 <hci_send_req+0x25c>)
 800f084:	f000 f958 	bl	800f338 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 800f088:	f107 0308 	add.w	r3, r7, #8
 800f08c:	4619      	mov	r1, r3
 800f08e:	480d      	ldr	r0, [pc, #52]	@ (800f0c4 <hci_send_req+0x258>)
 800f090:	f7ff feae 	bl	800edf0 <move_list>
  Enable_SPI_IRQ();
 800f094:	f7f7 fccd 	bl	8006a32 <Enable_SPI_IRQ>
  return -1;
 800f098:	f04f 33ff 	mov.w	r3, #4294967295
 800f09c:	e00d      	b.n	800f0ba <hci_send_req+0x24e>
  
done:
  // Insert the packet back into the pool.
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	4809      	ldr	r0, [pc, #36]	@ (800f0c8 <hci_send_req+0x25c>)
 800f0a4:	f000 f948 	bl	800f338 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f0a8:	f107 0308 	add.w	r3, r7, #8
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	4805      	ldr	r0, [pc, #20]	@ (800f0c4 <hci_send_req+0x258>)
 800f0b0:	f7ff fe9e 	bl	800edf0 <move_list>
  
  Enable_SPI_IRQ();
 800f0b4:	f7f7 fcbd 	bl	8006a32 <Enable_SPI_IRQ>
  return 0;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3740      	adds	r7, #64	@ 0x40
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20000aa0 	.word	0x20000aa0
 800f0c8:	20000a98 	.word	0x20000a98

0800f0cc <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b08e      	sub	sp, #56	@ 0x38
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
 800f0d8:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  Osal_MemSet(&resp, 0, sizeof(resp));
 800f0da:	f107 0314 	add.w	r3, r7, #20
 800f0de:	2209      	movs	r2, #9
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 fa44 	bl	800f570 <Osal_MemSet>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800f0e8:	f107 0320 	add.w	r3, r7, #32
 800f0ec:	2218      	movs	r2, #24
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f000 fa3d 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_INFO_PARAM;
 800f0f6:	2304      	movs	r3, #4
 800f0f8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 800f0fe:	2300      	movs	r3, #0
 800f100:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 800f102:	2300      	movs	r3, #0
 800f104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800f106:	f107 0314 	add.w	r3, r7, #20
 800f10a:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800f10c:	2309      	movs	r3, #9
 800f10e:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f110:	f107 0320 	add.w	r3, r7, #32
 800f114:	2100      	movs	r1, #0
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fea8 	bl	800ee6c <hci_send_req>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	da01      	bge.n	800f126 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800f122:	23ff      	movs	r3, #255	@ 0xff
 800f124:	e018      	b.n	800f158 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800f126:	7d3b      	ldrb	r3, [r7, #20]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <hci_le_read_local_version+0x64>
    return resp.status;
 800f12c:	7d3b      	ldrb	r3, [r7, #20]
 800f12e:	e013      	b.n	800f158 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800f130:	7d7a      	ldrb	r2, [r7, #21]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800f136:	8afa      	ldrh	r2, [r7, #22]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800f13c:	7e3a      	ldrb	r2, [r7, #24]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800f142:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800f146:	b29a      	uxth	r2, r3
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800f14c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800f150:	b29a      	uxth	r2, r3
 800f152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f154:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3738      	adds	r7, #56	@ 0x38
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b092      	sub	sp, #72	@ 0x48
 800f164:	af00      	add	r7, sp, #0
 800f166:	4603      	mov	r3, r0
 800f168:	6039      	str	r1, [r7, #0]
 800f16a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  Osal_MemSet(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800f16c:	f107 0310 	add.w	r3, r7, #16
 800f170:	2220      	movs	r2, #32
 800f172:	2100      	movs	r1, #0
 800f174:	4618      	mov	r0, r3
 800f176:	f000 f9fb 	bl	800f570 <Osal_MemSet>
  scan_resp_cp.length = length;
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	743b      	strb	r3, [r7, #16]
  Osal_MemCpy(scan_resp_cp.data, data, MIN(31,length));
 800f17e:	79fb      	ldrb	r3, [r7, #7]
 800f180:	2b1f      	cmp	r3, #31
 800f182:	bf28      	it	cs
 800f184:	231f      	movcs	r3, #31
 800f186:	b2db      	uxtb	r3, r3
 800f188:	461a      	mov	r2, r3
 800f18a:	f107 0310 	add.w	r3, r7, #16
 800f18e:	3301      	adds	r3, #1
 800f190:	6839      	ldr	r1, [r7, #0]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 f9dc 	bl	800f550 <Osal_MemCpy>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800f198:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f19c:	2218      	movs	r2, #24
 800f19e:	2100      	movs	r1, #0
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 f9e5 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_LE_CTL;
 800f1a6:	2308      	movs	r3, #8
 800f1a8:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800f1aa:	2309      	movs	r3, #9
 800f1ac:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 800f1ae:	f107 0310 	add.w	r3, r7, #16
 800f1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800f1b4:	2320      	movs	r3, #32
 800f1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800f1b8:	f107 030f 	add.w	r3, r7, #15
 800f1bc:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f1c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7ff fe4f 	bl	800ee6c <hci_send_req>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	da01      	bge.n	800f1d8 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800f1d4:	23ff      	movs	r3, #255	@ 0xff
 800f1d6:	e000      	b.n	800f1da <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800f1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3748      	adds	r7, #72	@ 0x48
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <hci_le_set_random_address>:
  
  return 0;
}

int hci_le_set_random_address(tBDAddr bdaddr)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b08c      	sub	sp, #48	@ 0x30
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  le_set_random_address_cp set_rand_addr_cp;
  uint8_t status;
  
  Osal_MemSet(&set_rand_addr_cp, 0, sizeof(set_rand_addr_cp));
 800f1ea:	f107 0310 	add.w	r3, r7, #16
 800f1ee:	2206      	movs	r2, #6
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f9bc 	bl	800f570 <Osal_MemSet>
  Osal_MemCpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 800f1f8:	f107 0310 	add.w	r3, r7, #16
 800f1fc:	2206      	movs	r2, #6
 800f1fe:	6879      	ldr	r1, [r7, #4]
 800f200:	4618      	mov	r0, r3
 800f202:	f000 f9a5 	bl	800f550 <Osal_MemCpy>
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800f206:	f107 0318 	add.w	r3, r7, #24
 800f20a:	2218      	movs	r2, #24
 800f20c:	2100      	movs	r1, #0
 800f20e:	4618      	mov	r0, r3
 800f210:	f000 f9ae 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_LE_CTL;
 800f214:	2308      	movs	r3, #8
 800f216:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_LE_SET_RANDOM_ADDRESS;
 800f218:	2305      	movs	r3, #5
 800f21a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &set_rand_addr_cp;
 800f21c:	f107 0310 	add.w	r3, r7, #16
 800f220:	623b      	str	r3, [r7, #32]
  rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
 800f222:	2306      	movs	r3, #6
 800f224:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &status;
 800f226:	f107 030f 	add.w	r3, r7, #15
 800f22a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = 1;
 800f22c:	2301      	movs	r3, #1
 800f22e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800f230:	f107 0318 	add.w	r3, r7, #24
 800f234:	2100      	movs	r1, #0
 800f236:	4618      	mov	r0, r3
 800f238:	f7ff fe18 	bl	800ee6c <hci_send_req>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	da01      	bge.n	800f246 <hci_le_set_random_address+0x64>
    return BLE_STATUS_TIMEOUT;
 800f242:	23ff      	movs	r3, #255	@ 0xff
 800f244:	e000      	b.n	800f248 <hci_le_set_random_address+0x66>
  
  return status;
 800f246:	7bfb      	ldrb	r3, [r7, #15]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3730      	adds	r7, #48	@ 0x30
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <hci_read_rssi>:
  
  return 0;
}

int hci_read_rssi(uint16_t *conn_handle, int8_t * rssi)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b08a      	sub	sp, #40	@ 0x28
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  struct hci_request rq;
  read_rssi_cp params;
  read_rssi_rp resp;
  
  Osal_MemSet(&resp, 0, sizeof(resp));
 800f25a:	f107 0308 	add.w	r3, r7, #8
 800f25e:	2204      	movs	r2, #4
 800f260:	2100      	movs	r1, #0
 800f262:	4618      	mov	r0, r3
 800f264:	f000 f984 	bl	800f570 <Osal_MemSet>
  
  params.handle = *conn_handle;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	881b      	ldrh	r3, [r3, #0]
 800f26c:	81bb      	strh	r3, [r7, #12]
  
  Osal_MemSet(&rq, 0, sizeof(rq));
 800f26e:	f107 0310 	add.w	r3, r7, #16
 800f272:	2218      	movs	r2, #24
 800f274:	2100      	movs	r1, #0
 800f276:	4618      	mov	r0, r3
 800f278:	f000 f97a 	bl	800f570 <Osal_MemSet>
  rq.ogf = OGF_STATUS_PARAM;
 800f27c:	2305      	movs	r3, #5
 800f27e:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_READ_RSSI;
 800f280:	2305      	movs	r3, #5
 800f282:	827b      	strh	r3, [r7, #18]
  rq.cparam = &params;
 800f284:	f107 030c 	add.w	r3, r7, #12
 800f288:	61bb      	str	r3, [r7, #24]
  rq.clen = READ_RSSI_CP_SIZE;
 800f28a:	2302      	movs	r3, #2
 800f28c:	61fb      	str	r3, [r7, #28]
  rq.rparam = &resp;
 800f28e:	f107 0308 	add.w	r3, r7, #8
 800f292:	623b      	str	r3, [r7, #32]
  rq.rlen = READ_RSSI_RP_SIZE;
 800f294:	2304      	movs	r3, #4
 800f296:	627b      	str	r3, [r7, #36]	@ 0x24
  
  if (hci_send_req(&rq, FALSE) < 0){
 800f298:	f107 0310 	add.w	r3, r7, #16
 800f29c:	2100      	movs	r1, #0
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7ff fde4 	bl	800ee6c <hci_send_req>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	da01      	bge.n	800f2ae <hci_read_rssi+0x5e>
    return BLE_STATUS_TIMEOUT;
 800f2aa:	23ff      	movs	r3, #255	@ 0xff
 800f2ac:	e00e      	b.n	800f2cc <hci_read_rssi+0x7c>
  }
  
  if (resp.status) {
 800f2ae:	7a3b      	ldrb	r3, [r7, #8]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <hci_read_rssi+0x68>
    return resp.status;
 800f2b4:	7a3b      	ldrb	r3, [r7, #8]
 800f2b6:	e009      	b.n	800f2cc <hci_read_rssi+0x7c>
  }
  
  *conn_handle = resp.handle;
 800f2b8:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	801a      	strh	r2, [r3, #0]
  *rssi = resp.rssi;
 800f2c2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	701a      	strb	r2, [r3, #0]
  
  return 0;
 800f2ca:	2300      	movs	r3, #0
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3728      	adds	r7, #40	@ 0x28
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	605a      	str	r2, [r3, #4]
}
 800f2e8:	bf00      	nop
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b087      	sub	sp, #28
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2fc:	f3ef 8310 	mrs	r3, PRIMASK
 800f300:	60fb      	str	r3, [r7, #12]
  return(result);
 800f302:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uint8_t return_value;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f306:	b672      	cpsid	i
}
 800f308:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	429a      	cmp	r2, r3
 800f312:	d102      	bne.n	800f31a <list_is_empty+0x26>
  {
    return_value = TRUE;
 800f314:	2301      	movs	r3, #1
 800f316:	75fb      	strb	r3, [r7, #23]
 800f318:	e001      	b.n	800f31e <list_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800f31a:	2300      	movs	r3, #0
 800f31c:	75fb      	strb	r3, [r7, #23]
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	f383 8810 	msr	PRIMASK, r3
}
 800f328:	bf00      	nop
  }
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800f32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	371c      	adds	r7, #28
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800f338:	b480      	push	{r7}
 800f33a:	b087      	sub	sp, #28
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f342:	f3ef 8310 	mrs	r3, PRIMASK
 800f346:	60fb      	str	r3, [r7, #12]
  return(result);
 800f348:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f34a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f34c:	b672      	cpsid	i
}
 800f34e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	683a      	ldr	r2, [r7, #0]
 800f362:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	683a      	ldr	r2, [r7, #0]
 800f36a:	605a      	str	r2, [r3, #4]
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	f383 8810 	msr	PRIMASK, r3
}
 800f376:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f378:	bf00      	nop
 800f37a:	371c      	adds	r7, #28
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800f384:	b480      	push	{r7}
 800f386:	b087      	sub	sp, #28
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f38e:	f3ef 8310 	mrs	r3, PRIMASK
 800f392:	60fb      	str	r3, [r7, #12]
  return(result);
 800f394:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f396:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f398:	b672      	cpsid	i
}
 800f39a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	685a      	ldr	r2, [r3, #4]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	683a      	ldr	r2, [r7, #0]
 800f3b6:	601a      	str	r2, [r3, #0]
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	f383 8810 	msr	PRIMASK, r3
}
 800f3c2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f3c4:	bf00      	nop
 800f3c6:	371c      	adds	r7, #28
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b087      	sub	sp, #28
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3d8:	f3ef 8310 	mrs	r3, PRIMASK
 800f3dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800f3de:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f3e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f3e2:	b672      	cpsid	i
}
 800f3e4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	6812      	ldr	r2, [r2, #0]
 800f3ee:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	6852      	ldr	r2, [r2, #4]
 800f3f8:	605a      	str	r2, [r3, #4]
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	f383 8810 	msr	PRIMASK, r3
}
 800f404:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f406:	bf00      	nop
 800f408:	371c      	adds	r7, #28
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr

0800f412 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b086      	sub	sp, #24
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
 800f41a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f41c:	f3ef 8310 	mrs	r3, PRIMASK
 800f420:	60fb      	str	r3, [r7, #12]
  return(result);
 800f422:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f424:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f426:	b672      	cpsid	i
}
 800f428:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff ffca 	bl	800f3d0 <list_remove_node>
  (*node)->next = NULL;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2200      	movs	r2, #0
 800f442:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2200      	movs	r2, #0
 800f44a:	605a      	str	r2, [r3, #4]
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	f383 8810 	msr	PRIMASK, r3
}
 800f456:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f458:	bf00      	nop
 800f45a:	3718      	adds	r7, #24
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b086      	sub	sp, #24
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f46a:	f3ef 8310 	mrs	r3, PRIMASK
 800f46e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f470:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f474:	b672      	cpsid	i
}
 800f476:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	f7ff ffa3 	bl	800f3d0 <list_remove_node>
  (*node)->next = NULL;
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2200      	movs	r2, #0
 800f490:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2200      	movs	r2, #0
 800f498:	605a      	str	r2, [r3, #4]
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	f383 8810 	msr	PRIMASK, r3
}
 800f4a4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f4a6:	bf00      	nop
 800f4a8:	3718      	adds	r7, #24
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800f4ae:	b480      	push	{r7}
 800f4b0:	b089      	sub	sp, #36	@ 0x24
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
  int size = 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4ba:	f3ef 8310 	mrs	r3, PRIMASK
 800f4be:	613b      	str	r3, [r7, #16]
  return(result);
 800f4c0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f4c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4c4:	b672      	cpsid	i
}
 800f4c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f4ce:	e005      	b.n	800f4dc <list_get_size+0x2e>
  {
    size++;
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f4dc:	69ba      	ldr	r2, [r7, #24]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d1f5      	bne.n	800f4d0 <list_get_size+0x22>
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f383 8810 	msr	PRIMASK, r3
}
 800f4ee:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  return (size);
 800f4f0:	69fb      	ldr	r3, [r7, #28]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3724      	adds	r7, #36	@ 0x24
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr

0800f4fe <Timer_Set>:
 * @param[in] interval  The interval before the timer expires.
 *
 */
void
Timer_Set(struct timer *t, tClockTime interval)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b082      	sub	sp, #8
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	6039      	str	r1, [r7, #0]
  t->interval = interval;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	683a      	ldr	r2, [r7, #0]
 800f50c:	605a      	str	r2, [r3, #4]
  t->start = Clock_Time();
 800f50e:	f7f9 ff57 	bl	80093c0 <HAL_GetTick>
 800f512:	4602      	mov	r2, r0
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	601a      	str	r2, [r3, #0]
}
 800f518:	bf00      	nop
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <Timer_Expired>:
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
int
Timer_Expired(struct timer *t)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  tClockTime diff = (Clock_Time() - t->start) + 1;
 800f528:	f7f9 ff4a 	bl	80093c0 <HAL_GetTick>
 800f52c:	4602      	mov	r2, r0
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	1ad3      	subs	r3, r2, r3
 800f534:	3301      	adds	r3, #1
 800f536:	60fb      	str	r3, [r7, #12]
  return t->interval < diff;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	429a      	cmp	r2, r3
 800f540:	bf8c      	ite	hi
 800f542:	2301      	movhi	r3, #1
 800f544:	2300      	movls	r3, #0
 800f546:	b2db      	uxtb	r3, r3

}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <Osal_MemCpy>:
 * @param  size: Number of bytes to copy from the source to the destination
 *               buffer
 * @retval Pointer to the destination buffer
 */
void* Osal_MemCpy(void *dest, const void *src, unsigned int size)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
    return(memcpy(dest,src,size)); 
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	68b9      	ldr	r1, [r7, #8]
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f000 fe63 	bl	801022c <memcpy>
 800f566:	4603      	mov	r3, r0
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3710      	adds	r7, #16
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <Osal_MemSet>:
 * @param  value: Value to assign to each byte of the memory block
 * @param  size : Number of bytes to be set to "value"
 * @retval Pointer to the filled block of memory
 */
void* Osal_MemSet(void *ptr, int value, unsigned int size)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
    return(memset(ptr,value,size));
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	68b9      	ldr	r1, [r7, #8]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f000 fe0d 	bl	80101a0 <memset>
 800f586:	4603      	mov	r3, r0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3710      	adds	r7, #16
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <CUSTOM_ENV_SENSOR_Init>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t CUSTOM_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08a      	sub	sp, #40	@ 0x28
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f59a:	2300      	movs	r3, #0
 800f59c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t function = ENV_TEMPERATURE;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	61bb      	str	r3, [r7, #24]
  CUSTOM_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d131      	bne.n	800f610 <CUSTOM_ENV_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_ENV_SENSOR_LPS22HH_0 == 1)
    case CUSTOM_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800f5ac:	6838      	ldr	r0, [r7, #0]
 800f5ae:	f000 f8fd 	bl	800f7ac <LPS22HH_0_Probe>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d002      	beq.n	800f5be <CUSTOM_ENV_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800f5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5bc:	e064      	b.n	800f688 <CUSTOM_ENV_SENSOR_Init+0xf8>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800f5be:	4a34      	ldr	r2, [pc, #208]	@ (800f690 <CUSTOM_ENV_SENSOR_Init+0x100>)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	4932      	ldr	r1, [pc, #200]	@ (800f694 <CUSTOM_ENV_SENSOR_Init+0x104>)
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f5d0:	f107 0108 	add.w	r1, r7, #8
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	4798      	blx	r3
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d002      	beq.n	800f5e4 <CUSTOM_ENV_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800f5de:	f06f 0306 	mvn.w	r3, #6
 800f5e2:	e051      	b.n	800f688 <CUSTOM_ENV_SENSOR_Init+0xf8>
      }
      if (cap.Temperature == 1U)
 800f5e4:	7a3b      	ldrb	r3, [r7, #8]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d103      	bne.n	800f5f2 <CUSTOM_ENV_SENSOR_Init+0x62>
      {
        component_functions |= ENV_TEMPERATURE;
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	f043 0301 	orr.w	r3, r3, #1
 800f5f0:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800f5f2:	7abb      	ldrb	r3, [r7, #10]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d103      	bne.n	800f600 <CUSTOM_ENV_SENSOR_Init+0x70>
      {
        component_functions |= ENV_HUMIDITY;
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	f043 0304 	orr.w	r3, r3, #4
 800f5fe:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800f600:	7a7b      	ldrb	r3, [r7, #9]
 800f602:	2b01      	cmp	r3, #1
 800f604:	d108      	bne.n	800f618 <CUSTOM_ENV_SENSOR_Init+0x88>
      {
        component_functions |= ENV_PRESSURE;
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	f043 0302 	orr.w	r3, r3, #2
 800f60c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800f60e:	e003      	b.n	800f618 <CUSTOM_ENV_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800f610:	f06f 0301 	mvn.w	r3, #1
 800f614:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800f616:	e000      	b.n	800f61a <CUSTOM_ENV_SENSOR_Init+0x8a>
      break;
 800f618:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800f61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d001      	beq.n	800f624 <CUSTOM_ENV_SENSOR_Init+0x94>
  {
    return ret;
 800f620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f622:	e031      	b.n	800f688 <CUSTOM_ENV_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 800f624:	2300      	movs	r3, #0
 800f626:	61fb      	str	r3, [r7, #28]
 800f628:	e02a      	b.n	800f680 <CUSTOM_ENV_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800f62a:	683a      	ldr	r2, [r7, #0]
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	4013      	ands	r3, r2
 800f630:	6a3a      	ldr	r2, [r7, #32]
 800f632:	429a      	cmp	r2, r3
 800f634:	d11e      	bne.n	800f674 <CUSTOM_ENV_SENSOR_Init+0xe4>
 800f636:	69ba      	ldr	r2, [r7, #24]
 800f638:	6a3b      	ldr	r3, [r7, #32]
 800f63a:	4013      	ands	r3, r2
 800f63c:	6a3a      	ldr	r2, [r7, #32]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d118      	bne.n	800f674 <CUSTOM_ENV_SENSOR_Init+0xe4>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800f642:	4a15      	ldr	r2, [pc, #84]	@ (800f698 <CUSTOM_ENV_SENSOR_Init+0x108>)
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f64a:	4814      	ldr	r0, [pc, #80]	@ (800f69c <CUSTOM_ENV_SENSOR_Init+0x10c>)
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	4613      	mov	r3, r2
 800f650:	005b      	lsls	r3, r3, #1
 800f652:	4413      	add	r3, r2
 800f654:	440b      	add	r3, r1
 800f656:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	490d      	ldr	r1, [pc, #52]	@ (800f694 <CUSTOM_ENV_SENSOR_Init+0x104>)
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f664:	4610      	mov	r0, r2
 800f666:	4798      	blx	r3
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d002      	beq.n	800f674 <CUSTOM_ENV_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800f66e:	f06f 0304 	mvn.w	r3, #4
 800f672:	e009      	b.n	800f688 <CUSTOM_ENV_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800f674:	6a3b      	ldr	r3, [r7, #32]
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	623b      	str	r3, [r7, #32]
  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	3301      	adds	r3, #1
 800f67e:	61fb      	str	r3, [r7, #28]
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	2b02      	cmp	r3, #2
 800f684:	d9d1      	bls.n	800f62a <CUSTOM_ENV_SENSOR_Init+0x9a>
  }

  return ret;
 800f686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3728      	adds	r7, #40	@ 0x28
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	20000d74 	.word	0x20000d74
 800f694:	20000d64 	.word	0x20000d64
 800f698:	200000c4 	.word	0x200000c4
 800f69c:	20000d68 	.word	0x20000d68

0800f6a0 <CUSTOM_ENV_SENSOR_Enable>:
 *         - ENV_PRESSURE
 *         - ENV_HUMIDITY
 * @retval BSP status
 */
int32_t CUSTOM_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d003      	beq.n	800f6b8 <CUSTOM_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f6b0:	f06f 0301 	mvn.w	r3, #1
 800f6b4:	60fb      	str	r3, [r7, #12]
 800f6b6:	e028      	b.n	800f70a <CUSTOM_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800f6b8:	4a16      	ldr	r2, [pc, #88]	@ (800f714 <CUSTOM_ENV_SENSOR_Enable+0x74>)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d11c      	bne.n	800f704 <CUSTOM_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800f6ca:	4a13      	ldr	r2, [pc, #76]	@ (800f718 <CUSTOM_ENV_SENSOR_Enable+0x78>)
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f6d2:	4812      	ldr	r0, [pc, #72]	@ (800f71c <CUSTOM_ENV_SENSOR_Enable+0x7c>)
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	005b      	lsls	r3, r3, #1
 800f6da:	4413      	add	r3, r2
 800f6dc:	440b      	add	r3, r1
 800f6de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	490e      	ldr	r1, [pc, #56]	@ (800f720 <CUSTOM_ENV_SENSOR_Enable+0x80>)
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	4798      	blx	r3
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d003      	beq.n	800f6fe <CUSTOM_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f6f6:	f06f 0304 	mvn.w	r3, #4
 800f6fa:	60fb      	str	r3, [r7, #12]
 800f6fc:	e005      	b.n	800f70a <CUSTOM_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f6fe:	2300      	movs	r3, #0
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	e002      	b.n	800f70a <CUSTOM_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800f704:	f06f 0301 	mvn.w	r3, #1
 800f708:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f70a:	68fb      	ldr	r3, [r7, #12]
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}
 800f714:	20000d78 	.word	0x20000d78
 800f718:	200000c4 	.word	0x200000c4
 800f71c:	20000d68 	.word	0x20000d68
 800f720:	20000d64 	.word	0x20000d64

0800f724 <CUSTOM_ENV_SENSOR_GetValue>:
 *         - ENV_HUMIDITY
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t CUSTOM_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d003      	beq.n	800f73e <CUSTOM_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f736:	f06f 0301 	mvn.w	r3, #1
 800f73a:	617b      	str	r3, [r7, #20]
 800f73c:	e029      	b.n	800f792 <CUSTOM_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800f73e:	4a17      	ldr	r2, [pc, #92]	@ (800f79c <CUSTOM_ENV_SENSOR_GetValue+0x78>)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	4013      	ands	r3, r2
 800f74a:	68ba      	ldr	r2, [r7, #8]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d11d      	bne.n	800f78c <CUSTOM_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800f750:	4a13      	ldr	r2, [pc, #76]	@ (800f7a0 <CUSTOM_ENV_SENSOR_GetValue+0x7c>)
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f758:	4812      	ldr	r0, [pc, #72]	@ (800f7a4 <CUSTOM_ENV_SENSOR_GetValue+0x80>)
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	4613      	mov	r3, r2
 800f75e:	005b      	lsls	r3, r3, #1
 800f760:	4413      	add	r3, r2
 800f762:	440b      	add	r3, r1
 800f764:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f768:	691b      	ldr	r3, [r3, #16]
 800f76a:	490f      	ldr	r1, [pc, #60]	@ (800f7a8 <CUSTOM_ENV_SENSOR_GetValue+0x84>)
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f772:	6879      	ldr	r1, [r7, #4]
 800f774:	4610      	mov	r0, r2
 800f776:	4798      	blx	r3
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d003      	beq.n	800f786 <CUSTOM_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f77e:	f06f 0304 	mvn.w	r3, #4
 800f782:	617b      	str	r3, [r7, #20]
 800f784:	e005      	b.n	800f792 <CUSTOM_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f786:	2300      	movs	r3, #0
 800f788:	617b      	str	r3, [r7, #20]
 800f78a:	e002      	b.n	800f792 <CUSTOM_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800f78c:	f06f 0301 	mvn.w	r3, #1
 800f790:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800f792:	697b      	ldr	r3, [r7, #20]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3718      	adds	r7, #24
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	20000d78 	.word	0x20000d78
 800f7a0:	200000c4 	.word	0x200000c4
 800f7a4:	20000d68 	.word	0x20000d68
 800f7a8:	20000d64 	.word	0x20000d64

0800f7ac <LPS22HH_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b090      	sub	sp, #64	@ 0x40
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Address     = 0x0;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  io_ctx.Init        = CUSTOM_LPS22HH_0_Init;
 800f7c2:	4b49      	ldr	r3, [pc, #292]	@ (800f8e8 <LPS22HH_0_Probe+0x13c>)
 800f7c4:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = CUSTOM_LPS22HH_0_DeInit;
 800f7c6:	4b49      	ldr	r3, [pc, #292]	@ (800f8ec <LPS22HH_0_Probe+0x140>)
 800f7c8:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.ReadReg     = CUSTOM_LPS22HH_0_ReadReg;
 800f7ca:	4b49      	ldr	r3, [pc, #292]	@ (800f8f0 <LPS22HH_0_Probe+0x144>)
 800f7cc:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.WriteReg    = CUSTOM_LPS22HH_0_WriteReg;
 800f7ce:	4b49      	ldr	r3, [pc, #292]	@ (800f8f4 <LPS22HH_0_Probe+0x148>)
 800f7d0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.GetTick     = BSP_GetTick;
 800f7d2:	4b49      	ldr	r3, [pc, #292]	@ (800f8f8 <LPS22HH_0_Probe+0x14c>)
 800f7d4:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800f7d6:	f107 0320 	add.w	r3, r7, #32
 800f7da:	4619      	mov	r1, r3
 800f7dc:	4847      	ldr	r0, [pc, #284]	@ (800f8fc <LPS22HH_0_Probe+0x150>)
 800f7de:	f7f7 f943 	bl	8006a68 <LPS22HH_RegisterBusIO>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d003      	beq.n	800f7f0 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f7e8:	f06f 0306 	mvn.w	r3, #6
 800f7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7ee:	e076      	b.n	800f8de <LPS22HH_0_Probe+0x132>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800f7f0:	f107 031f 	add.w	r3, r7, #31
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4841      	ldr	r0, [pc, #260]	@ (800f8fc <LPS22HH_0_Probe+0x150>)
 800f7f8:	f7f7 f9db 	bl	8006bb2 <LPS22HH_ReadID>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d003      	beq.n	800f80a <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f802:	f06f 0306 	mvn.w	r3, #6
 800f806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f808:	e069      	b.n	800f8de <LPS22HH_0_Probe+0x132>
  }
  else if (id != LPS22HH_ID)
 800f80a:	7ffb      	ldrb	r3, [r7, #31]
 800f80c:	2bb3      	cmp	r3, #179	@ 0xb3
 800f80e:	d003      	beq.n	800f818 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800f810:	f06f 0306 	mvn.w	r3, #6
 800f814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f816:	e062      	b.n	800f8de <LPS22HH_0_Probe+0x132>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800f818:	f107 030c 	add.w	r3, r7, #12
 800f81c:	4619      	mov	r1, r3
 800f81e:	4837      	ldr	r0, [pc, #220]	@ (800f8fc <LPS22HH_0_Probe+0x150>)
 800f820:	f7f7 f9de 	bl	8006be0 <LPS22HH_GetCapabilities>

    EnvCtx[CUSTOM_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800f824:	7b3b      	ldrb	r3, [r7, #12]
 800f826:	461a      	mov	r2, r3
 800f828:	7b7b      	ldrb	r3, [r7, #13]
 800f82a:	005b      	lsls	r3, r3, #1
 800f82c:	431a      	orrs	r2, r3
                                    uint32_t)cap.Humidity << 2);
 800f82e:	7bbb      	ldrb	r3, [r7, #14]
 800f830:	009b      	lsls	r3, r3, #2
    EnvCtx[CUSTOM_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800f832:	4313      	orrs	r3, r2
 800f834:	4a32      	ldr	r2, [pc, #200]	@ (800f900 <LPS22HH_0_Probe+0x154>)
 800f836:	6013      	str	r3, [r2, #0]

    EnvCompObj[CUSTOM_LPS22HH_0] = &lps22hh_obj_0;
 800f838:	4b32      	ldr	r3, [pc, #200]	@ (800f904 <LPS22HH_0_Probe+0x158>)
 800f83a:	4a30      	ldr	r2, [pc, #192]	@ (800f8fc <LPS22HH_0_Probe+0x150>)
 800f83c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[CUSTOM_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800f83e:	4b32      	ldr	r3, [pc, #200]	@ (800f908 <LPS22HH_0_Probe+0x15c>)
 800f840:	4a32      	ldr	r2, [pc, #200]	@ (800f90c <LPS22HH_0_Probe+0x160>)
 800f842:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800f844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f846:	2b00      	cmp	r3, #0
 800f848:	d11d      	bne.n	800f886 <LPS22HH_0_Probe+0xda>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f003 0301 	and.w	r3, r3, #1
 800f850:	2b00      	cmp	r3, #0
 800f852:	d018      	beq.n	800f886 <LPS22HH_0_Probe+0xda>
 800f854:	7b3b      	ldrb	r3, [r7, #12]
 800f856:	2b01      	cmp	r3, #1
 800f858:	d115      	bne.n	800f886 <LPS22HH_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[CUSTOM_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800f85a:	4b2d      	ldr	r3, [pc, #180]	@ (800f910 <LPS22HH_0_Probe+0x164>)
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	4a2d      	ldr	r2, [pc, #180]	@ (800f914 <LPS22HH_0_Probe+0x168>)
 800f860:	492d      	ldr	r1, [pc, #180]	@ (800f918 <LPS22HH_0_Probe+0x16c>)
 800f862:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[CUSTOM_LPS22HH_0]->Init(EnvCompObj[CUSTOM_LPS22HH_0]) != LPS22HH_OK)
 800f866:	4b28      	ldr	r3, [pc, #160]	@ (800f908 <LPS22HH_0_Probe+0x15c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a25      	ldr	r2, [pc, #148]	@ (800f904 <LPS22HH_0_Probe+0x158>)
 800f86e:	6812      	ldr	r2, [r2, #0]
 800f870:	4610      	mov	r0, r2
 800f872:	4798      	blx	r3
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d003      	beq.n	800f882 <LPS22HH_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f87a:	f06f 0304 	mvn.w	r3, #4
 800f87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f880:	e001      	b.n	800f886 <LPS22HH_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f882:	2300      	movs	r3, #0
 800f884:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800f886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d11d      	bne.n	800f8c8 <LPS22HH_0_Probe+0x11c>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f003 0302 	and.w	r3, r3, #2
 800f892:	2b00      	cmp	r3, #0
 800f894:	d018      	beq.n	800f8c8 <LPS22HH_0_Probe+0x11c>
 800f896:	7b7b      	ldrb	r3, [r7, #13]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d115      	bne.n	800f8c8 <LPS22HH_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[CUSTOM_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800f89c:	4b1c      	ldr	r3, [pc, #112]	@ (800f910 <LPS22HH_0_Probe+0x164>)
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	4a1c      	ldr	r2, [pc, #112]	@ (800f914 <LPS22HH_0_Probe+0x168>)
 800f8a2:	491e      	ldr	r1, [pc, #120]	@ (800f91c <LPS22HH_0_Probe+0x170>)
 800f8a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[CUSTOM_LPS22HH_0]->Init(EnvCompObj[CUSTOM_LPS22HH_0]) != LPS22HH_OK)
 800f8a8:	4b17      	ldr	r3, [pc, #92]	@ (800f908 <LPS22HH_0_Probe+0x15c>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	4a15      	ldr	r2, [pc, #84]	@ (800f904 <LPS22HH_0_Probe+0x158>)
 800f8b0:	6812      	ldr	r2, [r2, #0]
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	4798      	blx	r3
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d003      	beq.n	800f8c4 <LPS22HH_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f8bc:	f06f 0304 	mvn.w	r3, #4
 800f8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8c2:	e001      	b.n	800f8c8 <LPS22HH_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800f8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d107      	bne.n	800f8de <LPS22HH_0_Probe+0x132>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f003 0304 	and.w	r3, r3, #4
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d002      	beq.n	800f8de <LPS22HH_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800f8d8:	f06f 0304 	mvn.w	r3, #4
 800f8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
  }

  return ret;
 800f8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3740      	adds	r7, #64	@ 0x40
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	0800f921 	.word	0x0800f921
 800f8ec:	0800f945 	.word	0x0800f945
 800f8f0:	0800f9dd 	.word	0x0800f9dd
 800f8f4:	0800f969 	.word	0x0800f969
 800f8f8:	080015c9 	.word	0x080015c9
 800f8fc:	20000d7c 	.word	0x20000d7c
 800f900:	20000d78 	.word	0x20000d78
 800f904:	20000d64 	.word	0x20000d64
 800f908:	20000d74 	.word	0x20000d74
 800f90c:	2000002c 	.word	0x2000002c
 800f910:	200000c4 	.word	0x200000c4
 800f914:	20000d68 	.word	0x20000d68
 800f918:	20000050 	.word	0x20000050
 800f91c:	2000003c 	.word	0x2000003c

0800f920 <CUSTOM_LPS22HH_0_Init>:
/**
 * @brief  Initialize SPI bus for LPS22HH
 * @retval BSP status
 */
static int32_t CUSTOM_LPS22HH_0_Init(void)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f926:	f06f 0305 	mvn.w	r3, #5
 800f92a:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LPS22HH_0_SPI_Init() == BSP_ERROR_NONE)
 800f92c:	f7f1 fdbc 	bl	80014a8 <BSP_SPI2_Init>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d101      	bne.n	800f93a <CUSTOM_LPS22HH_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800f936:	2300      	movs	r3, #0
 800f938:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800f93a:	687b      	ldr	r3, [r7, #4]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <CUSTOM_LPS22HH_0_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LPS22HH
 * @retval BSP status
 */
static int32_t CUSTOM_LPS22HH_0_DeInit(void)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f94a:	f06f 0305 	mvn.w	r3, #5
 800f94e:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LPS22HH_0_SPI_DeInit() == BSP_ERROR_NONE)
 800f950:	f7f1 fdda 	bl	8001508 <BSP_SPI2_DeInit>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d101      	bne.n	800f95e <CUSTOM_LPS22HH_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800f95a:	2300      	movs	r3, #0
 800f95c:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800f95e:	687b      	ldr	r3, [r7, #4]
}
 800f960:	4618      	mov	r0, r3
 800f962:	3708      	adds	r7, #8
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <CUSTOM_LPS22HH_0_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t CUSTOM_LPS22HH_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b086      	sub	sp, #24
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60ba      	str	r2, [r7, #8]
 800f970:	461a      	mov	r2, r3
 800f972:	4603      	mov	r3, r0
 800f974:	81fb      	strh	r3, [r7, #14]
 800f976:	460b      	mov	r3, r1
 800f978:	81bb      	strh	r3, [r7, #12]
 800f97a:	4613      	mov	r3, r2
 800f97c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800f97e:	2300      	movs	r3, #0
 800f980:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800f982:	89bb      	ldrh	r3, [r7, #12]
 800f984:	b2db      	uxtb	r3, r3
 800f986:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LPS22HH_0_CS_PORT, CUSTOM_LPS22HH_0_CS_PIN, GPIO_PIN_RESET);
 800f988:	2200      	movs	r2, #0
 800f98a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f98e:	4812      	ldr	r0, [pc, #72]	@ (800f9d8 <CUSTOM_LPS22HH_0_WriteReg+0x70>)
 800f990:	f7fa fd88 	bl	800a4a4 <HAL_GPIO_WritePin>

  if (CUSTOM_LPS22HH_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800f994:	f107 0313 	add.w	r3, r7, #19
 800f998:	2101      	movs	r1, #1
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7f1 fddc 	bl	8001558 <BSP_SPI2_Send>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d002      	beq.n	800f9ac <CUSTOM_LPS22HH_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f9a6:	f06f 0305 	mvn.w	r3, #5
 800f9aa:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LPS22HH_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 800f9ac:	88fb      	ldrh	r3, [r7, #6]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	68b8      	ldr	r0, [r7, #8]
 800f9b2:	f7f1 fdd1 	bl	8001558 <BSP_SPI2_Send>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d002      	beq.n	800f9c2 <CUSTOM_LPS22HH_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800f9bc:	f06f 0305 	mvn.w	r3, #5
 800f9c0:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LPS22HH_0_CS_PORT, CUSTOM_LPS22HH_0_CS_PIN, GPIO_PIN_SET);
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f9c8:	4803      	ldr	r0, [pc, #12]	@ (800f9d8 <CUSTOM_LPS22HH_0_WriteReg+0x70>)
 800f9ca:	f7fa fd6b 	bl	800a4a4 <HAL_GPIO_WritePin>

  return ret;
 800f9ce:	697b      	ldr	r3, [r7, #20]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3718      	adds	r7, #24
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	40020800 	.word	0x40020800

0800f9dc <CUSTOM_LPS22HH_0_ReadReg>:
 * @param  pdata the pointer to the data to be read
 * @param  len the length of the data to be read
 * @retval BSP status
 */
static int32_t CUSTOM_LPS22HH_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b086      	sub	sp, #24
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60ba      	str	r2, [r7, #8]
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	81fb      	strh	r3, [r7, #14]
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	81bb      	strh	r3, [r7, #12]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800f9f6:	89bb      	ldrh	r3, [r7, #12]
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 800f9fc:	7cfb      	ldrb	r3, [r7, #19]
 800f9fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LPS22HH_0_CS_PORT, CUSTOM_LPS22HH_0_CS_PIN, GPIO_PIN_RESET);
 800fa06:	2200      	movs	r2, #0
 800fa08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fa0c:	4812      	ldr	r0, [pc, #72]	@ (800fa58 <CUSTOM_LPS22HH_0_ReadReg+0x7c>)
 800fa0e:	f7fa fd49 	bl	800a4a4 <HAL_GPIO_WritePin>

  if (CUSTOM_LPS22HH_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800fa12:	f107 0313 	add.w	r3, r7, #19
 800fa16:	2101      	movs	r1, #1
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7f1 fd9d 	bl	8001558 <BSP_SPI2_Send>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <CUSTOM_LPS22HH_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800fa24:	f06f 0305 	mvn.w	r3, #5
 800fa28:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LPS22HH_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 800fa2a:	88fb      	ldrh	r3, [r7, #6]
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	68b8      	ldr	r0, [r7, #8]
 800fa30:	f7f1 fdae 	bl	8001590 <BSP_SPI2_Recv>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d002      	beq.n	800fa40 <CUSTOM_LPS22HH_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800fa3a:	f06f 0305 	mvn.w	r3, #5
 800fa3e:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LPS22HH_0_CS_PORT, CUSTOM_LPS22HH_0_CS_PIN, GPIO_PIN_SET);
 800fa40:	2201      	movs	r2, #1
 800fa42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fa46:	4804      	ldr	r0, [pc, #16]	@ (800fa58 <CUSTOM_LPS22HH_0_ReadReg+0x7c>)
 800fa48:	f7fa fd2c 	bl	800a4a4 <HAL_GPIO_WritePin>

  return ret;
 800fa4c:	697b      	ldr	r3, [r7, #20]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3718      	adds	r7, #24
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	40020800 	.word	0x40020800

0800fa5c <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b08e      	sub	sp, #56	@ 0x38
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800fa66:	2300      	movs	r3, #0
 800fa68:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	62bb      	str	r3, [r7, #40]	@ 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d131      	bne.n	800fadc <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSR_0 == 1)
    case CUSTOM_LSM6DSR_0:
      if (LSM6DSR_0_Probe(Functions) != BSP_ERROR_NONE)
 800fa78:	6838      	ldr	r0, [r7, #0]
 800fa7a:	f000 f987 	bl	800fd8c <LSM6DSR_0_Probe>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800fa84:	f04f 33ff 	mov.w	r3, #4294967295
 800fa88:	e064      	b.n	800fb54 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800fa8a:	4a34      	ldr	r2, [pc, #208]	@ (800fb5c <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	4932      	ldr	r1, [pc, #200]	@ (800fb60 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fa9c:	f107 010c 	add.w	r1, r7, #12
 800faa0:	4610      	mov	r0, r2
 800faa2:	4798      	blx	r3
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d002      	beq.n	800fab0 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800faaa:	f06f 0306 	mvn.w	r3, #6
 800faae:	e051      	b.n	800fb54 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800fab0:	7b3b      	ldrb	r3, [r7, #12]
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d103      	bne.n	800fabe <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800fab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab8:	f043 0302 	orr.w	r3, r3, #2
 800fabc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800fabe:	7b7b      	ldrb	r3, [r7, #13]
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d103      	bne.n	800facc <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800fac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac6:	f043 0301 	orr.w	r3, r3, #1
 800faca:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800facc:	7bbb      	ldrb	r3, [r7, #14]
 800face:	2b01      	cmp	r3, #1
 800fad0:	d108      	bne.n	800fae4 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800fad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fad4:	f043 0304 	orr.w	r3, r3, #4
 800fad8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800fada:	e003      	b.n	800fae4 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800fadc:	f06f 0301 	mvn.w	r3, #1
 800fae0:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800fae2:	e000      	b.n	800fae6 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800fae4:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800fae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d001      	beq.n	800faf0 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800faec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faee:	e031      	b.n	800fb54 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800faf0:	2300      	movs	r3, #0
 800faf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800faf4:	e02a      	b.n	800fb4c <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fafa:	4013      	ands	r3, r2
 800fafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d11e      	bne.n	800fb40 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800fb02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb06:	4013      	ands	r3, r2
 800fb08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d118      	bne.n	800fb40 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800fb0e:	4a15      	ldr	r2, [pc, #84]	@ (800fb64 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800fb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fb16:	4814      	ldr	r0, [pc, #80]	@ (800fb68 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	005b      	lsls	r3, r3, #1
 800fb1e:	4413      	add	r3, r2
 800fb20:	440b      	add	r3, r1
 800fb22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	490d      	ldr	r1, [pc, #52]	@ (800fb60 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fb30:	4610      	mov	r0, r2
 800fb32:	4798      	blx	r3
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d002      	beq.n	800fb40 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800fb3a:	f06f 0304 	mvn.w	r3, #4
 800fb3e:	e009      	b.n	800fb54 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800fb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800fb46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb48:	3301      	adds	r3, #1
 800fb4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb4e:	2b02      	cmp	r3, #2
 800fb50:	d9d1      	bls.n	800faf6 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800fb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3738      	adds	r7, #56	@ 0x38
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	20000db8 	.word	0x20000db8
 800fb60:	20000da8 	.word	0x20000da8
 800fb64:	200000d8 	.word	0x200000d8
 800fb68:	20000dac 	.word	0x20000dac

0800fb6c <CUSTOM_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d003      	beq.n	800fb84 <CUSTOM_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fb7c:	f06f 0301 	mvn.w	r3, #1
 800fb80:	60fb      	str	r3, [r7, #12]
 800fb82:	e028      	b.n	800fbd6 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fb84:	4a16      	ldr	r2, [pc, #88]	@ (800fbe0 <CUSTOM_MOTION_SENSOR_Enable+0x74>)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	4013      	ands	r3, r2
 800fb90:	683a      	ldr	r2, [r7, #0]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d11c      	bne.n	800fbd0 <CUSTOM_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800fb96:	4a13      	ldr	r2, [pc, #76]	@ (800fbe4 <CUSTOM_MOTION_SENSOR_Enable+0x78>)
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fb9e:	4812      	ldr	r0, [pc, #72]	@ (800fbe8 <CUSTOM_MOTION_SENSOR_Enable+0x7c>)
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	4613      	mov	r3, r2
 800fba4:	005b      	lsls	r3, r3, #1
 800fba6:	4413      	add	r3, r2
 800fba8:	440b      	add	r3, r1
 800fbaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	490e      	ldr	r1, [pc, #56]	@ (800fbec <CUSTOM_MOTION_SENSOR_Enable+0x80>)
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fbb8:	4610      	mov	r0, r2
 800fbba:	4798      	blx	r3
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d003      	beq.n	800fbca <CUSTOM_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fbc2:	f06f 0304 	mvn.w	r3, #4
 800fbc6:	60fb      	str	r3, [r7, #12]
 800fbc8:	e005      	b.n	800fbd6 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60fb      	str	r3, [r7, #12]
 800fbce:	e002      	b.n	800fbd6 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fbd0:	f06f 0301 	mvn.w	r3, #1
 800fbd4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	20000dbc 	.word	0x20000dbc
 800fbe4:	200000d8 	.word	0x200000d8
 800fbe8:	20000dac 	.word	0x20000dac
 800fbec:	20000da8 	.word	0x20000da8

0800fbf0 <CUSTOM_MOTION_SENSOR_GetAxesRaw>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes raw data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxesRaw(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_AxesRaw_t *Axes)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fc02:	f06f 0301 	mvn.w	r3, #1
 800fc06:	617b      	str	r3, [r7, #20]
 800fc08:	e029      	b.n	800fc5e <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fc0a:	4a17      	ldr	r2, [pc, #92]	@ (800fc68 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x78>)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	4013      	ands	r3, r2
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d11d      	bne.n	800fc58 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxesRaw(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800fc1c:	4a13      	ldr	r2, [pc, #76]	@ (800fc6c <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x7c>)
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fc24:	4812      	ldr	r0, [pc, #72]	@ (800fc70 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x80>)
 800fc26:	68fa      	ldr	r2, [r7, #12]
 800fc28:	4613      	mov	r3, r2
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	440b      	add	r3, r1
 800fc30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fc34:	6a1b      	ldr	r3, [r3, #32]
 800fc36:	490f      	ldr	r1, [pc, #60]	@ (800fc74 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x84>)
 800fc38:	68fa      	ldr	r2, [r7, #12]
 800fc3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fc3e:	6879      	ldr	r1, [r7, #4]
 800fc40:	4610      	mov	r0, r2
 800fc42:	4798      	blx	r3
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d003      	beq.n	800fc52 <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fc4a:	f06f 0304 	mvn.w	r3, #4
 800fc4e:	617b      	str	r3, [r7, #20]
 800fc50:	e005      	b.n	800fc5e <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fc52:	2300      	movs	r3, #0
 800fc54:	617b      	str	r3, [r7, #20]
 800fc56:	e002      	b.n	800fc5e <CUSTOM_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fc58:	f06f 0301 	mvn.w	r3, #1
 800fc5c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800fc5e:	697b      	ldr	r3, [r7, #20]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3718      	adds	r7, #24
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	20000dbc 	.word	0x20000dbc
 800fc6c:	200000d8 	.word	0x200000d8
 800fc70:	20000dac 	.word	0x20000dac
 800fc74:	20000da8 	.word	0x20000da8

0800fc78 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b086      	sub	sp, #24
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d003      	beq.n	800fc94 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fc8c:	f06f 0301 	mvn.w	r3, #1
 800fc90:	617b      	str	r3, [r7, #20]
 800fc92:	e02a      	b.n	800fcea <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fc94:	4a17      	ldr	r2, [pc, #92]	@ (800fcf4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	4013      	ands	r3, r2
 800fca0:	68ba      	ldr	r2, [r7, #8]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d11e      	bne.n	800fce4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800fca6:	4a14      	ldr	r2, [pc, #80]	@ (800fcf8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fcae:	4813      	ldr	r0, [pc, #76]	@ (800fcfc <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800fcb0:	68fa      	ldr	r2, [r7, #12]
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	005b      	lsls	r3, r3, #1
 800fcb6:	4413      	add	r3, r2
 800fcb8:	440b      	add	r3, r1
 800fcba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fcbe:	691b      	ldr	r3, [r3, #16]
 800fcc0:	490f      	ldr	r1, [pc, #60]	@ (800fd00 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fcc8:	ed97 0a01 	vldr	s0, [r7, #4]
 800fccc:	4610      	mov	r0, r2
 800fcce:	4798      	blx	r3
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d003      	beq.n	800fcde <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fcd6:	f06f 0304 	mvn.w	r3, #4
 800fcda:	617b      	str	r3, [r7, #20]
 800fcdc:	e005      	b.n	800fcea <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fcde:	2300      	movs	r3, #0
 800fce0:	617b      	str	r3, [r7, #20]
 800fce2:	e002      	b.n	800fcea <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fce4:	f06f 0301 	mvn.w	r3, #1
 800fce8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800fcea:	697b      	ldr	r3, [r7, #20]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3718      	adds	r7, #24
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	20000dbc 	.word	0x20000dbc
 800fcf8:	200000d8 	.word	0x200000d8
 800fcfc:	20000dac 	.word	0x20000dac
 800fd00:	20000da8 	.word	0x20000da8

0800fd04 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b086      	sub	sp, #24
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d003      	beq.n	800fd1e <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fd16:	f06f 0301 	mvn.w	r3, #1
 800fd1a:	617b      	str	r3, [r7, #20]
 800fd1c:	e029      	b.n	800fd72 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800fd1e:	4a17      	ldr	r2, [pc, #92]	@ (800fd7c <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	4013      	ands	r3, r2
 800fd2a:	68ba      	ldr	r2, [r7, #8]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d11d      	bne.n	800fd6c <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800fd30:	4a13      	ldr	r2, [pc, #76]	@ (800fd80 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fd38:	4812      	ldr	r0, [pc, #72]	@ (800fd84 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 800fd3a:	68fa      	ldr	r2, [r7, #12]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	005b      	lsls	r3, r3, #1
 800fd40:	4413      	add	r3, r2
 800fd42:	440b      	add	r3, r1
 800fd44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fd48:	699b      	ldr	r3, [r3, #24]
 800fd4a:	490f      	ldr	r1, [pc, #60]	@ (800fd88 <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fd52:	6879      	ldr	r1, [r7, #4]
 800fd54:	4610      	mov	r0, r2
 800fd56:	4798      	blx	r3
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d003      	beq.n	800fd66 <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fd5e:	f06f 0304 	mvn.w	r3, #4
 800fd62:	617b      	str	r3, [r7, #20]
 800fd64:	e005      	b.n	800fd72 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fd66:	2300      	movs	r3, #0
 800fd68:	617b      	str	r3, [r7, #20]
 800fd6a:	e002      	b.n	800fd72 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800fd6c:	f06f 0301 	mvn.w	r3, #1
 800fd70:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800fd72:	697b      	ldr	r3, [r7, #20]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3718      	adds	r7, #24
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	20000dbc 	.word	0x20000dbc
 800fd80:	200000d8 	.word	0x200000d8
 800fd84:	20000dac 	.word	0x20000dac
 800fd88:	20000da8 	.word	0x20000da8

0800fd8c <LSM6DSR_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSR_0_Probe(uint32_t Functions)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b092      	sub	sp, #72	@ 0x48
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  LSM6DSR_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSR_Object_t lsm6dsr_obj_0;
  LSM6DSR_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800fd94:	2300      	movs	r3, #0
 800fd96:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSR_SPI_4WIRES_BUS; /* SPI 4-Wires */
 800fd98:	2301      	movs	r3, #1
 800fd9a:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.Address     = 0x0;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  io_ctx.Init        = CUSTOM_LSM6DSR_0_Init;
 800fda2:	4b4a      	ldr	r3, [pc, #296]	@ (800fecc <LSM6DSR_0_Probe+0x140>)
 800fda4:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.DeInit      = CUSTOM_LSM6DSR_0_DeInit;
 800fda6:	4b4a      	ldr	r3, [pc, #296]	@ (800fed0 <LSM6DSR_0_Probe+0x144>)
 800fda8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.ReadReg     = CUSTOM_LSM6DSR_0_ReadReg;
 800fdaa:	4b4a      	ldr	r3, [pc, #296]	@ (800fed4 <LSM6DSR_0_Probe+0x148>)
 800fdac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.WriteReg    = CUSTOM_LSM6DSR_0_WriteReg;
 800fdae:	4b4a      	ldr	r3, [pc, #296]	@ (800fed8 <LSM6DSR_0_Probe+0x14c>)
 800fdb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.GetTick     = BSP_GetTick;
 800fdb2:	4b4a      	ldr	r3, [pc, #296]	@ (800fedc <LSM6DSR_0_Probe+0x150>)
 800fdb4:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LSM6DSR_RegisterBusIO(&lsm6dsr_obj_0, &io_ctx) != LSM6DSR_OK)
 800fdb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fdba:	4619      	mov	r1, r3
 800fdbc:	4848      	ldr	r0, [pc, #288]	@ (800fee0 <LSM6DSR_0_Probe+0x154>)
 800fdbe:	f7f7 fca9 	bl	8007714 <LSM6DSR_RegisterBusIO>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d003      	beq.n	800fdd0 <LSM6DSR_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fdc8:	f06f 0306 	mvn.w	r3, #6
 800fdcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fdce:	e077      	b.n	800fec0 <LSM6DSR_0_Probe+0x134>
  }
  else if (LSM6DSR_ReadID(&lsm6dsr_obj_0, &id) != LSM6DSR_OK)
 800fdd0:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	4842      	ldr	r0, [pc, #264]	@ (800fee0 <LSM6DSR_0_Probe+0x154>)
 800fdd8:	f7f7 fd9e 	bl	8007918 <LSM6DSR_ReadID>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <LSM6DSR_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fde2:	f06f 0306 	mvn.w	r3, #6
 800fde6:	647b      	str	r3, [r7, #68]	@ 0x44
 800fde8:	e06a      	b.n	800fec0 <LSM6DSR_0_Probe+0x134>
  }
  else if (id != LSM6DSR_ID)
 800fdea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdee:	2b6b      	cmp	r3, #107	@ 0x6b
 800fdf0:	d003      	beq.n	800fdfa <LSM6DSR_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fdf2:	f06f 0306 	mvn.w	r3, #6
 800fdf6:	647b      	str	r3, [r7, #68]	@ 0x44
 800fdf8:	e062      	b.n	800fec0 <LSM6DSR_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSR_GetCapabilities(&lsm6dsr_obj_0, &cap);
 800fdfa:	f107 0308 	add.w	r3, r7, #8
 800fdfe:	4619      	mov	r1, r3
 800fe00:	4837      	ldr	r0, [pc, #220]	@ (800fee0 <LSM6DSR_0_Probe+0x154>)
 800fe02:	f7f7 fd9f 	bl	8007944 <LSM6DSR_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSR_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800fe06:	7a7b      	ldrb	r3, [r7, #9]
 800fe08:	461a      	mov	r2, r3
 800fe0a:	7a3b      	ldrb	r3, [r7, #8]
 800fe0c:	005b      	lsls	r3, r3, #1
 800fe0e:	431a      	orrs	r2, r3
 800fe10:	7abb      	ldrb	r3, [r7, #10]
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4313      	orrs	r3, r2
 800fe16:	4a33      	ldr	r2, [pc, #204]	@ (800fee4 <LSM6DSR_0_Probe+0x158>)
 800fe18:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSR_0] = &lsm6dsr_obj_0;
 800fe1a:	4b33      	ldr	r3, [pc, #204]	@ (800fee8 <LSM6DSR_0_Probe+0x15c>)
 800fe1c:	4a30      	ldr	r2, [pc, #192]	@ (800fee0 <LSM6DSR_0_Probe+0x154>)
 800fe1e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSR_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSR_COMMON_Driver;
 800fe20:	4b32      	ldr	r3, [pc, #200]	@ (800feec <LSM6DSR_0_Probe+0x160>)
 800fe22:	4a33      	ldr	r2, [pc, #204]	@ (800fef0 <LSM6DSR_0_Probe+0x164>)
 800fe24:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800fe26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d11d      	bne.n	800fe68 <LSM6DSR_0_Probe+0xdc>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f003 0301 	and.w	r3, r3, #1
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d018      	beq.n	800fe68 <LSM6DSR_0_Probe+0xdc>
 800fe36:	7a7b      	ldrb	r3, [r7, #9]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d115      	bne.n	800fe68 <LSM6DSR_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSR_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSR_GYRO_Driver;
 800fe3c:	4b2d      	ldr	r3, [pc, #180]	@ (800fef4 <LSM6DSR_0_Probe+0x168>)
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	4a2d      	ldr	r2, [pc, #180]	@ (800fef8 <LSM6DSR_0_Probe+0x16c>)
 800fe42:	492e      	ldr	r1, [pc, #184]	@ (800fefc <LSM6DSR_0_Probe+0x170>)
 800fe44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSR_0]->Init(MotionCompObj[CUSTOM_LSM6DSR_0]) != LSM6DSR_OK)
 800fe48:	4b28      	ldr	r3, [pc, #160]	@ (800feec <LSM6DSR_0_Probe+0x160>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4a26      	ldr	r2, [pc, #152]	@ (800fee8 <LSM6DSR_0_Probe+0x15c>)
 800fe50:	6812      	ldr	r2, [r2, #0]
 800fe52:	4610      	mov	r0, r2
 800fe54:	4798      	blx	r3
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d003      	beq.n	800fe64 <LSM6DSR_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe5c:	f06f 0304 	mvn.w	r3, #4
 800fe60:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe62:	e001      	b.n	800fe68 <LSM6DSR_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fe64:	2300      	movs	r3, #0
 800fe66:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800fe68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d11d      	bne.n	800feaa <LSM6DSR_0_Probe+0x11e>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f003 0302 	and.w	r3, r3, #2
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d018      	beq.n	800feaa <LSM6DSR_0_Probe+0x11e>
 800fe78:	7a3b      	ldrb	r3, [r7, #8]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d115      	bne.n	800feaa <LSM6DSR_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSR_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSR_ACC_Driver;
 800fe7e:	4b1d      	ldr	r3, [pc, #116]	@ (800fef4 <LSM6DSR_0_Probe+0x168>)
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	4a1d      	ldr	r2, [pc, #116]	@ (800fef8 <LSM6DSR_0_Probe+0x16c>)
 800fe84:	491e      	ldr	r1, [pc, #120]	@ (800ff00 <LSM6DSR_0_Probe+0x174>)
 800fe86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSR_0]->Init(MotionCompObj[CUSTOM_LSM6DSR_0]) != LSM6DSR_OK)
 800fe8a:	4b18      	ldr	r3, [pc, #96]	@ (800feec <LSM6DSR_0_Probe+0x160>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a15      	ldr	r2, [pc, #84]	@ (800fee8 <LSM6DSR_0_Probe+0x15c>)
 800fe92:	6812      	ldr	r2, [r2, #0]
 800fe94:	4610      	mov	r0, r2
 800fe96:	4798      	blx	r3
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d003      	beq.n	800fea6 <LSM6DSR_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe9e:	f06f 0304 	mvn.w	r3, #4
 800fea2:	647b      	str	r3, [r7, #68]	@ 0x44
 800fea4:	e001      	b.n	800feaa <LSM6DSR_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fea6:	2300      	movs	r3, #0
 800fea8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800feaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800feac:	2b00      	cmp	r3, #0
 800feae:	d107      	bne.n	800fec0 <LSM6DSR_0_Probe+0x134>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f003 0304 	and.w	r3, r3, #4
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d002      	beq.n	800fec0 <LSM6DSR_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800feba:	f06f 0304 	mvn.w	r3, #4
 800febe:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800fec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3748      	adds	r7, #72	@ 0x48
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	0800ff05 	.word	0x0800ff05
 800fed0:	0800ff29 	.word	0x0800ff29
 800fed4:	0800ffc1 	.word	0x0800ffc1
 800fed8:	0800ff4d 	.word	0x0800ff4d
 800fedc:	080015c9 	.word	0x080015c9
 800fee0:	20000dc0 	.word	0x20000dc0
 800fee4:	20000dbc 	.word	0x20000dbc
 800fee8:	20000da8 	.word	0x20000da8
 800feec:	20000db8 	.word	0x20000db8
 800fef0:	20000064 	.word	0x20000064
 800fef4:	200000d8 	.word	0x200000d8
 800fef8:	20000dac 	.word	0x20000dac
 800fefc:	20000098 	.word	0x20000098
 800ff00:	20000074 	.word	0x20000074

0800ff04 <CUSTOM_LSM6DSR_0_Init>:
/**
 * @brief  Initialize SPI bus for LSM6DSR
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSR_0_Init(void)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ff0a:	f06f 0305 	mvn.w	r3, #5
 800ff0e:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSR_0_SPI_Init() == BSP_ERROR_NONE)
 800ff10:	f7f1 faca 	bl	80014a8 <BSP_SPI2_Init>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d101      	bne.n	800ff1e <CUSTOM_LSM6DSR_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800ff1e:	687b      	ldr	r3, [r7, #4]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <CUSTOM_LSM6DSR_0_DeInit>:
/**
 * @brief  DeInitialize SPI bus for LSM6DSR
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSR_0_DeInit(void)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ff2e:	f06f 0305 	mvn.w	r3, #5
 800ff32:	607b      	str	r3, [r7, #4]

  if(CUSTOM_LSM6DSR_0_SPI_DeInit() == BSP_ERROR_NONE)
 800ff34:	f7f1 fae8 	bl	8001508 <BSP_SPI2_DeInit>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d101      	bne.n	800ff42 <CUSTOM_LSM6DSR_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	607b      	str	r3, [r7, #4]
  }

  return ret;
 800ff42:	687b      	ldr	r3, [r7, #4]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <CUSTOM_LSM6DSR_0_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSR_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60ba      	str	r2, [r7, #8]
 800ff54:	461a      	mov	r2, r3
 800ff56:	4603      	mov	r3, r0
 800ff58:	81fb      	strh	r3, [r7, #14]
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	81bb      	strh	r3, [r7, #12]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800ff62:	2300      	movs	r3, #0
 800ff64:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800ff66:	89bb      	ldrh	r3, [r7, #12]
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSR_0_CS_PORT, CUSTOM_LSM6DSR_0_CS_PIN, GPIO_PIN_RESET);
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ff72:	4812      	ldr	r0, [pc, #72]	@ (800ffbc <CUSTOM_LSM6DSR_0_WriteReg+0x70>)
 800ff74:	f7fa fa96 	bl	800a4a4 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSR_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800ff78:	f107 0313 	add.w	r3, r7, #19
 800ff7c:	2101      	movs	r1, #1
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7f1 faea 	bl	8001558 <BSP_SPI2_Send>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d002      	beq.n	800ff90 <CUSTOM_LSM6DSR_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ff8a:	f06f 0305 	mvn.w	r3, #5
 800ff8e:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSR_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 800ff90:	88fb      	ldrh	r3, [r7, #6]
 800ff92:	4619      	mov	r1, r3
 800ff94:	68b8      	ldr	r0, [r7, #8]
 800ff96:	f7f1 fadf 	bl	8001558 <BSP_SPI2_Send>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d002      	beq.n	800ffa6 <CUSTOM_LSM6DSR_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800ffa0:	f06f 0305 	mvn.w	r3, #5
 800ffa4:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSR_0_CS_PORT, CUSTOM_LSM6DSR_0_CS_PIN, GPIO_PIN_SET);
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ffac:	4803      	ldr	r0, [pc, #12]	@ (800ffbc <CUSTOM_LSM6DSR_0_WriteReg+0x70>)
 800ffae:	f7fa fa79 	bl	800a4a4 <HAL_GPIO_WritePin>

  return ret;
 800ffb2:	697b      	ldr	r3, [r7, #20]
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3718      	adds	r7, #24
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	40020000 	.word	0x40020000

0800ffc0 <CUSTOM_LSM6DSR_0_ReadReg>:
 * @param  pdata the pointer to the data to be read
 * @param  len the length of the data to be read
 * @retval BSP status
 */
static int32_t CUSTOM_LSM6DSR_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60ba      	str	r2, [r7, #8]
 800ffc8:	461a      	mov	r2, r3
 800ffca:	4603      	mov	r3, r0
 800ffcc:	81fb      	strh	r3, [r7, #14]
 800ffce:	460b      	mov	r3, r1
 800ffd0:	81bb      	strh	r3, [r7, #12]
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 800ffda:	89bb      	ldrh	r3, [r7, #12]
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 800ffe0:	7cfb      	ldrb	r3, [r7, #19]
 800ffe2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSR_0_CS_PORT, CUSTOM_LSM6DSR_0_CS_PIN, GPIO_PIN_RESET);
 800ffea:	2200      	movs	r2, #0
 800ffec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fff0:	4812      	ldr	r0, [pc, #72]	@ (801003c <CUSTOM_LSM6DSR_0_ReadReg+0x7c>)
 800fff2:	f7fa fa57 	bl	800a4a4 <HAL_GPIO_WritePin>

  if (CUSTOM_LSM6DSR_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 800fff6:	f107 0313 	add.w	r3, r7, #19
 800fffa:	2101      	movs	r1, #1
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7f1 faab 	bl	8001558 <BSP_SPI2_Send>
 8010002:	4603      	mov	r3, r0
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <CUSTOM_LSM6DSR_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8010008:	f06f 0305 	mvn.w	r3, #5
 801000c:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_LSM6DSR_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 801000e:	88fb      	ldrh	r3, [r7, #6]
 8010010:	4619      	mov	r1, r3
 8010012:	68b8      	ldr	r0, [r7, #8]
 8010014:	f7f1 fabc 	bl	8001590 <BSP_SPI2_Recv>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d002      	beq.n	8010024 <CUSTOM_LSM6DSR_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 801001e:	f06f 0305 	mvn.w	r3, #5
 8010022:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_LSM6DSR_0_CS_PORT, CUSTOM_LSM6DSR_0_CS_PIN, GPIO_PIN_SET);
 8010024:	2201      	movs	r2, #1
 8010026:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801002a:	4804      	ldr	r0, [pc, #16]	@ (801003c <CUSTOM_LSM6DSR_0_ReadReg+0x7c>)
 801002c:	f7fa fa3a 	bl	800a4a4 <HAL_GPIO_WritePin>

  return ret;
 8010030:	697b      	ldr	r3, [r7, #20]
}
 8010032:	4618      	mov	r0, r3
 8010034:	3718      	adds	r7, #24
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	40020000 	.word	0x40020000

08010040 <CUSTOM_MOTION_SENSOR_Read_Register>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written to
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b086      	sub	sp, #24
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	460b      	mov	r3, r1
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d112      	bne.n	801007a <CUSTOM_MOTION_SENSOR_Read_Register+0x3a>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSR_0 == 1)
    case CUSTOM_LSM6DSR_0:
      if (LSM6DSR_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8010054:	4a0d      	ldr	r2, [pc, #52]	@ (801008c <CUSTOM_MOTION_SENSOR_Read_Register+0x4c>)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801005c:	7af9      	ldrb	r1, [r7, #11]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	4618      	mov	r0, r3
 8010062:	f7f8 f908 	bl	8008276 <LSM6DSR_Read_Reg>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d003      	beq.n	8010074 <CUSTOM_MOTION_SENSOR_Read_Register+0x34>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801006c:	f06f 0304 	mvn.w	r3, #4
 8010070:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8010072:	e006      	b.n	8010082 <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
        ret = BSP_ERROR_NONE;
 8010074:	2300      	movs	r3, #0
 8010076:	617b      	str	r3, [r7, #20]
      break;
 8010078:	e003      	b.n	8010082 <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 801007a:	f06f 0301 	mvn.w	r3, #1
 801007e:	617b      	str	r3, [r7, #20]
      break;
 8010080:	bf00      	nop
  }

  return ret;
 8010082:	697b      	ldr	r3, [r7, #20]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3718      	adds	r7, #24
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	20000da8 	.word	0x20000da8

08010090 <CUSTOM_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	460b      	mov	r3, r1
 801009a:	70fb      	strb	r3, [r7, #3]
 801009c:	4613      	mov	r3, r2
 801009e:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d112      	bne.n	80100cc <CUSTOM_MOTION_SENSOR_Write_Register+0x3c>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSR_0 == 1)
    case CUSTOM_LSM6DSR_0:
      if (LSM6DSR_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 80100a6:	4a0e      	ldr	r2, [pc, #56]	@ (80100e0 <CUSTOM_MOTION_SENSOR_Write_Register+0x50>)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100ae:	78ba      	ldrb	r2, [r7, #2]
 80100b0:	78f9      	ldrb	r1, [r7, #3]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7f8 f8f9 	bl	80082aa <LSM6DSR_Write_Reg>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d003      	beq.n	80100c6 <CUSTOM_MOTION_SENSOR_Write_Register+0x36>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80100be:	f06f 0304 	mvn.w	r3, #4
 80100c2:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80100c4:	e006      	b.n	80100d4 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
        ret = BSP_ERROR_NONE;
 80100c6:	2300      	movs	r3, #0
 80100c8:	60fb      	str	r3, [r7, #12]
      break;
 80100ca:	e003      	b.n	80100d4 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80100cc:	f06f 0301 	mvn.w	r3, #1
 80100d0:	60fb      	str	r3, [r7, #12]
      break;
 80100d2:	bf00      	nop
  }

  return ret;
 80100d4:	68fb      	ldr	r3, [r7, #12]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	20000da8 	.word	0x20000da8

080100e4 <siprintf>:
 80100e4:	b40e      	push	{r1, r2, r3}
 80100e6:	b510      	push	{r4, lr}
 80100e8:	b09d      	sub	sp, #116	@ 0x74
 80100ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80100ec:	9002      	str	r0, [sp, #8]
 80100ee:	9006      	str	r0, [sp, #24]
 80100f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80100f4:	480a      	ldr	r0, [pc, #40]	@ (8010120 <siprintf+0x3c>)
 80100f6:	9107      	str	r1, [sp, #28]
 80100f8:	9104      	str	r1, [sp, #16]
 80100fa:	490a      	ldr	r1, [pc, #40]	@ (8010124 <siprintf+0x40>)
 80100fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010100:	9105      	str	r1, [sp, #20]
 8010102:	2400      	movs	r4, #0
 8010104:	a902      	add	r1, sp, #8
 8010106:	6800      	ldr	r0, [r0, #0]
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801010c:	f000 f9f0 	bl	80104f0 <_svfiprintf_r>
 8010110:	9b02      	ldr	r3, [sp, #8]
 8010112:	701c      	strb	r4, [r3, #0]
 8010114:	b01d      	add	sp, #116	@ 0x74
 8010116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801011a:	b003      	add	sp, #12
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	200000ec 	.word	0x200000ec
 8010124:	ffff0208 	.word	0xffff0208

08010128 <_vsniprintf_r>:
 8010128:	b530      	push	{r4, r5, lr}
 801012a:	4614      	mov	r4, r2
 801012c:	2c00      	cmp	r4, #0
 801012e:	b09b      	sub	sp, #108	@ 0x6c
 8010130:	4605      	mov	r5, r0
 8010132:	461a      	mov	r2, r3
 8010134:	da05      	bge.n	8010142 <_vsniprintf_r+0x1a>
 8010136:	238b      	movs	r3, #139	@ 0x8b
 8010138:	6003      	str	r3, [r0, #0]
 801013a:	f04f 30ff 	mov.w	r0, #4294967295
 801013e:	b01b      	add	sp, #108	@ 0x6c
 8010140:	bd30      	pop	{r4, r5, pc}
 8010142:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010146:	f8ad 300c 	strh.w	r3, [sp, #12]
 801014a:	f04f 0300 	mov.w	r3, #0
 801014e:	9319      	str	r3, [sp, #100]	@ 0x64
 8010150:	bf14      	ite	ne
 8010152:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010156:	4623      	moveq	r3, r4
 8010158:	9302      	str	r3, [sp, #8]
 801015a:	9305      	str	r3, [sp, #20]
 801015c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010160:	9100      	str	r1, [sp, #0]
 8010162:	9104      	str	r1, [sp, #16]
 8010164:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010168:	4669      	mov	r1, sp
 801016a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801016c:	f000 f9c0 	bl	80104f0 <_svfiprintf_r>
 8010170:	1c43      	adds	r3, r0, #1
 8010172:	bfbc      	itt	lt
 8010174:	238b      	movlt	r3, #139	@ 0x8b
 8010176:	602b      	strlt	r3, [r5, #0]
 8010178:	2c00      	cmp	r4, #0
 801017a:	d0e0      	beq.n	801013e <_vsniprintf_r+0x16>
 801017c:	9b00      	ldr	r3, [sp, #0]
 801017e:	2200      	movs	r2, #0
 8010180:	701a      	strb	r2, [r3, #0]
 8010182:	e7dc      	b.n	801013e <_vsniprintf_r+0x16>

08010184 <vsniprintf>:
 8010184:	b507      	push	{r0, r1, r2, lr}
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	4613      	mov	r3, r2
 801018a:	460a      	mov	r2, r1
 801018c:	4601      	mov	r1, r0
 801018e:	4803      	ldr	r0, [pc, #12]	@ (801019c <vsniprintf+0x18>)
 8010190:	6800      	ldr	r0, [r0, #0]
 8010192:	f7ff ffc9 	bl	8010128 <_vsniprintf_r>
 8010196:	b003      	add	sp, #12
 8010198:	f85d fb04 	ldr.w	pc, [sp], #4
 801019c:	200000ec 	.word	0x200000ec

080101a0 <memset>:
 80101a0:	4402      	add	r2, r0
 80101a2:	4603      	mov	r3, r0
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d100      	bne.n	80101aa <memset+0xa>
 80101a8:	4770      	bx	lr
 80101aa:	f803 1b01 	strb.w	r1, [r3], #1
 80101ae:	e7f9      	b.n	80101a4 <memset+0x4>

080101b0 <strncmp>:
 80101b0:	b510      	push	{r4, lr}
 80101b2:	b16a      	cbz	r2, 80101d0 <strncmp+0x20>
 80101b4:	3901      	subs	r1, #1
 80101b6:	1884      	adds	r4, r0, r2
 80101b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d103      	bne.n	80101cc <strncmp+0x1c>
 80101c4:	42a0      	cmp	r0, r4
 80101c6:	d001      	beq.n	80101cc <strncmp+0x1c>
 80101c8:	2a00      	cmp	r2, #0
 80101ca:	d1f5      	bne.n	80101b8 <strncmp+0x8>
 80101cc:	1ad0      	subs	r0, r2, r3
 80101ce:	bd10      	pop	{r4, pc}
 80101d0:	4610      	mov	r0, r2
 80101d2:	e7fc      	b.n	80101ce <strncmp+0x1e>

080101d4 <__errno>:
 80101d4:	4b01      	ldr	r3, [pc, #4]	@ (80101dc <__errno+0x8>)
 80101d6:	6818      	ldr	r0, [r3, #0]
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	200000ec 	.word	0x200000ec

080101e0 <__libc_init_array>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	4d0d      	ldr	r5, [pc, #52]	@ (8010218 <__libc_init_array+0x38>)
 80101e4:	4c0d      	ldr	r4, [pc, #52]	@ (801021c <__libc_init_array+0x3c>)
 80101e6:	1b64      	subs	r4, r4, r5
 80101e8:	10a4      	asrs	r4, r4, #2
 80101ea:	2600      	movs	r6, #0
 80101ec:	42a6      	cmp	r6, r4
 80101ee:	d109      	bne.n	8010204 <__libc_init_array+0x24>
 80101f0:	4d0b      	ldr	r5, [pc, #44]	@ (8010220 <__libc_init_array+0x40>)
 80101f2:	4c0c      	ldr	r4, [pc, #48]	@ (8010224 <__libc_init_array+0x44>)
 80101f4:	f001 f9e6 	bl	80115c4 <_init>
 80101f8:	1b64      	subs	r4, r4, r5
 80101fa:	10a4      	asrs	r4, r4, #2
 80101fc:	2600      	movs	r6, #0
 80101fe:	42a6      	cmp	r6, r4
 8010200:	d105      	bne.n	801020e <__libc_init_array+0x2e>
 8010202:	bd70      	pop	{r4, r5, r6, pc}
 8010204:	f855 3b04 	ldr.w	r3, [r5], #4
 8010208:	4798      	blx	r3
 801020a:	3601      	adds	r6, #1
 801020c:	e7ee      	b.n	80101ec <__libc_init_array+0xc>
 801020e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010212:	4798      	blx	r3
 8010214:	3601      	adds	r6, #1
 8010216:	e7f2      	b.n	80101fe <__libc_init_array+0x1e>
 8010218:	08011cf8 	.word	0x08011cf8
 801021c:	08011cf8 	.word	0x08011cf8
 8010220:	08011cf8 	.word	0x08011cf8
 8010224:	08011cfc 	.word	0x08011cfc

08010228 <__retarget_lock_acquire_recursive>:
 8010228:	4770      	bx	lr

0801022a <__retarget_lock_release_recursive>:
 801022a:	4770      	bx	lr

0801022c <memcpy>:
 801022c:	440a      	add	r2, r1
 801022e:	4291      	cmp	r1, r2
 8010230:	f100 33ff 	add.w	r3, r0, #4294967295
 8010234:	d100      	bne.n	8010238 <memcpy+0xc>
 8010236:	4770      	bx	lr
 8010238:	b510      	push	{r4, lr}
 801023a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801023e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010242:	4291      	cmp	r1, r2
 8010244:	d1f9      	bne.n	801023a <memcpy+0xe>
 8010246:	bd10      	pop	{r4, pc}

08010248 <_free_r>:
 8010248:	b538      	push	{r3, r4, r5, lr}
 801024a:	4605      	mov	r5, r0
 801024c:	2900      	cmp	r1, #0
 801024e:	d041      	beq.n	80102d4 <_free_r+0x8c>
 8010250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010254:	1f0c      	subs	r4, r1, #4
 8010256:	2b00      	cmp	r3, #0
 8010258:	bfb8      	it	lt
 801025a:	18e4      	addlt	r4, r4, r3
 801025c:	f000 f8e0 	bl	8010420 <__malloc_lock>
 8010260:	4a1d      	ldr	r2, [pc, #116]	@ (80102d8 <_free_r+0x90>)
 8010262:	6813      	ldr	r3, [r2, #0]
 8010264:	b933      	cbnz	r3, 8010274 <_free_r+0x2c>
 8010266:	6063      	str	r3, [r4, #4]
 8010268:	6014      	str	r4, [r2, #0]
 801026a:	4628      	mov	r0, r5
 801026c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010270:	f000 b8dc 	b.w	801042c <__malloc_unlock>
 8010274:	42a3      	cmp	r3, r4
 8010276:	d908      	bls.n	801028a <_free_r+0x42>
 8010278:	6820      	ldr	r0, [r4, #0]
 801027a:	1821      	adds	r1, r4, r0
 801027c:	428b      	cmp	r3, r1
 801027e:	bf01      	itttt	eq
 8010280:	6819      	ldreq	r1, [r3, #0]
 8010282:	685b      	ldreq	r3, [r3, #4]
 8010284:	1809      	addeq	r1, r1, r0
 8010286:	6021      	streq	r1, [r4, #0]
 8010288:	e7ed      	b.n	8010266 <_free_r+0x1e>
 801028a:	461a      	mov	r2, r3
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	b10b      	cbz	r3, 8010294 <_free_r+0x4c>
 8010290:	42a3      	cmp	r3, r4
 8010292:	d9fa      	bls.n	801028a <_free_r+0x42>
 8010294:	6811      	ldr	r1, [r2, #0]
 8010296:	1850      	adds	r0, r2, r1
 8010298:	42a0      	cmp	r0, r4
 801029a:	d10b      	bne.n	80102b4 <_free_r+0x6c>
 801029c:	6820      	ldr	r0, [r4, #0]
 801029e:	4401      	add	r1, r0
 80102a0:	1850      	adds	r0, r2, r1
 80102a2:	4283      	cmp	r3, r0
 80102a4:	6011      	str	r1, [r2, #0]
 80102a6:	d1e0      	bne.n	801026a <_free_r+0x22>
 80102a8:	6818      	ldr	r0, [r3, #0]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	6053      	str	r3, [r2, #4]
 80102ae:	4408      	add	r0, r1
 80102b0:	6010      	str	r0, [r2, #0]
 80102b2:	e7da      	b.n	801026a <_free_r+0x22>
 80102b4:	d902      	bls.n	80102bc <_free_r+0x74>
 80102b6:	230c      	movs	r3, #12
 80102b8:	602b      	str	r3, [r5, #0]
 80102ba:	e7d6      	b.n	801026a <_free_r+0x22>
 80102bc:	6820      	ldr	r0, [r4, #0]
 80102be:	1821      	adds	r1, r4, r0
 80102c0:	428b      	cmp	r3, r1
 80102c2:	bf04      	itt	eq
 80102c4:	6819      	ldreq	r1, [r3, #0]
 80102c6:	685b      	ldreq	r3, [r3, #4]
 80102c8:	6063      	str	r3, [r4, #4]
 80102ca:	bf04      	itt	eq
 80102cc:	1809      	addeq	r1, r1, r0
 80102ce:	6021      	streq	r1, [r4, #0]
 80102d0:	6054      	str	r4, [r2, #4]
 80102d2:	e7ca      	b.n	801026a <_free_r+0x22>
 80102d4:	bd38      	pop	{r3, r4, r5, pc}
 80102d6:	bf00      	nop
 80102d8:	20000f34 	.word	0x20000f34

080102dc <sbrk_aligned>:
 80102dc:	b570      	push	{r4, r5, r6, lr}
 80102de:	4e0f      	ldr	r6, [pc, #60]	@ (801031c <sbrk_aligned+0x40>)
 80102e0:	460c      	mov	r4, r1
 80102e2:	6831      	ldr	r1, [r6, #0]
 80102e4:	4605      	mov	r5, r0
 80102e6:	b911      	cbnz	r1, 80102ee <sbrk_aligned+0x12>
 80102e8:	f000 fba4 	bl	8010a34 <_sbrk_r>
 80102ec:	6030      	str	r0, [r6, #0]
 80102ee:	4621      	mov	r1, r4
 80102f0:	4628      	mov	r0, r5
 80102f2:	f000 fb9f 	bl	8010a34 <_sbrk_r>
 80102f6:	1c43      	adds	r3, r0, #1
 80102f8:	d103      	bne.n	8010302 <sbrk_aligned+0x26>
 80102fa:	f04f 34ff 	mov.w	r4, #4294967295
 80102fe:	4620      	mov	r0, r4
 8010300:	bd70      	pop	{r4, r5, r6, pc}
 8010302:	1cc4      	adds	r4, r0, #3
 8010304:	f024 0403 	bic.w	r4, r4, #3
 8010308:	42a0      	cmp	r0, r4
 801030a:	d0f8      	beq.n	80102fe <sbrk_aligned+0x22>
 801030c:	1a21      	subs	r1, r4, r0
 801030e:	4628      	mov	r0, r5
 8010310:	f000 fb90 	bl	8010a34 <_sbrk_r>
 8010314:	3001      	adds	r0, #1
 8010316:	d1f2      	bne.n	80102fe <sbrk_aligned+0x22>
 8010318:	e7ef      	b.n	80102fa <sbrk_aligned+0x1e>
 801031a:	bf00      	nop
 801031c:	20000f30 	.word	0x20000f30

08010320 <_malloc_r>:
 8010320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010324:	1ccd      	adds	r5, r1, #3
 8010326:	f025 0503 	bic.w	r5, r5, #3
 801032a:	3508      	adds	r5, #8
 801032c:	2d0c      	cmp	r5, #12
 801032e:	bf38      	it	cc
 8010330:	250c      	movcc	r5, #12
 8010332:	2d00      	cmp	r5, #0
 8010334:	4606      	mov	r6, r0
 8010336:	db01      	blt.n	801033c <_malloc_r+0x1c>
 8010338:	42a9      	cmp	r1, r5
 801033a:	d904      	bls.n	8010346 <_malloc_r+0x26>
 801033c:	230c      	movs	r3, #12
 801033e:	6033      	str	r3, [r6, #0]
 8010340:	2000      	movs	r0, #0
 8010342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801041c <_malloc_r+0xfc>
 801034a:	f000 f869 	bl	8010420 <__malloc_lock>
 801034e:	f8d8 3000 	ldr.w	r3, [r8]
 8010352:	461c      	mov	r4, r3
 8010354:	bb44      	cbnz	r4, 80103a8 <_malloc_r+0x88>
 8010356:	4629      	mov	r1, r5
 8010358:	4630      	mov	r0, r6
 801035a:	f7ff ffbf 	bl	80102dc <sbrk_aligned>
 801035e:	1c43      	adds	r3, r0, #1
 8010360:	4604      	mov	r4, r0
 8010362:	d158      	bne.n	8010416 <_malloc_r+0xf6>
 8010364:	f8d8 4000 	ldr.w	r4, [r8]
 8010368:	4627      	mov	r7, r4
 801036a:	2f00      	cmp	r7, #0
 801036c:	d143      	bne.n	80103f6 <_malloc_r+0xd6>
 801036e:	2c00      	cmp	r4, #0
 8010370:	d04b      	beq.n	801040a <_malloc_r+0xea>
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	4639      	mov	r1, r7
 8010376:	4630      	mov	r0, r6
 8010378:	eb04 0903 	add.w	r9, r4, r3
 801037c:	f000 fb5a 	bl	8010a34 <_sbrk_r>
 8010380:	4581      	cmp	r9, r0
 8010382:	d142      	bne.n	801040a <_malloc_r+0xea>
 8010384:	6821      	ldr	r1, [r4, #0]
 8010386:	1a6d      	subs	r5, r5, r1
 8010388:	4629      	mov	r1, r5
 801038a:	4630      	mov	r0, r6
 801038c:	f7ff ffa6 	bl	80102dc <sbrk_aligned>
 8010390:	3001      	adds	r0, #1
 8010392:	d03a      	beq.n	801040a <_malloc_r+0xea>
 8010394:	6823      	ldr	r3, [r4, #0]
 8010396:	442b      	add	r3, r5
 8010398:	6023      	str	r3, [r4, #0]
 801039a:	f8d8 3000 	ldr.w	r3, [r8]
 801039e:	685a      	ldr	r2, [r3, #4]
 80103a0:	bb62      	cbnz	r2, 80103fc <_malloc_r+0xdc>
 80103a2:	f8c8 7000 	str.w	r7, [r8]
 80103a6:	e00f      	b.n	80103c8 <_malloc_r+0xa8>
 80103a8:	6822      	ldr	r2, [r4, #0]
 80103aa:	1b52      	subs	r2, r2, r5
 80103ac:	d420      	bmi.n	80103f0 <_malloc_r+0xd0>
 80103ae:	2a0b      	cmp	r2, #11
 80103b0:	d917      	bls.n	80103e2 <_malloc_r+0xc2>
 80103b2:	1961      	adds	r1, r4, r5
 80103b4:	42a3      	cmp	r3, r4
 80103b6:	6025      	str	r5, [r4, #0]
 80103b8:	bf18      	it	ne
 80103ba:	6059      	strne	r1, [r3, #4]
 80103bc:	6863      	ldr	r3, [r4, #4]
 80103be:	bf08      	it	eq
 80103c0:	f8c8 1000 	streq.w	r1, [r8]
 80103c4:	5162      	str	r2, [r4, r5]
 80103c6:	604b      	str	r3, [r1, #4]
 80103c8:	4630      	mov	r0, r6
 80103ca:	f000 f82f 	bl	801042c <__malloc_unlock>
 80103ce:	f104 000b 	add.w	r0, r4, #11
 80103d2:	1d23      	adds	r3, r4, #4
 80103d4:	f020 0007 	bic.w	r0, r0, #7
 80103d8:	1ac2      	subs	r2, r0, r3
 80103da:	bf1c      	itt	ne
 80103dc:	1a1b      	subne	r3, r3, r0
 80103de:	50a3      	strne	r3, [r4, r2]
 80103e0:	e7af      	b.n	8010342 <_malloc_r+0x22>
 80103e2:	6862      	ldr	r2, [r4, #4]
 80103e4:	42a3      	cmp	r3, r4
 80103e6:	bf0c      	ite	eq
 80103e8:	f8c8 2000 	streq.w	r2, [r8]
 80103ec:	605a      	strne	r2, [r3, #4]
 80103ee:	e7eb      	b.n	80103c8 <_malloc_r+0xa8>
 80103f0:	4623      	mov	r3, r4
 80103f2:	6864      	ldr	r4, [r4, #4]
 80103f4:	e7ae      	b.n	8010354 <_malloc_r+0x34>
 80103f6:	463c      	mov	r4, r7
 80103f8:	687f      	ldr	r7, [r7, #4]
 80103fa:	e7b6      	b.n	801036a <_malloc_r+0x4a>
 80103fc:	461a      	mov	r2, r3
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	42a3      	cmp	r3, r4
 8010402:	d1fb      	bne.n	80103fc <_malloc_r+0xdc>
 8010404:	2300      	movs	r3, #0
 8010406:	6053      	str	r3, [r2, #4]
 8010408:	e7de      	b.n	80103c8 <_malloc_r+0xa8>
 801040a:	230c      	movs	r3, #12
 801040c:	6033      	str	r3, [r6, #0]
 801040e:	4630      	mov	r0, r6
 8010410:	f000 f80c 	bl	801042c <__malloc_unlock>
 8010414:	e794      	b.n	8010340 <_malloc_r+0x20>
 8010416:	6005      	str	r5, [r0, #0]
 8010418:	e7d6      	b.n	80103c8 <_malloc_r+0xa8>
 801041a:	bf00      	nop
 801041c:	20000f34 	.word	0x20000f34

08010420 <__malloc_lock>:
 8010420:	4801      	ldr	r0, [pc, #4]	@ (8010428 <__malloc_lock+0x8>)
 8010422:	f7ff bf01 	b.w	8010228 <__retarget_lock_acquire_recursive>
 8010426:	bf00      	nop
 8010428:	20000f2c 	.word	0x20000f2c

0801042c <__malloc_unlock>:
 801042c:	4801      	ldr	r0, [pc, #4]	@ (8010434 <__malloc_unlock+0x8>)
 801042e:	f7ff befc 	b.w	801022a <__retarget_lock_release_recursive>
 8010432:	bf00      	nop
 8010434:	20000f2c 	.word	0x20000f2c

08010438 <__ssputs_r>:
 8010438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801043c:	688e      	ldr	r6, [r1, #8]
 801043e:	461f      	mov	r7, r3
 8010440:	42be      	cmp	r6, r7
 8010442:	680b      	ldr	r3, [r1, #0]
 8010444:	4682      	mov	sl, r0
 8010446:	460c      	mov	r4, r1
 8010448:	4690      	mov	r8, r2
 801044a:	d82d      	bhi.n	80104a8 <__ssputs_r+0x70>
 801044c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010454:	d026      	beq.n	80104a4 <__ssputs_r+0x6c>
 8010456:	6965      	ldr	r5, [r4, #20]
 8010458:	6909      	ldr	r1, [r1, #16]
 801045a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801045e:	eba3 0901 	sub.w	r9, r3, r1
 8010462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010466:	1c7b      	adds	r3, r7, #1
 8010468:	444b      	add	r3, r9
 801046a:	106d      	asrs	r5, r5, #1
 801046c:	429d      	cmp	r5, r3
 801046e:	bf38      	it	cc
 8010470:	461d      	movcc	r5, r3
 8010472:	0553      	lsls	r3, r2, #21
 8010474:	d527      	bpl.n	80104c6 <__ssputs_r+0x8e>
 8010476:	4629      	mov	r1, r5
 8010478:	f7ff ff52 	bl	8010320 <_malloc_r>
 801047c:	4606      	mov	r6, r0
 801047e:	b360      	cbz	r0, 80104da <__ssputs_r+0xa2>
 8010480:	6921      	ldr	r1, [r4, #16]
 8010482:	464a      	mov	r2, r9
 8010484:	f7ff fed2 	bl	801022c <memcpy>
 8010488:	89a3      	ldrh	r3, [r4, #12]
 801048a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801048e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010492:	81a3      	strh	r3, [r4, #12]
 8010494:	6126      	str	r6, [r4, #16]
 8010496:	6165      	str	r5, [r4, #20]
 8010498:	444e      	add	r6, r9
 801049a:	eba5 0509 	sub.w	r5, r5, r9
 801049e:	6026      	str	r6, [r4, #0]
 80104a0:	60a5      	str	r5, [r4, #8]
 80104a2:	463e      	mov	r6, r7
 80104a4:	42be      	cmp	r6, r7
 80104a6:	d900      	bls.n	80104aa <__ssputs_r+0x72>
 80104a8:	463e      	mov	r6, r7
 80104aa:	6820      	ldr	r0, [r4, #0]
 80104ac:	4632      	mov	r2, r6
 80104ae:	4641      	mov	r1, r8
 80104b0:	f000 faa6 	bl	8010a00 <memmove>
 80104b4:	68a3      	ldr	r3, [r4, #8]
 80104b6:	1b9b      	subs	r3, r3, r6
 80104b8:	60a3      	str	r3, [r4, #8]
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	4433      	add	r3, r6
 80104be:	6023      	str	r3, [r4, #0]
 80104c0:	2000      	movs	r0, #0
 80104c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104c6:	462a      	mov	r2, r5
 80104c8:	f000 fac4 	bl	8010a54 <_realloc_r>
 80104cc:	4606      	mov	r6, r0
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d1e0      	bne.n	8010494 <__ssputs_r+0x5c>
 80104d2:	6921      	ldr	r1, [r4, #16]
 80104d4:	4650      	mov	r0, sl
 80104d6:	f7ff feb7 	bl	8010248 <_free_r>
 80104da:	230c      	movs	r3, #12
 80104dc:	f8ca 3000 	str.w	r3, [sl]
 80104e0:	89a3      	ldrh	r3, [r4, #12]
 80104e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104e6:	81a3      	strh	r3, [r4, #12]
 80104e8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ec:	e7e9      	b.n	80104c2 <__ssputs_r+0x8a>
	...

080104f0 <_svfiprintf_r>:
 80104f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f4:	4698      	mov	r8, r3
 80104f6:	898b      	ldrh	r3, [r1, #12]
 80104f8:	061b      	lsls	r3, r3, #24
 80104fa:	b09d      	sub	sp, #116	@ 0x74
 80104fc:	4607      	mov	r7, r0
 80104fe:	460d      	mov	r5, r1
 8010500:	4614      	mov	r4, r2
 8010502:	d510      	bpl.n	8010526 <_svfiprintf_r+0x36>
 8010504:	690b      	ldr	r3, [r1, #16]
 8010506:	b973      	cbnz	r3, 8010526 <_svfiprintf_r+0x36>
 8010508:	2140      	movs	r1, #64	@ 0x40
 801050a:	f7ff ff09 	bl	8010320 <_malloc_r>
 801050e:	6028      	str	r0, [r5, #0]
 8010510:	6128      	str	r0, [r5, #16]
 8010512:	b930      	cbnz	r0, 8010522 <_svfiprintf_r+0x32>
 8010514:	230c      	movs	r3, #12
 8010516:	603b      	str	r3, [r7, #0]
 8010518:	f04f 30ff 	mov.w	r0, #4294967295
 801051c:	b01d      	add	sp, #116	@ 0x74
 801051e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010522:	2340      	movs	r3, #64	@ 0x40
 8010524:	616b      	str	r3, [r5, #20]
 8010526:	2300      	movs	r3, #0
 8010528:	9309      	str	r3, [sp, #36]	@ 0x24
 801052a:	2320      	movs	r3, #32
 801052c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010530:	f8cd 800c 	str.w	r8, [sp, #12]
 8010534:	2330      	movs	r3, #48	@ 0x30
 8010536:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80106d4 <_svfiprintf_r+0x1e4>
 801053a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801053e:	f04f 0901 	mov.w	r9, #1
 8010542:	4623      	mov	r3, r4
 8010544:	469a      	mov	sl, r3
 8010546:	f813 2b01 	ldrb.w	r2, [r3], #1
 801054a:	b10a      	cbz	r2, 8010550 <_svfiprintf_r+0x60>
 801054c:	2a25      	cmp	r2, #37	@ 0x25
 801054e:	d1f9      	bne.n	8010544 <_svfiprintf_r+0x54>
 8010550:	ebba 0b04 	subs.w	fp, sl, r4
 8010554:	d00b      	beq.n	801056e <_svfiprintf_r+0x7e>
 8010556:	465b      	mov	r3, fp
 8010558:	4622      	mov	r2, r4
 801055a:	4629      	mov	r1, r5
 801055c:	4638      	mov	r0, r7
 801055e:	f7ff ff6b 	bl	8010438 <__ssputs_r>
 8010562:	3001      	adds	r0, #1
 8010564:	f000 80a7 	beq.w	80106b6 <_svfiprintf_r+0x1c6>
 8010568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801056a:	445a      	add	r2, fp
 801056c:	9209      	str	r2, [sp, #36]	@ 0x24
 801056e:	f89a 3000 	ldrb.w	r3, [sl]
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 809f 	beq.w	80106b6 <_svfiprintf_r+0x1c6>
 8010578:	2300      	movs	r3, #0
 801057a:	f04f 32ff 	mov.w	r2, #4294967295
 801057e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010582:	f10a 0a01 	add.w	sl, sl, #1
 8010586:	9304      	str	r3, [sp, #16]
 8010588:	9307      	str	r3, [sp, #28]
 801058a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801058e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010590:	4654      	mov	r4, sl
 8010592:	2205      	movs	r2, #5
 8010594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010598:	484e      	ldr	r0, [pc, #312]	@ (80106d4 <_svfiprintf_r+0x1e4>)
 801059a:	f7ef fe21 	bl	80001e0 <memchr>
 801059e:	9a04      	ldr	r2, [sp, #16]
 80105a0:	b9d8      	cbnz	r0, 80105da <_svfiprintf_r+0xea>
 80105a2:	06d0      	lsls	r0, r2, #27
 80105a4:	bf44      	itt	mi
 80105a6:	2320      	movmi	r3, #32
 80105a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105ac:	0711      	lsls	r1, r2, #28
 80105ae:	bf44      	itt	mi
 80105b0:	232b      	movmi	r3, #43	@ 0x2b
 80105b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105b6:	f89a 3000 	ldrb.w	r3, [sl]
 80105ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80105bc:	d015      	beq.n	80105ea <_svfiprintf_r+0xfa>
 80105be:	9a07      	ldr	r2, [sp, #28]
 80105c0:	4654      	mov	r4, sl
 80105c2:	2000      	movs	r0, #0
 80105c4:	f04f 0c0a 	mov.w	ip, #10
 80105c8:	4621      	mov	r1, r4
 80105ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105ce:	3b30      	subs	r3, #48	@ 0x30
 80105d0:	2b09      	cmp	r3, #9
 80105d2:	d94b      	bls.n	801066c <_svfiprintf_r+0x17c>
 80105d4:	b1b0      	cbz	r0, 8010604 <_svfiprintf_r+0x114>
 80105d6:	9207      	str	r2, [sp, #28]
 80105d8:	e014      	b.n	8010604 <_svfiprintf_r+0x114>
 80105da:	eba0 0308 	sub.w	r3, r0, r8
 80105de:	fa09 f303 	lsl.w	r3, r9, r3
 80105e2:	4313      	orrs	r3, r2
 80105e4:	9304      	str	r3, [sp, #16]
 80105e6:	46a2      	mov	sl, r4
 80105e8:	e7d2      	b.n	8010590 <_svfiprintf_r+0xa0>
 80105ea:	9b03      	ldr	r3, [sp, #12]
 80105ec:	1d19      	adds	r1, r3, #4
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	9103      	str	r1, [sp, #12]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	bfbb      	ittet	lt
 80105f6:	425b      	neglt	r3, r3
 80105f8:	f042 0202 	orrlt.w	r2, r2, #2
 80105fc:	9307      	strge	r3, [sp, #28]
 80105fe:	9307      	strlt	r3, [sp, #28]
 8010600:	bfb8      	it	lt
 8010602:	9204      	strlt	r2, [sp, #16]
 8010604:	7823      	ldrb	r3, [r4, #0]
 8010606:	2b2e      	cmp	r3, #46	@ 0x2e
 8010608:	d10a      	bne.n	8010620 <_svfiprintf_r+0x130>
 801060a:	7863      	ldrb	r3, [r4, #1]
 801060c:	2b2a      	cmp	r3, #42	@ 0x2a
 801060e:	d132      	bne.n	8010676 <_svfiprintf_r+0x186>
 8010610:	9b03      	ldr	r3, [sp, #12]
 8010612:	1d1a      	adds	r2, r3, #4
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	9203      	str	r2, [sp, #12]
 8010618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801061c:	3402      	adds	r4, #2
 801061e:	9305      	str	r3, [sp, #20]
 8010620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80106e4 <_svfiprintf_r+0x1f4>
 8010624:	7821      	ldrb	r1, [r4, #0]
 8010626:	2203      	movs	r2, #3
 8010628:	4650      	mov	r0, sl
 801062a:	f7ef fdd9 	bl	80001e0 <memchr>
 801062e:	b138      	cbz	r0, 8010640 <_svfiprintf_r+0x150>
 8010630:	9b04      	ldr	r3, [sp, #16]
 8010632:	eba0 000a 	sub.w	r0, r0, sl
 8010636:	2240      	movs	r2, #64	@ 0x40
 8010638:	4082      	lsls	r2, r0
 801063a:	4313      	orrs	r3, r2
 801063c:	3401      	adds	r4, #1
 801063e:	9304      	str	r3, [sp, #16]
 8010640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010644:	4824      	ldr	r0, [pc, #144]	@ (80106d8 <_svfiprintf_r+0x1e8>)
 8010646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801064a:	2206      	movs	r2, #6
 801064c:	f7ef fdc8 	bl	80001e0 <memchr>
 8010650:	2800      	cmp	r0, #0
 8010652:	d036      	beq.n	80106c2 <_svfiprintf_r+0x1d2>
 8010654:	4b21      	ldr	r3, [pc, #132]	@ (80106dc <_svfiprintf_r+0x1ec>)
 8010656:	bb1b      	cbnz	r3, 80106a0 <_svfiprintf_r+0x1b0>
 8010658:	9b03      	ldr	r3, [sp, #12]
 801065a:	3307      	adds	r3, #7
 801065c:	f023 0307 	bic.w	r3, r3, #7
 8010660:	3308      	adds	r3, #8
 8010662:	9303      	str	r3, [sp, #12]
 8010664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010666:	4433      	add	r3, r6
 8010668:	9309      	str	r3, [sp, #36]	@ 0x24
 801066a:	e76a      	b.n	8010542 <_svfiprintf_r+0x52>
 801066c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010670:	460c      	mov	r4, r1
 8010672:	2001      	movs	r0, #1
 8010674:	e7a8      	b.n	80105c8 <_svfiprintf_r+0xd8>
 8010676:	2300      	movs	r3, #0
 8010678:	3401      	adds	r4, #1
 801067a:	9305      	str	r3, [sp, #20]
 801067c:	4619      	mov	r1, r3
 801067e:	f04f 0c0a 	mov.w	ip, #10
 8010682:	4620      	mov	r0, r4
 8010684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010688:	3a30      	subs	r2, #48	@ 0x30
 801068a:	2a09      	cmp	r2, #9
 801068c:	d903      	bls.n	8010696 <_svfiprintf_r+0x1a6>
 801068e:	2b00      	cmp	r3, #0
 8010690:	d0c6      	beq.n	8010620 <_svfiprintf_r+0x130>
 8010692:	9105      	str	r1, [sp, #20]
 8010694:	e7c4      	b.n	8010620 <_svfiprintf_r+0x130>
 8010696:	fb0c 2101 	mla	r1, ip, r1, r2
 801069a:	4604      	mov	r4, r0
 801069c:	2301      	movs	r3, #1
 801069e:	e7f0      	b.n	8010682 <_svfiprintf_r+0x192>
 80106a0:	ab03      	add	r3, sp, #12
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	462a      	mov	r2, r5
 80106a6:	4b0e      	ldr	r3, [pc, #56]	@ (80106e0 <_svfiprintf_r+0x1f0>)
 80106a8:	a904      	add	r1, sp, #16
 80106aa:	4638      	mov	r0, r7
 80106ac:	f3af 8000 	nop.w
 80106b0:	1c42      	adds	r2, r0, #1
 80106b2:	4606      	mov	r6, r0
 80106b4:	d1d6      	bne.n	8010664 <_svfiprintf_r+0x174>
 80106b6:	89ab      	ldrh	r3, [r5, #12]
 80106b8:	065b      	lsls	r3, r3, #25
 80106ba:	f53f af2d 	bmi.w	8010518 <_svfiprintf_r+0x28>
 80106be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106c0:	e72c      	b.n	801051c <_svfiprintf_r+0x2c>
 80106c2:	ab03      	add	r3, sp, #12
 80106c4:	9300      	str	r3, [sp, #0]
 80106c6:	462a      	mov	r2, r5
 80106c8:	4b05      	ldr	r3, [pc, #20]	@ (80106e0 <_svfiprintf_r+0x1f0>)
 80106ca:	a904      	add	r1, sp, #16
 80106cc:	4638      	mov	r0, r7
 80106ce:	f000 f879 	bl	80107c4 <_printf_i>
 80106d2:	e7ed      	b.n	80106b0 <_svfiprintf_r+0x1c0>
 80106d4:	08011c3c 	.word	0x08011c3c
 80106d8:	08011c46 	.word	0x08011c46
 80106dc:	00000000 	.word	0x00000000
 80106e0:	08010439 	.word	0x08010439
 80106e4:	08011c42 	.word	0x08011c42

080106e8 <_printf_common>:
 80106e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106ec:	4616      	mov	r6, r2
 80106ee:	4698      	mov	r8, r3
 80106f0:	688a      	ldr	r2, [r1, #8]
 80106f2:	690b      	ldr	r3, [r1, #16]
 80106f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80106f8:	4293      	cmp	r3, r2
 80106fa:	bfb8      	it	lt
 80106fc:	4613      	movlt	r3, r2
 80106fe:	6033      	str	r3, [r6, #0]
 8010700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010704:	4607      	mov	r7, r0
 8010706:	460c      	mov	r4, r1
 8010708:	b10a      	cbz	r2, 801070e <_printf_common+0x26>
 801070a:	3301      	adds	r3, #1
 801070c:	6033      	str	r3, [r6, #0]
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	0699      	lsls	r1, r3, #26
 8010712:	bf42      	ittt	mi
 8010714:	6833      	ldrmi	r3, [r6, #0]
 8010716:	3302      	addmi	r3, #2
 8010718:	6033      	strmi	r3, [r6, #0]
 801071a:	6825      	ldr	r5, [r4, #0]
 801071c:	f015 0506 	ands.w	r5, r5, #6
 8010720:	d106      	bne.n	8010730 <_printf_common+0x48>
 8010722:	f104 0a19 	add.w	sl, r4, #25
 8010726:	68e3      	ldr	r3, [r4, #12]
 8010728:	6832      	ldr	r2, [r6, #0]
 801072a:	1a9b      	subs	r3, r3, r2
 801072c:	42ab      	cmp	r3, r5
 801072e:	dc26      	bgt.n	801077e <_printf_common+0x96>
 8010730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010734:	6822      	ldr	r2, [r4, #0]
 8010736:	3b00      	subs	r3, #0
 8010738:	bf18      	it	ne
 801073a:	2301      	movne	r3, #1
 801073c:	0692      	lsls	r2, r2, #26
 801073e:	d42b      	bmi.n	8010798 <_printf_common+0xb0>
 8010740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010744:	4641      	mov	r1, r8
 8010746:	4638      	mov	r0, r7
 8010748:	47c8      	blx	r9
 801074a:	3001      	adds	r0, #1
 801074c:	d01e      	beq.n	801078c <_printf_common+0xa4>
 801074e:	6823      	ldr	r3, [r4, #0]
 8010750:	6922      	ldr	r2, [r4, #16]
 8010752:	f003 0306 	and.w	r3, r3, #6
 8010756:	2b04      	cmp	r3, #4
 8010758:	bf02      	ittt	eq
 801075a:	68e5      	ldreq	r5, [r4, #12]
 801075c:	6833      	ldreq	r3, [r6, #0]
 801075e:	1aed      	subeq	r5, r5, r3
 8010760:	68a3      	ldr	r3, [r4, #8]
 8010762:	bf0c      	ite	eq
 8010764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010768:	2500      	movne	r5, #0
 801076a:	4293      	cmp	r3, r2
 801076c:	bfc4      	itt	gt
 801076e:	1a9b      	subgt	r3, r3, r2
 8010770:	18ed      	addgt	r5, r5, r3
 8010772:	2600      	movs	r6, #0
 8010774:	341a      	adds	r4, #26
 8010776:	42b5      	cmp	r5, r6
 8010778:	d11a      	bne.n	80107b0 <_printf_common+0xc8>
 801077a:	2000      	movs	r0, #0
 801077c:	e008      	b.n	8010790 <_printf_common+0xa8>
 801077e:	2301      	movs	r3, #1
 8010780:	4652      	mov	r2, sl
 8010782:	4641      	mov	r1, r8
 8010784:	4638      	mov	r0, r7
 8010786:	47c8      	blx	r9
 8010788:	3001      	adds	r0, #1
 801078a:	d103      	bne.n	8010794 <_printf_common+0xac>
 801078c:	f04f 30ff 	mov.w	r0, #4294967295
 8010790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010794:	3501      	adds	r5, #1
 8010796:	e7c6      	b.n	8010726 <_printf_common+0x3e>
 8010798:	18e1      	adds	r1, r4, r3
 801079a:	1c5a      	adds	r2, r3, #1
 801079c:	2030      	movs	r0, #48	@ 0x30
 801079e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80107a2:	4422      	add	r2, r4
 80107a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80107a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80107ac:	3302      	adds	r3, #2
 80107ae:	e7c7      	b.n	8010740 <_printf_common+0x58>
 80107b0:	2301      	movs	r3, #1
 80107b2:	4622      	mov	r2, r4
 80107b4:	4641      	mov	r1, r8
 80107b6:	4638      	mov	r0, r7
 80107b8:	47c8      	blx	r9
 80107ba:	3001      	adds	r0, #1
 80107bc:	d0e6      	beq.n	801078c <_printf_common+0xa4>
 80107be:	3601      	adds	r6, #1
 80107c0:	e7d9      	b.n	8010776 <_printf_common+0x8e>
	...

080107c4 <_printf_i>:
 80107c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107c8:	7e0f      	ldrb	r7, [r1, #24]
 80107ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80107cc:	2f78      	cmp	r7, #120	@ 0x78
 80107ce:	4691      	mov	r9, r2
 80107d0:	4680      	mov	r8, r0
 80107d2:	460c      	mov	r4, r1
 80107d4:	469a      	mov	sl, r3
 80107d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80107da:	d807      	bhi.n	80107ec <_printf_i+0x28>
 80107dc:	2f62      	cmp	r7, #98	@ 0x62
 80107de:	d80a      	bhi.n	80107f6 <_printf_i+0x32>
 80107e0:	2f00      	cmp	r7, #0
 80107e2:	f000 80d1 	beq.w	8010988 <_printf_i+0x1c4>
 80107e6:	2f58      	cmp	r7, #88	@ 0x58
 80107e8:	f000 80b8 	beq.w	801095c <_printf_i+0x198>
 80107ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80107f4:	e03a      	b.n	801086c <_printf_i+0xa8>
 80107f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80107fa:	2b15      	cmp	r3, #21
 80107fc:	d8f6      	bhi.n	80107ec <_printf_i+0x28>
 80107fe:	a101      	add	r1, pc, #4	@ (adr r1, 8010804 <_printf_i+0x40>)
 8010800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010804:	0801085d 	.word	0x0801085d
 8010808:	08010871 	.word	0x08010871
 801080c:	080107ed 	.word	0x080107ed
 8010810:	080107ed 	.word	0x080107ed
 8010814:	080107ed 	.word	0x080107ed
 8010818:	080107ed 	.word	0x080107ed
 801081c:	08010871 	.word	0x08010871
 8010820:	080107ed 	.word	0x080107ed
 8010824:	080107ed 	.word	0x080107ed
 8010828:	080107ed 	.word	0x080107ed
 801082c:	080107ed 	.word	0x080107ed
 8010830:	0801096f 	.word	0x0801096f
 8010834:	0801089b 	.word	0x0801089b
 8010838:	08010929 	.word	0x08010929
 801083c:	080107ed 	.word	0x080107ed
 8010840:	080107ed 	.word	0x080107ed
 8010844:	08010991 	.word	0x08010991
 8010848:	080107ed 	.word	0x080107ed
 801084c:	0801089b 	.word	0x0801089b
 8010850:	080107ed 	.word	0x080107ed
 8010854:	080107ed 	.word	0x080107ed
 8010858:	08010931 	.word	0x08010931
 801085c:	6833      	ldr	r3, [r6, #0]
 801085e:	1d1a      	adds	r2, r3, #4
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	6032      	str	r2, [r6, #0]
 8010864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801086c:	2301      	movs	r3, #1
 801086e:	e09c      	b.n	80109aa <_printf_i+0x1e6>
 8010870:	6833      	ldr	r3, [r6, #0]
 8010872:	6820      	ldr	r0, [r4, #0]
 8010874:	1d19      	adds	r1, r3, #4
 8010876:	6031      	str	r1, [r6, #0]
 8010878:	0606      	lsls	r6, r0, #24
 801087a:	d501      	bpl.n	8010880 <_printf_i+0xbc>
 801087c:	681d      	ldr	r5, [r3, #0]
 801087e:	e003      	b.n	8010888 <_printf_i+0xc4>
 8010880:	0645      	lsls	r5, r0, #25
 8010882:	d5fb      	bpl.n	801087c <_printf_i+0xb8>
 8010884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010888:	2d00      	cmp	r5, #0
 801088a:	da03      	bge.n	8010894 <_printf_i+0xd0>
 801088c:	232d      	movs	r3, #45	@ 0x2d
 801088e:	426d      	negs	r5, r5
 8010890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010894:	4858      	ldr	r0, [pc, #352]	@ (80109f8 <_printf_i+0x234>)
 8010896:	230a      	movs	r3, #10
 8010898:	e011      	b.n	80108be <_printf_i+0xfa>
 801089a:	6821      	ldr	r1, [r4, #0]
 801089c:	6833      	ldr	r3, [r6, #0]
 801089e:	0608      	lsls	r0, r1, #24
 80108a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80108a4:	d402      	bmi.n	80108ac <_printf_i+0xe8>
 80108a6:	0649      	lsls	r1, r1, #25
 80108a8:	bf48      	it	mi
 80108aa:	b2ad      	uxthmi	r5, r5
 80108ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80108ae:	4852      	ldr	r0, [pc, #328]	@ (80109f8 <_printf_i+0x234>)
 80108b0:	6033      	str	r3, [r6, #0]
 80108b2:	bf14      	ite	ne
 80108b4:	230a      	movne	r3, #10
 80108b6:	2308      	moveq	r3, #8
 80108b8:	2100      	movs	r1, #0
 80108ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80108be:	6866      	ldr	r6, [r4, #4]
 80108c0:	60a6      	str	r6, [r4, #8]
 80108c2:	2e00      	cmp	r6, #0
 80108c4:	db05      	blt.n	80108d2 <_printf_i+0x10e>
 80108c6:	6821      	ldr	r1, [r4, #0]
 80108c8:	432e      	orrs	r6, r5
 80108ca:	f021 0104 	bic.w	r1, r1, #4
 80108ce:	6021      	str	r1, [r4, #0]
 80108d0:	d04b      	beq.n	801096a <_printf_i+0x1a6>
 80108d2:	4616      	mov	r6, r2
 80108d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80108d8:	fb03 5711 	mls	r7, r3, r1, r5
 80108dc:	5dc7      	ldrb	r7, [r0, r7]
 80108de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80108e2:	462f      	mov	r7, r5
 80108e4:	42bb      	cmp	r3, r7
 80108e6:	460d      	mov	r5, r1
 80108e8:	d9f4      	bls.n	80108d4 <_printf_i+0x110>
 80108ea:	2b08      	cmp	r3, #8
 80108ec:	d10b      	bne.n	8010906 <_printf_i+0x142>
 80108ee:	6823      	ldr	r3, [r4, #0]
 80108f0:	07df      	lsls	r7, r3, #31
 80108f2:	d508      	bpl.n	8010906 <_printf_i+0x142>
 80108f4:	6923      	ldr	r3, [r4, #16]
 80108f6:	6861      	ldr	r1, [r4, #4]
 80108f8:	4299      	cmp	r1, r3
 80108fa:	bfde      	ittt	le
 80108fc:	2330      	movle	r3, #48	@ 0x30
 80108fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010902:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010906:	1b92      	subs	r2, r2, r6
 8010908:	6122      	str	r2, [r4, #16]
 801090a:	f8cd a000 	str.w	sl, [sp]
 801090e:	464b      	mov	r3, r9
 8010910:	aa03      	add	r2, sp, #12
 8010912:	4621      	mov	r1, r4
 8010914:	4640      	mov	r0, r8
 8010916:	f7ff fee7 	bl	80106e8 <_printf_common>
 801091a:	3001      	adds	r0, #1
 801091c:	d14a      	bne.n	80109b4 <_printf_i+0x1f0>
 801091e:	f04f 30ff 	mov.w	r0, #4294967295
 8010922:	b004      	add	sp, #16
 8010924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010928:	6823      	ldr	r3, [r4, #0]
 801092a:	f043 0320 	orr.w	r3, r3, #32
 801092e:	6023      	str	r3, [r4, #0]
 8010930:	4832      	ldr	r0, [pc, #200]	@ (80109fc <_printf_i+0x238>)
 8010932:	2778      	movs	r7, #120	@ 0x78
 8010934:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010938:	6823      	ldr	r3, [r4, #0]
 801093a:	6831      	ldr	r1, [r6, #0]
 801093c:	061f      	lsls	r7, r3, #24
 801093e:	f851 5b04 	ldr.w	r5, [r1], #4
 8010942:	d402      	bmi.n	801094a <_printf_i+0x186>
 8010944:	065f      	lsls	r7, r3, #25
 8010946:	bf48      	it	mi
 8010948:	b2ad      	uxthmi	r5, r5
 801094a:	6031      	str	r1, [r6, #0]
 801094c:	07d9      	lsls	r1, r3, #31
 801094e:	bf44      	itt	mi
 8010950:	f043 0320 	orrmi.w	r3, r3, #32
 8010954:	6023      	strmi	r3, [r4, #0]
 8010956:	b11d      	cbz	r5, 8010960 <_printf_i+0x19c>
 8010958:	2310      	movs	r3, #16
 801095a:	e7ad      	b.n	80108b8 <_printf_i+0xf4>
 801095c:	4826      	ldr	r0, [pc, #152]	@ (80109f8 <_printf_i+0x234>)
 801095e:	e7e9      	b.n	8010934 <_printf_i+0x170>
 8010960:	6823      	ldr	r3, [r4, #0]
 8010962:	f023 0320 	bic.w	r3, r3, #32
 8010966:	6023      	str	r3, [r4, #0]
 8010968:	e7f6      	b.n	8010958 <_printf_i+0x194>
 801096a:	4616      	mov	r6, r2
 801096c:	e7bd      	b.n	80108ea <_printf_i+0x126>
 801096e:	6833      	ldr	r3, [r6, #0]
 8010970:	6825      	ldr	r5, [r4, #0]
 8010972:	6961      	ldr	r1, [r4, #20]
 8010974:	1d18      	adds	r0, r3, #4
 8010976:	6030      	str	r0, [r6, #0]
 8010978:	062e      	lsls	r6, r5, #24
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	d501      	bpl.n	8010982 <_printf_i+0x1be>
 801097e:	6019      	str	r1, [r3, #0]
 8010980:	e002      	b.n	8010988 <_printf_i+0x1c4>
 8010982:	0668      	lsls	r0, r5, #25
 8010984:	d5fb      	bpl.n	801097e <_printf_i+0x1ba>
 8010986:	8019      	strh	r1, [r3, #0]
 8010988:	2300      	movs	r3, #0
 801098a:	6123      	str	r3, [r4, #16]
 801098c:	4616      	mov	r6, r2
 801098e:	e7bc      	b.n	801090a <_printf_i+0x146>
 8010990:	6833      	ldr	r3, [r6, #0]
 8010992:	1d1a      	adds	r2, r3, #4
 8010994:	6032      	str	r2, [r6, #0]
 8010996:	681e      	ldr	r6, [r3, #0]
 8010998:	6862      	ldr	r2, [r4, #4]
 801099a:	2100      	movs	r1, #0
 801099c:	4630      	mov	r0, r6
 801099e:	f7ef fc1f 	bl	80001e0 <memchr>
 80109a2:	b108      	cbz	r0, 80109a8 <_printf_i+0x1e4>
 80109a4:	1b80      	subs	r0, r0, r6
 80109a6:	6060      	str	r0, [r4, #4]
 80109a8:	6863      	ldr	r3, [r4, #4]
 80109aa:	6123      	str	r3, [r4, #16]
 80109ac:	2300      	movs	r3, #0
 80109ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109b2:	e7aa      	b.n	801090a <_printf_i+0x146>
 80109b4:	6923      	ldr	r3, [r4, #16]
 80109b6:	4632      	mov	r2, r6
 80109b8:	4649      	mov	r1, r9
 80109ba:	4640      	mov	r0, r8
 80109bc:	47d0      	blx	sl
 80109be:	3001      	adds	r0, #1
 80109c0:	d0ad      	beq.n	801091e <_printf_i+0x15a>
 80109c2:	6823      	ldr	r3, [r4, #0]
 80109c4:	079b      	lsls	r3, r3, #30
 80109c6:	d413      	bmi.n	80109f0 <_printf_i+0x22c>
 80109c8:	68e0      	ldr	r0, [r4, #12]
 80109ca:	9b03      	ldr	r3, [sp, #12]
 80109cc:	4298      	cmp	r0, r3
 80109ce:	bfb8      	it	lt
 80109d0:	4618      	movlt	r0, r3
 80109d2:	e7a6      	b.n	8010922 <_printf_i+0x15e>
 80109d4:	2301      	movs	r3, #1
 80109d6:	4632      	mov	r2, r6
 80109d8:	4649      	mov	r1, r9
 80109da:	4640      	mov	r0, r8
 80109dc:	47d0      	blx	sl
 80109de:	3001      	adds	r0, #1
 80109e0:	d09d      	beq.n	801091e <_printf_i+0x15a>
 80109e2:	3501      	adds	r5, #1
 80109e4:	68e3      	ldr	r3, [r4, #12]
 80109e6:	9903      	ldr	r1, [sp, #12]
 80109e8:	1a5b      	subs	r3, r3, r1
 80109ea:	42ab      	cmp	r3, r5
 80109ec:	dcf2      	bgt.n	80109d4 <_printf_i+0x210>
 80109ee:	e7eb      	b.n	80109c8 <_printf_i+0x204>
 80109f0:	2500      	movs	r5, #0
 80109f2:	f104 0619 	add.w	r6, r4, #25
 80109f6:	e7f5      	b.n	80109e4 <_printf_i+0x220>
 80109f8:	08011c4d 	.word	0x08011c4d
 80109fc:	08011c5e 	.word	0x08011c5e

08010a00 <memmove>:
 8010a00:	4288      	cmp	r0, r1
 8010a02:	b510      	push	{r4, lr}
 8010a04:	eb01 0402 	add.w	r4, r1, r2
 8010a08:	d902      	bls.n	8010a10 <memmove+0x10>
 8010a0a:	4284      	cmp	r4, r0
 8010a0c:	4623      	mov	r3, r4
 8010a0e:	d807      	bhi.n	8010a20 <memmove+0x20>
 8010a10:	1e43      	subs	r3, r0, #1
 8010a12:	42a1      	cmp	r1, r4
 8010a14:	d008      	beq.n	8010a28 <memmove+0x28>
 8010a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a1e:	e7f8      	b.n	8010a12 <memmove+0x12>
 8010a20:	4402      	add	r2, r0
 8010a22:	4601      	mov	r1, r0
 8010a24:	428a      	cmp	r2, r1
 8010a26:	d100      	bne.n	8010a2a <memmove+0x2a>
 8010a28:	bd10      	pop	{r4, pc}
 8010a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a32:	e7f7      	b.n	8010a24 <memmove+0x24>

08010a34 <_sbrk_r>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	4d06      	ldr	r5, [pc, #24]	@ (8010a50 <_sbrk_r+0x1c>)
 8010a38:	2300      	movs	r3, #0
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	4608      	mov	r0, r1
 8010a3e:	602b      	str	r3, [r5, #0]
 8010a40:	f7f5 fd2e 	bl	80064a0 <_sbrk>
 8010a44:	1c43      	adds	r3, r0, #1
 8010a46:	d102      	bne.n	8010a4e <_sbrk_r+0x1a>
 8010a48:	682b      	ldr	r3, [r5, #0]
 8010a4a:	b103      	cbz	r3, 8010a4e <_sbrk_r+0x1a>
 8010a4c:	6023      	str	r3, [r4, #0]
 8010a4e:	bd38      	pop	{r3, r4, r5, pc}
 8010a50:	20000f28 	.word	0x20000f28

08010a54 <_realloc_r>:
 8010a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a58:	4607      	mov	r7, r0
 8010a5a:	4614      	mov	r4, r2
 8010a5c:	460d      	mov	r5, r1
 8010a5e:	b921      	cbnz	r1, 8010a6a <_realloc_r+0x16>
 8010a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a64:	4611      	mov	r1, r2
 8010a66:	f7ff bc5b 	b.w	8010320 <_malloc_r>
 8010a6a:	b92a      	cbnz	r2, 8010a78 <_realloc_r+0x24>
 8010a6c:	f7ff fbec 	bl	8010248 <_free_r>
 8010a70:	4625      	mov	r5, r4
 8010a72:	4628      	mov	r0, r5
 8010a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a78:	f000 f81a 	bl	8010ab0 <_malloc_usable_size_r>
 8010a7c:	4284      	cmp	r4, r0
 8010a7e:	4606      	mov	r6, r0
 8010a80:	d802      	bhi.n	8010a88 <_realloc_r+0x34>
 8010a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010a86:	d8f4      	bhi.n	8010a72 <_realloc_r+0x1e>
 8010a88:	4621      	mov	r1, r4
 8010a8a:	4638      	mov	r0, r7
 8010a8c:	f7ff fc48 	bl	8010320 <_malloc_r>
 8010a90:	4680      	mov	r8, r0
 8010a92:	b908      	cbnz	r0, 8010a98 <_realloc_r+0x44>
 8010a94:	4645      	mov	r5, r8
 8010a96:	e7ec      	b.n	8010a72 <_realloc_r+0x1e>
 8010a98:	42b4      	cmp	r4, r6
 8010a9a:	4622      	mov	r2, r4
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	bf28      	it	cs
 8010aa0:	4632      	movcs	r2, r6
 8010aa2:	f7ff fbc3 	bl	801022c <memcpy>
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	4638      	mov	r0, r7
 8010aaa:	f7ff fbcd 	bl	8010248 <_free_r>
 8010aae:	e7f1      	b.n	8010a94 <_realloc_r+0x40>

08010ab0 <_malloc_usable_size_r>:
 8010ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ab4:	1f18      	subs	r0, r3, #4
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	bfbc      	itt	lt
 8010aba:	580b      	ldrlt	r3, [r1, r0]
 8010abc:	18c0      	addlt	r0, r0, r3
 8010abe:	4770      	bx	lr

08010ac0 <asin>:
 8010ac0:	b538      	push	{r3, r4, r5, lr}
 8010ac2:	ed2d 8b02 	vpush	{d8}
 8010ac6:	ec55 4b10 	vmov	r4, r5, d0
 8010aca:	f000 f841 	bl	8010b50 <__ieee754_asin>
 8010ace:	4622      	mov	r2, r4
 8010ad0:	462b      	mov	r3, r5
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	eeb0 8a40 	vmov.f32	s16, s0
 8010ada:	eef0 8a60 	vmov.f32	s17, s1
 8010ade:	f7f0 f825 	bl	8000b2c <__aeabi_dcmpun>
 8010ae2:	b9a8      	cbnz	r0, 8010b10 <asin+0x50>
 8010ae4:	ec45 4b10 	vmov	d0, r4, r5
 8010ae8:	f000 f820 	bl	8010b2c <fabs>
 8010aec:	4b0c      	ldr	r3, [pc, #48]	@ (8010b20 <asin+0x60>)
 8010aee:	ec51 0b10 	vmov	r0, r1, d0
 8010af2:	2200      	movs	r2, #0
 8010af4:	f7f0 f810 	bl	8000b18 <__aeabi_dcmpgt>
 8010af8:	b150      	cbz	r0, 8010b10 <asin+0x50>
 8010afa:	f7ff fb6b 	bl	80101d4 <__errno>
 8010afe:	ecbd 8b02 	vpop	{d8}
 8010b02:	2321      	movs	r3, #33	@ 0x21
 8010b04:	6003      	str	r3, [r0, #0]
 8010b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b0a:	4806      	ldr	r0, [pc, #24]	@ (8010b24 <asin+0x64>)
 8010b0c:	f000 b818 	b.w	8010b40 <nan>
 8010b10:	eeb0 0a48 	vmov.f32	s0, s16
 8010b14:	eef0 0a68 	vmov.f32	s1, s17
 8010b18:	ecbd 8b02 	vpop	{d8}
 8010b1c:	bd38      	pop	{r3, r4, r5, pc}
 8010b1e:	bf00      	nop
 8010b20:	3ff00000 	.word	0x3ff00000
 8010b24:	08011c41 	.word	0x08011c41

08010b28 <atan2>:
 8010b28:	f000 ba16 	b.w	8010f58 <__ieee754_atan2>

08010b2c <fabs>:
 8010b2c:	ec51 0b10 	vmov	r0, r1, d0
 8010b30:	4602      	mov	r2, r0
 8010b32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010b36:	ec43 2b10 	vmov	d0, r2, r3
 8010b3a:	4770      	bx	lr
 8010b3c:	0000      	movs	r0, r0
	...

08010b40 <nan>:
 8010b40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010b48 <nan+0x8>
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	00000000 	.word	0x00000000
 8010b4c:	7ff80000 	.word	0x7ff80000

08010b50 <__ieee754_asin>:
 8010b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b54:	ec55 4b10 	vmov	r4, r5, d0
 8010b58:	4bc7      	ldr	r3, [pc, #796]	@ (8010e78 <__ieee754_asin+0x328>)
 8010b5a:	b087      	sub	sp, #28
 8010b5c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010b60:	429e      	cmp	r6, r3
 8010b62:	9501      	str	r5, [sp, #4]
 8010b64:	d92d      	bls.n	8010bc2 <__ieee754_asin+0x72>
 8010b66:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8010b6a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8010b6e:	4326      	orrs	r6, r4
 8010b70:	d116      	bne.n	8010ba0 <__ieee754_asin+0x50>
 8010b72:	a3a7      	add	r3, pc, #668	@ (adr r3, 8010e10 <__ieee754_asin+0x2c0>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	4620      	mov	r0, r4
 8010b7a:	4629      	mov	r1, r5
 8010b7c:	f7ef fd3c 	bl	80005f8 <__aeabi_dmul>
 8010b80:	a3a5      	add	r3, pc, #660	@ (adr r3, 8010e18 <__ieee754_asin+0x2c8>)
 8010b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b86:	4606      	mov	r6, r0
 8010b88:	460f      	mov	r7, r1
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	4629      	mov	r1, r5
 8010b8e:	f7ef fd33 	bl	80005f8 <__aeabi_dmul>
 8010b92:	4602      	mov	r2, r0
 8010b94:	460b      	mov	r3, r1
 8010b96:	4630      	mov	r0, r6
 8010b98:	4639      	mov	r1, r7
 8010b9a:	f7ef fb77 	bl	800028c <__adddf3>
 8010b9e:	e009      	b.n	8010bb4 <__ieee754_asin+0x64>
 8010ba0:	4622      	mov	r2, r4
 8010ba2:	462b      	mov	r3, r5
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	f7ef fb6e 	bl	8000288 <__aeabi_dsub>
 8010bac:	4602      	mov	r2, r0
 8010bae:	460b      	mov	r3, r1
 8010bb0:	f7ef fe4c 	bl	800084c <__aeabi_ddiv>
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	460d      	mov	r5, r1
 8010bb8:	ec45 4b10 	vmov	d0, r4, r5
 8010bbc:	b007      	add	sp, #28
 8010bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc2:	4bae      	ldr	r3, [pc, #696]	@ (8010e7c <__ieee754_asin+0x32c>)
 8010bc4:	429e      	cmp	r6, r3
 8010bc6:	d810      	bhi.n	8010bea <__ieee754_asin+0x9a>
 8010bc8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8010bcc:	f080 80ad 	bcs.w	8010d2a <__ieee754_asin+0x1da>
 8010bd0:	a393      	add	r3, pc, #588	@ (adr r3, 8010e20 <__ieee754_asin+0x2d0>)
 8010bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	4629      	mov	r1, r5
 8010bda:	f7ef fb57 	bl	800028c <__adddf3>
 8010bde:	4ba8      	ldr	r3, [pc, #672]	@ (8010e80 <__ieee754_asin+0x330>)
 8010be0:	2200      	movs	r2, #0
 8010be2:	f7ef ff99 	bl	8000b18 <__aeabi_dcmpgt>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d1e6      	bne.n	8010bb8 <__ieee754_asin+0x68>
 8010bea:	ec45 4b10 	vmov	d0, r4, r5
 8010bee:	f7ff ff9d 	bl	8010b2c <fabs>
 8010bf2:	49a3      	ldr	r1, [pc, #652]	@ (8010e80 <__ieee754_asin+0x330>)
 8010bf4:	ec53 2b10 	vmov	r2, r3, d0
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	f7ef fb45 	bl	8000288 <__aeabi_dsub>
 8010bfe:	4ba1      	ldr	r3, [pc, #644]	@ (8010e84 <__ieee754_asin+0x334>)
 8010c00:	2200      	movs	r2, #0
 8010c02:	f7ef fcf9 	bl	80005f8 <__aeabi_dmul>
 8010c06:	a388      	add	r3, pc, #544	@ (adr r3, 8010e28 <__ieee754_asin+0x2d8>)
 8010c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	460d      	mov	r5, r1
 8010c10:	f7ef fcf2 	bl	80005f8 <__aeabi_dmul>
 8010c14:	a386      	add	r3, pc, #536	@ (adr r3, 8010e30 <__ieee754_asin+0x2e0>)
 8010c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1a:	f7ef fb37 	bl	800028c <__adddf3>
 8010c1e:	4622      	mov	r2, r4
 8010c20:	462b      	mov	r3, r5
 8010c22:	f7ef fce9 	bl	80005f8 <__aeabi_dmul>
 8010c26:	a384      	add	r3, pc, #528	@ (adr r3, 8010e38 <__ieee754_asin+0x2e8>)
 8010c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2c:	f7ef fb2c 	bl	8000288 <__aeabi_dsub>
 8010c30:	4622      	mov	r2, r4
 8010c32:	462b      	mov	r3, r5
 8010c34:	f7ef fce0 	bl	80005f8 <__aeabi_dmul>
 8010c38:	a381      	add	r3, pc, #516	@ (adr r3, 8010e40 <__ieee754_asin+0x2f0>)
 8010c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3e:	f7ef fb25 	bl	800028c <__adddf3>
 8010c42:	4622      	mov	r2, r4
 8010c44:	462b      	mov	r3, r5
 8010c46:	f7ef fcd7 	bl	80005f8 <__aeabi_dmul>
 8010c4a:	a37f      	add	r3, pc, #508	@ (adr r3, 8010e48 <__ieee754_asin+0x2f8>)
 8010c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c50:	f7ef fb1a 	bl	8000288 <__aeabi_dsub>
 8010c54:	4622      	mov	r2, r4
 8010c56:	462b      	mov	r3, r5
 8010c58:	f7ef fcce 	bl	80005f8 <__aeabi_dmul>
 8010c5c:	a37c      	add	r3, pc, #496	@ (adr r3, 8010e50 <__ieee754_asin+0x300>)
 8010c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c62:	f7ef fb13 	bl	800028c <__adddf3>
 8010c66:	4622      	mov	r2, r4
 8010c68:	462b      	mov	r3, r5
 8010c6a:	f7ef fcc5 	bl	80005f8 <__aeabi_dmul>
 8010c6e:	a37a      	add	r3, pc, #488	@ (adr r3, 8010e58 <__ieee754_asin+0x308>)
 8010c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c78:	4620      	mov	r0, r4
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	f7ef fcbc 	bl	80005f8 <__aeabi_dmul>
 8010c80:	a377      	add	r3, pc, #476	@ (adr r3, 8010e60 <__ieee754_asin+0x310>)
 8010c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c86:	f7ef faff 	bl	8000288 <__aeabi_dsub>
 8010c8a:	4622      	mov	r2, r4
 8010c8c:	462b      	mov	r3, r5
 8010c8e:	f7ef fcb3 	bl	80005f8 <__aeabi_dmul>
 8010c92:	a375      	add	r3, pc, #468	@ (adr r3, 8010e68 <__ieee754_asin+0x318>)
 8010c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c98:	f7ef faf8 	bl	800028c <__adddf3>
 8010c9c:	4622      	mov	r2, r4
 8010c9e:	462b      	mov	r3, r5
 8010ca0:	f7ef fcaa 	bl	80005f8 <__aeabi_dmul>
 8010ca4:	a372      	add	r3, pc, #456	@ (adr r3, 8010e70 <__ieee754_asin+0x320>)
 8010ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010caa:	f7ef faed 	bl	8000288 <__aeabi_dsub>
 8010cae:	4622      	mov	r2, r4
 8010cb0:	462b      	mov	r3, r5
 8010cb2:	f7ef fca1 	bl	80005f8 <__aeabi_dmul>
 8010cb6:	4b72      	ldr	r3, [pc, #456]	@ (8010e80 <__ieee754_asin+0x330>)
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f7ef fae7 	bl	800028c <__adddf3>
 8010cbe:	ec45 4b10 	vmov	d0, r4, r5
 8010cc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cc6:	f000 fba7 	bl	8011418 <__ieee754_sqrt>
 8010cca:	4b6f      	ldr	r3, [pc, #444]	@ (8010e88 <__ieee754_asin+0x338>)
 8010ccc:	429e      	cmp	r6, r3
 8010cce:	ec5b ab10 	vmov	sl, fp, d0
 8010cd2:	f240 80db 	bls.w	8010e8c <__ieee754_asin+0x33c>
 8010cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cde:	f7ef fdb5 	bl	800084c <__aeabi_ddiv>
 8010ce2:	4652      	mov	r2, sl
 8010ce4:	465b      	mov	r3, fp
 8010ce6:	f7ef fc87 	bl	80005f8 <__aeabi_dmul>
 8010cea:	4652      	mov	r2, sl
 8010cec:	465b      	mov	r3, fp
 8010cee:	f7ef facd 	bl	800028c <__adddf3>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	f7ef fac9 	bl	800028c <__adddf3>
 8010cfa:	a347      	add	r3, pc, #284	@ (adr r3, 8010e18 <__ieee754_asin+0x2c8>)
 8010cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d00:	f7ef fac2 	bl	8000288 <__aeabi_dsub>
 8010d04:	4602      	mov	r2, r0
 8010d06:	460b      	mov	r3, r1
 8010d08:	a141      	add	r1, pc, #260	@ (adr r1, 8010e10 <__ieee754_asin+0x2c0>)
 8010d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d0e:	f7ef fabb 	bl	8000288 <__aeabi_dsub>
 8010d12:	9b01      	ldr	r3, [sp, #4]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	bfdc      	itt	le
 8010d18:	4602      	movle	r2, r0
 8010d1a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8010d1e:	4604      	mov	r4, r0
 8010d20:	460d      	mov	r5, r1
 8010d22:	bfdc      	itt	le
 8010d24:	4614      	movle	r4, r2
 8010d26:	461d      	movle	r5, r3
 8010d28:	e746      	b.n	8010bb8 <__ieee754_asin+0x68>
 8010d2a:	4622      	mov	r2, r4
 8010d2c:	462b      	mov	r3, r5
 8010d2e:	4620      	mov	r0, r4
 8010d30:	4629      	mov	r1, r5
 8010d32:	f7ef fc61 	bl	80005f8 <__aeabi_dmul>
 8010d36:	a33c      	add	r3, pc, #240	@ (adr r3, 8010e28 <__ieee754_asin+0x2d8>)
 8010d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3c:	4606      	mov	r6, r0
 8010d3e:	460f      	mov	r7, r1
 8010d40:	f7ef fc5a 	bl	80005f8 <__aeabi_dmul>
 8010d44:	a33a      	add	r3, pc, #232	@ (adr r3, 8010e30 <__ieee754_asin+0x2e0>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	f7ef fa9f 	bl	800028c <__adddf3>
 8010d4e:	4632      	mov	r2, r6
 8010d50:	463b      	mov	r3, r7
 8010d52:	f7ef fc51 	bl	80005f8 <__aeabi_dmul>
 8010d56:	a338      	add	r3, pc, #224	@ (adr r3, 8010e38 <__ieee754_asin+0x2e8>)
 8010d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5c:	f7ef fa94 	bl	8000288 <__aeabi_dsub>
 8010d60:	4632      	mov	r2, r6
 8010d62:	463b      	mov	r3, r7
 8010d64:	f7ef fc48 	bl	80005f8 <__aeabi_dmul>
 8010d68:	a335      	add	r3, pc, #212	@ (adr r3, 8010e40 <__ieee754_asin+0x2f0>)
 8010d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6e:	f7ef fa8d 	bl	800028c <__adddf3>
 8010d72:	4632      	mov	r2, r6
 8010d74:	463b      	mov	r3, r7
 8010d76:	f7ef fc3f 	bl	80005f8 <__aeabi_dmul>
 8010d7a:	a333      	add	r3, pc, #204	@ (adr r3, 8010e48 <__ieee754_asin+0x2f8>)
 8010d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d80:	f7ef fa82 	bl	8000288 <__aeabi_dsub>
 8010d84:	4632      	mov	r2, r6
 8010d86:	463b      	mov	r3, r7
 8010d88:	f7ef fc36 	bl	80005f8 <__aeabi_dmul>
 8010d8c:	a330      	add	r3, pc, #192	@ (adr r3, 8010e50 <__ieee754_asin+0x300>)
 8010d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d92:	f7ef fa7b 	bl	800028c <__adddf3>
 8010d96:	4632      	mov	r2, r6
 8010d98:	463b      	mov	r3, r7
 8010d9a:	f7ef fc2d 	bl	80005f8 <__aeabi_dmul>
 8010d9e:	a32e      	add	r3, pc, #184	@ (adr r3, 8010e58 <__ieee754_asin+0x308>)
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	4680      	mov	r8, r0
 8010da6:	4689      	mov	r9, r1
 8010da8:	4630      	mov	r0, r6
 8010daa:	4639      	mov	r1, r7
 8010dac:	f7ef fc24 	bl	80005f8 <__aeabi_dmul>
 8010db0:	a32b      	add	r3, pc, #172	@ (adr r3, 8010e60 <__ieee754_asin+0x310>)
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	f7ef fa67 	bl	8000288 <__aeabi_dsub>
 8010dba:	4632      	mov	r2, r6
 8010dbc:	463b      	mov	r3, r7
 8010dbe:	f7ef fc1b 	bl	80005f8 <__aeabi_dmul>
 8010dc2:	a329      	add	r3, pc, #164	@ (adr r3, 8010e68 <__ieee754_asin+0x318>)
 8010dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc8:	f7ef fa60 	bl	800028c <__adddf3>
 8010dcc:	4632      	mov	r2, r6
 8010dce:	463b      	mov	r3, r7
 8010dd0:	f7ef fc12 	bl	80005f8 <__aeabi_dmul>
 8010dd4:	a326      	add	r3, pc, #152	@ (adr r3, 8010e70 <__ieee754_asin+0x320>)
 8010dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dda:	f7ef fa55 	bl	8000288 <__aeabi_dsub>
 8010dde:	4632      	mov	r2, r6
 8010de0:	463b      	mov	r3, r7
 8010de2:	f7ef fc09 	bl	80005f8 <__aeabi_dmul>
 8010de6:	4b26      	ldr	r3, [pc, #152]	@ (8010e80 <__ieee754_asin+0x330>)
 8010de8:	2200      	movs	r2, #0
 8010dea:	f7ef fa4f 	bl	800028c <__adddf3>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4640      	mov	r0, r8
 8010df4:	4649      	mov	r1, r9
 8010df6:	f7ef fd29 	bl	800084c <__aeabi_ddiv>
 8010dfa:	4622      	mov	r2, r4
 8010dfc:	462b      	mov	r3, r5
 8010dfe:	f7ef fbfb 	bl	80005f8 <__aeabi_dmul>
 8010e02:	4602      	mov	r2, r0
 8010e04:	460b      	mov	r3, r1
 8010e06:	4620      	mov	r0, r4
 8010e08:	4629      	mov	r1, r5
 8010e0a:	e6c6      	b.n	8010b9a <__ieee754_asin+0x4a>
 8010e0c:	f3af 8000 	nop.w
 8010e10:	54442d18 	.word	0x54442d18
 8010e14:	3ff921fb 	.word	0x3ff921fb
 8010e18:	33145c07 	.word	0x33145c07
 8010e1c:	3c91a626 	.word	0x3c91a626
 8010e20:	8800759c 	.word	0x8800759c
 8010e24:	7e37e43c 	.word	0x7e37e43c
 8010e28:	0dfdf709 	.word	0x0dfdf709
 8010e2c:	3f023de1 	.word	0x3f023de1
 8010e30:	7501b288 	.word	0x7501b288
 8010e34:	3f49efe0 	.word	0x3f49efe0
 8010e38:	b5688f3b 	.word	0xb5688f3b
 8010e3c:	3fa48228 	.word	0x3fa48228
 8010e40:	0e884455 	.word	0x0e884455
 8010e44:	3fc9c155 	.word	0x3fc9c155
 8010e48:	03eb6f7d 	.word	0x03eb6f7d
 8010e4c:	3fd4d612 	.word	0x3fd4d612
 8010e50:	55555555 	.word	0x55555555
 8010e54:	3fc55555 	.word	0x3fc55555
 8010e58:	b12e9282 	.word	0xb12e9282
 8010e5c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010e60:	1b8d0159 	.word	0x1b8d0159
 8010e64:	3fe6066c 	.word	0x3fe6066c
 8010e68:	9c598ac8 	.word	0x9c598ac8
 8010e6c:	40002ae5 	.word	0x40002ae5
 8010e70:	1c8a2d4b 	.word	0x1c8a2d4b
 8010e74:	40033a27 	.word	0x40033a27
 8010e78:	3fefffff 	.word	0x3fefffff
 8010e7c:	3fdfffff 	.word	0x3fdfffff
 8010e80:	3ff00000 	.word	0x3ff00000
 8010e84:	3fe00000 	.word	0x3fe00000
 8010e88:	3fef3332 	.word	0x3fef3332
 8010e8c:	4652      	mov	r2, sl
 8010e8e:	465b      	mov	r3, fp
 8010e90:	4650      	mov	r0, sl
 8010e92:	4659      	mov	r1, fp
 8010e94:	f7ef f9fa 	bl	800028c <__adddf3>
 8010e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e9c:	4606      	mov	r6, r0
 8010e9e:	460f      	mov	r7, r1
 8010ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ea4:	f7ef fcd2 	bl	800084c <__aeabi_ddiv>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	460b      	mov	r3, r1
 8010eac:	4630      	mov	r0, r6
 8010eae:	4639      	mov	r1, r7
 8010eb0:	f7ef fba2 	bl	80005f8 <__aeabi_dmul>
 8010eb4:	f04f 0800 	mov.w	r8, #0
 8010eb8:	4606      	mov	r6, r0
 8010eba:	460f      	mov	r7, r1
 8010ebc:	4642      	mov	r2, r8
 8010ebe:	465b      	mov	r3, fp
 8010ec0:	4640      	mov	r0, r8
 8010ec2:	4659      	mov	r1, fp
 8010ec4:	f7ef fb98 	bl	80005f8 <__aeabi_dmul>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7ef f9da 	bl	8000288 <__aeabi_dsub>
 8010ed4:	4642      	mov	r2, r8
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	460d      	mov	r5, r1
 8010eda:	465b      	mov	r3, fp
 8010edc:	4650      	mov	r0, sl
 8010ede:	4659      	mov	r1, fp
 8010ee0:	f7ef f9d4 	bl	800028c <__adddf3>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	4620      	mov	r0, r4
 8010eea:	4629      	mov	r1, r5
 8010eec:	f7ef fcae 	bl	800084c <__aeabi_ddiv>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	f7ef f9ca 	bl	800028c <__adddf3>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	460b      	mov	r3, r1
 8010efc:	a112      	add	r1, pc, #72	@ (adr r1, 8010f48 <__ieee754_asin+0x3f8>)
 8010efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f02:	f7ef f9c1 	bl	8000288 <__aeabi_dsub>
 8010f06:	4602      	mov	r2, r0
 8010f08:	460b      	mov	r3, r1
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	4639      	mov	r1, r7
 8010f0e:	f7ef f9bb 	bl	8000288 <__aeabi_dsub>
 8010f12:	4642      	mov	r2, r8
 8010f14:	4604      	mov	r4, r0
 8010f16:	460d      	mov	r5, r1
 8010f18:	465b      	mov	r3, fp
 8010f1a:	4640      	mov	r0, r8
 8010f1c:	4659      	mov	r1, fp
 8010f1e:	f7ef f9b5 	bl	800028c <__adddf3>
 8010f22:	4602      	mov	r2, r0
 8010f24:	460b      	mov	r3, r1
 8010f26:	a10a      	add	r1, pc, #40	@ (adr r1, 8010f50 <__ieee754_asin+0x400>)
 8010f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f2c:	f7ef f9ac 	bl	8000288 <__aeabi_dsub>
 8010f30:	4602      	mov	r2, r0
 8010f32:	460b      	mov	r3, r1
 8010f34:	4620      	mov	r0, r4
 8010f36:	4629      	mov	r1, r5
 8010f38:	f7ef f9a6 	bl	8000288 <__aeabi_dsub>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	460b      	mov	r3, r1
 8010f40:	a103      	add	r1, pc, #12	@ (adr r1, 8010f50 <__ieee754_asin+0x400>)
 8010f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f46:	e6e2      	b.n	8010d0e <__ieee754_asin+0x1be>
 8010f48:	33145c07 	.word	0x33145c07
 8010f4c:	3c91a626 	.word	0x3c91a626
 8010f50:	54442d18 	.word	0x54442d18
 8010f54:	3fe921fb 	.word	0x3fe921fb

08010f58 <__ieee754_atan2>:
 8010f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f5c:	ec57 6b11 	vmov	r6, r7, d1
 8010f60:	4273      	negs	r3, r6
 8010f62:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80110e0 <__ieee754_atan2+0x188>
 8010f66:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8010f6a:	4333      	orrs	r3, r6
 8010f6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010f70:	4543      	cmp	r3, r8
 8010f72:	ec51 0b10 	vmov	r0, r1, d0
 8010f76:	4635      	mov	r5, r6
 8010f78:	d809      	bhi.n	8010f8e <__ieee754_atan2+0x36>
 8010f7a:	4244      	negs	r4, r0
 8010f7c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010f80:	4304      	orrs	r4, r0
 8010f82:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010f86:	4544      	cmp	r4, r8
 8010f88:	468e      	mov	lr, r1
 8010f8a:	4681      	mov	r9, r0
 8010f8c:	d907      	bls.n	8010f9e <__ieee754_atan2+0x46>
 8010f8e:	4632      	mov	r2, r6
 8010f90:	463b      	mov	r3, r7
 8010f92:	f7ef f97b 	bl	800028c <__adddf3>
 8010f96:	ec41 0b10 	vmov	d0, r0, r1
 8010f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f9e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010fa2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010fa6:	4334      	orrs	r4, r6
 8010fa8:	d103      	bne.n	8010fb2 <__ieee754_atan2+0x5a>
 8010faa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fae:	f000 b89b 	b.w	80110e8 <atan>
 8010fb2:	17bc      	asrs	r4, r7, #30
 8010fb4:	f004 0402 	and.w	r4, r4, #2
 8010fb8:	ea53 0909 	orrs.w	r9, r3, r9
 8010fbc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010fc0:	d107      	bne.n	8010fd2 <__ieee754_atan2+0x7a>
 8010fc2:	2c02      	cmp	r4, #2
 8010fc4:	d05f      	beq.n	8011086 <__ieee754_atan2+0x12e>
 8010fc6:	2c03      	cmp	r4, #3
 8010fc8:	d1e5      	bne.n	8010f96 <__ieee754_atan2+0x3e>
 8010fca:	a143      	add	r1, pc, #268	@ (adr r1, 80110d8 <__ieee754_atan2+0x180>)
 8010fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fd0:	e7e1      	b.n	8010f96 <__ieee754_atan2+0x3e>
 8010fd2:	4315      	orrs	r5, r2
 8010fd4:	d106      	bne.n	8010fe4 <__ieee754_atan2+0x8c>
 8010fd6:	f1be 0f00 	cmp.w	lr, #0
 8010fda:	db5f      	blt.n	801109c <__ieee754_atan2+0x144>
 8010fdc:	a136      	add	r1, pc, #216	@ (adr r1, 80110b8 <__ieee754_atan2+0x160>)
 8010fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fe2:	e7d8      	b.n	8010f96 <__ieee754_atan2+0x3e>
 8010fe4:	4542      	cmp	r2, r8
 8010fe6:	d10f      	bne.n	8011008 <__ieee754_atan2+0xb0>
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	f104 34ff 	add.w	r4, r4, #4294967295
 8010fee:	d107      	bne.n	8011000 <__ieee754_atan2+0xa8>
 8010ff0:	2c02      	cmp	r4, #2
 8010ff2:	d84c      	bhi.n	801108e <__ieee754_atan2+0x136>
 8010ff4:	4b36      	ldr	r3, [pc, #216]	@ (80110d0 <__ieee754_atan2+0x178>)
 8010ff6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ffe:	e7ca      	b.n	8010f96 <__ieee754_atan2+0x3e>
 8011000:	2c02      	cmp	r4, #2
 8011002:	d848      	bhi.n	8011096 <__ieee754_atan2+0x13e>
 8011004:	4b33      	ldr	r3, [pc, #204]	@ (80110d4 <__ieee754_atan2+0x17c>)
 8011006:	e7f6      	b.n	8010ff6 <__ieee754_atan2+0x9e>
 8011008:	4543      	cmp	r3, r8
 801100a:	d0e4      	beq.n	8010fd6 <__ieee754_atan2+0x7e>
 801100c:	1a9b      	subs	r3, r3, r2
 801100e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8011012:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011016:	da1e      	bge.n	8011056 <__ieee754_atan2+0xfe>
 8011018:	2f00      	cmp	r7, #0
 801101a:	da01      	bge.n	8011020 <__ieee754_atan2+0xc8>
 801101c:	323c      	adds	r2, #60	@ 0x3c
 801101e:	db1e      	blt.n	801105e <__ieee754_atan2+0x106>
 8011020:	4632      	mov	r2, r6
 8011022:	463b      	mov	r3, r7
 8011024:	f7ef fc12 	bl	800084c <__aeabi_ddiv>
 8011028:	ec41 0b10 	vmov	d0, r0, r1
 801102c:	f7ff fd7e 	bl	8010b2c <fabs>
 8011030:	f000 f85a 	bl	80110e8 <atan>
 8011034:	ec51 0b10 	vmov	r0, r1, d0
 8011038:	2c01      	cmp	r4, #1
 801103a:	d013      	beq.n	8011064 <__ieee754_atan2+0x10c>
 801103c:	2c02      	cmp	r4, #2
 801103e:	d015      	beq.n	801106c <__ieee754_atan2+0x114>
 8011040:	2c00      	cmp	r4, #0
 8011042:	d0a8      	beq.n	8010f96 <__ieee754_atan2+0x3e>
 8011044:	a318      	add	r3, pc, #96	@ (adr r3, 80110a8 <__ieee754_atan2+0x150>)
 8011046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104a:	f7ef f91d 	bl	8000288 <__aeabi_dsub>
 801104e:	a318      	add	r3, pc, #96	@ (adr r3, 80110b0 <__ieee754_atan2+0x158>)
 8011050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011054:	e014      	b.n	8011080 <__ieee754_atan2+0x128>
 8011056:	a118      	add	r1, pc, #96	@ (adr r1, 80110b8 <__ieee754_atan2+0x160>)
 8011058:	e9d1 0100 	ldrd	r0, r1, [r1]
 801105c:	e7ec      	b.n	8011038 <__ieee754_atan2+0xe0>
 801105e:	2000      	movs	r0, #0
 8011060:	2100      	movs	r1, #0
 8011062:	e7e9      	b.n	8011038 <__ieee754_atan2+0xe0>
 8011064:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011068:	4619      	mov	r1, r3
 801106a:	e794      	b.n	8010f96 <__ieee754_atan2+0x3e>
 801106c:	a30e      	add	r3, pc, #56	@ (adr r3, 80110a8 <__ieee754_atan2+0x150>)
 801106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011072:	f7ef f909 	bl	8000288 <__aeabi_dsub>
 8011076:	4602      	mov	r2, r0
 8011078:	460b      	mov	r3, r1
 801107a:	a10d      	add	r1, pc, #52	@ (adr r1, 80110b0 <__ieee754_atan2+0x158>)
 801107c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011080:	f7ef f902 	bl	8000288 <__aeabi_dsub>
 8011084:	e787      	b.n	8010f96 <__ieee754_atan2+0x3e>
 8011086:	a10a      	add	r1, pc, #40	@ (adr r1, 80110b0 <__ieee754_atan2+0x158>)
 8011088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801108c:	e783      	b.n	8010f96 <__ieee754_atan2+0x3e>
 801108e:	a10c      	add	r1, pc, #48	@ (adr r1, 80110c0 <__ieee754_atan2+0x168>)
 8011090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011094:	e77f      	b.n	8010f96 <__ieee754_atan2+0x3e>
 8011096:	2000      	movs	r0, #0
 8011098:	2100      	movs	r1, #0
 801109a:	e77c      	b.n	8010f96 <__ieee754_atan2+0x3e>
 801109c:	a10a      	add	r1, pc, #40	@ (adr r1, 80110c8 <__ieee754_atan2+0x170>)
 801109e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110a2:	e778      	b.n	8010f96 <__ieee754_atan2+0x3e>
 80110a4:	f3af 8000 	nop.w
 80110a8:	33145c07 	.word	0x33145c07
 80110ac:	3ca1a626 	.word	0x3ca1a626
 80110b0:	54442d18 	.word	0x54442d18
 80110b4:	400921fb 	.word	0x400921fb
 80110b8:	54442d18 	.word	0x54442d18
 80110bc:	3ff921fb 	.word	0x3ff921fb
 80110c0:	54442d18 	.word	0x54442d18
 80110c4:	3fe921fb 	.word	0x3fe921fb
 80110c8:	54442d18 	.word	0x54442d18
 80110cc:	bff921fb 	.word	0xbff921fb
 80110d0:	08011c88 	.word	0x08011c88
 80110d4:	08011c70 	.word	0x08011c70
 80110d8:	54442d18 	.word	0x54442d18
 80110dc:	c00921fb 	.word	0xc00921fb
 80110e0:	7ff00000 	.word	0x7ff00000
 80110e4:	00000000 	.word	0x00000000

080110e8 <atan>:
 80110e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	ec55 4b10 	vmov	r4, r5, d0
 80110f0:	4bbf      	ldr	r3, [pc, #764]	@ (80113f0 <atan+0x308>)
 80110f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80110f6:	429e      	cmp	r6, r3
 80110f8:	46ab      	mov	fp, r5
 80110fa:	d918      	bls.n	801112e <atan+0x46>
 80110fc:	4bbd      	ldr	r3, [pc, #756]	@ (80113f4 <atan+0x30c>)
 80110fe:	429e      	cmp	r6, r3
 8011100:	d801      	bhi.n	8011106 <atan+0x1e>
 8011102:	d109      	bne.n	8011118 <atan+0x30>
 8011104:	b144      	cbz	r4, 8011118 <atan+0x30>
 8011106:	4622      	mov	r2, r4
 8011108:	462b      	mov	r3, r5
 801110a:	4620      	mov	r0, r4
 801110c:	4629      	mov	r1, r5
 801110e:	f7ef f8bd 	bl	800028c <__adddf3>
 8011112:	4604      	mov	r4, r0
 8011114:	460d      	mov	r5, r1
 8011116:	e006      	b.n	8011126 <atan+0x3e>
 8011118:	f1bb 0f00 	cmp.w	fp, #0
 801111c:	f340 812b 	ble.w	8011376 <atan+0x28e>
 8011120:	a597      	add	r5, pc, #604	@ (adr r5, 8011380 <atan+0x298>)
 8011122:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011126:	ec45 4b10 	vmov	d0, r4, r5
 801112a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112e:	4bb2      	ldr	r3, [pc, #712]	@ (80113f8 <atan+0x310>)
 8011130:	429e      	cmp	r6, r3
 8011132:	d813      	bhi.n	801115c <atan+0x74>
 8011134:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8011138:	429e      	cmp	r6, r3
 801113a:	d80c      	bhi.n	8011156 <atan+0x6e>
 801113c:	a392      	add	r3, pc, #584	@ (adr r3, 8011388 <atan+0x2a0>)
 801113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011142:	4620      	mov	r0, r4
 8011144:	4629      	mov	r1, r5
 8011146:	f7ef f8a1 	bl	800028c <__adddf3>
 801114a:	4bac      	ldr	r3, [pc, #688]	@ (80113fc <atan+0x314>)
 801114c:	2200      	movs	r2, #0
 801114e:	f7ef fce3 	bl	8000b18 <__aeabi_dcmpgt>
 8011152:	2800      	cmp	r0, #0
 8011154:	d1e7      	bne.n	8011126 <atan+0x3e>
 8011156:	f04f 3aff 	mov.w	sl, #4294967295
 801115a:	e029      	b.n	80111b0 <atan+0xc8>
 801115c:	f7ff fce6 	bl	8010b2c <fabs>
 8011160:	4ba7      	ldr	r3, [pc, #668]	@ (8011400 <atan+0x318>)
 8011162:	429e      	cmp	r6, r3
 8011164:	ec55 4b10 	vmov	r4, r5, d0
 8011168:	f200 80bc 	bhi.w	80112e4 <atan+0x1fc>
 801116c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8011170:	429e      	cmp	r6, r3
 8011172:	f200 809e 	bhi.w	80112b2 <atan+0x1ca>
 8011176:	4622      	mov	r2, r4
 8011178:	462b      	mov	r3, r5
 801117a:	4620      	mov	r0, r4
 801117c:	4629      	mov	r1, r5
 801117e:	f7ef f885 	bl	800028c <__adddf3>
 8011182:	4b9e      	ldr	r3, [pc, #632]	@ (80113fc <atan+0x314>)
 8011184:	2200      	movs	r2, #0
 8011186:	f7ef f87f 	bl	8000288 <__aeabi_dsub>
 801118a:	2200      	movs	r2, #0
 801118c:	4606      	mov	r6, r0
 801118e:	460f      	mov	r7, r1
 8011190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011194:	4620      	mov	r0, r4
 8011196:	4629      	mov	r1, r5
 8011198:	f7ef f878 	bl	800028c <__adddf3>
 801119c:	4602      	mov	r2, r0
 801119e:	460b      	mov	r3, r1
 80111a0:	4630      	mov	r0, r6
 80111a2:	4639      	mov	r1, r7
 80111a4:	f7ef fb52 	bl	800084c <__aeabi_ddiv>
 80111a8:	f04f 0a00 	mov.w	sl, #0
 80111ac:	4604      	mov	r4, r0
 80111ae:	460d      	mov	r5, r1
 80111b0:	4622      	mov	r2, r4
 80111b2:	462b      	mov	r3, r5
 80111b4:	4620      	mov	r0, r4
 80111b6:	4629      	mov	r1, r5
 80111b8:	f7ef fa1e 	bl	80005f8 <__aeabi_dmul>
 80111bc:	4602      	mov	r2, r0
 80111be:	460b      	mov	r3, r1
 80111c0:	4680      	mov	r8, r0
 80111c2:	4689      	mov	r9, r1
 80111c4:	f7ef fa18 	bl	80005f8 <__aeabi_dmul>
 80111c8:	a371      	add	r3, pc, #452	@ (adr r3, 8011390 <atan+0x2a8>)
 80111ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ce:	4606      	mov	r6, r0
 80111d0:	460f      	mov	r7, r1
 80111d2:	f7ef fa11 	bl	80005f8 <__aeabi_dmul>
 80111d6:	a370      	add	r3, pc, #448	@ (adr r3, 8011398 <atan+0x2b0>)
 80111d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111dc:	f7ef f856 	bl	800028c <__adddf3>
 80111e0:	4632      	mov	r2, r6
 80111e2:	463b      	mov	r3, r7
 80111e4:	f7ef fa08 	bl	80005f8 <__aeabi_dmul>
 80111e8:	a36d      	add	r3, pc, #436	@ (adr r3, 80113a0 <atan+0x2b8>)
 80111ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ee:	f7ef f84d 	bl	800028c <__adddf3>
 80111f2:	4632      	mov	r2, r6
 80111f4:	463b      	mov	r3, r7
 80111f6:	f7ef f9ff 	bl	80005f8 <__aeabi_dmul>
 80111fa:	a36b      	add	r3, pc, #428	@ (adr r3, 80113a8 <atan+0x2c0>)
 80111fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011200:	f7ef f844 	bl	800028c <__adddf3>
 8011204:	4632      	mov	r2, r6
 8011206:	463b      	mov	r3, r7
 8011208:	f7ef f9f6 	bl	80005f8 <__aeabi_dmul>
 801120c:	a368      	add	r3, pc, #416	@ (adr r3, 80113b0 <atan+0x2c8>)
 801120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011212:	f7ef f83b 	bl	800028c <__adddf3>
 8011216:	4632      	mov	r2, r6
 8011218:	463b      	mov	r3, r7
 801121a:	f7ef f9ed 	bl	80005f8 <__aeabi_dmul>
 801121e:	a366      	add	r3, pc, #408	@ (adr r3, 80113b8 <atan+0x2d0>)
 8011220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011224:	f7ef f832 	bl	800028c <__adddf3>
 8011228:	4642      	mov	r2, r8
 801122a:	464b      	mov	r3, r9
 801122c:	f7ef f9e4 	bl	80005f8 <__aeabi_dmul>
 8011230:	a363      	add	r3, pc, #396	@ (adr r3, 80113c0 <atan+0x2d8>)
 8011232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011236:	4680      	mov	r8, r0
 8011238:	4689      	mov	r9, r1
 801123a:	4630      	mov	r0, r6
 801123c:	4639      	mov	r1, r7
 801123e:	f7ef f9db 	bl	80005f8 <__aeabi_dmul>
 8011242:	a361      	add	r3, pc, #388	@ (adr r3, 80113c8 <atan+0x2e0>)
 8011244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011248:	f7ef f81e 	bl	8000288 <__aeabi_dsub>
 801124c:	4632      	mov	r2, r6
 801124e:	463b      	mov	r3, r7
 8011250:	f7ef f9d2 	bl	80005f8 <__aeabi_dmul>
 8011254:	a35e      	add	r3, pc, #376	@ (adr r3, 80113d0 <atan+0x2e8>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	f7ef f815 	bl	8000288 <__aeabi_dsub>
 801125e:	4632      	mov	r2, r6
 8011260:	463b      	mov	r3, r7
 8011262:	f7ef f9c9 	bl	80005f8 <__aeabi_dmul>
 8011266:	a35c      	add	r3, pc, #368	@ (adr r3, 80113d8 <atan+0x2f0>)
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	f7ef f80c 	bl	8000288 <__aeabi_dsub>
 8011270:	4632      	mov	r2, r6
 8011272:	463b      	mov	r3, r7
 8011274:	f7ef f9c0 	bl	80005f8 <__aeabi_dmul>
 8011278:	a359      	add	r3, pc, #356	@ (adr r3, 80113e0 <atan+0x2f8>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	f7ef f803 	bl	8000288 <__aeabi_dsub>
 8011282:	4632      	mov	r2, r6
 8011284:	463b      	mov	r3, r7
 8011286:	f7ef f9b7 	bl	80005f8 <__aeabi_dmul>
 801128a:	4602      	mov	r2, r0
 801128c:	460b      	mov	r3, r1
 801128e:	4640      	mov	r0, r8
 8011290:	4649      	mov	r1, r9
 8011292:	f7ee fffb 	bl	800028c <__adddf3>
 8011296:	4622      	mov	r2, r4
 8011298:	462b      	mov	r3, r5
 801129a:	f7ef f9ad 	bl	80005f8 <__aeabi_dmul>
 801129e:	f1ba 3fff 	cmp.w	sl, #4294967295
 80112a2:	4602      	mov	r2, r0
 80112a4:	460b      	mov	r3, r1
 80112a6:	d148      	bne.n	801133a <atan+0x252>
 80112a8:	4620      	mov	r0, r4
 80112aa:	4629      	mov	r1, r5
 80112ac:	f7ee ffec 	bl	8000288 <__aeabi_dsub>
 80112b0:	e72f      	b.n	8011112 <atan+0x2a>
 80112b2:	4b52      	ldr	r3, [pc, #328]	@ (80113fc <atan+0x314>)
 80112b4:	2200      	movs	r2, #0
 80112b6:	4620      	mov	r0, r4
 80112b8:	4629      	mov	r1, r5
 80112ba:	f7ee ffe5 	bl	8000288 <__aeabi_dsub>
 80112be:	4b4f      	ldr	r3, [pc, #316]	@ (80113fc <atan+0x314>)
 80112c0:	4606      	mov	r6, r0
 80112c2:	460f      	mov	r7, r1
 80112c4:	2200      	movs	r2, #0
 80112c6:	4620      	mov	r0, r4
 80112c8:	4629      	mov	r1, r5
 80112ca:	f7ee ffdf 	bl	800028c <__adddf3>
 80112ce:	4602      	mov	r2, r0
 80112d0:	460b      	mov	r3, r1
 80112d2:	4630      	mov	r0, r6
 80112d4:	4639      	mov	r1, r7
 80112d6:	f7ef fab9 	bl	800084c <__aeabi_ddiv>
 80112da:	f04f 0a01 	mov.w	sl, #1
 80112de:	4604      	mov	r4, r0
 80112e0:	460d      	mov	r5, r1
 80112e2:	e765      	b.n	80111b0 <atan+0xc8>
 80112e4:	4b47      	ldr	r3, [pc, #284]	@ (8011404 <atan+0x31c>)
 80112e6:	429e      	cmp	r6, r3
 80112e8:	d21c      	bcs.n	8011324 <atan+0x23c>
 80112ea:	4b47      	ldr	r3, [pc, #284]	@ (8011408 <atan+0x320>)
 80112ec:	2200      	movs	r2, #0
 80112ee:	4620      	mov	r0, r4
 80112f0:	4629      	mov	r1, r5
 80112f2:	f7ee ffc9 	bl	8000288 <__aeabi_dsub>
 80112f6:	4b44      	ldr	r3, [pc, #272]	@ (8011408 <atan+0x320>)
 80112f8:	4606      	mov	r6, r0
 80112fa:	460f      	mov	r7, r1
 80112fc:	2200      	movs	r2, #0
 80112fe:	4620      	mov	r0, r4
 8011300:	4629      	mov	r1, r5
 8011302:	f7ef f979 	bl	80005f8 <__aeabi_dmul>
 8011306:	4b3d      	ldr	r3, [pc, #244]	@ (80113fc <atan+0x314>)
 8011308:	2200      	movs	r2, #0
 801130a:	f7ee ffbf 	bl	800028c <__adddf3>
 801130e:	4602      	mov	r2, r0
 8011310:	460b      	mov	r3, r1
 8011312:	4630      	mov	r0, r6
 8011314:	4639      	mov	r1, r7
 8011316:	f7ef fa99 	bl	800084c <__aeabi_ddiv>
 801131a:	f04f 0a02 	mov.w	sl, #2
 801131e:	4604      	mov	r4, r0
 8011320:	460d      	mov	r5, r1
 8011322:	e745      	b.n	80111b0 <atan+0xc8>
 8011324:	4622      	mov	r2, r4
 8011326:	462b      	mov	r3, r5
 8011328:	4938      	ldr	r1, [pc, #224]	@ (801140c <atan+0x324>)
 801132a:	2000      	movs	r0, #0
 801132c:	f7ef fa8e 	bl	800084c <__aeabi_ddiv>
 8011330:	f04f 0a03 	mov.w	sl, #3
 8011334:	4604      	mov	r4, r0
 8011336:	460d      	mov	r5, r1
 8011338:	e73a      	b.n	80111b0 <atan+0xc8>
 801133a:	4b35      	ldr	r3, [pc, #212]	@ (8011410 <atan+0x328>)
 801133c:	4e35      	ldr	r6, [pc, #212]	@ (8011414 <atan+0x32c>)
 801133e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011346:	f7ee ff9f 	bl	8000288 <__aeabi_dsub>
 801134a:	4622      	mov	r2, r4
 801134c:	462b      	mov	r3, r5
 801134e:	f7ee ff9b 	bl	8000288 <__aeabi_dsub>
 8011352:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011356:	4602      	mov	r2, r0
 8011358:	460b      	mov	r3, r1
 801135a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801135e:	f7ee ff93 	bl	8000288 <__aeabi_dsub>
 8011362:	f1bb 0f00 	cmp.w	fp, #0
 8011366:	4604      	mov	r4, r0
 8011368:	460d      	mov	r5, r1
 801136a:	f6bf aedc 	bge.w	8011126 <atan+0x3e>
 801136e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011372:	461d      	mov	r5, r3
 8011374:	e6d7      	b.n	8011126 <atan+0x3e>
 8011376:	a51c      	add	r5, pc, #112	@ (adr r5, 80113e8 <atan+0x300>)
 8011378:	e9d5 4500 	ldrd	r4, r5, [r5]
 801137c:	e6d3      	b.n	8011126 <atan+0x3e>
 801137e:	bf00      	nop
 8011380:	54442d18 	.word	0x54442d18
 8011384:	3ff921fb 	.word	0x3ff921fb
 8011388:	8800759c 	.word	0x8800759c
 801138c:	7e37e43c 	.word	0x7e37e43c
 8011390:	e322da11 	.word	0xe322da11
 8011394:	3f90ad3a 	.word	0x3f90ad3a
 8011398:	24760deb 	.word	0x24760deb
 801139c:	3fa97b4b 	.word	0x3fa97b4b
 80113a0:	a0d03d51 	.word	0xa0d03d51
 80113a4:	3fb10d66 	.word	0x3fb10d66
 80113a8:	c54c206e 	.word	0xc54c206e
 80113ac:	3fb745cd 	.word	0x3fb745cd
 80113b0:	920083ff 	.word	0x920083ff
 80113b4:	3fc24924 	.word	0x3fc24924
 80113b8:	5555550d 	.word	0x5555550d
 80113bc:	3fd55555 	.word	0x3fd55555
 80113c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80113c4:	bfa2b444 	.word	0xbfa2b444
 80113c8:	52defd9a 	.word	0x52defd9a
 80113cc:	3fadde2d 	.word	0x3fadde2d
 80113d0:	af749a6d 	.word	0xaf749a6d
 80113d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80113d8:	fe231671 	.word	0xfe231671
 80113dc:	3fbc71c6 	.word	0x3fbc71c6
 80113e0:	9998ebc4 	.word	0x9998ebc4
 80113e4:	3fc99999 	.word	0x3fc99999
 80113e8:	54442d18 	.word	0x54442d18
 80113ec:	bff921fb 	.word	0xbff921fb
 80113f0:	440fffff 	.word	0x440fffff
 80113f4:	7ff00000 	.word	0x7ff00000
 80113f8:	3fdbffff 	.word	0x3fdbffff
 80113fc:	3ff00000 	.word	0x3ff00000
 8011400:	3ff2ffff 	.word	0x3ff2ffff
 8011404:	40038000 	.word	0x40038000
 8011408:	3ff80000 	.word	0x3ff80000
 801140c:	bff00000 	.word	0xbff00000
 8011410:	08011ca0 	.word	0x08011ca0
 8011414:	08011cc0 	.word	0x08011cc0

08011418 <__ieee754_sqrt>:
 8011418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141c:	4a66      	ldr	r2, [pc, #408]	@ (80115b8 <__ieee754_sqrt+0x1a0>)
 801141e:	ec55 4b10 	vmov	r4, r5, d0
 8011422:	43aa      	bics	r2, r5
 8011424:	462b      	mov	r3, r5
 8011426:	4621      	mov	r1, r4
 8011428:	d110      	bne.n	801144c <__ieee754_sqrt+0x34>
 801142a:	4622      	mov	r2, r4
 801142c:	4620      	mov	r0, r4
 801142e:	4629      	mov	r1, r5
 8011430:	f7ef f8e2 	bl	80005f8 <__aeabi_dmul>
 8011434:	4602      	mov	r2, r0
 8011436:	460b      	mov	r3, r1
 8011438:	4620      	mov	r0, r4
 801143a:	4629      	mov	r1, r5
 801143c:	f7ee ff26 	bl	800028c <__adddf3>
 8011440:	4604      	mov	r4, r0
 8011442:	460d      	mov	r5, r1
 8011444:	ec45 4b10 	vmov	d0, r4, r5
 8011448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801144c:	2d00      	cmp	r5, #0
 801144e:	dc0e      	bgt.n	801146e <__ieee754_sqrt+0x56>
 8011450:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011454:	4322      	orrs	r2, r4
 8011456:	d0f5      	beq.n	8011444 <__ieee754_sqrt+0x2c>
 8011458:	b19d      	cbz	r5, 8011482 <__ieee754_sqrt+0x6a>
 801145a:	4622      	mov	r2, r4
 801145c:	4620      	mov	r0, r4
 801145e:	4629      	mov	r1, r5
 8011460:	f7ee ff12 	bl	8000288 <__aeabi_dsub>
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	f7ef f9f0 	bl	800084c <__aeabi_ddiv>
 801146c:	e7e8      	b.n	8011440 <__ieee754_sqrt+0x28>
 801146e:	152a      	asrs	r2, r5, #20
 8011470:	d115      	bne.n	801149e <__ieee754_sqrt+0x86>
 8011472:	2000      	movs	r0, #0
 8011474:	e009      	b.n	801148a <__ieee754_sqrt+0x72>
 8011476:	0acb      	lsrs	r3, r1, #11
 8011478:	3a15      	subs	r2, #21
 801147a:	0549      	lsls	r1, r1, #21
 801147c:	2b00      	cmp	r3, #0
 801147e:	d0fa      	beq.n	8011476 <__ieee754_sqrt+0x5e>
 8011480:	e7f7      	b.n	8011472 <__ieee754_sqrt+0x5a>
 8011482:	462a      	mov	r2, r5
 8011484:	e7fa      	b.n	801147c <__ieee754_sqrt+0x64>
 8011486:	005b      	lsls	r3, r3, #1
 8011488:	3001      	adds	r0, #1
 801148a:	02dc      	lsls	r4, r3, #11
 801148c:	d5fb      	bpl.n	8011486 <__ieee754_sqrt+0x6e>
 801148e:	1e44      	subs	r4, r0, #1
 8011490:	1b12      	subs	r2, r2, r4
 8011492:	f1c0 0420 	rsb	r4, r0, #32
 8011496:	fa21 f404 	lsr.w	r4, r1, r4
 801149a:	4323      	orrs	r3, r4
 801149c:	4081      	lsls	r1, r0
 801149e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114a2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80114a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80114aa:	07d2      	lsls	r2, r2, #31
 80114ac:	bf5c      	itt	pl
 80114ae:	005b      	lslpl	r3, r3, #1
 80114b0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80114b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80114b8:	bf58      	it	pl
 80114ba:	0049      	lslpl	r1, r1, #1
 80114bc:	2600      	movs	r6, #0
 80114be:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80114c2:	107f      	asrs	r7, r7, #1
 80114c4:	0049      	lsls	r1, r1, #1
 80114c6:	2016      	movs	r0, #22
 80114c8:	4632      	mov	r2, r6
 80114ca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80114ce:	1915      	adds	r5, r2, r4
 80114d0:	429d      	cmp	r5, r3
 80114d2:	bfde      	ittt	le
 80114d4:	192a      	addle	r2, r5, r4
 80114d6:	1b5b      	suble	r3, r3, r5
 80114d8:	1936      	addle	r6, r6, r4
 80114da:	0fcd      	lsrs	r5, r1, #31
 80114dc:	3801      	subs	r0, #1
 80114de:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80114e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80114e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80114ea:	d1f0      	bne.n	80114ce <__ieee754_sqrt+0xb6>
 80114ec:	4605      	mov	r5, r0
 80114ee:	2420      	movs	r4, #32
 80114f0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80114f4:	4293      	cmp	r3, r2
 80114f6:	eb0c 0e00 	add.w	lr, ip, r0
 80114fa:	dc02      	bgt.n	8011502 <__ieee754_sqrt+0xea>
 80114fc:	d113      	bne.n	8011526 <__ieee754_sqrt+0x10e>
 80114fe:	458e      	cmp	lr, r1
 8011500:	d811      	bhi.n	8011526 <__ieee754_sqrt+0x10e>
 8011502:	f1be 0f00 	cmp.w	lr, #0
 8011506:	eb0e 000c 	add.w	r0, lr, ip
 801150a:	da3f      	bge.n	801158c <__ieee754_sqrt+0x174>
 801150c:	2800      	cmp	r0, #0
 801150e:	db3d      	blt.n	801158c <__ieee754_sqrt+0x174>
 8011510:	f102 0801 	add.w	r8, r2, #1
 8011514:	1a9b      	subs	r3, r3, r2
 8011516:	458e      	cmp	lr, r1
 8011518:	bf88      	it	hi
 801151a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801151e:	eba1 010e 	sub.w	r1, r1, lr
 8011522:	4465      	add	r5, ip
 8011524:	4642      	mov	r2, r8
 8011526:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801152a:	3c01      	subs	r4, #1
 801152c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011530:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011534:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011538:	d1dc      	bne.n	80114f4 <__ieee754_sqrt+0xdc>
 801153a:	4319      	orrs	r1, r3
 801153c:	d01b      	beq.n	8011576 <__ieee754_sqrt+0x15e>
 801153e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80115bc <__ieee754_sqrt+0x1a4>
 8011542:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80115c0 <__ieee754_sqrt+0x1a8>
 8011546:	e9da 0100 	ldrd	r0, r1, [sl]
 801154a:	e9db 2300 	ldrd	r2, r3, [fp]
 801154e:	f7ee fe9b 	bl	8000288 <__aeabi_dsub>
 8011552:	e9da 8900 	ldrd	r8, r9, [sl]
 8011556:	4602      	mov	r2, r0
 8011558:	460b      	mov	r3, r1
 801155a:	4640      	mov	r0, r8
 801155c:	4649      	mov	r1, r9
 801155e:	f7ef fac7 	bl	8000af0 <__aeabi_dcmple>
 8011562:	b140      	cbz	r0, 8011576 <__ieee754_sqrt+0x15e>
 8011564:	f1b5 3fff 	cmp.w	r5, #4294967295
 8011568:	e9da 0100 	ldrd	r0, r1, [sl]
 801156c:	e9db 2300 	ldrd	r2, r3, [fp]
 8011570:	d10e      	bne.n	8011590 <__ieee754_sqrt+0x178>
 8011572:	3601      	adds	r6, #1
 8011574:	4625      	mov	r5, r4
 8011576:	1073      	asrs	r3, r6, #1
 8011578:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801157c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8011580:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8011584:	086b      	lsrs	r3, r5, #1
 8011586:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801158a:	e759      	b.n	8011440 <__ieee754_sqrt+0x28>
 801158c:	4690      	mov	r8, r2
 801158e:	e7c1      	b.n	8011514 <__ieee754_sqrt+0xfc>
 8011590:	f7ee fe7c 	bl	800028c <__adddf3>
 8011594:	e9da 8900 	ldrd	r8, r9, [sl]
 8011598:	4602      	mov	r2, r0
 801159a:	460b      	mov	r3, r1
 801159c:	4640      	mov	r0, r8
 801159e:	4649      	mov	r1, r9
 80115a0:	f7ef fa9c 	bl	8000adc <__aeabi_dcmplt>
 80115a4:	b120      	cbz	r0, 80115b0 <__ieee754_sqrt+0x198>
 80115a6:	1cab      	adds	r3, r5, #2
 80115a8:	bf08      	it	eq
 80115aa:	3601      	addeq	r6, #1
 80115ac:	3502      	adds	r5, #2
 80115ae:	e7e2      	b.n	8011576 <__ieee754_sqrt+0x15e>
 80115b0:	1c6b      	adds	r3, r5, #1
 80115b2:	f023 0501 	bic.w	r5, r3, #1
 80115b6:	e7de      	b.n	8011576 <__ieee754_sqrt+0x15e>
 80115b8:	7ff00000 	.word	0x7ff00000
 80115bc:	08011ce8 	.word	0x08011ce8
 80115c0:	08011ce0 	.word	0x08011ce0

080115c4 <_init>:
 80115c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115c6:	bf00      	nop
 80115c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ca:	bc08      	pop	{r3}
 80115cc:	469e      	mov	lr, r3
 80115ce:	4770      	bx	lr

080115d0 <_fini>:
 80115d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d2:	bf00      	nop
 80115d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115d6:	bc08      	pop	{r3}
 80115d8:	469e      	mov	lr, r3
 80115da:	4770      	bx	lr
